// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fapi_2fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fapi_2fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/api/resources.pb.h"
#include "proto/clarifai/api/status/status.pb.h"
#include "proto/clarifai/api/utils/extensions.pb.h"
#include "proto/clarifai/auth/scope/scope.pb.h"
#include "proto/clarifai/auth/util/extension.pb.h"
#include "proto/clarifai/api/status/status_code.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[233]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto;
namespace clarifai {
namespace api {
class DeleteAnnotationFiltersRequest;
struct DeleteAnnotationFiltersRequestDefaultTypeInternal;
extern DeleteAnnotationFiltersRequestDefaultTypeInternal _DeleteAnnotationFiltersRequest_default_instance_;
class DeleteAnnotationRequest;
struct DeleteAnnotationRequestDefaultTypeInternal;
extern DeleteAnnotationRequestDefaultTypeInternal _DeleteAnnotationRequest_default_instance_;
class DeleteAnnotationSearchMetricsRequest;
struct DeleteAnnotationSearchMetricsRequestDefaultTypeInternal;
extern DeleteAnnotationSearchMetricsRequestDefaultTypeInternal _DeleteAnnotationSearchMetricsRequest_default_instance_;
class DeleteAnnotationsRequest;
struct DeleteAnnotationsRequestDefaultTypeInternal;
extern DeleteAnnotationsRequestDefaultTypeInternal _DeleteAnnotationsRequest_default_instance_;
class DeleteAppRequest;
struct DeleteAppRequestDefaultTypeInternal;
extern DeleteAppRequestDefaultTypeInternal _DeleteAppRequest_default_instance_;
class DeleteCollaboratorsRequest;
struct DeleteCollaboratorsRequestDefaultTypeInternal;
extern DeleteCollaboratorsRequestDefaultTypeInternal _DeleteCollaboratorsRequest_default_instance_;
class DeleteCollectorsRequest;
struct DeleteCollectorsRequestDefaultTypeInternal;
extern DeleteCollectorsRequestDefaultTypeInternal _DeleteCollectorsRequest_default_instance_;
class DeleteConceptRelationsRequest;
struct DeleteConceptRelationsRequestDefaultTypeInternal;
extern DeleteConceptRelationsRequestDefaultTypeInternal _DeleteConceptRelationsRequest_default_instance_;
class DeleteDatasetInputsRequest;
struct DeleteDatasetInputsRequestDefaultTypeInternal;
extern DeleteDatasetInputsRequestDefaultTypeInternal _DeleteDatasetInputsRequest_default_instance_;
class DeleteDatasetVersionsRequest;
struct DeleteDatasetVersionsRequestDefaultTypeInternal;
extern DeleteDatasetVersionsRequestDefaultTypeInternal _DeleteDatasetVersionsRequest_default_instance_;
class DeleteDatasetsRequest;
struct DeleteDatasetsRequestDefaultTypeInternal;
extern DeleteDatasetsRequestDefaultTypeInternal _DeleteDatasetsRequest_default_instance_;
class DeleteInputRequest;
struct DeleteInputRequestDefaultTypeInternal;
extern DeleteInputRequestDefaultTypeInternal _DeleteInputRequest_default_instance_;
class DeleteInputsRequest;
struct DeleteInputsRequestDefaultTypeInternal;
extern DeleteInputsRequestDefaultTypeInternal _DeleteInputsRequest_default_instance_;
class DeleteKeyRequest;
struct DeleteKeyRequestDefaultTypeInternal;
extern DeleteKeyRequestDefaultTypeInternal _DeleteKeyRequest_default_instance_;
class DeleteLabelOrdersRequest;
struct DeleteLabelOrdersRequestDefaultTypeInternal;
extern DeleteLabelOrdersRequestDefaultTypeInternal _DeleteLabelOrdersRequest_default_instance_;
class DeleteModelRequest;
struct DeleteModelRequestDefaultTypeInternal;
extern DeleteModelRequestDefaultTypeInternal _DeleteModelRequest_default_instance_;
class DeleteModelVersionRequest;
struct DeleteModelVersionRequestDefaultTypeInternal;
extern DeleteModelVersionRequestDefaultTypeInternal _DeleteModelVersionRequest_default_instance_;
class DeleteModelsRequest;
struct DeleteModelsRequestDefaultTypeInternal;
extern DeleteModelsRequestDefaultTypeInternal _DeleteModelsRequest_default_instance_;
class DeleteSearchRequest;
struct DeleteSearchRequestDefaultTypeInternal;
extern DeleteSearchRequestDefaultTypeInternal _DeleteSearchRequest_default_instance_;
class DeleteTasksRequest;
struct DeleteTasksRequestDefaultTypeInternal;
extern DeleteTasksRequestDefaultTypeInternal _DeleteTasksRequest_default_instance_;
class DeleteWorkflowRequest;
struct DeleteWorkflowRequestDefaultTypeInternal;
extern DeleteWorkflowRequestDefaultTypeInternal _DeleteWorkflowRequest_default_instance_;
class DeleteWorkflowVersionsRequest;
struct DeleteWorkflowVersionsRequestDefaultTypeInternal;
extern DeleteWorkflowVersionsRequestDefaultTypeInternal _DeleteWorkflowVersionsRequest_default_instance_;
class DeleteWorkflowsRequest;
struct DeleteWorkflowsRequestDefaultTypeInternal;
extern DeleteWorkflowsRequestDefaultTypeInternal _DeleteWorkflowsRequest_default_instance_;
class GetAnnotationFilterRequest;
struct GetAnnotationFilterRequestDefaultTypeInternal;
extern GetAnnotationFilterRequestDefaultTypeInternal _GetAnnotationFilterRequest_default_instance_;
class GetAnnotationRequest;
struct GetAnnotationRequestDefaultTypeInternal;
extern GetAnnotationRequestDefaultTypeInternal _GetAnnotationRequest_default_instance_;
class GetAnnotationSearchMetricsRequest;
struct GetAnnotationSearchMetricsRequestDefaultTypeInternal;
extern GetAnnotationSearchMetricsRequestDefaultTypeInternal _GetAnnotationSearchMetricsRequest_default_instance_;
class GetAppDuplicationRequest;
struct GetAppDuplicationRequestDefaultTypeInternal;
extern GetAppDuplicationRequestDefaultTypeInternal _GetAppDuplicationRequest_default_instance_;
class GetAppRequest;
struct GetAppRequestDefaultTypeInternal;
extern GetAppRequestDefaultTypeInternal _GetAppRequest_default_instance_;
class GetCollectorRequest;
struct GetCollectorRequestDefaultTypeInternal;
extern GetCollectorRequestDefaultTypeInternal _GetCollectorRequest_default_instance_;
class GetConceptCountsRequest;
struct GetConceptCountsRequestDefaultTypeInternal;
extern GetConceptCountsRequestDefaultTypeInternal _GetConceptCountsRequest_default_instance_;
class GetConceptLanguageRequest;
struct GetConceptLanguageRequestDefaultTypeInternal;
extern GetConceptLanguageRequestDefaultTypeInternal _GetConceptLanguageRequest_default_instance_;
class GetConceptRequest;
struct GetConceptRequestDefaultTypeInternal;
extern GetConceptRequestDefaultTypeInternal _GetConceptRequest_default_instance_;
class GetDatasetInputRequest;
struct GetDatasetInputRequestDefaultTypeInternal;
extern GetDatasetInputRequestDefaultTypeInternal _GetDatasetInputRequest_default_instance_;
class GetDatasetRequest;
struct GetDatasetRequestDefaultTypeInternal;
extern GetDatasetRequestDefaultTypeInternal _GetDatasetRequest_default_instance_;
class GetDatasetVersionRequest;
struct GetDatasetVersionRequestDefaultTypeInternal;
extern GetDatasetVersionRequestDefaultTypeInternal _GetDatasetVersionRequest_default_instance_;
class GetInputCountRequest;
struct GetInputCountRequestDefaultTypeInternal;
extern GetInputCountRequestDefaultTypeInternal _GetInputCountRequest_default_instance_;
class GetInputRequest;
struct GetInputRequestDefaultTypeInternal;
extern GetInputRequestDefaultTypeInternal _GetInputRequest_default_instance_;
class GetInputSamplesRequest;
struct GetInputSamplesRequestDefaultTypeInternal;
extern GetInputSamplesRequestDefaultTypeInternal _GetInputSamplesRequest_default_instance_;
class GetKeyRequest;
struct GetKeyRequestDefaultTypeInternal;
extern GetKeyRequestDefaultTypeInternal _GetKeyRequest_default_instance_;
class GetLabelOrderRequest;
struct GetLabelOrderRequestDefaultTypeInternal;
extern GetLabelOrderRequestDefaultTypeInternal _GetLabelOrderRequest_default_instance_;
class GetModelRequest;
struct GetModelRequestDefaultTypeInternal;
extern GetModelRequestDefaultTypeInternal _GetModelRequest_default_instance_;
class GetModelTypeRequest;
struct GetModelTypeRequestDefaultTypeInternal;
extern GetModelTypeRequestDefaultTypeInternal _GetModelTypeRequest_default_instance_;
class GetModelVersionInputExampleRequest;
struct GetModelVersionInputExampleRequestDefaultTypeInternal;
extern GetModelVersionInputExampleRequestDefaultTypeInternal _GetModelVersionInputExampleRequest_default_instance_;
class GetModelVersionMetricsRequest;
struct GetModelVersionMetricsRequestDefaultTypeInternal;
extern GetModelVersionMetricsRequestDefaultTypeInternal _GetModelVersionMetricsRequest_default_instance_;
class GetModelVersionRequest;
struct GetModelVersionRequestDefaultTypeInternal;
extern GetModelVersionRequestDefaultTypeInternal _GetModelVersionRequest_default_instance_;
class GetSearchRequest;
struct GetSearchRequestDefaultTypeInternal;
extern GetSearchRequestDefaultTypeInternal _GetSearchRequest_default_instance_;
class GetStatusCodeRequest;
struct GetStatusCodeRequestDefaultTypeInternal;
extern GetStatusCodeRequestDefaultTypeInternal _GetStatusCodeRequest_default_instance_;
class GetTaskCountRequest;
struct GetTaskCountRequestDefaultTypeInternal;
extern GetTaskCountRequestDefaultTypeInternal _GetTaskCountRequest_default_instance_;
class GetTaskRequest;
struct GetTaskRequestDefaultTypeInternal;
extern GetTaskRequestDefaultTypeInternal _GetTaskRequest_default_instance_;
class GetWorkflowRequest;
struct GetWorkflowRequestDefaultTypeInternal;
extern GetWorkflowRequestDefaultTypeInternal _GetWorkflowRequest_default_instance_;
class GetWorkflowVersionRequest;
struct GetWorkflowVersionRequestDefaultTypeInternal;
extern GetWorkflowVersionRequestDefaultTypeInternal _GetWorkflowVersionRequest_default_instance_;
class IdUpdateSource;
struct IdUpdateSourceDefaultTypeInternal;
extern IdUpdateSourceDefaultTypeInternal _IdUpdateSource_default_instance_;
class ListAnnotationFiltersRequest;
struct ListAnnotationFiltersRequestDefaultTypeInternal;
extern ListAnnotationFiltersRequestDefaultTypeInternal _ListAnnotationFiltersRequest_default_instance_;
class ListAnnotationSearchMetricsRequest;
struct ListAnnotationSearchMetricsRequestDefaultTypeInternal;
extern ListAnnotationSearchMetricsRequestDefaultTypeInternal _ListAnnotationSearchMetricsRequest_default_instance_;
class ListAnnotationsRequest;
struct ListAnnotationsRequestDefaultTypeInternal;
extern ListAnnotationsRequestDefaultTypeInternal _ListAnnotationsRequest_default_instance_;
class ListAppDuplicationsRequest;
struct ListAppDuplicationsRequestDefaultTypeInternal;
extern ListAppDuplicationsRequestDefaultTypeInternal _ListAppDuplicationsRequest_default_instance_;
class ListAppKeysRequest;
struct ListAppKeysRequestDefaultTypeInternal;
extern ListAppKeysRequestDefaultTypeInternal _ListAppKeysRequest_default_instance_;
class ListAppsRequest;
struct ListAppsRequestDefaultTypeInternal;
extern ListAppsRequestDefaultTypeInternal _ListAppsRequest_default_instance_;
class ListCollaborationsRequest;
struct ListCollaborationsRequestDefaultTypeInternal;
extern ListCollaborationsRequestDefaultTypeInternal _ListCollaborationsRequest_default_instance_;
class ListCollaboratorsRequest;
struct ListCollaboratorsRequestDefaultTypeInternal;
extern ListCollaboratorsRequestDefaultTypeInternal _ListCollaboratorsRequest_default_instance_;
class ListCollectorsRequest;
struct ListCollectorsRequestDefaultTypeInternal;
extern ListCollectorsRequestDefaultTypeInternal _ListCollectorsRequest_default_instance_;
class ListConceptLanguagesRequest;
struct ListConceptLanguagesRequestDefaultTypeInternal;
extern ListConceptLanguagesRequestDefaultTypeInternal _ListConceptLanguagesRequest_default_instance_;
class ListConceptRelationsRequest;
struct ListConceptRelationsRequestDefaultTypeInternal;
extern ListConceptRelationsRequestDefaultTypeInternal _ListConceptRelationsRequest_default_instance_;
class ListConceptsRequest;
struct ListConceptsRequestDefaultTypeInternal;
extern ListConceptsRequestDefaultTypeInternal _ListConceptsRequest_default_instance_;
class ListDatasetInputsRequest;
struct ListDatasetInputsRequestDefaultTypeInternal;
extern ListDatasetInputsRequestDefaultTypeInternal _ListDatasetInputsRequest_default_instance_;
class ListDatasetVersionMetricsGroupsRequest;
struct ListDatasetVersionMetricsGroupsRequestDefaultTypeInternal;
extern ListDatasetVersionMetricsGroupsRequestDefaultTypeInternal _ListDatasetVersionMetricsGroupsRequest_default_instance_;
class ListDatasetVersionsRequest;
struct ListDatasetVersionsRequestDefaultTypeInternal;
extern ListDatasetVersionsRequestDefaultTypeInternal _ListDatasetVersionsRequest_default_instance_;
class ListDatasetsRequest;
struct ListDatasetsRequestDefaultTypeInternal;
extern ListDatasetsRequestDefaultTypeInternal _ListDatasetsRequest_default_instance_;
class ListInputsRequest;
struct ListInputsRequestDefaultTypeInternal;
extern ListInputsRequestDefaultTypeInternal _ListInputsRequest_default_instance_;
class ListKeysRequest;
struct ListKeysRequestDefaultTypeInternal;
extern ListKeysRequestDefaultTypeInternal _ListKeysRequest_default_instance_;
class ListKnowledgeGraphsRequest;
struct ListKnowledgeGraphsRequestDefaultTypeInternal;
extern ListKnowledgeGraphsRequestDefaultTypeInternal _ListKnowledgeGraphsRequest_default_instance_;
class ListLabelOrdersRequest;
struct ListLabelOrdersRequestDefaultTypeInternal;
extern ListLabelOrdersRequestDefaultTypeInternal _ListLabelOrdersRequest_default_instance_;
class ListModelInputsRequest;
struct ListModelInputsRequestDefaultTypeInternal;
extern ListModelInputsRequestDefaultTypeInternal _ListModelInputsRequest_default_instance_;
class ListModelReferencesRequest;
struct ListModelReferencesRequestDefaultTypeInternal;
extern ListModelReferencesRequestDefaultTypeInternal _ListModelReferencesRequest_default_instance_;
class ListModelTypesRequest;
struct ListModelTypesRequestDefaultTypeInternal;
extern ListModelTypesRequestDefaultTypeInternal _ListModelTypesRequest_default_instance_;
class ListModelVersionInputExamplesRequest;
struct ListModelVersionInputExamplesRequestDefaultTypeInternal;
extern ListModelVersionInputExamplesRequestDefaultTypeInternal _ListModelVersionInputExamplesRequest_default_instance_;
class ListModelVersionsRequest;
struct ListModelVersionsRequestDefaultTypeInternal;
extern ListModelVersionsRequestDefaultTypeInternal _ListModelVersionsRequest_default_instance_;
class ListModelsRequest;
struct ListModelsRequestDefaultTypeInternal;
extern ListModelsRequestDefaultTypeInternal _ListModelsRequest_default_instance_;
class ListOpenSourceLicensesRequest;
struct ListOpenSourceLicensesRequestDefaultTypeInternal;
extern ListOpenSourceLicensesRequestDefaultTypeInternal _ListOpenSourceLicensesRequest_default_instance_;
class ListOpenSourceLicensesResponse;
struct ListOpenSourceLicensesResponseDefaultTypeInternal;
extern ListOpenSourceLicensesResponseDefaultTypeInternal _ListOpenSourceLicensesResponse_default_instance_;
class ListScopesRequest;
struct ListScopesRequestDefaultTypeInternal;
extern ListScopesRequestDefaultTypeInternal _ListScopesRequest_default_instance_;
class ListSearchesRequest;
struct ListSearchesRequestDefaultTypeInternal;
extern ListSearchesRequestDefaultTypeInternal _ListSearchesRequest_default_instance_;
class ListStatusCodesRequest;
struct ListStatusCodesRequestDefaultTypeInternal;
extern ListStatusCodesRequestDefaultTypeInternal _ListStatusCodesRequest_default_instance_;
class ListTasksRequest;
struct ListTasksRequestDefaultTypeInternal;
extern ListTasksRequestDefaultTypeInternal _ListTasksRequest_default_instance_;
class ListTrendingMetricsViewsRequest;
struct ListTrendingMetricsViewsRequestDefaultTypeInternal;
extern ListTrendingMetricsViewsRequestDefaultTypeInternal _ListTrendingMetricsViewsRequest_default_instance_;
class ListWorkflowVersionsRequest;
struct ListWorkflowVersionsRequestDefaultTypeInternal;
extern ListWorkflowVersionsRequestDefaultTypeInternal _ListWorkflowVersionsRequest_default_instance_;
class ListWorkflowsRequest;
struct ListWorkflowsRequestDefaultTypeInternal;
extern ListWorkflowsRequestDefaultTypeInternal _ListWorkflowsRequest_default_instance_;
class ModelVersionPublishRequest;
struct ModelVersionPublishRequestDefaultTypeInternal;
extern ModelVersionPublishRequestDefaultTypeInternal _ModelVersionPublishRequest_default_instance_;
class ModelVersionUnpublishRequest;
struct ModelVersionUnpublishRequestDefaultTypeInternal;
extern ModelVersionUnpublishRequestDefaultTypeInternal _ModelVersionUnpublishRequest_default_instance_;
class MultiAnnotationFilterResponse;
struct MultiAnnotationFilterResponseDefaultTypeInternal;
extern MultiAnnotationFilterResponseDefaultTypeInternal _MultiAnnotationFilterResponse_default_instance_;
class MultiAnnotationResponse;
struct MultiAnnotationResponseDefaultTypeInternal;
extern MultiAnnotationResponseDefaultTypeInternal _MultiAnnotationResponse_default_instance_;
class MultiAnnotationSearchMetricsResponse;
struct MultiAnnotationSearchMetricsResponseDefaultTypeInternal;
extern MultiAnnotationSearchMetricsResponseDefaultTypeInternal _MultiAnnotationSearchMetricsResponse_default_instance_;
class MultiAppDuplicationsResponse;
struct MultiAppDuplicationsResponseDefaultTypeInternal;
extern MultiAppDuplicationsResponseDefaultTypeInternal _MultiAppDuplicationsResponse_default_instance_;
class MultiAppResponse;
struct MultiAppResponseDefaultTypeInternal;
extern MultiAppResponseDefaultTypeInternal _MultiAppResponse_default_instance_;
class MultiCollaborationsResponse;
struct MultiCollaborationsResponseDefaultTypeInternal;
extern MultiCollaborationsResponseDefaultTypeInternal _MultiCollaborationsResponse_default_instance_;
class MultiCollaboratorsResponse;
struct MultiCollaboratorsResponseDefaultTypeInternal;
extern MultiCollaboratorsResponseDefaultTypeInternal _MultiCollaboratorsResponse_default_instance_;
class MultiCollectorResponse;
struct MultiCollectorResponseDefaultTypeInternal;
extern MultiCollectorResponseDefaultTypeInternal _MultiCollectorResponse_default_instance_;
class MultiConceptCountResponse;
struct MultiConceptCountResponseDefaultTypeInternal;
extern MultiConceptCountResponseDefaultTypeInternal _MultiConceptCountResponse_default_instance_;
class MultiConceptLanguageResponse;
struct MultiConceptLanguageResponseDefaultTypeInternal;
extern MultiConceptLanguageResponseDefaultTypeInternal _MultiConceptLanguageResponse_default_instance_;
class MultiConceptMappingJobResponse;
struct MultiConceptMappingJobResponseDefaultTypeInternal;
extern MultiConceptMappingJobResponseDefaultTypeInternal _MultiConceptMappingJobResponse_default_instance_;
class MultiConceptRelationResponse;
struct MultiConceptRelationResponseDefaultTypeInternal;
extern MultiConceptRelationResponseDefaultTypeInternal _MultiConceptRelationResponse_default_instance_;
class MultiConceptResponse;
struct MultiConceptResponseDefaultTypeInternal;
extern MultiConceptResponseDefaultTypeInternal _MultiConceptResponse_default_instance_;
class MultiDatasetInputResponse;
struct MultiDatasetInputResponseDefaultTypeInternal;
extern MultiDatasetInputResponseDefaultTypeInternal _MultiDatasetInputResponse_default_instance_;
class MultiDatasetResponse;
struct MultiDatasetResponseDefaultTypeInternal;
extern MultiDatasetResponseDefaultTypeInternal _MultiDatasetResponse_default_instance_;
class MultiDatasetVersionMetricsGroupResponse;
struct MultiDatasetVersionMetricsGroupResponseDefaultTypeInternal;
extern MultiDatasetVersionMetricsGroupResponseDefaultTypeInternal _MultiDatasetVersionMetricsGroupResponse_default_instance_;
class MultiDatasetVersionResponse;
struct MultiDatasetVersionResponseDefaultTypeInternal;
extern MultiDatasetVersionResponseDefaultTypeInternal _MultiDatasetVersionResponse_default_instance_;
class MultiInputAnnotationResponse;
struct MultiInputAnnotationResponseDefaultTypeInternal;
extern MultiInputAnnotationResponseDefaultTypeInternal _MultiInputAnnotationResponse_default_instance_;
class MultiInputResponse;
struct MultiInputResponseDefaultTypeInternal;
extern MultiInputResponseDefaultTypeInternal _MultiInputResponse_default_instance_;
class MultiKeyResponse;
struct MultiKeyResponseDefaultTypeInternal;
extern MultiKeyResponseDefaultTypeInternal _MultiKeyResponse_default_instance_;
class MultiKnowledgeGraphResponse;
struct MultiKnowledgeGraphResponseDefaultTypeInternal;
extern MultiKnowledgeGraphResponseDefaultTypeInternal _MultiKnowledgeGraphResponse_default_instance_;
class MultiLabelOrderResponse;
struct MultiLabelOrderResponseDefaultTypeInternal;
extern MultiLabelOrderResponseDefaultTypeInternal _MultiLabelOrderResponse_default_instance_;
class MultiModelLanguageResponse;
struct MultiModelLanguageResponseDefaultTypeInternal;
extern MultiModelLanguageResponseDefaultTypeInternal _MultiModelLanguageResponse_default_instance_;
class MultiModelReferenceResponse;
struct MultiModelReferenceResponseDefaultTypeInternal;
extern MultiModelReferenceResponseDefaultTypeInternal _MultiModelReferenceResponse_default_instance_;
class MultiModelResponse;
struct MultiModelResponseDefaultTypeInternal;
extern MultiModelResponseDefaultTypeInternal _MultiModelResponse_default_instance_;
class MultiModelToolkitResponse;
struct MultiModelToolkitResponseDefaultTypeInternal;
extern MultiModelToolkitResponseDefaultTypeInternal _MultiModelToolkitResponse_default_instance_;
class MultiModelTypeResponse;
struct MultiModelTypeResponseDefaultTypeInternal;
extern MultiModelTypeResponseDefaultTypeInternal _MultiModelTypeResponse_default_instance_;
class MultiModelUseCaseResponse;
struct MultiModelUseCaseResponseDefaultTypeInternal;
extern MultiModelUseCaseResponseDefaultTypeInternal _MultiModelUseCaseResponse_default_instance_;
class MultiModelVersionInputExampleResponse;
struct MultiModelVersionInputExampleResponseDefaultTypeInternal;
extern MultiModelVersionInputExampleResponseDefaultTypeInternal _MultiModelVersionInputExampleResponse_default_instance_;
class MultiModelVersionResponse;
struct MultiModelVersionResponseDefaultTypeInternal;
extern MultiModelVersionResponseDefaultTypeInternal _MultiModelVersionResponse_default_instance_;
class MultiOutputResponse;
struct MultiOutputResponseDefaultTypeInternal;
extern MultiOutputResponseDefaultTypeInternal _MultiOutputResponse_default_instance_;
class MultiScopeDepsResponse;
struct MultiScopeDepsResponseDefaultTypeInternal;
extern MultiScopeDepsResponseDefaultTypeInternal _MultiScopeDepsResponse_default_instance_;
class MultiScopeResponse;
struct MultiScopeResponseDefaultTypeInternal;
extern MultiScopeResponseDefaultTypeInternal _MultiScopeResponse_default_instance_;
class MultiScopeRootResponse;
struct MultiScopeRootResponseDefaultTypeInternal;
extern MultiScopeRootResponseDefaultTypeInternal _MultiScopeRootResponse_default_instance_;
class MultiScopeUserResponse;
struct MultiScopeUserResponseDefaultTypeInternal;
extern MultiScopeUserResponseDefaultTypeInternal _MultiScopeUserResponse_default_instance_;
class MultiSearchResponse;
struct MultiSearchResponseDefaultTypeInternal;
extern MultiSearchResponseDefaultTypeInternal _MultiSearchResponse_default_instance_;
class MultiStatValueAggregateResponse;
struct MultiStatValueAggregateResponseDefaultTypeInternal;
extern MultiStatValueAggregateResponseDefaultTypeInternal _MultiStatValueAggregateResponse_default_instance_;
class MultiStatValueResponse;
struct MultiStatValueResponseDefaultTypeInternal;
extern MultiStatValueResponseDefaultTypeInternal _MultiStatValueResponse_default_instance_;
class MultiStatusCodeResponse;
struct MultiStatusCodeResponseDefaultTypeInternal;
extern MultiStatusCodeResponseDefaultTypeInternal _MultiStatusCodeResponse_default_instance_;
class MultiTaskResponse;
struct MultiTaskResponseDefaultTypeInternal;
extern MultiTaskResponseDefaultTypeInternal _MultiTaskResponse_default_instance_;
class MultiTrendingMetricsViewResponse;
struct MultiTrendingMetricsViewResponseDefaultTypeInternal;
extern MultiTrendingMetricsViewResponseDefaultTypeInternal _MultiTrendingMetricsViewResponse_default_instance_;
class MultiWorkflowResponse;
struct MultiWorkflowResponseDefaultTypeInternal;
extern MultiWorkflowResponseDefaultTypeInternal _MultiWorkflowResponse_default_instance_;
class MultiWorkflowVersionResponse;
struct MultiWorkflowVersionResponseDefaultTypeInternal;
extern MultiWorkflowVersionResponseDefaultTypeInternal _MultiWorkflowVersionResponse_default_instance_;
class MyScopesRequest;
struct MyScopesRequestDefaultTypeInternal;
extern MyScopesRequestDefaultTypeInternal _MyScopesRequest_default_instance_;
class MyScopesRootRequest;
struct MyScopesRootRequestDefaultTypeInternal;
extern MyScopesRootRequestDefaultTypeInternal _MyScopesRootRequest_default_instance_;
class MyScopesUserRequest;
struct MyScopesUserRequestDefaultTypeInternal;
extern MyScopesUserRequestDefaultTypeInternal _MyScopesUserRequest_default_instance_;
class Pagination;
struct PaginationDefaultTypeInternal;
extern PaginationDefaultTypeInternal _Pagination_default_instance_;
class PatchAnnotationFiltersRequest;
struct PatchAnnotationFiltersRequestDefaultTypeInternal;
extern PatchAnnotationFiltersRequestDefaultTypeInternal _PatchAnnotationFiltersRequest_default_instance_;
class PatchAnnotationsRequest;
struct PatchAnnotationsRequestDefaultTypeInternal;
extern PatchAnnotationsRequestDefaultTypeInternal _PatchAnnotationsRequest_default_instance_;
class PatchAnnotationsSearchesRequest;
struct PatchAnnotationsSearchesRequestDefaultTypeInternal;
extern PatchAnnotationsSearchesRequestDefaultTypeInternal _PatchAnnotationsSearchesRequest_default_instance_;
class PatchAnnotationsStatusRequest;
struct PatchAnnotationsStatusRequestDefaultTypeInternal;
extern PatchAnnotationsStatusRequestDefaultTypeInternal _PatchAnnotationsStatusRequest_default_instance_;
class PatchAnnotationsStatusResponse;
struct PatchAnnotationsStatusResponseDefaultTypeInternal;
extern PatchAnnotationsStatusResponseDefaultTypeInternal _PatchAnnotationsStatusResponse_default_instance_;
class PatchAppsRequest;
struct PatchAppsRequestDefaultTypeInternal;
extern PatchAppsRequestDefaultTypeInternal _PatchAppsRequest_default_instance_;
class PatchCollaboratorsRequest;
struct PatchCollaboratorsRequestDefaultTypeInternal;
extern PatchCollaboratorsRequestDefaultTypeInternal _PatchCollaboratorsRequest_default_instance_;
class PatchCollectorsRequest;
struct PatchCollectorsRequestDefaultTypeInternal;
extern PatchCollectorsRequestDefaultTypeInternal _PatchCollectorsRequest_default_instance_;
class PatchConceptLanguagesRequest;
struct PatchConceptLanguagesRequestDefaultTypeInternal;
extern PatchConceptLanguagesRequestDefaultTypeInternal _PatchConceptLanguagesRequest_default_instance_;
class PatchConceptsRequest;
struct PatchConceptsRequestDefaultTypeInternal;
extern PatchConceptsRequestDefaultTypeInternal _PatchConceptsRequest_default_instance_;
class PatchDatasetVersionsRequest;
struct PatchDatasetVersionsRequestDefaultTypeInternal;
extern PatchDatasetVersionsRequestDefaultTypeInternal _PatchDatasetVersionsRequest_default_instance_;
class PatchDatasetsRequest;
struct PatchDatasetsRequestDefaultTypeInternal;
extern PatchDatasetsRequestDefaultTypeInternal _PatchDatasetsRequest_default_instance_;
class PatchInputsRequest;
struct PatchInputsRequestDefaultTypeInternal;
extern PatchInputsRequestDefaultTypeInternal _PatchInputsRequest_default_instance_;
class PatchInputsSearchesRequest;
struct PatchInputsSearchesRequestDefaultTypeInternal;
extern PatchInputsSearchesRequestDefaultTypeInternal _PatchInputsSearchesRequest_default_instance_;
class PatchKeysRequest;
struct PatchKeysRequestDefaultTypeInternal;
extern PatchKeysRequestDefaultTypeInternal _PatchKeysRequest_default_instance_;
class PatchLabelOrdersRequest;
struct PatchLabelOrdersRequestDefaultTypeInternal;
extern PatchLabelOrdersRequestDefaultTypeInternal _PatchLabelOrdersRequest_default_instance_;
class PatchModelIdsRequest;
struct PatchModelIdsRequestDefaultTypeInternal;
extern PatchModelIdsRequestDefaultTypeInternal _PatchModelIdsRequest_default_instance_;
class PatchModelLanguagesRequest;
struct PatchModelLanguagesRequestDefaultTypeInternal;
extern PatchModelLanguagesRequestDefaultTypeInternal _PatchModelLanguagesRequest_default_instance_;
class PatchModelToolkitsRequest;
struct PatchModelToolkitsRequestDefaultTypeInternal;
extern PatchModelToolkitsRequestDefaultTypeInternal _PatchModelToolkitsRequest_default_instance_;
class PatchModelUseCasesRequest;
struct PatchModelUseCasesRequestDefaultTypeInternal;
extern PatchModelUseCasesRequestDefaultTypeInternal _PatchModelUseCasesRequest_default_instance_;
class PatchModelVersionsRequest;
struct PatchModelVersionsRequestDefaultTypeInternal;
extern PatchModelVersionsRequestDefaultTypeInternal _PatchModelVersionsRequest_default_instance_;
class PatchModelsRequest;
struct PatchModelsRequestDefaultTypeInternal;
extern PatchModelsRequestDefaultTypeInternal _PatchModelsRequest_default_instance_;
class PatchSearchesRequest;
struct PatchSearchesRequestDefaultTypeInternal;
extern PatchSearchesRequestDefaultTypeInternal _PatchSearchesRequest_default_instance_;
class PatchTasksRequest;
struct PatchTasksRequestDefaultTypeInternal;
extern PatchTasksRequestDefaultTypeInternal _PatchTasksRequest_default_instance_;
class PatchWorkflowVersionsRequest;
struct PatchWorkflowVersionsRequestDefaultTypeInternal;
extern PatchWorkflowVersionsRequestDefaultTypeInternal _PatchWorkflowVersionsRequest_default_instance_;
class PatchWorkflowsRequest;
struct PatchWorkflowsRequestDefaultTypeInternal;
extern PatchWorkflowsRequestDefaultTypeInternal _PatchWorkflowsRequest_default_instance_;
class PostAnnotationFiltersRequest;
struct PostAnnotationFiltersRequestDefaultTypeInternal;
extern PostAnnotationFiltersRequestDefaultTypeInternal _PostAnnotationFiltersRequest_default_instance_;
class PostAnnotationSearchMetricsRequest;
struct PostAnnotationSearchMetricsRequestDefaultTypeInternal;
extern PostAnnotationSearchMetricsRequestDefaultTypeInternal _PostAnnotationSearchMetricsRequest_default_instance_;
class PostAnnotationsRequest;
struct PostAnnotationsRequestDefaultTypeInternal;
extern PostAnnotationsRequestDefaultTypeInternal _PostAnnotationsRequest_default_instance_;
class PostAnnotationsSearchesRequest;
struct PostAnnotationsSearchesRequestDefaultTypeInternal;
extern PostAnnotationsSearchesRequestDefaultTypeInternal _PostAnnotationsSearchesRequest_default_instance_;
class PostAppDuplicationsRequest;
struct PostAppDuplicationsRequestDefaultTypeInternal;
extern PostAppDuplicationsRequestDefaultTypeInternal _PostAppDuplicationsRequest_default_instance_;
class PostAppsRequest;
struct PostAppsRequestDefaultTypeInternal;
extern PostAppsRequestDefaultTypeInternal _PostAppsRequest_default_instance_;
class PostAppsSearchesRequest;
struct PostAppsSearchesRequestDefaultTypeInternal;
extern PostAppsSearchesRequestDefaultTypeInternal _PostAppsSearchesRequest_default_instance_;
class PostCollaboratorsRequest;
struct PostCollaboratorsRequestDefaultTypeInternal;
extern PostCollaboratorsRequestDefaultTypeInternal _PostCollaboratorsRequest_default_instance_;
class PostCollectorsRequest;
struct PostCollectorsRequestDefaultTypeInternal;
extern PostCollectorsRequestDefaultTypeInternal _PostCollectorsRequest_default_instance_;
class PostConceptLanguagesRequest;
struct PostConceptLanguagesRequestDefaultTypeInternal;
extern PostConceptLanguagesRequestDefaultTypeInternal _PostConceptLanguagesRequest_default_instance_;
class PostConceptMappingJobsRequest;
struct PostConceptMappingJobsRequestDefaultTypeInternal;
extern PostConceptMappingJobsRequestDefaultTypeInternal _PostConceptMappingJobsRequest_default_instance_;
class PostConceptRelationsRequest;
struct PostConceptRelationsRequestDefaultTypeInternal;
extern PostConceptRelationsRequestDefaultTypeInternal _PostConceptRelationsRequest_default_instance_;
class PostConceptsRequest;
struct PostConceptsRequestDefaultTypeInternal;
extern PostConceptsRequestDefaultTypeInternal _PostConceptsRequest_default_instance_;
class PostConceptsSearchesRequest;
struct PostConceptsSearchesRequestDefaultTypeInternal;
extern PostConceptsSearchesRequestDefaultTypeInternal _PostConceptsSearchesRequest_default_instance_;
class PostDatasetInputsRequest;
struct PostDatasetInputsRequestDefaultTypeInternal;
extern PostDatasetInputsRequestDefaultTypeInternal _PostDatasetInputsRequest_default_instance_;
class PostDatasetVersionsRequest;
struct PostDatasetVersionsRequestDefaultTypeInternal;
extern PostDatasetVersionsRequestDefaultTypeInternal _PostDatasetVersionsRequest_default_instance_;
class PostDatasetsRequest;
struct PostDatasetsRequestDefaultTypeInternal;
extern PostDatasetsRequestDefaultTypeInternal _PostDatasetsRequest_default_instance_;
class PostInputsRequest;
struct PostInputsRequestDefaultTypeInternal;
extern PostInputsRequestDefaultTypeInternal _PostInputsRequest_default_instance_;
class PostInputsSearchesRequest;
struct PostInputsSearchesRequestDefaultTypeInternal;
extern PostInputsSearchesRequestDefaultTypeInternal _PostInputsSearchesRequest_default_instance_;
class PostKeysRequest;
struct PostKeysRequestDefaultTypeInternal;
extern PostKeysRequestDefaultTypeInternal _PostKeysRequest_default_instance_;
class PostKnowledgeGraphsRequest;
struct PostKnowledgeGraphsRequestDefaultTypeInternal;
extern PostKnowledgeGraphsRequestDefaultTypeInternal _PostKnowledgeGraphsRequest_default_instance_;
class PostLabelOrdersRequest;
struct PostLabelOrdersRequestDefaultTypeInternal;
extern PostLabelOrdersRequestDefaultTypeInternal _PostLabelOrdersRequest_default_instance_;
class PostModelOutputsRequest;
struct PostModelOutputsRequestDefaultTypeInternal;
extern PostModelOutputsRequestDefaultTypeInternal _PostModelOutputsRequest_default_instance_;
class PostModelVersionMetricsRequest;
struct PostModelVersionMetricsRequestDefaultTypeInternal;
extern PostModelVersionMetricsRequestDefaultTypeInternal _PostModelVersionMetricsRequest_default_instance_;
class PostModelVersionsPublishRequest;
struct PostModelVersionsPublishRequestDefaultTypeInternal;
extern PostModelVersionsPublishRequestDefaultTypeInternal _PostModelVersionsPublishRequest_default_instance_;
class PostModelVersionsRequest;
struct PostModelVersionsRequestDefaultTypeInternal;
extern PostModelVersionsRequestDefaultTypeInternal _PostModelVersionsRequest_default_instance_;
class PostModelVersionsUnPublishRequest;
struct PostModelVersionsUnPublishRequestDefaultTypeInternal;
extern PostModelVersionsUnPublishRequestDefaultTypeInternal _PostModelVersionsUnPublishRequest_default_instance_;
class PostModelsRequest;
struct PostModelsRequestDefaultTypeInternal;
extern PostModelsRequestDefaultTypeInternal _PostModelsRequest_default_instance_;
class PostModelsSearchesRequest;
struct PostModelsSearchesRequestDefaultTypeInternal;
extern PostModelsSearchesRequestDefaultTypeInternal _PostModelsSearchesRequest_default_instance_;
class PostSearchesByIDRequest;
struct PostSearchesByIDRequestDefaultTypeInternal;
extern PostSearchesByIDRequestDefaultTypeInternal _PostSearchesByIDRequest_default_instance_;
class PostSearchesRequest;
struct PostSearchesRequestDefaultTypeInternal;
extern PostSearchesRequestDefaultTypeInternal _PostSearchesRequest_default_instance_;
class PostStatValuesAggregateRequest;
struct PostStatValuesAggregateRequestDefaultTypeInternal;
extern PostStatValuesAggregateRequestDefaultTypeInternal _PostStatValuesAggregateRequest_default_instance_;
class PostStatValuesRequest;
struct PostStatValuesRequestDefaultTypeInternal;
extern PostStatValuesRequestDefaultTypeInternal _PostStatValuesRequest_default_instance_;
class PostTasksRequest;
struct PostTasksRequestDefaultTypeInternal;
extern PostTasksRequestDefaultTypeInternal _PostTasksRequest_default_instance_;
class PostTrendingMetricsViewRequest;
struct PostTrendingMetricsViewRequestDefaultTypeInternal;
extern PostTrendingMetricsViewRequestDefaultTypeInternal _PostTrendingMetricsViewRequest_default_instance_;
class PostValidatePasswordRequest;
struct PostValidatePasswordRequestDefaultTypeInternal;
extern PostValidatePasswordRequestDefaultTypeInternal _PostValidatePasswordRequest_default_instance_;
class PostWorkflowResultsRequest;
struct PostWorkflowResultsRequestDefaultTypeInternal;
extern PostWorkflowResultsRequestDefaultTypeInternal _PostWorkflowResultsRequest_default_instance_;
class PostWorkflowResultsResponse;
struct PostWorkflowResultsResponseDefaultTypeInternal;
extern PostWorkflowResultsResponseDefaultTypeInternal _PostWorkflowResultsResponse_default_instance_;
class PostWorkflowResultsSimilarityRequest;
struct PostWorkflowResultsSimilarityRequestDefaultTypeInternal;
extern PostWorkflowResultsSimilarityRequestDefaultTypeInternal _PostWorkflowResultsSimilarityRequest_default_instance_;
class PostWorkflowResultsSimilarityResponse;
struct PostWorkflowResultsSimilarityResponseDefaultTypeInternal;
extern PostWorkflowResultsSimilarityResponseDefaultTypeInternal _PostWorkflowResultsSimilarityResponse_default_instance_;
class PostWorkflowVersionsPublishRequest;
struct PostWorkflowVersionsPublishRequestDefaultTypeInternal;
extern PostWorkflowVersionsPublishRequestDefaultTypeInternal _PostWorkflowVersionsPublishRequest_default_instance_;
class PostWorkflowVersionsUnPublishRequest;
struct PostWorkflowVersionsUnPublishRequestDefaultTypeInternal;
extern PostWorkflowVersionsUnPublishRequestDefaultTypeInternal _PostWorkflowVersionsUnPublishRequest_default_instance_;
class PostWorkflowsRequest;
struct PostWorkflowsRequestDefaultTypeInternal;
extern PostWorkflowsRequestDefaultTypeInternal _PostWorkflowsRequest_default_instance_;
class SingleAnnotationFilterResponse;
struct SingleAnnotationFilterResponseDefaultTypeInternal;
extern SingleAnnotationFilterResponseDefaultTypeInternal _SingleAnnotationFilterResponse_default_instance_;
class SingleAnnotationResponse;
struct SingleAnnotationResponseDefaultTypeInternal;
extern SingleAnnotationResponseDefaultTypeInternal _SingleAnnotationResponse_default_instance_;
class SingleAppDuplicationResponse;
struct SingleAppDuplicationResponseDefaultTypeInternal;
extern SingleAppDuplicationResponseDefaultTypeInternal _SingleAppDuplicationResponse_default_instance_;
class SingleAppResponse;
struct SingleAppResponseDefaultTypeInternal;
extern SingleAppResponseDefaultTypeInternal _SingleAppResponse_default_instance_;
class SingleCollectorResponse;
struct SingleCollectorResponseDefaultTypeInternal;
extern SingleCollectorResponseDefaultTypeInternal _SingleCollectorResponse_default_instance_;
class SingleConceptLanguageResponse;
struct SingleConceptLanguageResponseDefaultTypeInternal;
extern SingleConceptLanguageResponseDefaultTypeInternal _SingleConceptLanguageResponse_default_instance_;
class SingleConceptResponse;
struct SingleConceptResponseDefaultTypeInternal;
extern SingleConceptResponseDefaultTypeInternal _SingleConceptResponse_default_instance_;
class SingleDatasetInputResponse;
struct SingleDatasetInputResponseDefaultTypeInternal;
extern SingleDatasetInputResponseDefaultTypeInternal _SingleDatasetInputResponse_default_instance_;
class SingleDatasetResponse;
struct SingleDatasetResponseDefaultTypeInternal;
extern SingleDatasetResponseDefaultTypeInternal _SingleDatasetResponse_default_instance_;
class SingleDatasetVersionResponse;
struct SingleDatasetVersionResponseDefaultTypeInternal;
extern SingleDatasetVersionResponseDefaultTypeInternal _SingleDatasetVersionResponse_default_instance_;
class SingleInputCountResponse;
struct SingleInputCountResponseDefaultTypeInternal;
extern SingleInputCountResponseDefaultTypeInternal _SingleInputCountResponse_default_instance_;
class SingleInputResponse;
struct SingleInputResponseDefaultTypeInternal;
extern SingleInputResponseDefaultTypeInternal _SingleInputResponse_default_instance_;
class SingleKeyResponse;
struct SingleKeyResponseDefaultTypeInternal;
extern SingleKeyResponseDefaultTypeInternal _SingleKeyResponse_default_instance_;
class SingleLabelOrderResponse;
struct SingleLabelOrderResponseDefaultTypeInternal;
extern SingleLabelOrderResponseDefaultTypeInternal _SingleLabelOrderResponse_default_instance_;
class SingleModelResponse;
struct SingleModelResponseDefaultTypeInternal;
extern SingleModelResponseDefaultTypeInternal _SingleModelResponse_default_instance_;
class SingleModelTypeResponse;
struct SingleModelTypeResponseDefaultTypeInternal;
extern SingleModelTypeResponseDefaultTypeInternal _SingleModelTypeResponse_default_instance_;
class SingleModelVersionInputExampleResponse;
struct SingleModelVersionInputExampleResponseDefaultTypeInternal;
extern SingleModelVersionInputExampleResponseDefaultTypeInternal _SingleModelVersionInputExampleResponse_default_instance_;
class SingleModelVersionResponse;
struct SingleModelVersionResponseDefaultTypeInternal;
extern SingleModelVersionResponseDefaultTypeInternal _SingleModelVersionResponse_default_instance_;
class SinglePasswordValidationResponse;
struct SinglePasswordValidationResponseDefaultTypeInternal;
extern SinglePasswordValidationResponseDefaultTypeInternal _SinglePasswordValidationResponse_default_instance_;
class SingleSearchResponse;
struct SingleSearchResponseDefaultTypeInternal;
extern SingleSearchResponseDefaultTypeInternal _SingleSearchResponse_default_instance_;
class SingleStatusCodeResponse;
struct SingleStatusCodeResponseDefaultTypeInternal;
extern SingleStatusCodeResponseDefaultTypeInternal _SingleStatusCodeResponse_default_instance_;
class SingleTaskCountResponse;
struct SingleTaskCountResponseDefaultTypeInternal;
extern SingleTaskCountResponseDefaultTypeInternal _SingleTaskCountResponse_default_instance_;
class SingleTaskResponse;
struct SingleTaskResponseDefaultTypeInternal;
extern SingleTaskResponseDefaultTypeInternal _SingleTaskResponse_default_instance_;
class SingleWorkflowResponse;
struct SingleWorkflowResponseDefaultTypeInternal;
extern SingleWorkflowResponseDefaultTypeInternal _SingleWorkflowResponse_default_instance_;
class SingleWorkflowVersionResponse;
struct SingleWorkflowVersionResponseDefaultTypeInternal;
extern SingleWorkflowVersionResponseDefaultTypeInternal _SingleWorkflowVersionResponse_default_instance_;
class StreamInputsRequest;
struct StreamInputsRequestDefaultTypeInternal;
extern StreamInputsRequestDefaultTypeInternal _StreamInputsRequest_default_instance_;
class WorkflowVersionPublishRequest;
struct WorkflowVersionPublishRequestDefaultTypeInternal;
extern WorkflowVersionPublishRequestDefaultTypeInternal _WorkflowVersionPublishRequest_default_instance_;
class WorkflowVersionUnPublishRequest;
struct WorkflowVersionUnPublishRequestDefaultTypeInternal;
extern WorkflowVersionUnPublishRequestDefaultTypeInternal _WorkflowVersionUnPublishRequest_default_instance_;
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::clarifai::api::DeleteAnnotationFiltersRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteAnnotationFiltersRequest>(Arena*);
template<> ::clarifai::api::DeleteAnnotationRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteAnnotationRequest>(Arena*);
template<> ::clarifai::api::DeleteAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteAnnotationSearchMetricsRequest>(Arena*);
template<> ::clarifai::api::DeleteAnnotationsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteAnnotationsRequest>(Arena*);
template<> ::clarifai::api::DeleteAppRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteAppRequest>(Arena*);
template<> ::clarifai::api::DeleteCollaboratorsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteCollaboratorsRequest>(Arena*);
template<> ::clarifai::api::DeleteCollectorsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteCollectorsRequest>(Arena*);
template<> ::clarifai::api::DeleteConceptRelationsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteConceptRelationsRequest>(Arena*);
template<> ::clarifai::api::DeleteDatasetInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteDatasetInputsRequest>(Arena*);
template<> ::clarifai::api::DeleteDatasetVersionsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteDatasetVersionsRequest>(Arena*);
template<> ::clarifai::api::DeleteDatasetsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteDatasetsRequest>(Arena*);
template<> ::clarifai::api::DeleteInputRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteInputRequest>(Arena*);
template<> ::clarifai::api::DeleteInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteInputsRequest>(Arena*);
template<> ::clarifai::api::DeleteKeyRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteKeyRequest>(Arena*);
template<> ::clarifai::api::DeleteLabelOrdersRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteLabelOrdersRequest>(Arena*);
template<> ::clarifai::api::DeleteModelRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteModelRequest>(Arena*);
template<> ::clarifai::api::DeleteModelVersionRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteModelVersionRequest>(Arena*);
template<> ::clarifai::api::DeleteModelsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteModelsRequest>(Arena*);
template<> ::clarifai::api::DeleteSearchRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteSearchRequest>(Arena*);
template<> ::clarifai::api::DeleteTasksRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteTasksRequest>(Arena*);
template<> ::clarifai::api::DeleteWorkflowRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteWorkflowRequest>(Arena*);
template<> ::clarifai::api::DeleteWorkflowVersionsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteWorkflowVersionsRequest>(Arena*);
template<> ::clarifai::api::DeleteWorkflowsRequest* Arena::CreateMaybeMessage<::clarifai::api::DeleteWorkflowsRequest>(Arena*);
template<> ::clarifai::api::GetAnnotationFilterRequest* Arena::CreateMaybeMessage<::clarifai::api::GetAnnotationFilterRequest>(Arena*);
template<> ::clarifai::api::GetAnnotationRequest* Arena::CreateMaybeMessage<::clarifai::api::GetAnnotationRequest>(Arena*);
template<> ::clarifai::api::GetAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage<::clarifai::api::GetAnnotationSearchMetricsRequest>(Arena*);
template<> ::clarifai::api::GetAppDuplicationRequest* Arena::CreateMaybeMessage<::clarifai::api::GetAppDuplicationRequest>(Arena*);
template<> ::clarifai::api::GetAppRequest* Arena::CreateMaybeMessage<::clarifai::api::GetAppRequest>(Arena*);
template<> ::clarifai::api::GetCollectorRequest* Arena::CreateMaybeMessage<::clarifai::api::GetCollectorRequest>(Arena*);
template<> ::clarifai::api::GetConceptCountsRequest* Arena::CreateMaybeMessage<::clarifai::api::GetConceptCountsRequest>(Arena*);
template<> ::clarifai::api::GetConceptLanguageRequest* Arena::CreateMaybeMessage<::clarifai::api::GetConceptLanguageRequest>(Arena*);
template<> ::clarifai::api::GetConceptRequest* Arena::CreateMaybeMessage<::clarifai::api::GetConceptRequest>(Arena*);
template<> ::clarifai::api::GetDatasetInputRequest* Arena::CreateMaybeMessage<::clarifai::api::GetDatasetInputRequest>(Arena*);
template<> ::clarifai::api::GetDatasetRequest* Arena::CreateMaybeMessage<::clarifai::api::GetDatasetRequest>(Arena*);
template<> ::clarifai::api::GetDatasetVersionRequest* Arena::CreateMaybeMessage<::clarifai::api::GetDatasetVersionRequest>(Arena*);
template<> ::clarifai::api::GetInputCountRequest* Arena::CreateMaybeMessage<::clarifai::api::GetInputCountRequest>(Arena*);
template<> ::clarifai::api::GetInputRequest* Arena::CreateMaybeMessage<::clarifai::api::GetInputRequest>(Arena*);
template<> ::clarifai::api::GetInputSamplesRequest* Arena::CreateMaybeMessage<::clarifai::api::GetInputSamplesRequest>(Arena*);
template<> ::clarifai::api::GetKeyRequest* Arena::CreateMaybeMessage<::clarifai::api::GetKeyRequest>(Arena*);
template<> ::clarifai::api::GetLabelOrderRequest* Arena::CreateMaybeMessage<::clarifai::api::GetLabelOrderRequest>(Arena*);
template<> ::clarifai::api::GetModelRequest* Arena::CreateMaybeMessage<::clarifai::api::GetModelRequest>(Arena*);
template<> ::clarifai::api::GetModelTypeRequest* Arena::CreateMaybeMessage<::clarifai::api::GetModelTypeRequest>(Arena*);
template<> ::clarifai::api::GetModelVersionInputExampleRequest* Arena::CreateMaybeMessage<::clarifai::api::GetModelVersionInputExampleRequest>(Arena*);
template<> ::clarifai::api::GetModelVersionMetricsRequest* Arena::CreateMaybeMessage<::clarifai::api::GetModelVersionMetricsRequest>(Arena*);
template<> ::clarifai::api::GetModelVersionRequest* Arena::CreateMaybeMessage<::clarifai::api::GetModelVersionRequest>(Arena*);
template<> ::clarifai::api::GetSearchRequest* Arena::CreateMaybeMessage<::clarifai::api::GetSearchRequest>(Arena*);
template<> ::clarifai::api::GetStatusCodeRequest* Arena::CreateMaybeMessage<::clarifai::api::GetStatusCodeRequest>(Arena*);
template<> ::clarifai::api::GetTaskCountRequest* Arena::CreateMaybeMessage<::clarifai::api::GetTaskCountRequest>(Arena*);
template<> ::clarifai::api::GetTaskRequest* Arena::CreateMaybeMessage<::clarifai::api::GetTaskRequest>(Arena*);
template<> ::clarifai::api::GetWorkflowRequest* Arena::CreateMaybeMessage<::clarifai::api::GetWorkflowRequest>(Arena*);
template<> ::clarifai::api::GetWorkflowVersionRequest* Arena::CreateMaybeMessage<::clarifai::api::GetWorkflowVersionRequest>(Arena*);
template<> ::clarifai::api::IdUpdateSource* Arena::CreateMaybeMessage<::clarifai::api::IdUpdateSource>(Arena*);
template<> ::clarifai::api::ListAnnotationFiltersRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAnnotationFiltersRequest>(Arena*);
template<> ::clarifai::api::ListAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAnnotationSearchMetricsRequest>(Arena*);
template<> ::clarifai::api::ListAnnotationsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAnnotationsRequest>(Arena*);
template<> ::clarifai::api::ListAppDuplicationsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAppDuplicationsRequest>(Arena*);
template<> ::clarifai::api::ListAppKeysRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAppKeysRequest>(Arena*);
template<> ::clarifai::api::ListAppsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListAppsRequest>(Arena*);
template<> ::clarifai::api::ListCollaborationsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListCollaborationsRequest>(Arena*);
template<> ::clarifai::api::ListCollaboratorsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListCollaboratorsRequest>(Arena*);
template<> ::clarifai::api::ListCollectorsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListCollectorsRequest>(Arena*);
template<> ::clarifai::api::ListConceptLanguagesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListConceptLanguagesRequest>(Arena*);
template<> ::clarifai::api::ListConceptRelationsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListConceptRelationsRequest>(Arena*);
template<> ::clarifai::api::ListConceptsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListConceptsRequest>(Arena*);
template<> ::clarifai::api::ListDatasetInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListDatasetInputsRequest>(Arena*);
template<> ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListDatasetVersionMetricsGroupsRequest>(Arena*);
template<> ::clarifai::api::ListDatasetVersionsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListDatasetVersionsRequest>(Arena*);
template<> ::clarifai::api::ListDatasetsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListDatasetsRequest>(Arena*);
template<> ::clarifai::api::ListInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListInputsRequest>(Arena*);
template<> ::clarifai::api::ListKeysRequest* Arena::CreateMaybeMessage<::clarifai::api::ListKeysRequest>(Arena*);
template<> ::clarifai::api::ListKnowledgeGraphsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListKnowledgeGraphsRequest>(Arena*);
template<> ::clarifai::api::ListLabelOrdersRequest* Arena::CreateMaybeMessage<::clarifai::api::ListLabelOrdersRequest>(Arena*);
template<> ::clarifai::api::ListModelInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListModelInputsRequest>(Arena*);
template<> ::clarifai::api::ListModelReferencesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListModelReferencesRequest>(Arena*);
template<> ::clarifai::api::ListModelTypesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListModelTypesRequest>(Arena*);
template<> ::clarifai::api::ListModelVersionInputExamplesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListModelVersionInputExamplesRequest>(Arena*);
template<> ::clarifai::api::ListModelVersionsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListModelVersionsRequest>(Arena*);
template<> ::clarifai::api::ListModelsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListModelsRequest>(Arena*);
template<> ::clarifai::api::ListOpenSourceLicensesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListOpenSourceLicensesRequest>(Arena*);
template<> ::clarifai::api::ListOpenSourceLicensesResponse* Arena::CreateMaybeMessage<::clarifai::api::ListOpenSourceLicensesResponse>(Arena*);
template<> ::clarifai::api::ListScopesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListScopesRequest>(Arena*);
template<> ::clarifai::api::ListSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListSearchesRequest>(Arena*);
template<> ::clarifai::api::ListStatusCodesRequest* Arena::CreateMaybeMessage<::clarifai::api::ListStatusCodesRequest>(Arena*);
template<> ::clarifai::api::ListTasksRequest* Arena::CreateMaybeMessage<::clarifai::api::ListTasksRequest>(Arena*);
template<> ::clarifai::api::ListTrendingMetricsViewsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListTrendingMetricsViewsRequest>(Arena*);
template<> ::clarifai::api::ListWorkflowVersionsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListWorkflowVersionsRequest>(Arena*);
template<> ::clarifai::api::ListWorkflowsRequest* Arena::CreateMaybeMessage<::clarifai::api::ListWorkflowsRequest>(Arena*);
template<> ::clarifai::api::ModelVersionPublishRequest* Arena::CreateMaybeMessage<::clarifai::api::ModelVersionPublishRequest>(Arena*);
template<> ::clarifai::api::ModelVersionUnpublishRequest* Arena::CreateMaybeMessage<::clarifai::api::ModelVersionUnpublishRequest>(Arena*);
template<> ::clarifai::api::MultiAnnotationFilterResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiAnnotationFilterResponse>(Arena*);
template<> ::clarifai::api::MultiAnnotationResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiAnnotationResponse>(Arena*);
template<> ::clarifai::api::MultiAnnotationSearchMetricsResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiAnnotationSearchMetricsResponse>(Arena*);
template<> ::clarifai::api::MultiAppDuplicationsResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiAppDuplicationsResponse>(Arena*);
template<> ::clarifai::api::MultiAppResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiAppResponse>(Arena*);
template<> ::clarifai::api::MultiCollaborationsResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiCollaborationsResponse>(Arena*);
template<> ::clarifai::api::MultiCollaboratorsResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiCollaboratorsResponse>(Arena*);
template<> ::clarifai::api::MultiCollectorResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiCollectorResponse>(Arena*);
template<> ::clarifai::api::MultiConceptCountResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiConceptCountResponse>(Arena*);
template<> ::clarifai::api::MultiConceptLanguageResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiConceptLanguageResponse>(Arena*);
template<> ::clarifai::api::MultiConceptMappingJobResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiConceptMappingJobResponse>(Arena*);
template<> ::clarifai::api::MultiConceptRelationResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiConceptRelationResponse>(Arena*);
template<> ::clarifai::api::MultiConceptResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiConceptResponse>(Arena*);
template<> ::clarifai::api::MultiDatasetInputResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiDatasetInputResponse>(Arena*);
template<> ::clarifai::api::MultiDatasetResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiDatasetResponse>(Arena*);
template<> ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiDatasetVersionMetricsGroupResponse>(Arena*);
template<> ::clarifai::api::MultiDatasetVersionResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiDatasetVersionResponse>(Arena*);
template<> ::clarifai::api::MultiInputAnnotationResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiInputAnnotationResponse>(Arena*);
template<> ::clarifai::api::MultiInputResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiInputResponse>(Arena*);
template<> ::clarifai::api::MultiKeyResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiKeyResponse>(Arena*);
template<> ::clarifai::api::MultiKnowledgeGraphResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiKnowledgeGraphResponse>(Arena*);
template<> ::clarifai::api::MultiLabelOrderResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiLabelOrderResponse>(Arena*);
template<> ::clarifai::api::MultiModelLanguageResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiModelLanguageResponse>(Arena*);
template<> ::clarifai::api::MultiModelReferenceResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiModelReferenceResponse>(Arena*);
template<> ::clarifai::api::MultiModelResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiModelResponse>(Arena*);
template<> ::clarifai::api::MultiModelToolkitResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiModelToolkitResponse>(Arena*);
template<> ::clarifai::api::MultiModelTypeResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiModelTypeResponse>(Arena*);
template<> ::clarifai::api::MultiModelUseCaseResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiModelUseCaseResponse>(Arena*);
template<> ::clarifai::api::MultiModelVersionInputExampleResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiModelVersionInputExampleResponse>(Arena*);
template<> ::clarifai::api::MultiModelVersionResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiModelVersionResponse>(Arena*);
template<> ::clarifai::api::MultiOutputResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiOutputResponse>(Arena*);
template<> ::clarifai::api::MultiScopeDepsResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiScopeDepsResponse>(Arena*);
template<> ::clarifai::api::MultiScopeResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiScopeResponse>(Arena*);
template<> ::clarifai::api::MultiScopeRootResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiScopeRootResponse>(Arena*);
template<> ::clarifai::api::MultiScopeUserResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiScopeUserResponse>(Arena*);
template<> ::clarifai::api::MultiSearchResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiSearchResponse>(Arena*);
template<> ::clarifai::api::MultiStatValueAggregateResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiStatValueAggregateResponse>(Arena*);
template<> ::clarifai::api::MultiStatValueResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiStatValueResponse>(Arena*);
template<> ::clarifai::api::MultiStatusCodeResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiStatusCodeResponse>(Arena*);
template<> ::clarifai::api::MultiTaskResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiTaskResponse>(Arena*);
template<> ::clarifai::api::MultiTrendingMetricsViewResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiTrendingMetricsViewResponse>(Arena*);
template<> ::clarifai::api::MultiWorkflowResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiWorkflowResponse>(Arena*);
template<> ::clarifai::api::MultiWorkflowVersionResponse* Arena::CreateMaybeMessage<::clarifai::api::MultiWorkflowVersionResponse>(Arena*);
template<> ::clarifai::api::MyScopesRequest* Arena::CreateMaybeMessage<::clarifai::api::MyScopesRequest>(Arena*);
template<> ::clarifai::api::MyScopesRootRequest* Arena::CreateMaybeMessage<::clarifai::api::MyScopesRootRequest>(Arena*);
template<> ::clarifai::api::MyScopesUserRequest* Arena::CreateMaybeMessage<::clarifai::api::MyScopesUserRequest>(Arena*);
template<> ::clarifai::api::Pagination* Arena::CreateMaybeMessage<::clarifai::api::Pagination>(Arena*);
template<> ::clarifai::api::PatchAnnotationFiltersRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchAnnotationFiltersRequest>(Arena*);
template<> ::clarifai::api::PatchAnnotationsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchAnnotationsRequest>(Arena*);
template<> ::clarifai::api::PatchAnnotationsSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchAnnotationsSearchesRequest>(Arena*);
template<> ::clarifai::api::PatchAnnotationsStatusRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchAnnotationsStatusRequest>(Arena*);
template<> ::clarifai::api::PatchAnnotationsStatusResponse* Arena::CreateMaybeMessage<::clarifai::api::PatchAnnotationsStatusResponse>(Arena*);
template<> ::clarifai::api::PatchAppsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchAppsRequest>(Arena*);
template<> ::clarifai::api::PatchCollaboratorsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchCollaboratorsRequest>(Arena*);
template<> ::clarifai::api::PatchCollectorsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchCollectorsRequest>(Arena*);
template<> ::clarifai::api::PatchConceptLanguagesRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchConceptLanguagesRequest>(Arena*);
template<> ::clarifai::api::PatchConceptsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchConceptsRequest>(Arena*);
template<> ::clarifai::api::PatchDatasetVersionsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchDatasetVersionsRequest>(Arena*);
template<> ::clarifai::api::PatchDatasetsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchDatasetsRequest>(Arena*);
template<> ::clarifai::api::PatchInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchInputsRequest>(Arena*);
template<> ::clarifai::api::PatchInputsSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchInputsSearchesRequest>(Arena*);
template<> ::clarifai::api::PatchKeysRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchKeysRequest>(Arena*);
template<> ::clarifai::api::PatchLabelOrdersRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchLabelOrdersRequest>(Arena*);
template<> ::clarifai::api::PatchModelIdsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchModelIdsRequest>(Arena*);
template<> ::clarifai::api::PatchModelLanguagesRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchModelLanguagesRequest>(Arena*);
template<> ::clarifai::api::PatchModelToolkitsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchModelToolkitsRequest>(Arena*);
template<> ::clarifai::api::PatchModelUseCasesRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchModelUseCasesRequest>(Arena*);
template<> ::clarifai::api::PatchModelVersionsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchModelVersionsRequest>(Arena*);
template<> ::clarifai::api::PatchModelsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchModelsRequest>(Arena*);
template<> ::clarifai::api::PatchSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchSearchesRequest>(Arena*);
template<> ::clarifai::api::PatchTasksRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchTasksRequest>(Arena*);
template<> ::clarifai::api::PatchWorkflowVersionsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchWorkflowVersionsRequest>(Arena*);
template<> ::clarifai::api::PatchWorkflowsRequest* Arena::CreateMaybeMessage<::clarifai::api::PatchWorkflowsRequest>(Arena*);
template<> ::clarifai::api::PostAnnotationFiltersRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAnnotationFiltersRequest>(Arena*);
template<> ::clarifai::api::PostAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAnnotationSearchMetricsRequest>(Arena*);
template<> ::clarifai::api::PostAnnotationsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAnnotationsRequest>(Arena*);
template<> ::clarifai::api::PostAnnotationsSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAnnotationsSearchesRequest>(Arena*);
template<> ::clarifai::api::PostAppDuplicationsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAppDuplicationsRequest>(Arena*);
template<> ::clarifai::api::PostAppsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAppsRequest>(Arena*);
template<> ::clarifai::api::PostAppsSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostAppsSearchesRequest>(Arena*);
template<> ::clarifai::api::PostCollaboratorsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostCollaboratorsRequest>(Arena*);
template<> ::clarifai::api::PostCollectorsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostCollectorsRequest>(Arena*);
template<> ::clarifai::api::PostConceptLanguagesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostConceptLanguagesRequest>(Arena*);
template<> ::clarifai::api::PostConceptMappingJobsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostConceptMappingJobsRequest>(Arena*);
template<> ::clarifai::api::PostConceptRelationsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostConceptRelationsRequest>(Arena*);
template<> ::clarifai::api::PostConceptsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostConceptsRequest>(Arena*);
template<> ::clarifai::api::PostConceptsSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostConceptsSearchesRequest>(Arena*);
template<> ::clarifai::api::PostDatasetInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostDatasetInputsRequest>(Arena*);
template<> ::clarifai::api::PostDatasetVersionsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostDatasetVersionsRequest>(Arena*);
template<> ::clarifai::api::PostDatasetsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostDatasetsRequest>(Arena*);
template<> ::clarifai::api::PostInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostInputsRequest>(Arena*);
template<> ::clarifai::api::PostInputsSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostInputsSearchesRequest>(Arena*);
template<> ::clarifai::api::PostKeysRequest* Arena::CreateMaybeMessage<::clarifai::api::PostKeysRequest>(Arena*);
template<> ::clarifai::api::PostKnowledgeGraphsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostKnowledgeGraphsRequest>(Arena*);
template<> ::clarifai::api::PostLabelOrdersRequest* Arena::CreateMaybeMessage<::clarifai::api::PostLabelOrdersRequest>(Arena*);
template<> ::clarifai::api::PostModelOutputsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelOutputsRequest>(Arena*);
template<> ::clarifai::api::PostModelVersionMetricsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelVersionMetricsRequest>(Arena*);
template<> ::clarifai::api::PostModelVersionsPublishRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelVersionsPublishRequest>(Arena*);
template<> ::clarifai::api::PostModelVersionsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelVersionsRequest>(Arena*);
template<> ::clarifai::api::PostModelVersionsUnPublishRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelVersionsUnPublishRequest>(Arena*);
template<> ::clarifai::api::PostModelsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelsRequest>(Arena*);
template<> ::clarifai::api::PostModelsSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostModelsSearchesRequest>(Arena*);
template<> ::clarifai::api::PostSearchesByIDRequest* Arena::CreateMaybeMessage<::clarifai::api::PostSearchesByIDRequest>(Arena*);
template<> ::clarifai::api::PostSearchesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostSearchesRequest>(Arena*);
template<> ::clarifai::api::PostStatValuesAggregateRequest* Arena::CreateMaybeMessage<::clarifai::api::PostStatValuesAggregateRequest>(Arena*);
template<> ::clarifai::api::PostStatValuesRequest* Arena::CreateMaybeMessage<::clarifai::api::PostStatValuesRequest>(Arena*);
template<> ::clarifai::api::PostTasksRequest* Arena::CreateMaybeMessage<::clarifai::api::PostTasksRequest>(Arena*);
template<> ::clarifai::api::PostTrendingMetricsViewRequest* Arena::CreateMaybeMessage<::clarifai::api::PostTrendingMetricsViewRequest>(Arena*);
template<> ::clarifai::api::PostValidatePasswordRequest* Arena::CreateMaybeMessage<::clarifai::api::PostValidatePasswordRequest>(Arena*);
template<> ::clarifai::api::PostWorkflowResultsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostWorkflowResultsRequest>(Arena*);
template<> ::clarifai::api::PostWorkflowResultsResponse* Arena::CreateMaybeMessage<::clarifai::api::PostWorkflowResultsResponse>(Arena*);
template<> ::clarifai::api::PostWorkflowResultsSimilarityRequest* Arena::CreateMaybeMessage<::clarifai::api::PostWorkflowResultsSimilarityRequest>(Arena*);
template<> ::clarifai::api::PostWorkflowResultsSimilarityResponse* Arena::CreateMaybeMessage<::clarifai::api::PostWorkflowResultsSimilarityResponse>(Arena*);
template<> ::clarifai::api::PostWorkflowVersionsPublishRequest* Arena::CreateMaybeMessage<::clarifai::api::PostWorkflowVersionsPublishRequest>(Arena*);
template<> ::clarifai::api::PostWorkflowVersionsUnPublishRequest* Arena::CreateMaybeMessage<::clarifai::api::PostWorkflowVersionsUnPublishRequest>(Arena*);
template<> ::clarifai::api::PostWorkflowsRequest* Arena::CreateMaybeMessage<::clarifai::api::PostWorkflowsRequest>(Arena*);
template<> ::clarifai::api::SingleAnnotationFilterResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleAnnotationFilterResponse>(Arena*);
template<> ::clarifai::api::SingleAnnotationResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleAnnotationResponse>(Arena*);
template<> ::clarifai::api::SingleAppDuplicationResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleAppDuplicationResponse>(Arena*);
template<> ::clarifai::api::SingleAppResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleAppResponse>(Arena*);
template<> ::clarifai::api::SingleCollectorResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleCollectorResponse>(Arena*);
template<> ::clarifai::api::SingleConceptLanguageResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleConceptLanguageResponse>(Arena*);
template<> ::clarifai::api::SingleConceptResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleConceptResponse>(Arena*);
template<> ::clarifai::api::SingleDatasetInputResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleDatasetInputResponse>(Arena*);
template<> ::clarifai::api::SingleDatasetResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleDatasetResponse>(Arena*);
template<> ::clarifai::api::SingleDatasetVersionResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleDatasetVersionResponse>(Arena*);
template<> ::clarifai::api::SingleInputCountResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleInputCountResponse>(Arena*);
template<> ::clarifai::api::SingleInputResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleInputResponse>(Arena*);
template<> ::clarifai::api::SingleKeyResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleKeyResponse>(Arena*);
template<> ::clarifai::api::SingleLabelOrderResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleLabelOrderResponse>(Arena*);
template<> ::clarifai::api::SingleModelResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleModelResponse>(Arena*);
template<> ::clarifai::api::SingleModelTypeResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleModelTypeResponse>(Arena*);
template<> ::clarifai::api::SingleModelVersionInputExampleResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleModelVersionInputExampleResponse>(Arena*);
template<> ::clarifai::api::SingleModelVersionResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleModelVersionResponse>(Arena*);
template<> ::clarifai::api::SinglePasswordValidationResponse* Arena::CreateMaybeMessage<::clarifai::api::SinglePasswordValidationResponse>(Arena*);
template<> ::clarifai::api::SingleSearchResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleSearchResponse>(Arena*);
template<> ::clarifai::api::SingleStatusCodeResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleStatusCodeResponse>(Arena*);
template<> ::clarifai::api::SingleTaskCountResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleTaskCountResponse>(Arena*);
template<> ::clarifai::api::SingleTaskResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleTaskResponse>(Arena*);
template<> ::clarifai::api::SingleWorkflowResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleWorkflowResponse>(Arena*);
template<> ::clarifai::api::SingleWorkflowVersionResponse* Arena::CreateMaybeMessage<::clarifai::api::SingleWorkflowVersionResponse>(Arena*);
template<> ::clarifai::api::StreamInputsRequest* Arena::CreateMaybeMessage<::clarifai::api::StreamInputsRequest>(Arena*);
template<> ::clarifai::api::WorkflowVersionPublishRequest* Arena::CreateMaybeMessage<::clarifai::api::WorkflowVersionPublishRequest>(Arena*);
template<> ::clarifai::api::WorkflowVersionUnPublishRequest* Arena::CreateMaybeMessage<::clarifai::api::WorkflowVersionUnPublishRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clarifai {
namespace api {

enum OrganizationInvitationStatus : int {
  NOT_SET = 0,
  PENDING = 1,
  ACCEPTED = 2,
  CANCELLED = 3,
  DECLINED = 4,
  EXPIRED = 5,
  OrganizationInvitationStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrganizationInvitationStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrganizationInvitationStatus_IsValid(int value);
constexpr OrganizationInvitationStatus OrganizationInvitationStatus_MIN = NOT_SET;
constexpr OrganizationInvitationStatus OrganizationInvitationStatus_MAX = EXPIRED;
constexpr int OrganizationInvitationStatus_ARRAYSIZE = OrganizationInvitationStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrganizationInvitationStatus_descriptor();
template<typename T>
inline const std::string& OrganizationInvitationStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrganizationInvitationStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrganizationInvitationStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrganizationInvitationStatus_descriptor(), enum_t_value);
}
inline bool OrganizationInvitationStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrganizationInvitationStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrganizationInvitationStatus>(
    OrganizationInvitationStatus_descriptor(), name, value);
}
// ===================================================================

class Pagination final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Pagination) */ {
 public:
  inline Pagination() : Pagination(nullptr) {}
  ~Pagination() override;
  explicit constexpr Pagination(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pagination(const Pagination& from);
  Pagination(Pagination&& from) noexcept
    : Pagination() {
    *this = ::std::move(from);
  }

  inline Pagination& operator=(const Pagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pagination& operator=(Pagination&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pagination& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pagination* internal_default_instance() {
    return reinterpret_cast<const Pagination*>(
               &_Pagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pagination& a, Pagination& b) {
    a.Swap(&b);
  }
  inline void Swap(Pagination* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pagination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pagination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pagination>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pagination& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pagination& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pagination* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Pagination";
  }
  protected:
  explicit Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kPerPageFieldNumber = 2,
  };
  // uint32 page = 1;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 2;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Pagination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAnnotationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetAnnotationRequest) */ {
 public:
  inline GetAnnotationRequest() : GetAnnotationRequest(nullptr) {}
  ~GetAnnotationRequest() override;
  explicit constexpr GetAnnotationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAnnotationRequest(const GetAnnotationRequest& from);
  GetAnnotationRequest(GetAnnotationRequest&& from) noexcept
    : GetAnnotationRequest() {
    *this = ::std::move(from);
  }

  inline GetAnnotationRequest& operator=(const GetAnnotationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAnnotationRequest& operator=(GetAnnotationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAnnotationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAnnotationRequest* internal_default_instance() {
    return reinterpret_cast<const GetAnnotationRequest*>(
               &_GetAnnotationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetAnnotationRequest& a, GetAnnotationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAnnotationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAnnotationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAnnotationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAnnotationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAnnotationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAnnotationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAnnotationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetAnnotationRequest";
  }
  protected:
  explicit GetAnnotationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationIdFieldNumber = 2,
    kInputIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string annotation_id = 2;
  void clear_annotation_id();
  const std::string& annotation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_annotation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_annotation_id();
  PROTOBUF_NODISCARD std::string* release_annotation_id();
  void set_allocated_annotation_id(std::string* annotation_id);
  private:
  const std::string& _internal_annotation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annotation_id(const std::string& value);
  std::string* _internal_mutable_annotation_id();
  public:

  // string input_id = 3;
  void clear_input_id();
  const std::string& input_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_id();
  PROTOBUF_NODISCARD std::string* release_input_id();
  void set_allocated_input_id(std::string* input_id);
  private:
  const std::string& _internal_input_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_id(const std::string& value);
  std::string* _internal_mutable_input_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetAnnotationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annotation_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAnnotationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAnnotationsRequest) */ {
 public:
  inline ListAnnotationsRequest() : ListAnnotationsRequest(nullptr) {}
  ~ListAnnotationsRequest() override;
  explicit constexpr ListAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAnnotationsRequest(const ListAnnotationsRequest& from);
  ListAnnotationsRequest(ListAnnotationsRequest&& from) noexcept
    : ListAnnotationsRequest() {
    *this = ::std::move(from);
  }

  inline ListAnnotationsRequest& operator=(const ListAnnotationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAnnotationsRequest& operator=(ListAnnotationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAnnotationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAnnotationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAnnotationsRequest*>(
               &_ListAnnotationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListAnnotationsRequest& a, ListAnnotationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAnnotationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAnnotationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAnnotationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAnnotationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAnnotationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListAnnotationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAnnotationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAnnotationsRequest";
  }
  protected:
  explicit ListAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kInputIdsFieldNumber = 3,
    kStatusesFieldNumber = 5,
    kUserIdsFieldNumber = 9,
    kModelVersionIdsFieldNumber = 10,
    kTaskIdFieldNumber = 11,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 7,
    kPerPageFieldNumber = 8,
    kListAllAnnotationsFieldNumber = 6,
    kReturnModelOutputFieldNumber = 12,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // repeated string input_ids = 3;
  int input_ids_size() const;
  private:
  int _internal_input_ids_size() const;
  public:
  void clear_input_ids();
  const std::string& input_ids(int index) const;
  std::string* mutable_input_ids(int index);
  void set_input_ids(int index, const std::string& value);
  void set_input_ids(int index, std::string&& value);
  void set_input_ids(int index, const char* value);
  void set_input_ids(int index, const char* value, size_t size);
  std::string* add_input_ids();
  void add_input_ids(const std::string& value);
  void add_input_ids(std::string&& value);
  void add_input_ids(const char* value);
  void add_input_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_ids();
  private:
  const std::string& _internal_input_ids(int index) const;
  std::string* _internal_add_input_ids();
  public:

  // repeated .clarifai.api.status.Status statuses = 5;
  int statuses_size() const;
  private:
  int _internal_statuses_size() const;
  public:
  void clear_statuses();
  ::clarifai::api::status::Status* mutable_statuses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >*
      mutable_statuses();
  private:
  const ::clarifai::api::status::Status& _internal_statuses(int index) const;
  ::clarifai::api::status::Status* _internal_add_statuses();
  public:
  const ::clarifai::api::status::Status& statuses(int index) const;
  ::clarifai::api::status::Status* add_statuses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >&
      statuses() const;

  // repeated string user_ids = 9;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // repeated string model_version_ids = 10;
  int model_version_ids_size() const;
  private:
  int _internal_model_version_ids_size() const;
  public:
  void clear_model_version_ids();
  const std::string& model_version_ids(int index) const;
  std::string* mutable_model_version_ids(int index);
  void set_model_version_ids(int index, const std::string& value);
  void set_model_version_ids(int index, std::string&& value);
  void set_model_version_ids(int index, const char* value);
  void set_model_version_ids(int index, const char* value, size_t size);
  std::string* add_model_version_ids();
  void add_model_version_ids(const std::string& value);
  void add_model_version_ids(std::string&& value);
  void add_model_version_ids(const char* value);
  void add_model_version_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& model_version_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_model_version_ids();
  private:
  const std::string& _internal_model_version_ids(int index) const;
  std::string* _internal_add_model_version_ids();
  public:

  // string task_id = 11;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 7;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 8;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // bool list_all_annotations = 6;
  void clear_list_all_annotations();
  bool list_all_annotations() const;
  void set_list_all_annotations(bool value);
  private:
  bool _internal_list_all_annotations() const;
  void _internal_set_list_all_annotations(bool value);
  public:

  // bool return_model_output = 12;
  void clear_return_model_output();
  bool return_model_output() const;
  void set_return_model_output(bool value);
  private:
  bool _internal_return_model_output() const;
  void _internal_set_return_model_output(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAnnotationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status > statuses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> model_version_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  bool list_all_annotations_;
  bool return_model_output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAnnotationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAnnotationsRequest) */ {
 public:
  inline PostAnnotationsRequest() : PostAnnotationsRequest(nullptr) {}
  ~PostAnnotationsRequest() override;
  explicit constexpr PostAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostAnnotationsRequest(const PostAnnotationsRequest& from);
  PostAnnotationsRequest(PostAnnotationsRequest&& from) noexcept
    : PostAnnotationsRequest() {
    *this = ::std::move(from);
  }

  inline PostAnnotationsRequest& operator=(const PostAnnotationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAnnotationsRequest& operator=(PostAnnotationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostAnnotationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostAnnotationsRequest* internal_default_instance() {
    return reinterpret_cast<const PostAnnotationsRequest*>(
               &_PostAnnotationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PostAnnotationsRequest& a, PostAnnotationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAnnotationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostAnnotationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostAnnotationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostAnnotationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostAnnotationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostAnnotationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAnnotationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAnnotationsRequest";
  }
  protected:
  explicit PostAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Annotation annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  ::clarifai::api::Annotation* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >*
      mutable_annotations();
  private:
  const ::clarifai::api::Annotation& _internal_annotations(int index) const;
  ::clarifai::api::Annotation* _internal_add_annotations();
  public:
  const ::clarifai::api::Annotation& annotations(int index) const;
  ::clarifai::api::Annotation* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >&
      annotations() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAnnotationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation > annotations_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchAnnotationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchAnnotationsRequest) */ {
 public:
  inline PatchAnnotationsRequest() : PatchAnnotationsRequest(nullptr) {}
  ~PatchAnnotationsRequest() override;
  explicit constexpr PatchAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchAnnotationsRequest(const PatchAnnotationsRequest& from);
  PatchAnnotationsRequest(PatchAnnotationsRequest&& from) noexcept
    : PatchAnnotationsRequest() {
    *this = ::std::move(from);
  }

  inline PatchAnnotationsRequest& operator=(const PatchAnnotationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchAnnotationsRequest& operator=(PatchAnnotationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchAnnotationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchAnnotationsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchAnnotationsRequest*>(
               &_PatchAnnotationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PatchAnnotationsRequest& a, PatchAnnotationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchAnnotationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchAnnotationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchAnnotationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchAnnotationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchAnnotationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchAnnotationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchAnnotationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchAnnotationsRequest";
  }
  protected:
  explicit PatchAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Annotation annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  ::clarifai::api::Annotation* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >*
      mutable_annotations();
  private:
  const ::clarifai::api::Annotation& _internal_annotations(int index) const;
  ::clarifai::api::Annotation* _internal_add_annotations();
  public:
  const ::clarifai::api::Annotation& annotations(int index) const;
  ::clarifai::api::Annotation* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >&
      annotations() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchAnnotationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchAnnotationsStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchAnnotationsStatusRequest) */ {
 public:
  inline PatchAnnotationsStatusRequest() : PatchAnnotationsStatusRequest(nullptr) {}
  ~PatchAnnotationsStatusRequest() override;
  explicit constexpr PatchAnnotationsStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchAnnotationsStatusRequest(const PatchAnnotationsStatusRequest& from);
  PatchAnnotationsStatusRequest(PatchAnnotationsStatusRequest&& from) noexcept
    : PatchAnnotationsStatusRequest() {
    *this = ::std::move(from);
  }

  inline PatchAnnotationsStatusRequest& operator=(const PatchAnnotationsStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchAnnotationsStatusRequest& operator=(PatchAnnotationsStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchAnnotationsStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchAnnotationsStatusRequest* internal_default_instance() {
    return reinterpret_cast<const PatchAnnotationsStatusRequest*>(
               &_PatchAnnotationsStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PatchAnnotationsStatusRequest& a, PatchAnnotationsStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchAnnotationsStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchAnnotationsStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchAnnotationsStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchAnnotationsStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchAnnotationsStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchAnnotationsStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchAnnotationsStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchAnnotationsStatusRequest";
  }
  protected:
  explicit PatchAnnotationsStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 3,
    kTaskIdFieldNumber = 4,
    kActionFieldNumber = 5,
    kUserAppIdFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // repeated string user_ids = 3;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // string task_id = 4;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // string action = 5;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.status.StatusCode status_code = 2;
  void clear_status_code();
  ::clarifai::api::status::StatusCode status_code() const;
  void set_status_code(::clarifai::api::status::StatusCode value);
  private:
  ::clarifai::api::status::StatusCode _internal_status_code() const;
  void _internal_set_status_code(::clarifai::api::status::StatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchAnnotationsStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  int status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchAnnotationsStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchAnnotationsStatusResponse) */ {
 public:
  inline PatchAnnotationsStatusResponse() : PatchAnnotationsStatusResponse(nullptr) {}
  ~PatchAnnotationsStatusResponse() override;
  explicit constexpr PatchAnnotationsStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchAnnotationsStatusResponse(const PatchAnnotationsStatusResponse& from);
  PatchAnnotationsStatusResponse(PatchAnnotationsStatusResponse&& from) noexcept
    : PatchAnnotationsStatusResponse() {
    *this = ::std::move(from);
  }

  inline PatchAnnotationsStatusResponse& operator=(const PatchAnnotationsStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchAnnotationsStatusResponse& operator=(PatchAnnotationsStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchAnnotationsStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchAnnotationsStatusResponse* internal_default_instance() {
    return reinterpret_cast<const PatchAnnotationsStatusResponse*>(
               &_PatchAnnotationsStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PatchAnnotationsStatusResponse& a, PatchAnnotationsStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchAnnotationsStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchAnnotationsStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchAnnotationsStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchAnnotationsStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchAnnotationsStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchAnnotationsStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchAnnotationsStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchAnnotationsStatusResponse";
  }
  protected:
  explicit PatchAnnotationsStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 2,
    kStatusFieldNumber = 1,
    kUpdatedCountFieldNumber = 3,
  };
  // repeated string user_ids = 2;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // uint32 updated_count = 3;
  void clear_updated_count();
  uint32_t updated_count() const;
  void set_updated_count(uint32_t value);
  private:
  uint32_t _internal_updated_count() const;
  void _internal_set_updated_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchAnnotationsStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  ::clarifai::api::status::Status* status_;
  uint32_t updated_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteAnnotationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteAnnotationRequest) */ {
 public:
  inline DeleteAnnotationRequest() : DeleteAnnotationRequest(nullptr) {}
  ~DeleteAnnotationRequest() override;
  explicit constexpr DeleteAnnotationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAnnotationRequest(const DeleteAnnotationRequest& from);
  DeleteAnnotationRequest(DeleteAnnotationRequest&& from) noexcept
    : DeleteAnnotationRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAnnotationRequest& operator=(const DeleteAnnotationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAnnotationRequest& operator=(DeleteAnnotationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAnnotationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAnnotationRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAnnotationRequest*>(
               &_DeleteAnnotationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteAnnotationRequest& a, DeleteAnnotationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAnnotationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAnnotationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAnnotationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAnnotationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAnnotationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteAnnotationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAnnotationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteAnnotationRequest";
  }
  protected:
  explicit DeleteAnnotationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputIdFieldNumber = 2,
    kAnnotationIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string input_id = 2;
  void clear_input_id();
  const std::string& input_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_id();
  PROTOBUF_NODISCARD std::string* release_input_id();
  void set_allocated_input_id(std::string* input_id);
  private:
  const std::string& _internal_input_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_id(const std::string& value);
  std::string* _internal_mutable_input_id();
  public:

  // string annotation_id = 3;
  void clear_annotation_id();
  const std::string& annotation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_annotation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_annotation_id();
  PROTOBUF_NODISCARD std::string* release_annotation_id();
  void set_allocated_annotation_id(std::string* annotation_id);
  private:
  const std::string& _internal_annotation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annotation_id(const std::string& value);
  std::string* _internal_mutable_annotation_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteAnnotationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annotation_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteAnnotationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteAnnotationsRequest) */ {
 public:
  inline DeleteAnnotationsRequest() : DeleteAnnotationsRequest(nullptr) {}
  ~DeleteAnnotationsRequest() override;
  explicit constexpr DeleteAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAnnotationsRequest(const DeleteAnnotationsRequest& from);
  DeleteAnnotationsRequest(DeleteAnnotationsRequest&& from) noexcept
    : DeleteAnnotationsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAnnotationsRequest& operator=(const DeleteAnnotationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAnnotationsRequest& operator=(DeleteAnnotationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAnnotationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAnnotationsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAnnotationsRequest*>(
               &_DeleteAnnotationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteAnnotationsRequest& a, DeleteAnnotationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAnnotationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAnnotationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAnnotationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAnnotationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAnnotationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteAnnotationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAnnotationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteAnnotationsRequest";
  }
  protected:
  explicit DeleteAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kInputIdsFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // repeated string input_ids = 3;
  int input_ids_size() const;
  private:
  int _internal_input_ids_size() const;
  public:
  void clear_input_ids();
  const std::string& input_ids(int index) const;
  std::string* mutable_input_ids(int index);
  void set_input_ids(int index, const std::string& value);
  void set_input_ids(int index, std::string&& value);
  void set_input_ids(int index, const char* value);
  void set_input_ids(int index, const char* value, size_t size);
  std::string* add_input_ids();
  void add_input_ids(const std::string& value);
  void add_input_ids(std::string&& value);
  void add_input_ids(const char* value);
  void add_input_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_ids();
  private:
  const std::string& _internal_input_ids(int index) const;
  std::string* _internal_add_input_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteAnnotationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleAnnotationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleAnnotationResponse) */ {
 public:
  inline SingleAnnotationResponse() : SingleAnnotationResponse(nullptr) {}
  ~SingleAnnotationResponse() override;
  explicit constexpr SingleAnnotationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleAnnotationResponse(const SingleAnnotationResponse& from);
  SingleAnnotationResponse(SingleAnnotationResponse&& from) noexcept
    : SingleAnnotationResponse() {
    *this = ::std::move(from);
  }

  inline SingleAnnotationResponse& operator=(const SingleAnnotationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleAnnotationResponse& operator=(SingleAnnotationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleAnnotationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleAnnotationResponse* internal_default_instance() {
    return reinterpret_cast<const SingleAnnotationResponse*>(
               &_SingleAnnotationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SingleAnnotationResponse& a, SingleAnnotationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleAnnotationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleAnnotationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleAnnotationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleAnnotationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleAnnotationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleAnnotationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleAnnotationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleAnnotationResponse";
  }
  protected:
  explicit SingleAnnotationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kAnnotationFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.Annotation annotation = 2;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::clarifai::api::Annotation& annotation() const;
  PROTOBUF_NODISCARD ::clarifai::api::Annotation* release_annotation();
  ::clarifai::api::Annotation* mutable_annotation();
  void set_allocated_annotation(::clarifai::api::Annotation* annotation);
  private:
  const ::clarifai::api::Annotation& _internal_annotation() const;
  ::clarifai::api::Annotation* _internal_mutable_annotation();
  public:
  void unsafe_arena_set_allocated_annotation(
      ::clarifai::api::Annotation* annotation);
  ::clarifai::api::Annotation* unsafe_arena_release_annotation();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleAnnotationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Annotation* annotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiAnnotationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiAnnotationResponse) */ {
 public:
  inline MultiAnnotationResponse() : MultiAnnotationResponse(nullptr) {}
  ~MultiAnnotationResponse() override;
  explicit constexpr MultiAnnotationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiAnnotationResponse(const MultiAnnotationResponse& from);
  MultiAnnotationResponse(MultiAnnotationResponse&& from) noexcept
    : MultiAnnotationResponse() {
    *this = ::std::move(from);
  }

  inline MultiAnnotationResponse& operator=(const MultiAnnotationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAnnotationResponse& operator=(MultiAnnotationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiAnnotationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiAnnotationResponse* internal_default_instance() {
    return reinterpret_cast<const MultiAnnotationResponse*>(
               &_MultiAnnotationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MultiAnnotationResponse& a, MultiAnnotationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiAnnotationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiAnnotationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiAnnotationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiAnnotationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiAnnotationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiAnnotationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiAnnotationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiAnnotationResponse";
  }
  protected:
  explicit MultiAnnotationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  ::clarifai::api::Annotation* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >*
      mutable_annotations();
  private:
  const ::clarifai::api::Annotation& _internal_annotations(int index) const;
  ::clarifai::api::Annotation* _internal_add_annotations();
  public:
  const ::clarifai::api::Annotation& annotations(int index) const;
  ::clarifai::api::Annotation* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >&
      annotations() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiAnnotationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation > annotations_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAppRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetAppRequest) */ {
 public:
  inline GetAppRequest() : GetAppRequest(nullptr) {}
  ~GetAppRequest() override;
  explicit constexpr GetAppRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppRequest(const GetAppRequest& from);
  GetAppRequest(GetAppRequest&& from) noexcept
    : GetAppRequest() {
    *this = ::std::move(from);
  }

  inline GetAppRequest& operator=(const GetAppRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppRequest& operator=(GetAppRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAppRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppRequest* internal_default_instance() {
    return reinterpret_cast<const GetAppRequest*>(
               &_GetAppRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetAppRequest& a, GetAppRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAppRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAppRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAppRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAppRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetAppRequest";
  }
  protected:
  explicit GetAppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalFieldsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string additional_fields = 2;
  int additional_fields_size() const;
  private:
  int _internal_additional_fields_size() const;
  public:
  void clear_additional_fields();
  const std::string& additional_fields(int index) const;
  std::string* mutable_additional_fields(int index);
  void set_additional_fields(int index, const std::string& value);
  void set_additional_fields(int index, std::string&& value);
  void set_additional_fields(int index, const char* value);
  void set_additional_fields(int index, const char* value, size_t size);
  std::string* add_additional_fields();
  void add_additional_fields(const std::string& value);
  void add_additional_fields(std::string&& value);
  void add_additional_fields(const char* value);
  void add_additional_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& additional_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_additional_fields();
  private:
  const std::string& _internal_additional_fields(int index) const;
  std::string* _internal_add_additional_fields();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetAppRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> additional_fields_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAppsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAppsRequest) */ {
 public:
  inline ListAppsRequest() : ListAppsRequest(nullptr) {}
  ~ListAppsRequest() override;
  explicit constexpr ListAppsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAppsRequest(const ListAppsRequest& from);
  ListAppsRequest(ListAppsRequest&& from) noexcept
    : ListAppsRequest() {
    *this = ::std::move(from);
  }

  inline ListAppsRequest& operator=(const ListAppsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAppsRequest& operator=(ListAppsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAppsRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SortByCase {
    kSortByName = 6,
    kSortByModifiedAt = 7,
    SORT_BY_NOT_SET = 0,
  };

  static inline const ListAppsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAppsRequest*>(
               &_ListAppsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListAppsRequest& a, ListAppsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAppsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAppsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAppsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAppsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAppsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListAppsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAppsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAppsRequest";
  }
  protected:
  explicit ListAppsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalFieldsFieldNumber = 10,
    kNameFieldNumber = 4,
    kQueryFieldNumber = 8,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
    kSortAscendingFieldNumber = 5,
    kFeaturedOnlyFieldNumber = 9,
    kStarredOnlyFieldNumber = 11,
    kSortByNameFieldNumber = 6,
    kSortByModifiedAtFieldNumber = 7,
  };
  // repeated string additional_fields = 10;
  int additional_fields_size() const;
  private:
  int _internal_additional_fields_size() const;
  public:
  void clear_additional_fields();
  const std::string& additional_fields(int index) const;
  std::string* mutable_additional_fields(int index);
  void set_additional_fields(int index, const std::string& value);
  void set_additional_fields(int index, std::string&& value);
  void set_additional_fields(int index, const char* value);
  void set_additional_fields(int index, const char* value, size_t size);
  std::string* add_additional_fields();
  void add_additional_fields(const std::string& value);
  void add_additional_fields(std::string&& value);
  void add_additional_fields(const char* value);
  void add_additional_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& additional_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_additional_fields();
  private:
  const std::string& _internal_additional_fields(int index) const;
  std::string* _internal_add_additional_fields();
  public:

  // string name = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_name();
  PROTOBUF_DEPRECATED const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_name(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_name();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_name();
  PROTOBUF_DEPRECATED void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string query = 8;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // bool sort_ascending = 5;
  void clear_sort_ascending();
  bool sort_ascending() const;
  void set_sort_ascending(bool value);
  private:
  bool _internal_sort_ascending() const;
  void _internal_set_sort_ascending(bool value);
  public:

  // bool featured_only = 9;
  void clear_featured_only();
  bool featured_only() const;
  void set_featured_only(bool value);
  private:
  bool _internal_featured_only() const;
  void _internal_set_featured_only(bool value);
  public:

  // bool starred_only = 11;
  void clear_starred_only();
  bool starred_only() const;
  void set_starred_only(bool value);
  private:
  bool _internal_starred_only() const;
  void _internal_set_starred_only(bool value);
  public:

  // bool sort_by_name = 6;
  bool has_sort_by_name() const;
  private:
  bool _internal_has_sort_by_name() const;
  public:
  void clear_sort_by_name();
  bool sort_by_name() const;
  void set_sort_by_name(bool value);
  private:
  bool _internal_sort_by_name() const;
  void _internal_set_sort_by_name(bool value);
  public:

  // bool sort_by_modified_at = 7;
  bool has_sort_by_modified_at() const;
  private:
  bool _internal_has_sort_by_modified_at() const;
  public:
  void clear_sort_by_modified_at();
  bool sort_by_modified_at() const;
  void set_sort_by_modified_at(bool value);
  private:
  bool _internal_sort_by_modified_at() const;
  void _internal_set_sort_by_modified_at(bool value);
  public:

  void clear_sort_by();
  SortByCase sort_by_case() const;
  // @@protoc_insertion_point(class_scope:clarifai.api.ListAppsRequest)
 private:
  class _Internal;
  void set_has_sort_by_name();
  void set_has_sort_by_modified_at();

  inline bool has_sort_by() const;
  inline void clear_has_sort_by();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> additional_fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  bool sort_ascending_;
  bool featured_only_;
  bool starred_only_;
  union SortByUnion {
    constexpr SortByUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool sort_by_name_;
    bool sort_by_modified_at_;
  } sort_by_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAppsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAppsRequest) */ {
 public:
  inline PostAppsRequest() : PostAppsRequest(nullptr) {}
  ~PostAppsRequest() override;
  explicit constexpr PostAppsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostAppsRequest(const PostAppsRequest& from);
  PostAppsRequest(PostAppsRequest&& from) noexcept
    : PostAppsRequest() {
    *this = ::std::move(from);
  }

  inline PostAppsRequest& operator=(const PostAppsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAppsRequest& operator=(PostAppsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostAppsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostAppsRequest* internal_default_instance() {
    return reinterpret_cast<const PostAppsRequest*>(
               &_PostAppsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PostAppsRequest& a, PostAppsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAppsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostAppsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostAppsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostAppsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostAppsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostAppsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAppsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAppsRequest";
  }
  protected:
  explicit PostAppsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.App apps = 2;
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::clarifai::api::App* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
      mutable_apps();
  private:
  const ::clarifai::api::App& _internal_apps(int index) const;
  ::clarifai::api::App* _internal_add_apps();
  public:
  const ::clarifai::api::App& apps(int index) const;
  ::clarifai::api::App* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
      apps() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAppsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App > apps_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteAppRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteAppRequest) */ {
 public:
  inline DeleteAppRequest() : DeleteAppRequest(nullptr) {}
  ~DeleteAppRequest() override;
  explicit constexpr DeleteAppRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAppRequest(const DeleteAppRequest& from);
  DeleteAppRequest(DeleteAppRequest&& from) noexcept
    : DeleteAppRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAppRequest& operator=(const DeleteAppRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAppRequest& operator=(DeleteAppRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAppRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAppRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAppRequest*>(
               &_DeleteAppRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeleteAppRequest& a, DeleteAppRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAppRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAppRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAppRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAppRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAppRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteAppRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAppRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteAppRequest";
  }
  protected:
  explicit DeleteAppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteAppRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchAppsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchAppsRequest) */ {
 public:
  inline PatchAppsRequest() : PatchAppsRequest(nullptr) {}
  ~PatchAppsRequest() override;
  explicit constexpr PatchAppsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchAppsRequest(const PatchAppsRequest& from);
  PatchAppsRequest(PatchAppsRequest&& from) noexcept
    : PatchAppsRequest() {
    *this = ::std::move(from);
  }

  inline PatchAppsRequest& operator=(const PatchAppsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchAppsRequest& operator=(PatchAppsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchAppsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchAppsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchAppsRequest*>(
               &_PatchAppsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PatchAppsRequest& a, PatchAppsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchAppsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchAppsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchAppsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchAppsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchAppsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchAppsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchAppsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchAppsRequest";
  }
  protected:
  explicit PatchAppsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kMetadataActionFieldNumber = 4,
    kReindexFieldNumber = 5,
  };
  // repeated .clarifai.api.App apps = 2;
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::clarifai::api::App* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
      mutable_apps();
  private:
  const ::clarifai::api::App& _internal_apps(int index) const;
  ::clarifai::api::App* _internal_add_apps();
  public:
  const ::clarifai::api::App& apps(int index) const;
  ::clarifai::api::App* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
      apps() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.PatchAction metadata_action = 4;
  bool has_metadata_action() const;
  private:
  bool _internal_has_metadata_action() const;
  public:
  void clear_metadata_action();
  const ::clarifai::api::PatchAction& metadata_action() const;
  PROTOBUF_NODISCARD ::clarifai::api::PatchAction* release_metadata_action();
  ::clarifai::api::PatchAction* mutable_metadata_action();
  void set_allocated_metadata_action(::clarifai::api::PatchAction* metadata_action);
  private:
  const ::clarifai::api::PatchAction& _internal_metadata_action() const;
  ::clarifai::api::PatchAction* _internal_mutable_metadata_action();
  public:
  void unsafe_arena_set_allocated_metadata_action(
      ::clarifai::api::PatchAction* metadata_action);
  ::clarifai::api::PatchAction* unsafe_arena_release_metadata_action();

  // bool reindex = 5;
  void clear_reindex();
  bool reindex() const;
  void set_reindex(bool value);
  private:
  bool _internal_reindex() const;
  void _internal_set_reindex(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchAppsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App > apps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::PatchAction* metadata_action_;
  bool reindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAppsSearchesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAppsSearchesRequest) */ {
 public:
  inline PostAppsSearchesRequest() : PostAppsSearchesRequest(nullptr) {}
  ~PostAppsSearchesRequest() override;
  explicit constexpr PostAppsSearchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostAppsSearchesRequest(const PostAppsSearchesRequest& from);
  PostAppsSearchesRequest(PostAppsSearchesRequest&& from) noexcept
    : PostAppsSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PostAppsSearchesRequest& operator=(const PostAppsSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAppsSearchesRequest& operator=(PostAppsSearchesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostAppsSearchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostAppsSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PostAppsSearchesRequest*>(
               &_PostAppsSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PostAppsSearchesRequest& a, PostAppsSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAppsSearchesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostAppsSearchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostAppsSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostAppsSearchesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostAppsSearchesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostAppsSearchesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAppsSearchesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAppsSearchesRequest";
  }
  protected:
  explicit PostAppsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kAppQueryFieldNumber = 2,
    kPaginationFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.AppQuery app_query = 2;
  bool has_app_query() const;
  private:
  bool _internal_has_app_query() const;
  public:
  void clear_app_query();
  const ::clarifai::api::AppQuery& app_query() const;
  PROTOBUF_NODISCARD ::clarifai::api::AppQuery* release_app_query();
  ::clarifai::api::AppQuery* mutable_app_query();
  void set_allocated_app_query(::clarifai::api::AppQuery* app_query);
  private:
  const ::clarifai::api::AppQuery& _internal_app_query() const;
  ::clarifai::api::AppQuery* _internal_mutable_app_query();
  public:
  void unsafe_arena_set_allocated_app_query(
      ::clarifai::api::AppQuery* app_query);
  ::clarifai::api::AppQuery* unsafe_arena_release_app_query();

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::clarifai::api::Pagination* pagination);
  ::clarifai::api::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAppsSearchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::AppQuery* app_query_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleAppResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleAppResponse) */ {
 public:
  inline SingleAppResponse() : SingleAppResponse(nullptr) {}
  ~SingleAppResponse() override;
  explicit constexpr SingleAppResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleAppResponse(const SingleAppResponse& from);
  SingleAppResponse(SingleAppResponse&& from) noexcept
    : SingleAppResponse() {
    *this = ::std::move(from);
  }

  inline SingleAppResponse& operator=(const SingleAppResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleAppResponse& operator=(SingleAppResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleAppResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleAppResponse* internal_default_instance() {
    return reinterpret_cast<const SingleAppResponse*>(
               &_SingleAppResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SingleAppResponse& a, SingleAppResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleAppResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleAppResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleAppResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleAppResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleAppResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleAppResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleAppResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleAppResponse";
  }
  protected:
  explicit SingleAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kAppFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.App app = 2;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const ::clarifai::api::App& app() const;
  PROTOBUF_NODISCARD ::clarifai::api::App* release_app();
  ::clarifai::api::App* mutable_app();
  void set_allocated_app(::clarifai::api::App* app);
  private:
  const ::clarifai::api::App& _internal_app() const;
  ::clarifai::api::App* _internal_mutable_app();
  public:
  void unsafe_arena_set_allocated_app(
      ::clarifai::api::App* app);
  ::clarifai::api::App* unsafe_arena_release_app();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleAppResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::App* app_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiAppResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiAppResponse) */ {
 public:
  inline MultiAppResponse() : MultiAppResponse(nullptr) {}
  ~MultiAppResponse() override;
  explicit constexpr MultiAppResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiAppResponse(const MultiAppResponse& from);
  MultiAppResponse(MultiAppResponse&& from) noexcept
    : MultiAppResponse() {
    *this = ::std::move(from);
  }

  inline MultiAppResponse& operator=(const MultiAppResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAppResponse& operator=(MultiAppResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiAppResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiAppResponse* internal_default_instance() {
    return reinterpret_cast<const MultiAppResponse*>(
               &_MultiAppResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MultiAppResponse& a, MultiAppResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiAppResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiAppResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiAppResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiAppResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiAppResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiAppResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiAppResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiAppResponse";
  }
  protected:
  explicit MultiAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::clarifai::api::App* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
      mutable_apps();
  private:
  const ::clarifai::api::App& _internal_apps(int index) const;
  ::clarifai::api::App* _internal_add_apps();
  public:
  const ::clarifai::api::App& apps(int index) const;
  ::clarifai::api::App* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
      apps() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiAppResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App > apps_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListCollaboratorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListCollaboratorsRequest) */ {
 public:
  inline ListCollaboratorsRequest() : ListCollaboratorsRequest(nullptr) {}
  ~ListCollaboratorsRequest() override;
  explicit constexpr ListCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCollaboratorsRequest(const ListCollaboratorsRequest& from);
  ListCollaboratorsRequest(ListCollaboratorsRequest&& from) noexcept
    : ListCollaboratorsRequest() {
    *this = ::std::move(from);
  }

  inline ListCollaboratorsRequest& operator=(const ListCollaboratorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCollaboratorsRequest& operator=(ListCollaboratorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCollaboratorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCollaboratorsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCollaboratorsRequest*>(
               &_ListCollaboratorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ListCollaboratorsRequest& a, ListCollaboratorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCollaboratorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCollaboratorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCollaboratorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCollaboratorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCollaboratorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListCollaboratorsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCollaboratorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListCollaboratorsRequest";
  }
  protected:
  explicit ListCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kListAllCollaboratorsFieldNumber = 2,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // bool list_all_collaborators = 2;
  void clear_list_all_collaborators();
  bool list_all_collaborators() const;
  void set_list_all_collaborators(bool value);
  private:
  bool _internal_list_all_collaborators() const;
  void _internal_set_list_all_collaborators(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListCollaboratorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool list_all_collaborators_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostCollaboratorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostCollaboratorsRequest) */ {
 public:
  inline PostCollaboratorsRequest() : PostCollaboratorsRequest(nullptr) {}
  ~PostCollaboratorsRequest() override;
  explicit constexpr PostCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostCollaboratorsRequest(const PostCollaboratorsRequest& from);
  PostCollaboratorsRequest(PostCollaboratorsRequest&& from) noexcept
    : PostCollaboratorsRequest() {
    *this = ::std::move(from);
  }

  inline PostCollaboratorsRequest& operator=(const PostCollaboratorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostCollaboratorsRequest& operator=(PostCollaboratorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostCollaboratorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostCollaboratorsRequest* internal_default_instance() {
    return reinterpret_cast<const PostCollaboratorsRequest*>(
               &_PostCollaboratorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PostCollaboratorsRequest& a, PostCollaboratorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostCollaboratorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostCollaboratorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostCollaboratorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostCollaboratorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostCollaboratorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostCollaboratorsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostCollaboratorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostCollaboratorsRequest";
  }
  protected:
  explicit PostCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollaboratorsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Collaborator collaborators = 2;
  int collaborators_size() const;
  private:
  int _internal_collaborators_size() const;
  public:
  void clear_collaborators();
  ::clarifai::api::Collaborator* mutable_collaborators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >*
      mutable_collaborators();
  private:
  const ::clarifai::api::Collaborator& _internal_collaborators(int index) const;
  ::clarifai::api::Collaborator* _internal_add_collaborators();
  public:
  const ::clarifai::api::Collaborator& collaborators(int index) const;
  ::clarifai::api::Collaborator* add_collaborators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >&
      collaborators() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostCollaboratorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator > collaborators_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchCollaboratorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchCollaboratorsRequest) */ {
 public:
  inline PatchCollaboratorsRequest() : PatchCollaboratorsRequest(nullptr) {}
  ~PatchCollaboratorsRequest() override;
  explicit constexpr PatchCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchCollaboratorsRequest(const PatchCollaboratorsRequest& from);
  PatchCollaboratorsRequest(PatchCollaboratorsRequest&& from) noexcept
    : PatchCollaboratorsRequest() {
    *this = ::std::move(from);
  }

  inline PatchCollaboratorsRequest& operator=(const PatchCollaboratorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchCollaboratorsRequest& operator=(PatchCollaboratorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchCollaboratorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchCollaboratorsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchCollaboratorsRequest*>(
               &_PatchCollaboratorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PatchCollaboratorsRequest& a, PatchCollaboratorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchCollaboratorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchCollaboratorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchCollaboratorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchCollaboratorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchCollaboratorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchCollaboratorsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchCollaboratorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchCollaboratorsRequest";
  }
  protected:
  explicit PatchCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollaboratorsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Collaborator collaborators = 2;
  int collaborators_size() const;
  private:
  int _internal_collaborators_size() const;
  public:
  void clear_collaborators();
  ::clarifai::api::Collaborator* mutable_collaborators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >*
      mutable_collaborators();
  private:
  const ::clarifai::api::Collaborator& _internal_collaborators(int index) const;
  ::clarifai::api::Collaborator* _internal_add_collaborators();
  public:
  const ::clarifai::api::Collaborator& collaborators(int index) const;
  ::clarifai::api::Collaborator* add_collaborators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >&
      collaborators() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchCollaboratorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator > collaborators_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteCollaboratorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteCollaboratorsRequest) */ {
 public:
  inline DeleteCollaboratorsRequest() : DeleteCollaboratorsRequest(nullptr) {}
  ~DeleteCollaboratorsRequest() override;
  explicit constexpr DeleteCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCollaboratorsRequest(const DeleteCollaboratorsRequest& from);
  DeleteCollaboratorsRequest(DeleteCollaboratorsRequest&& from) noexcept
    : DeleteCollaboratorsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCollaboratorsRequest& operator=(const DeleteCollaboratorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCollaboratorsRequest& operator=(DeleteCollaboratorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCollaboratorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCollaboratorsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCollaboratorsRequest*>(
               &_DeleteCollaboratorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DeleteCollaboratorsRequest& a, DeleteCollaboratorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCollaboratorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCollaboratorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCollaboratorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCollaboratorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCollaboratorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteCollaboratorsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCollaboratorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteCollaboratorsRequest";
  }
  protected:
  explicit DeleteCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollaboratorIdsFieldNumber = 2,
    kUserEmailsFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string collaborator_ids = 2;
  int collaborator_ids_size() const;
  private:
  int _internal_collaborator_ids_size() const;
  public:
  void clear_collaborator_ids();
  const std::string& collaborator_ids(int index) const;
  std::string* mutable_collaborator_ids(int index);
  void set_collaborator_ids(int index, const std::string& value);
  void set_collaborator_ids(int index, std::string&& value);
  void set_collaborator_ids(int index, const char* value);
  void set_collaborator_ids(int index, const char* value, size_t size);
  std::string* add_collaborator_ids();
  void add_collaborator_ids(const std::string& value);
  void add_collaborator_ids(std::string&& value);
  void add_collaborator_ids(const char* value);
  void add_collaborator_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& collaborator_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_collaborator_ids();
  private:
  const std::string& _internal_collaborator_ids(int index) const;
  std::string* _internal_add_collaborator_ids();
  public:

  // repeated string user_emails = 3;
  int user_emails_size() const;
  private:
  int _internal_user_emails_size() const;
  public:
  void clear_user_emails();
  const std::string& user_emails(int index) const;
  std::string* mutable_user_emails(int index);
  void set_user_emails(int index, const std::string& value);
  void set_user_emails(int index, std::string&& value);
  void set_user_emails(int index, const char* value);
  void set_user_emails(int index, const char* value, size_t size);
  std::string* add_user_emails();
  void add_user_emails(const std::string& value);
  void add_user_emails(std::string&& value);
  void add_user_emails(const char* value);
  void add_user_emails(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_emails() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_emails();
  private:
  const std::string& _internal_user_emails(int index) const;
  std::string* _internal_add_user_emails();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteCollaboratorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> collaborator_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_emails_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiCollaboratorsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiCollaboratorsResponse) */ {
 public:
  inline MultiCollaboratorsResponse() : MultiCollaboratorsResponse(nullptr) {}
  ~MultiCollaboratorsResponse() override;
  explicit constexpr MultiCollaboratorsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiCollaboratorsResponse(const MultiCollaboratorsResponse& from);
  MultiCollaboratorsResponse(MultiCollaboratorsResponse&& from) noexcept
    : MultiCollaboratorsResponse() {
    *this = ::std::move(from);
  }

  inline MultiCollaboratorsResponse& operator=(const MultiCollaboratorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiCollaboratorsResponse& operator=(MultiCollaboratorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiCollaboratorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiCollaboratorsResponse* internal_default_instance() {
    return reinterpret_cast<const MultiCollaboratorsResponse*>(
               &_MultiCollaboratorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MultiCollaboratorsResponse& a, MultiCollaboratorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiCollaboratorsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiCollaboratorsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiCollaboratorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiCollaboratorsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiCollaboratorsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiCollaboratorsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiCollaboratorsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiCollaboratorsResponse";
  }
  protected:
  explicit MultiCollaboratorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollaboratorsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Collaborator collaborators = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int collaborators_size() const;
  private:
  int _internal_collaborators_size() const;
  public:
  void clear_collaborators();
  ::clarifai::api::Collaborator* mutable_collaborators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >*
      mutable_collaborators();
  private:
  const ::clarifai::api::Collaborator& _internal_collaborators(int index) const;
  ::clarifai::api::Collaborator* _internal_add_collaborators();
  public:
  const ::clarifai::api::Collaborator& collaborators(int index) const;
  ::clarifai::api::Collaborator* add_collaborators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >&
      collaborators() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiCollaboratorsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator > collaborators_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListCollaborationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListCollaborationsRequest) */ {
 public:
  inline ListCollaborationsRequest() : ListCollaborationsRequest(nullptr) {}
  ~ListCollaborationsRequest() override;
  explicit constexpr ListCollaborationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCollaborationsRequest(const ListCollaborationsRequest& from);
  ListCollaborationsRequest(ListCollaborationsRequest&& from) noexcept
    : ListCollaborationsRequest() {
    *this = ::std::move(from);
  }

  inline ListCollaborationsRequest& operator=(const ListCollaborationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCollaborationsRequest& operator=(ListCollaborationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCollaborationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCollaborationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCollaborationsRequest*>(
               &_ListCollaborationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ListCollaborationsRequest& a, ListCollaborationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCollaborationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCollaborationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCollaborationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCollaborationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCollaborationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListCollaborationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCollaborationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListCollaborationsRequest";
  }
  protected:
  explicit ListCollaborationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListCollaborationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiCollaborationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiCollaborationsResponse) */ {
 public:
  inline MultiCollaborationsResponse() : MultiCollaborationsResponse(nullptr) {}
  ~MultiCollaborationsResponse() override;
  explicit constexpr MultiCollaborationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiCollaborationsResponse(const MultiCollaborationsResponse& from);
  MultiCollaborationsResponse(MultiCollaborationsResponse&& from) noexcept
    : MultiCollaborationsResponse() {
    *this = ::std::move(from);
  }

  inline MultiCollaborationsResponse& operator=(const MultiCollaborationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiCollaborationsResponse& operator=(MultiCollaborationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiCollaborationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiCollaborationsResponse* internal_default_instance() {
    return reinterpret_cast<const MultiCollaborationsResponse*>(
               &_MultiCollaborationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MultiCollaborationsResponse& a, MultiCollaborationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiCollaborationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiCollaborationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiCollaborationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiCollaborationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiCollaborationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiCollaborationsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiCollaborationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiCollaborationsResponse";
  }
  protected:
  explicit MultiCollaborationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollaborationsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Collaboration collaborations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int collaborations_size() const;
  private:
  int _internal_collaborations_size() const;
  public:
  void clear_collaborations();
  ::clarifai::api::Collaboration* mutable_collaborations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaboration >*
      mutable_collaborations();
  private:
  const ::clarifai::api::Collaboration& _internal_collaborations(int index) const;
  ::clarifai::api::Collaboration* _internal_add_collaborations();
  public:
  const ::clarifai::api::Collaboration& collaborations(int index) const;
  ::clarifai::api::Collaboration* add_collaborations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaboration >&
      collaborations() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiCollaborationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaboration > collaborations_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetStatusCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetStatusCodeRequest) */ {
 public:
  inline GetStatusCodeRequest() : GetStatusCodeRequest(nullptr) {}
  ~GetStatusCodeRequest() override;
  explicit constexpr GetStatusCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatusCodeRequest(const GetStatusCodeRequest& from);
  GetStatusCodeRequest(GetStatusCodeRequest&& from) noexcept
    : GetStatusCodeRequest() {
    *this = ::std::move(from);
  }

  inline GetStatusCodeRequest& operator=(const GetStatusCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusCodeRequest& operator=(GetStatusCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatusCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatusCodeRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatusCodeRequest*>(
               &_GetStatusCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetStatusCodeRequest& a, GetStatusCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusCodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatusCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatusCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatusCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetStatusCodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetStatusCodeRequest";
  }
  protected:
  explicit GetStatusCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeIdFieldNumber = 1,
  };
  // string status_code_id = 1;
  void clear_status_code_id();
  const std::string& status_code_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_code_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_code_id();
  PROTOBUF_NODISCARD std::string* release_status_code_id();
  void set_allocated_status_code_id(std::string* status_code_id);
  private:
  const std::string& _internal_status_code_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_code_id(const std::string& value);
  std::string* _internal_mutable_status_code_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetStatusCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_code_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListStatusCodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:clarifai.api.ListStatusCodesRequest) */ {
 public:
  inline ListStatusCodesRequest() : ListStatusCodesRequest(nullptr) {}
  explicit constexpr ListStatusCodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListStatusCodesRequest(const ListStatusCodesRequest& from);
  ListStatusCodesRequest(ListStatusCodesRequest&& from) noexcept
    : ListStatusCodesRequest() {
    *this = ::std::move(from);
  }

  inline ListStatusCodesRequest& operator=(const ListStatusCodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListStatusCodesRequest& operator=(ListStatusCodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListStatusCodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListStatusCodesRequest* internal_default_instance() {
    return reinterpret_cast<const ListStatusCodesRequest*>(
               &_ListStatusCodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ListStatusCodesRequest& a, ListStatusCodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListStatusCodesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListStatusCodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListStatusCodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListStatusCodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListStatusCodesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListStatusCodesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListStatusCodesRequest";
  }
  protected:
  explicit ListStatusCodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.api.ListStatusCodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleStatusCodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleStatusCodeResponse) */ {
 public:
  inline SingleStatusCodeResponse() : SingleStatusCodeResponse(nullptr) {}
  ~SingleStatusCodeResponse() override;
  explicit constexpr SingleStatusCodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleStatusCodeResponse(const SingleStatusCodeResponse& from);
  SingleStatusCodeResponse(SingleStatusCodeResponse&& from) noexcept
    : SingleStatusCodeResponse() {
    *this = ::std::move(from);
  }

  inline SingleStatusCodeResponse& operator=(const SingleStatusCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleStatusCodeResponse& operator=(SingleStatusCodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleStatusCodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleStatusCodeResponse* internal_default_instance() {
    return reinterpret_cast<const SingleStatusCodeResponse*>(
               &_SingleStatusCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SingleStatusCodeResponse& a, SingleStatusCodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleStatusCodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleStatusCodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleStatusCodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleStatusCodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleStatusCodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleStatusCodeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleStatusCodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleStatusCodeResponse";
  }
  protected:
  explicit SingleStatusCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleStatusCodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiStatusCodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiStatusCodeResponse) */ {
 public:
  inline MultiStatusCodeResponse() : MultiStatusCodeResponse(nullptr) {}
  ~MultiStatusCodeResponse() override;
  explicit constexpr MultiStatusCodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiStatusCodeResponse(const MultiStatusCodeResponse& from);
  MultiStatusCodeResponse(MultiStatusCodeResponse&& from) noexcept
    : MultiStatusCodeResponse() {
    *this = ::std::move(from);
  }

  inline MultiStatusCodeResponse& operator=(const MultiStatusCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiStatusCodeResponse& operator=(MultiStatusCodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiStatusCodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiStatusCodeResponse* internal_default_instance() {
    return reinterpret_cast<const MultiStatusCodeResponse*>(
               &_MultiStatusCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(MultiStatusCodeResponse& a, MultiStatusCodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiStatusCodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiStatusCodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiStatusCodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiStatusCodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiStatusCodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiStatusCodeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiStatusCodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiStatusCodeResponse";
  }
  protected:
  explicit MultiStatusCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.status.Status statuses = 2;
  int statuses_size() const;
  private:
  int _internal_statuses_size() const;
  public:
  void clear_statuses();
  ::clarifai::api::status::Status* mutable_statuses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >*
      mutable_statuses();
  private:
  const ::clarifai::api::status::Status& _internal_statuses(int index) const;
  ::clarifai::api::status::Status* _internal_add_statuses();
  public:
  const ::clarifai::api::status::Status& statuses(int index) const;
  ::clarifai::api::status::Status* add_statuses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >&
      statuses() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiStatusCodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status > statuses_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetConceptRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetConceptRequest) */ {
 public:
  inline GetConceptRequest() : GetConceptRequest(nullptr) {}
  ~GetConceptRequest() override;
  explicit constexpr GetConceptRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConceptRequest(const GetConceptRequest& from);
  GetConceptRequest(GetConceptRequest&& from) noexcept
    : GetConceptRequest() {
    *this = ::std::move(from);
  }

  inline GetConceptRequest& operator=(const GetConceptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConceptRequest& operator=(GetConceptRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConceptRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConceptRequest* internal_default_instance() {
    return reinterpret_cast<const GetConceptRequest*>(
               &_GetConceptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetConceptRequest& a, GetConceptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConceptRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConceptRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConceptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConceptRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConceptRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetConceptRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConceptRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetConceptRequest";
  }
  protected:
  explicit GetConceptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_concept_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_concept_id();
  PROTOBUF_NODISCARD std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetConceptRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListConceptsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListConceptsRequest) */ {
 public:
  inline ListConceptsRequest() : ListConceptsRequest(nullptr) {}
  ~ListConceptsRequest() override;
  explicit constexpr ListConceptsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConceptsRequest(const ListConceptsRequest& from);
  ListConceptsRequest(ListConceptsRequest&& from) noexcept
    : ListConceptsRequest() {
    *this = ::std::move(from);
  }

  inline ListConceptsRequest& operator=(const ListConceptsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConceptsRequest& operator=(ListConceptsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConceptsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConceptsRequest* internal_default_instance() {
    return reinterpret_cast<const ListConceptsRequest*>(
               &_ListConceptsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ListConceptsRequest& a, ListConceptsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConceptsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConceptsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConceptsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConceptsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConceptsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListConceptsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConceptsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListConceptsRequest";
  }
  protected:
  explicit ListConceptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListConceptsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostConceptsSearchesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostConceptsSearchesRequest) */ {
 public:
  inline PostConceptsSearchesRequest() : PostConceptsSearchesRequest(nullptr) {}
  ~PostConceptsSearchesRequest() override;
  explicit constexpr PostConceptsSearchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostConceptsSearchesRequest(const PostConceptsSearchesRequest& from);
  PostConceptsSearchesRequest(PostConceptsSearchesRequest&& from) noexcept
    : PostConceptsSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PostConceptsSearchesRequest& operator=(const PostConceptsSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostConceptsSearchesRequest& operator=(PostConceptsSearchesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostConceptsSearchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostConceptsSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PostConceptsSearchesRequest*>(
               &_PostConceptsSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PostConceptsSearchesRequest& a, PostConceptsSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostConceptsSearchesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostConceptsSearchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostConceptsSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostConceptsSearchesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostConceptsSearchesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostConceptsSearchesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostConceptsSearchesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostConceptsSearchesRequest";
  }
  protected:
  explicit PostConceptsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kConceptQueryFieldNumber = 2,
    kPaginationFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.ConceptQuery concept_query = 2;
  bool has_concept_query() const;
  private:
  bool _internal_has_concept_query() const;
  public:
  void clear_concept_query();
  const ::clarifai::api::ConceptQuery& concept_query() const;
  PROTOBUF_NODISCARD ::clarifai::api::ConceptQuery* release_concept_query();
  ::clarifai::api::ConceptQuery* mutable_concept_query();
  void set_allocated_concept_query(::clarifai::api::ConceptQuery* concept_query);
  private:
  const ::clarifai::api::ConceptQuery& _internal_concept_query() const;
  ::clarifai::api::ConceptQuery* _internal_mutable_concept_query();
  public:
  void unsafe_arena_set_allocated_concept_query(
      ::clarifai::api::ConceptQuery* concept_query);
  ::clarifai::api::ConceptQuery* unsafe_arena_release_concept_query();

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::clarifai::api::Pagination* pagination);
  ::clarifai::api::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostConceptsSearchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::ConceptQuery* concept_query_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostConceptsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostConceptsRequest) */ {
 public:
  inline PostConceptsRequest() : PostConceptsRequest(nullptr) {}
  ~PostConceptsRequest() override;
  explicit constexpr PostConceptsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostConceptsRequest(const PostConceptsRequest& from);
  PostConceptsRequest(PostConceptsRequest&& from) noexcept
    : PostConceptsRequest() {
    *this = ::std::move(from);
  }

  inline PostConceptsRequest& operator=(const PostConceptsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostConceptsRequest& operator=(PostConceptsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostConceptsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostConceptsRequest* internal_default_instance() {
    return reinterpret_cast<const PostConceptsRequest*>(
               &_PostConceptsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PostConceptsRequest& a, PostConceptsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostConceptsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostConceptsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostConceptsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostConceptsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostConceptsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostConceptsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostConceptsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostConceptsRequest";
  }
  protected:
  explicit PostConceptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Concept concepts = 2;
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostConceptsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchConceptsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchConceptsRequest) */ {
 public:
  inline PatchConceptsRequest() : PatchConceptsRequest(nullptr) {}
  ~PatchConceptsRequest() override;
  explicit constexpr PatchConceptsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchConceptsRequest(const PatchConceptsRequest& from);
  PatchConceptsRequest(PatchConceptsRequest&& from) noexcept
    : PatchConceptsRequest() {
    *this = ::std::move(from);
  }

  inline PatchConceptsRequest& operator=(const PatchConceptsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchConceptsRequest& operator=(PatchConceptsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchConceptsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchConceptsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchConceptsRequest*>(
               &_PatchConceptsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(PatchConceptsRequest& a, PatchConceptsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchConceptsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchConceptsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchConceptsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchConceptsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchConceptsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchConceptsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchConceptsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchConceptsRequest";
  }
  protected:
  explicit PatchConceptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Concept concepts = 2;
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchConceptsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetConceptCountsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetConceptCountsRequest) */ {
 public:
  inline GetConceptCountsRequest() : GetConceptCountsRequest(nullptr) {}
  ~GetConceptCountsRequest() override;
  explicit constexpr GetConceptCountsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConceptCountsRequest(const GetConceptCountsRequest& from);
  GetConceptCountsRequest(GetConceptCountsRequest&& from) noexcept
    : GetConceptCountsRequest() {
    *this = ::std::move(from);
  }

  inline GetConceptCountsRequest& operator=(const GetConceptCountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConceptCountsRequest& operator=(GetConceptCountsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConceptCountsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConceptCountsRequest* internal_default_instance() {
    return reinterpret_cast<const GetConceptCountsRequest*>(
               &_GetConceptCountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetConceptCountsRequest& a, GetConceptCountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConceptCountsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConceptCountsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConceptCountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConceptCountsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConceptCountsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetConceptCountsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConceptCountsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetConceptCountsRequest";
  }
  protected:
  explicit GetConceptCountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetConceptCountsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleConceptResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleConceptResponse) */ {
 public:
  inline SingleConceptResponse() : SingleConceptResponse(nullptr) {}
  ~SingleConceptResponse() override;
  explicit constexpr SingleConceptResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleConceptResponse(const SingleConceptResponse& from);
  SingleConceptResponse(SingleConceptResponse&& from) noexcept
    : SingleConceptResponse() {
    *this = ::std::move(from);
  }

  inline SingleConceptResponse& operator=(const SingleConceptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleConceptResponse& operator=(SingleConceptResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleConceptResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleConceptResponse* internal_default_instance() {
    return reinterpret_cast<const SingleConceptResponse*>(
               &_SingleConceptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SingleConceptResponse& a, SingleConceptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleConceptResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleConceptResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleConceptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleConceptResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleConceptResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleConceptResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleConceptResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleConceptResponse";
  }
  protected:
  explicit SingleConceptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kConceptFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.Concept concept = 2;
  bool has_concept() const;
  private:
  bool _internal_has_concept() const;
  public:
  void clear_concept();
  const ::clarifai::api::Concept& concept() const;
  PROTOBUF_NODISCARD ::clarifai::api::Concept* release_concept();
  ::clarifai::api::Concept* mutable_concept();
  void set_allocated_concept(::clarifai::api::Concept* concept);
  private:
  const ::clarifai::api::Concept& _internal_concept() const;
  ::clarifai::api::Concept* _internal_mutable_concept();
  public:
  void unsafe_arena_set_allocated_concept(
      ::clarifai::api::Concept* concept);
  ::clarifai::api::Concept* unsafe_arena_release_concept();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleConceptResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Concept* concept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiConceptResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiConceptResponse) */ {
 public:
  inline MultiConceptResponse() : MultiConceptResponse(nullptr) {}
  ~MultiConceptResponse() override;
  explicit constexpr MultiConceptResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiConceptResponse(const MultiConceptResponse& from);
  MultiConceptResponse(MultiConceptResponse&& from) noexcept
    : MultiConceptResponse() {
    *this = ::std::move(from);
  }

  inline MultiConceptResponse& operator=(const MultiConceptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiConceptResponse& operator=(MultiConceptResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiConceptResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiConceptResponse* internal_default_instance() {
    return reinterpret_cast<const MultiConceptResponse*>(
               &_MultiConceptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(MultiConceptResponse& a, MultiConceptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiConceptResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiConceptResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiConceptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiConceptResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiConceptResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiConceptResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiConceptResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiConceptResponse";
  }
  protected:
  explicit MultiConceptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiConceptResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiConceptCountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiConceptCountResponse) */ {
 public:
  inline MultiConceptCountResponse() : MultiConceptCountResponse(nullptr) {}
  ~MultiConceptCountResponse() override;
  explicit constexpr MultiConceptCountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiConceptCountResponse(const MultiConceptCountResponse& from);
  MultiConceptCountResponse(MultiConceptCountResponse&& from) noexcept
    : MultiConceptCountResponse() {
    *this = ::std::move(from);
  }

  inline MultiConceptCountResponse& operator=(const MultiConceptCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiConceptCountResponse& operator=(MultiConceptCountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiConceptCountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiConceptCountResponse* internal_default_instance() {
    return reinterpret_cast<const MultiConceptCountResponse*>(
               &_MultiConceptCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(MultiConceptCountResponse& a, MultiConceptCountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiConceptCountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiConceptCountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiConceptCountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiConceptCountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiConceptCountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiConceptCountResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiConceptCountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiConceptCountResponse";
  }
  protected:
  explicit MultiConceptCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptCountsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int concept_counts_size() const;
  private:
  int _internal_concept_counts_size() const;
  public:
  void clear_concept_counts();
  ::clarifai::api::ConceptCount* mutable_concept_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptCount >*
      mutable_concept_counts();
  private:
  const ::clarifai::api::ConceptCount& _internal_concept_counts(int index) const;
  ::clarifai::api::ConceptCount* _internal_add_concept_counts();
  public:
  const ::clarifai::api::ConceptCount& concept_counts(int index) const;
  ::clarifai::api::ConceptCount* add_concept_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptCount >&
      concept_counts() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiConceptCountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptCount > concept_counts_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListConceptRelationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListConceptRelationsRequest) */ {
 public:
  inline ListConceptRelationsRequest() : ListConceptRelationsRequest(nullptr) {}
  ~ListConceptRelationsRequest() override;
  explicit constexpr ListConceptRelationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConceptRelationsRequest(const ListConceptRelationsRequest& from);
  ListConceptRelationsRequest(ListConceptRelationsRequest&& from) noexcept
    : ListConceptRelationsRequest() {
    *this = ::std::move(from);
  }

  inline ListConceptRelationsRequest& operator=(const ListConceptRelationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConceptRelationsRequest& operator=(ListConceptRelationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConceptRelationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConceptRelationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListConceptRelationsRequest*>(
               &_ListConceptRelationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ListConceptRelationsRequest& a, ListConceptRelationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConceptRelationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConceptRelationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConceptRelationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConceptRelationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConceptRelationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListConceptRelationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConceptRelationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListConceptRelationsRequest";
  }
  protected:
  explicit ListConceptRelationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdFieldNumber = 2,
    kPredicateFieldNumber = 3,
    kKnowledgeGraphIdFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 5,
    kPerPageFieldNumber = 6,
  };
  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_concept_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_concept_id();
  PROTOBUF_NODISCARD std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // string predicate = 3;
  void clear_predicate();
  const std::string& predicate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_predicate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_predicate();
  PROTOBUF_NODISCARD std::string* release_predicate();
  void set_allocated_predicate(std::string* predicate);
  private:
  const std::string& _internal_predicate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_predicate(const std::string& value);
  std::string* _internal_mutable_predicate();
  public:

  // string knowledge_graph_id = 4;
  void clear_knowledge_graph_id();
  const std::string& knowledge_graph_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_knowledge_graph_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_knowledge_graph_id();
  PROTOBUF_NODISCARD std::string* release_knowledge_graph_id();
  void set_allocated_knowledge_graph_id(std::string* knowledge_graph_id);
  private:
  const std::string& _internal_knowledge_graph_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_knowledge_graph_id(const std::string& value);
  std::string* _internal_mutable_knowledge_graph_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 5;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 6;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListConceptRelationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predicate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr knowledge_graph_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostConceptRelationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostConceptRelationsRequest) */ {
 public:
  inline PostConceptRelationsRequest() : PostConceptRelationsRequest(nullptr) {}
  ~PostConceptRelationsRequest() override;
  explicit constexpr PostConceptRelationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostConceptRelationsRequest(const PostConceptRelationsRequest& from);
  PostConceptRelationsRequest(PostConceptRelationsRequest&& from) noexcept
    : PostConceptRelationsRequest() {
    *this = ::std::move(from);
  }

  inline PostConceptRelationsRequest& operator=(const PostConceptRelationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostConceptRelationsRequest& operator=(PostConceptRelationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostConceptRelationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostConceptRelationsRequest* internal_default_instance() {
    return reinterpret_cast<const PostConceptRelationsRequest*>(
               &_PostConceptRelationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(PostConceptRelationsRequest& a, PostConceptRelationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostConceptRelationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostConceptRelationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostConceptRelationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostConceptRelationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostConceptRelationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostConceptRelationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostConceptRelationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostConceptRelationsRequest";
  }
  protected:
  explicit PostConceptRelationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptRelationsFieldNumber = 3,
    kConceptIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptRelation concept_relations = 3;
  int concept_relations_size() const;
  private:
  int _internal_concept_relations_size() const;
  public:
  void clear_concept_relations();
  ::clarifai::api::ConceptRelation* mutable_concept_relations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >*
      mutable_concept_relations();
  private:
  const ::clarifai::api::ConceptRelation& _internal_concept_relations(int index) const;
  ::clarifai::api::ConceptRelation* _internal_add_concept_relations();
  public:
  const ::clarifai::api::ConceptRelation& concept_relations(int index) const;
  ::clarifai::api::ConceptRelation* add_concept_relations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >&
      concept_relations() const;

  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_concept_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_concept_id();
  PROTOBUF_NODISCARD std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostConceptRelationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation > concept_relations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteConceptRelationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteConceptRelationsRequest) */ {
 public:
  inline DeleteConceptRelationsRequest() : DeleteConceptRelationsRequest(nullptr) {}
  ~DeleteConceptRelationsRequest() override;
  explicit constexpr DeleteConceptRelationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteConceptRelationsRequest(const DeleteConceptRelationsRequest& from);
  DeleteConceptRelationsRequest(DeleteConceptRelationsRequest&& from) noexcept
    : DeleteConceptRelationsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteConceptRelationsRequest& operator=(const DeleteConceptRelationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteConceptRelationsRequest& operator=(DeleteConceptRelationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteConceptRelationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteConceptRelationsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteConceptRelationsRequest*>(
               &_DeleteConceptRelationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(DeleteConceptRelationsRequest& a, DeleteConceptRelationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteConceptRelationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteConceptRelationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteConceptRelationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteConceptRelationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteConceptRelationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteConceptRelationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteConceptRelationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteConceptRelationsRequest";
  }
  protected:
  explicit DeleteConceptRelationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 3,
    kConceptIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string ids = 3;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_concept_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_concept_id();
  PROTOBUF_NODISCARD std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteConceptRelationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListKnowledgeGraphsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListKnowledgeGraphsRequest) */ {
 public:
  inline ListKnowledgeGraphsRequest() : ListKnowledgeGraphsRequest(nullptr) {}
  ~ListKnowledgeGraphsRequest() override;
  explicit constexpr ListKnowledgeGraphsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListKnowledgeGraphsRequest(const ListKnowledgeGraphsRequest& from);
  ListKnowledgeGraphsRequest(ListKnowledgeGraphsRequest&& from) noexcept
    : ListKnowledgeGraphsRequest() {
    *this = ::std::move(from);
  }

  inline ListKnowledgeGraphsRequest& operator=(const ListKnowledgeGraphsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListKnowledgeGraphsRequest& operator=(ListKnowledgeGraphsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListKnowledgeGraphsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListKnowledgeGraphsRequest* internal_default_instance() {
    return reinterpret_cast<const ListKnowledgeGraphsRequest*>(
               &_ListKnowledgeGraphsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ListKnowledgeGraphsRequest& a, ListKnowledgeGraphsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListKnowledgeGraphsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListKnowledgeGraphsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListKnowledgeGraphsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListKnowledgeGraphsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListKnowledgeGraphsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListKnowledgeGraphsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListKnowledgeGraphsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListKnowledgeGraphsRequest";
  }
  protected:
  explicit ListKnowledgeGraphsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.ListKnowledgeGraphsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostKnowledgeGraphsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostKnowledgeGraphsRequest) */ {
 public:
  inline PostKnowledgeGraphsRequest() : PostKnowledgeGraphsRequest(nullptr) {}
  ~PostKnowledgeGraphsRequest() override;
  explicit constexpr PostKnowledgeGraphsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostKnowledgeGraphsRequest(const PostKnowledgeGraphsRequest& from);
  PostKnowledgeGraphsRequest(PostKnowledgeGraphsRequest&& from) noexcept
    : PostKnowledgeGraphsRequest() {
    *this = ::std::move(from);
  }

  inline PostKnowledgeGraphsRequest& operator=(const PostKnowledgeGraphsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostKnowledgeGraphsRequest& operator=(PostKnowledgeGraphsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostKnowledgeGraphsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostKnowledgeGraphsRequest* internal_default_instance() {
    return reinterpret_cast<const PostKnowledgeGraphsRequest*>(
               &_PostKnowledgeGraphsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(PostKnowledgeGraphsRequest& a, PostKnowledgeGraphsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostKnowledgeGraphsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostKnowledgeGraphsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostKnowledgeGraphsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostKnowledgeGraphsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostKnowledgeGraphsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostKnowledgeGraphsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostKnowledgeGraphsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostKnowledgeGraphsRequest";
  }
  protected:
  explicit PostKnowledgeGraphsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKnowledgeGraphsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
  int knowledge_graphs_size() const;
  private:
  int _internal_knowledge_graphs_size() const;
  public:
  void clear_knowledge_graphs();
  ::clarifai::api::KnowledgeGraph* mutable_knowledge_graphs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >*
      mutable_knowledge_graphs();
  private:
  const ::clarifai::api::KnowledgeGraph& _internal_knowledge_graphs(int index) const;
  ::clarifai::api::KnowledgeGraph* _internal_add_knowledge_graphs();
  public:
  const ::clarifai::api::KnowledgeGraph& knowledge_graphs(int index) const;
  ::clarifai::api::KnowledgeGraph* add_knowledge_graphs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >&
      knowledge_graphs() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostKnowledgeGraphsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph > knowledge_graphs_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostConceptMappingJobsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostConceptMappingJobsRequest) */ {
 public:
  inline PostConceptMappingJobsRequest() : PostConceptMappingJobsRequest(nullptr) {}
  ~PostConceptMappingJobsRequest() override;
  explicit constexpr PostConceptMappingJobsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostConceptMappingJobsRequest(const PostConceptMappingJobsRequest& from);
  PostConceptMappingJobsRequest(PostConceptMappingJobsRequest&& from) noexcept
    : PostConceptMappingJobsRequest() {
    *this = ::std::move(from);
  }

  inline PostConceptMappingJobsRequest& operator=(const PostConceptMappingJobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostConceptMappingJobsRequest& operator=(PostConceptMappingJobsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostConceptMappingJobsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostConceptMappingJobsRequest* internal_default_instance() {
    return reinterpret_cast<const PostConceptMappingJobsRequest*>(
               &_PostConceptMappingJobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(PostConceptMappingJobsRequest& a, PostConceptMappingJobsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostConceptMappingJobsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostConceptMappingJobsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostConceptMappingJobsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostConceptMappingJobsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostConceptMappingJobsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostConceptMappingJobsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostConceptMappingJobsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostConceptMappingJobsRequest";
  }
  protected:
  explicit PostConceptMappingJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptMappingJobsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
  int concept_mapping_jobs_size() const;
  private:
  int _internal_concept_mapping_jobs_size() const;
  public:
  void clear_concept_mapping_jobs();
  ::clarifai::api::ConceptMappingJob* mutable_concept_mapping_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMappingJob >*
      mutable_concept_mapping_jobs();
  private:
  const ::clarifai::api::ConceptMappingJob& _internal_concept_mapping_jobs(int index) const;
  ::clarifai::api::ConceptMappingJob* _internal_add_concept_mapping_jobs();
  public:
  const ::clarifai::api::ConceptMappingJob& concept_mapping_jobs(int index) const;
  ::clarifai::api::ConceptMappingJob* add_concept_mapping_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMappingJob >&
      concept_mapping_jobs() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostConceptMappingJobsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMappingJob > concept_mapping_jobs_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiConceptRelationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiConceptRelationResponse) */ {
 public:
  inline MultiConceptRelationResponse() : MultiConceptRelationResponse(nullptr) {}
  ~MultiConceptRelationResponse() override;
  explicit constexpr MultiConceptRelationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiConceptRelationResponse(const MultiConceptRelationResponse& from);
  MultiConceptRelationResponse(MultiConceptRelationResponse&& from) noexcept
    : MultiConceptRelationResponse() {
    *this = ::std::move(from);
  }

  inline MultiConceptRelationResponse& operator=(const MultiConceptRelationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiConceptRelationResponse& operator=(MultiConceptRelationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiConceptRelationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiConceptRelationResponse* internal_default_instance() {
    return reinterpret_cast<const MultiConceptRelationResponse*>(
               &_MultiConceptRelationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(MultiConceptRelationResponse& a, MultiConceptRelationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiConceptRelationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiConceptRelationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiConceptRelationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiConceptRelationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiConceptRelationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiConceptRelationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiConceptRelationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiConceptRelationResponse";
  }
  protected:
  explicit MultiConceptRelationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptRelationsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int concept_relations_size() const;
  private:
  int _internal_concept_relations_size() const;
  public:
  void clear_concept_relations();
  ::clarifai::api::ConceptRelation* mutable_concept_relations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >*
      mutable_concept_relations();
  private:
  const ::clarifai::api::ConceptRelation& _internal_concept_relations(int index) const;
  ::clarifai::api::ConceptRelation* _internal_add_concept_relations();
  public:
  const ::clarifai::api::ConceptRelation& concept_relations(int index) const;
  ::clarifai::api::ConceptRelation* add_concept_relations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >&
      concept_relations() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiConceptRelationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation > concept_relations_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiKnowledgeGraphResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiKnowledgeGraphResponse) */ {
 public:
  inline MultiKnowledgeGraphResponse() : MultiKnowledgeGraphResponse(nullptr) {}
  ~MultiKnowledgeGraphResponse() override;
  explicit constexpr MultiKnowledgeGraphResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiKnowledgeGraphResponse(const MultiKnowledgeGraphResponse& from);
  MultiKnowledgeGraphResponse(MultiKnowledgeGraphResponse&& from) noexcept
    : MultiKnowledgeGraphResponse() {
    *this = ::std::move(from);
  }

  inline MultiKnowledgeGraphResponse& operator=(const MultiKnowledgeGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiKnowledgeGraphResponse& operator=(MultiKnowledgeGraphResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiKnowledgeGraphResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiKnowledgeGraphResponse* internal_default_instance() {
    return reinterpret_cast<const MultiKnowledgeGraphResponse*>(
               &_MultiKnowledgeGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(MultiKnowledgeGraphResponse& a, MultiKnowledgeGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiKnowledgeGraphResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiKnowledgeGraphResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiKnowledgeGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiKnowledgeGraphResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiKnowledgeGraphResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiKnowledgeGraphResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiKnowledgeGraphResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiKnowledgeGraphResponse";
  }
  protected:
  explicit MultiKnowledgeGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKnowledgeGraphsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int knowledge_graphs_size() const;
  private:
  int _internal_knowledge_graphs_size() const;
  public:
  void clear_knowledge_graphs();
  ::clarifai::api::KnowledgeGraph* mutable_knowledge_graphs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >*
      mutable_knowledge_graphs();
  private:
  const ::clarifai::api::KnowledgeGraph& _internal_knowledge_graphs(int index) const;
  ::clarifai::api::KnowledgeGraph* _internal_add_knowledge_graphs();
  public:
  const ::clarifai::api::KnowledgeGraph& knowledge_graphs(int index) const;
  ::clarifai::api::KnowledgeGraph* add_knowledge_graphs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >&
      knowledge_graphs() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiKnowledgeGraphResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph > knowledge_graphs_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiConceptMappingJobResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiConceptMappingJobResponse) */ {
 public:
  inline MultiConceptMappingJobResponse() : MultiConceptMappingJobResponse(nullptr) {}
  ~MultiConceptMappingJobResponse() override;
  explicit constexpr MultiConceptMappingJobResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiConceptMappingJobResponse(const MultiConceptMappingJobResponse& from);
  MultiConceptMappingJobResponse(MultiConceptMappingJobResponse&& from) noexcept
    : MultiConceptMappingJobResponse() {
    *this = ::std::move(from);
  }

  inline MultiConceptMappingJobResponse& operator=(const MultiConceptMappingJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiConceptMappingJobResponse& operator=(MultiConceptMappingJobResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiConceptMappingJobResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiConceptMappingJobResponse* internal_default_instance() {
    return reinterpret_cast<const MultiConceptMappingJobResponse*>(
               &_MultiConceptMappingJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(MultiConceptMappingJobResponse& a, MultiConceptMappingJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiConceptMappingJobResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiConceptMappingJobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiConceptMappingJobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiConceptMappingJobResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiConceptMappingJobResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiConceptMappingJobResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiConceptMappingJobResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiConceptMappingJobResponse";
  }
  protected:
  explicit MultiConceptMappingJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiConceptMappingJobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetConceptLanguageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetConceptLanguageRequest) */ {
 public:
  inline GetConceptLanguageRequest() : GetConceptLanguageRequest(nullptr) {}
  ~GetConceptLanguageRequest() override;
  explicit constexpr GetConceptLanguageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConceptLanguageRequest(const GetConceptLanguageRequest& from);
  GetConceptLanguageRequest(GetConceptLanguageRequest&& from) noexcept
    : GetConceptLanguageRequest() {
    *this = ::std::move(from);
  }

  inline GetConceptLanguageRequest& operator=(const GetConceptLanguageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConceptLanguageRequest& operator=(GetConceptLanguageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConceptLanguageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConceptLanguageRequest* internal_default_instance() {
    return reinterpret_cast<const GetConceptLanguageRequest*>(
               &_GetConceptLanguageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetConceptLanguageRequest& a, GetConceptLanguageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConceptLanguageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConceptLanguageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConceptLanguageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConceptLanguageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConceptLanguageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetConceptLanguageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConceptLanguageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetConceptLanguageRequest";
  }
  protected:
  explicit GetConceptLanguageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdFieldNumber = 2,
    kLanguageFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_concept_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_concept_id();
  PROTOBUF_NODISCARD std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // string language = 3;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetConceptLanguageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListConceptLanguagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListConceptLanguagesRequest) */ {
 public:
  inline ListConceptLanguagesRequest() : ListConceptLanguagesRequest(nullptr) {}
  ~ListConceptLanguagesRequest() override;
  explicit constexpr ListConceptLanguagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConceptLanguagesRequest(const ListConceptLanguagesRequest& from);
  ListConceptLanguagesRequest(ListConceptLanguagesRequest&& from) noexcept
    : ListConceptLanguagesRequest() {
    *this = ::std::move(from);
  }

  inline ListConceptLanguagesRequest& operator=(const ListConceptLanguagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConceptLanguagesRequest& operator=(ListConceptLanguagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConceptLanguagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConceptLanguagesRequest* internal_default_instance() {
    return reinterpret_cast<const ListConceptLanguagesRequest*>(
               &_ListConceptLanguagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ListConceptLanguagesRequest& a, ListConceptLanguagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConceptLanguagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConceptLanguagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConceptLanguagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConceptLanguagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConceptLanguagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListConceptLanguagesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConceptLanguagesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListConceptLanguagesRequest";
  }
  protected:
  explicit ListConceptLanguagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
  };
  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_concept_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_concept_id();
  PROTOBUF_NODISCARD std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 3;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListConceptLanguagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchConceptLanguagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchConceptLanguagesRequest) */ {
 public:
  inline PatchConceptLanguagesRequest() : PatchConceptLanguagesRequest(nullptr) {}
  ~PatchConceptLanguagesRequest() override;
  explicit constexpr PatchConceptLanguagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchConceptLanguagesRequest(const PatchConceptLanguagesRequest& from);
  PatchConceptLanguagesRequest(PatchConceptLanguagesRequest&& from) noexcept
    : PatchConceptLanguagesRequest() {
    *this = ::std::move(from);
  }

  inline PatchConceptLanguagesRequest& operator=(const PatchConceptLanguagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchConceptLanguagesRequest& operator=(PatchConceptLanguagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchConceptLanguagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchConceptLanguagesRequest* internal_default_instance() {
    return reinterpret_cast<const PatchConceptLanguagesRequest*>(
               &_PatchConceptLanguagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(PatchConceptLanguagesRequest& a, PatchConceptLanguagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchConceptLanguagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchConceptLanguagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchConceptLanguagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchConceptLanguagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchConceptLanguagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchConceptLanguagesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchConceptLanguagesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchConceptLanguagesRequest";
  }
  protected:
  explicit PatchConceptLanguagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptLanguagesFieldNumber = 3,
    kConceptIdFieldNumber = 2,
    kActionFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  int concept_languages_size() const;
  private:
  int _internal_concept_languages_size() const;
  public:
  void clear_concept_languages();
  ::clarifai::api::ConceptLanguage* mutable_concept_languages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >*
      mutable_concept_languages();
  private:
  const ::clarifai::api::ConceptLanguage& _internal_concept_languages(int index) const;
  ::clarifai::api::ConceptLanguage* _internal_add_concept_languages();
  public:
  const ::clarifai::api::ConceptLanguage& concept_languages(int index) const;
  ::clarifai::api::ConceptLanguage* add_concept_languages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >&
      concept_languages() const;

  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_concept_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_concept_id();
  PROTOBUF_NODISCARD std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // string action = 4;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchConceptLanguagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage > concept_languages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostConceptLanguagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostConceptLanguagesRequest) */ {
 public:
  inline PostConceptLanguagesRequest() : PostConceptLanguagesRequest(nullptr) {}
  ~PostConceptLanguagesRequest() override;
  explicit constexpr PostConceptLanguagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostConceptLanguagesRequest(const PostConceptLanguagesRequest& from);
  PostConceptLanguagesRequest(PostConceptLanguagesRequest&& from) noexcept
    : PostConceptLanguagesRequest() {
    *this = ::std::move(from);
  }

  inline PostConceptLanguagesRequest& operator=(const PostConceptLanguagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostConceptLanguagesRequest& operator=(PostConceptLanguagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostConceptLanguagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostConceptLanguagesRequest* internal_default_instance() {
    return reinterpret_cast<const PostConceptLanguagesRequest*>(
               &_PostConceptLanguagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(PostConceptLanguagesRequest& a, PostConceptLanguagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostConceptLanguagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostConceptLanguagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostConceptLanguagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostConceptLanguagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostConceptLanguagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostConceptLanguagesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostConceptLanguagesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostConceptLanguagesRequest";
  }
  protected:
  explicit PostConceptLanguagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptLanguagesFieldNumber = 3,
    kConceptIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  int concept_languages_size() const;
  private:
  int _internal_concept_languages_size() const;
  public:
  void clear_concept_languages();
  ::clarifai::api::ConceptLanguage* mutable_concept_languages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >*
      mutable_concept_languages();
  private:
  const ::clarifai::api::ConceptLanguage& _internal_concept_languages(int index) const;
  ::clarifai::api::ConceptLanguage* _internal_add_concept_languages();
  public:
  const ::clarifai::api::ConceptLanguage& concept_languages(int index) const;
  ::clarifai::api::ConceptLanguage* add_concept_languages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >&
      concept_languages() const;

  // string concept_id = 2;
  void clear_concept_id();
  const std::string& concept_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_concept_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_concept_id();
  PROTOBUF_NODISCARD std::string* release_concept_id();
  void set_allocated_concept_id(std::string* concept_id);
  private:
  const std::string& _internal_concept_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_concept_id(const std::string& value);
  std::string* _internal_mutable_concept_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostConceptLanguagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage > concept_languages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleConceptLanguageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleConceptLanguageResponse) */ {
 public:
  inline SingleConceptLanguageResponse() : SingleConceptLanguageResponse(nullptr) {}
  ~SingleConceptLanguageResponse() override;
  explicit constexpr SingleConceptLanguageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleConceptLanguageResponse(const SingleConceptLanguageResponse& from);
  SingleConceptLanguageResponse(SingleConceptLanguageResponse&& from) noexcept
    : SingleConceptLanguageResponse() {
    *this = ::std::move(from);
  }

  inline SingleConceptLanguageResponse& operator=(const SingleConceptLanguageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleConceptLanguageResponse& operator=(SingleConceptLanguageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleConceptLanguageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleConceptLanguageResponse* internal_default_instance() {
    return reinterpret_cast<const SingleConceptLanguageResponse*>(
               &_SingleConceptLanguageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SingleConceptLanguageResponse& a, SingleConceptLanguageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleConceptLanguageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleConceptLanguageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleConceptLanguageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleConceptLanguageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleConceptLanguageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleConceptLanguageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleConceptLanguageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleConceptLanguageResponse";
  }
  protected:
  explicit SingleConceptLanguageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kConceptLanguageFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.ConceptLanguage concept_language = 2;
  bool has_concept_language() const;
  private:
  bool _internal_has_concept_language() const;
  public:
  void clear_concept_language();
  const ::clarifai::api::ConceptLanguage& concept_language() const;
  PROTOBUF_NODISCARD ::clarifai::api::ConceptLanguage* release_concept_language();
  ::clarifai::api::ConceptLanguage* mutable_concept_language();
  void set_allocated_concept_language(::clarifai::api::ConceptLanguage* concept_language);
  private:
  const ::clarifai::api::ConceptLanguage& _internal_concept_language() const;
  ::clarifai::api::ConceptLanguage* _internal_mutable_concept_language();
  public:
  void unsafe_arena_set_allocated_concept_language(
      ::clarifai::api::ConceptLanguage* concept_language);
  ::clarifai::api::ConceptLanguage* unsafe_arena_release_concept_language();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleConceptLanguageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::ConceptLanguage* concept_language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiConceptLanguageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiConceptLanguageResponse) */ {
 public:
  inline MultiConceptLanguageResponse() : MultiConceptLanguageResponse(nullptr) {}
  ~MultiConceptLanguageResponse() override;
  explicit constexpr MultiConceptLanguageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiConceptLanguageResponse(const MultiConceptLanguageResponse& from);
  MultiConceptLanguageResponse(MultiConceptLanguageResponse&& from) noexcept
    : MultiConceptLanguageResponse() {
    *this = ::std::move(from);
  }

  inline MultiConceptLanguageResponse& operator=(const MultiConceptLanguageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiConceptLanguageResponse& operator=(MultiConceptLanguageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiConceptLanguageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiConceptLanguageResponse* internal_default_instance() {
    return reinterpret_cast<const MultiConceptLanguageResponse*>(
               &_MultiConceptLanguageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(MultiConceptLanguageResponse& a, MultiConceptLanguageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiConceptLanguageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiConceptLanguageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiConceptLanguageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiConceptLanguageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiConceptLanguageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiConceptLanguageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiConceptLanguageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiConceptLanguageResponse";
  }
  protected:
  explicit MultiConceptLanguageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptLanguagesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int concept_languages_size() const;
  private:
  int _internal_concept_languages_size() const;
  public:
  void clear_concept_languages();
  ::clarifai::api::ConceptLanguage* mutable_concept_languages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >*
      mutable_concept_languages();
  private:
  const ::clarifai::api::ConceptLanguage& _internal_concept_languages(int index) const;
  ::clarifai::api::ConceptLanguage* _internal_add_concept_languages();
  public:
  const ::clarifai::api::ConceptLanguage& concept_languages(int index) const;
  ::clarifai::api::ConceptLanguage* add_concept_languages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >&
      concept_languages() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiConceptLanguageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage > concept_languages_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetInputRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetInputRequest) */ {
 public:
  inline GetInputRequest() : GetInputRequest(nullptr) {}
  ~GetInputRequest() override;
  explicit constexpr GetInputRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInputRequest(const GetInputRequest& from);
  GetInputRequest(GetInputRequest&& from) noexcept
    : GetInputRequest() {
    *this = ::std::move(from);
  }

  inline GetInputRequest& operator=(const GetInputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInputRequest& operator=(GetInputRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInputRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInputRequest* internal_default_instance() {
    return reinterpret_cast<const GetInputRequest*>(
               &_GetInputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetInputRequest& a, GetInputRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInputRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInputRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInputRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInputRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInputRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInputRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInputRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetInputRequest";
  }
  protected:
  explicit GetInputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string input_id = 2;
  void clear_input_id();
  const std::string& input_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_id();
  PROTOBUF_NODISCARD std::string* release_input_id();
  void set_allocated_input_id(std::string* input_id);
  private:
  const std::string& _internal_input_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_id(const std::string& value);
  std::string* _internal_mutable_input_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetInputRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetInputSamplesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetInputSamplesRequest) */ {
 public:
  inline GetInputSamplesRequest() : GetInputSamplesRequest(nullptr) {}
  ~GetInputSamplesRequest() override;
  explicit constexpr GetInputSamplesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInputSamplesRequest(const GetInputSamplesRequest& from);
  GetInputSamplesRequest(GetInputSamplesRequest&& from) noexcept
    : GetInputSamplesRequest() {
    *this = ::std::move(from);
  }

  inline GetInputSamplesRequest& operator=(const GetInputSamplesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInputSamplesRequest& operator=(GetInputSamplesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInputSamplesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInputSamplesRequest* internal_default_instance() {
    return reinterpret_cast<const GetInputSamplesRequest*>(
               &_GetInputSamplesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetInputSamplesRequest& a, GetInputSamplesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInputSamplesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInputSamplesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInputSamplesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInputSamplesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInputSamplesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInputSamplesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInputSamplesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetInputSamplesRequest";
  }
  protected:
  explicit GetInputSamplesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 3,
    kTaskIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string user_ids = 3;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // string task_id = 2;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetInputSamplesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListInputsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListInputsRequest) */ {
 public:
  inline ListInputsRequest() : ListInputsRequest(nullptr) {}
  ~ListInputsRequest() override;
  explicit constexpr ListInputsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListInputsRequest(const ListInputsRequest& from);
  ListInputsRequest(ListInputsRequest&& from) noexcept
    : ListInputsRequest() {
    *this = ::std::move(from);
  }

  inline ListInputsRequest& operator=(const ListInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInputsRequest& operator=(ListInputsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListInputsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListInputsRequest* internal_default_instance() {
    return reinterpret_cast<const ListInputsRequest*>(
               &_ListInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ListInputsRequest& a, ListInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInputsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListInputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListInputsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListInputsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListInputsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInputsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListInputsRequest";
  }
  protected:
  explicit ListInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
    kStatusFieldNumber = 5,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // repeated string ids = 4;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.status.Status status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListInputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::status::Status* status_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class StreamInputsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.StreamInputsRequest) */ {
 public:
  inline StreamInputsRequest() : StreamInputsRequest(nullptr) {}
  ~StreamInputsRequest() override;
  explicit constexpr StreamInputsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamInputsRequest(const StreamInputsRequest& from);
  StreamInputsRequest(StreamInputsRequest&& from) noexcept
    : StreamInputsRequest() {
    *this = ::std::move(from);
  }

  inline StreamInputsRequest& operator=(const StreamInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamInputsRequest& operator=(StreamInputsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamInputsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamInputsRequest* internal_default_instance() {
    return reinterpret_cast<const StreamInputsRequest*>(
               &_StreamInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(StreamInputsRequest& a, StreamInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamInputsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamInputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamInputsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamInputsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamInputsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamInputsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.StreamInputsRequest";
  }
  protected:
  explicit StreamInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kPerPageFieldNumber = 2,
    kDescendingFieldNumber = 4,
  };
  // string last_id = 3;
  void clear_last_id();
  const std::string& last_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_id();
  PROTOBUF_NODISCARD std::string* release_last_id();
  void set_allocated_last_id(std::string* last_id);
  private:
  const std::string& _internal_last_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_id(const std::string& value);
  std::string* _internal_mutable_last_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 per_page = 2;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // bool descending = 4;
  void clear_descending();
  bool descending() const;
  void set_descending(bool value);
  private:
  bool _internal_descending() const;
  void _internal_set_descending(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.StreamInputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t per_page_;
  bool descending_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostInputsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostInputsRequest) */ {
 public:
  inline PostInputsRequest() : PostInputsRequest(nullptr) {}
  ~PostInputsRequest() override;
  explicit constexpr PostInputsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostInputsRequest(const PostInputsRequest& from);
  PostInputsRequest(PostInputsRequest&& from) noexcept
    : PostInputsRequest() {
    *this = ::std::move(from);
  }

  inline PostInputsRequest& operator=(const PostInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostInputsRequest& operator=(PostInputsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostInputsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostInputsRequest* internal_default_instance() {
    return reinterpret_cast<const PostInputsRequest*>(
               &_PostInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(PostInputsRequest& a, PostInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostInputsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostInputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostInputsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostInputsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostInputsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostInputsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostInputsRequest";
  }
  protected:
  explicit PostInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Input inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::clarifai::api::Input* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_inputs();
  private:
  const ::clarifai::api::Input& _internal_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_inputs();
  public:
  const ::clarifai::api::Input& inputs(int index) const;
  ::clarifai::api::Input* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      inputs() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostInputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > inputs_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchInputsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchInputsRequest) */ {
 public:
  inline PatchInputsRequest() : PatchInputsRequest(nullptr) {}
  ~PatchInputsRequest() override;
  explicit constexpr PatchInputsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchInputsRequest(const PatchInputsRequest& from);
  PatchInputsRequest(PatchInputsRequest&& from) noexcept
    : PatchInputsRequest() {
    *this = ::std::move(from);
  }

  inline PatchInputsRequest& operator=(const PatchInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchInputsRequest& operator=(PatchInputsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchInputsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchInputsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchInputsRequest*>(
               &_PatchInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(PatchInputsRequest& a, PatchInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchInputsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchInputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchInputsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchInputsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchInputsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchInputsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchInputsRequest";
  }
  protected:
  explicit PatchInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Input inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::clarifai::api::Input* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_inputs();
  private:
  const ::clarifai::api::Input& _internal_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_inputs();
  public:
  const ::clarifai::api::Input& inputs(int index) const;
  ::clarifai::api::Input* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      inputs() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchInputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteInputRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteInputRequest) */ {
 public:
  inline DeleteInputRequest() : DeleteInputRequest(nullptr) {}
  ~DeleteInputRequest() override;
  explicit constexpr DeleteInputRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteInputRequest(const DeleteInputRequest& from);
  DeleteInputRequest(DeleteInputRequest&& from) noexcept
    : DeleteInputRequest() {
    *this = ::std::move(from);
  }

  inline DeleteInputRequest& operator=(const DeleteInputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteInputRequest& operator=(DeleteInputRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteInputRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteInputRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteInputRequest*>(
               &_DeleteInputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(DeleteInputRequest& a, DeleteInputRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteInputRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteInputRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteInputRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteInputRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteInputRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteInputRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInputRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteInputRequest";
  }
  protected:
  explicit DeleteInputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string input_id = 2;
  void clear_input_id();
  const std::string& input_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_id();
  PROTOBUF_NODISCARD std::string* release_input_id();
  void set_allocated_input_id(std::string* input_id);
  private:
  const std::string& _internal_input_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_id(const std::string& value);
  std::string* _internal_mutable_input_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteInputRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteInputsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteInputsRequest) */ {
 public:
  inline DeleteInputsRequest() : DeleteInputsRequest(nullptr) {}
  ~DeleteInputsRequest() override;
  explicit constexpr DeleteInputsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteInputsRequest(const DeleteInputsRequest& from);
  DeleteInputsRequest(DeleteInputsRequest&& from) noexcept
    : DeleteInputsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteInputsRequest& operator=(const DeleteInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteInputsRequest& operator=(DeleteInputsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteInputsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteInputsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteInputsRequest*>(
               &_DeleteInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(DeleteInputsRequest& a, DeleteInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteInputsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteInputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteInputsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteInputsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteInputsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInputsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteInputsRequest";
  }
  protected:
  explicit DeleteInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteInputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleInputResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleInputResponse) */ {
 public:
  inline SingleInputResponse() : SingleInputResponse(nullptr) {}
  ~SingleInputResponse() override;
  explicit constexpr SingleInputResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleInputResponse(const SingleInputResponse& from);
  SingleInputResponse(SingleInputResponse&& from) noexcept
    : SingleInputResponse() {
    *this = ::std::move(from);
  }

  inline SingleInputResponse& operator=(const SingleInputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleInputResponse& operator=(SingleInputResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleInputResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleInputResponse* internal_default_instance() {
    return reinterpret_cast<const SingleInputResponse*>(
               &_SingleInputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(SingleInputResponse& a, SingleInputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleInputResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleInputResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleInputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleInputResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleInputResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleInputResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleInputResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleInputResponse";
  }
  protected:
  explicit SingleInputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.Input input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  PROTOBUF_NODISCARD ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::clarifai::api::Input* input);
  ::clarifai::api::Input* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleInputResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Input* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiInputResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiInputResponse) */ {
 public:
  inline MultiInputResponse() : MultiInputResponse(nullptr) {}
  ~MultiInputResponse() override;
  explicit constexpr MultiInputResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiInputResponse(const MultiInputResponse& from);
  MultiInputResponse(MultiInputResponse&& from) noexcept
    : MultiInputResponse() {
    *this = ::std::move(from);
  }

  inline MultiInputResponse& operator=(const MultiInputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiInputResponse& operator=(MultiInputResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiInputResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiInputResponse* internal_default_instance() {
    return reinterpret_cast<const MultiInputResponse*>(
               &_MultiInputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(MultiInputResponse& a, MultiInputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiInputResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiInputResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiInputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiInputResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiInputResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiInputResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiInputResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiInputResponse";
  }
  protected:
  explicit MultiInputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::clarifai::api::Input* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_inputs();
  private:
  const ::clarifai::api::Input& _internal_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_inputs();
  public:
  const ::clarifai::api::Input& inputs(int index) const;
  ::clarifai::api::Input* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      inputs() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiInputResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > inputs_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiInputAnnotationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiInputAnnotationResponse) */ {
 public:
  inline MultiInputAnnotationResponse() : MultiInputAnnotationResponse(nullptr) {}
  ~MultiInputAnnotationResponse() override;
  explicit constexpr MultiInputAnnotationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiInputAnnotationResponse(const MultiInputAnnotationResponse& from);
  MultiInputAnnotationResponse(MultiInputAnnotationResponse&& from) noexcept
    : MultiInputAnnotationResponse() {
    *this = ::std::move(from);
  }

  inline MultiInputAnnotationResponse& operator=(const MultiInputAnnotationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiInputAnnotationResponse& operator=(MultiInputAnnotationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiInputAnnotationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiInputAnnotationResponse* internal_default_instance() {
    return reinterpret_cast<const MultiInputAnnotationResponse*>(
               &_MultiInputAnnotationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(MultiInputAnnotationResponse& a, MultiInputAnnotationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiInputAnnotationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiInputAnnotationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiInputAnnotationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiInputAnnotationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiInputAnnotationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiInputAnnotationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiInputAnnotationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiInputAnnotationResponse";
  }
  protected:
  explicit MultiInputAnnotationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitsFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int hits_size() const;
  private:
  int _internal_hits_size() const;
  public:
  void clear_hits();
  ::clarifai::api::Hit* mutable_hits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >*
      mutable_hits();
  private:
  const ::clarifai::api::Hit& _internal_hits(int index) const;
  ::clarifai::api::Hit* _internal_add_hits();
  public:
  const ::clarifai::api::Hit& hits(int index) const;
  ::clarifai::api::Hit* add_hits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >&
      hits() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiInputAnnotationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit > hits_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleInputCountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleInputCountResponse) */ {
 public:
  inline SingleInputCountResponse() : SingleInputCountResponse(nullptr) {}
  ~SingleInputCountResponse() override;
  explicit constexpr SingleInputCountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleInputCountResponse(const SingleInputCountResponse& from);
  SingleInputCountResponse(SingleInputCountResponse&& from) noexcept
    : SingleInputCountResponse() {
    *this = ::std::move(from);
  }

  inline SingleInputCountResponse& operator=(const SingleInputCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleInputCountResponse& operator=(SingleInputCountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleInputCountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleInputCountResponse* internal_default_instance() {
    return reinterpret_cast<const SingleInputCountResponse*>(
               &_SingleInputCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(SingleInputCountResponse& a, SingleInputCountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleInputCountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleInputCountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleInputCountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleInputCountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleInputCountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleInputCountResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleInputCountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleInputCountResponse";
  }
  protected:
  explicit SingleInputCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCountsFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.InputCount counts = 2;
  bool has_counts() const;
  private:
  bool _internal_has_counts() const;
  public:
  void clear_counts();
  const ::clarifai::api::InputCount& counts() const;
  PROTOBUF_NODISCARD ::clarifai::api::InputCount* release_counts();
  ::clarifai::api::InputCount* mutable_counts();
  void set_allocated_counts(::clarifai::api::InputCount* counts);
  private:
  const ::clarifai::api::InputCount& _internal_counts() const;
  ::clarifai::api::InputCount* _internal_mutable_counts();
  public:
  void unsafe_arena_set_allocated_counts(
      ::clarifai::api::InputCount* counts);
  ::clarifai::api::InputCount* unsafe_arena_release_counts();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleInputCountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::InputCount* counts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetInputCountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetInputCountRequest) */ {
 public:
  inline GetInputCountRequest() : GetInputCountRequest(nullptr) {}
  ~GetInputCountRequest() override;
  explicit constexpr GetInputCountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInputCountRequest(const GetInputCountRequest& from);
  GetInputCountRequest(GetInputCountRequest&& from) noexcept
    : GetInputCountRequest() {
    *this = ::std::move(from);
  }

  inline GetInputCountRequest& operator=(const GetInputCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInputCountRequest& operator=(GetInputCountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInputCountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInputCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetInputCountRequest*>(
               &_GetInputCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetInputCountRequest& a, GetInputCountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInputCountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInputCountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInputCountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInputCountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInputCountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInputCountRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInputCountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetInputCountRequest";
  }
  protected:
  explicit GetInputCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetInputCountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListDatasetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListDatasetsRequest) */ {
 public:
  inline ListDatasetsRequest() : ListDatasetsRequest(nullptr) {}
  ~ListDatasetsRequest() override;
  explicit constexpr ListDatasetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatasetsRequest(const ListDatasetsRequest& from);
  ListDatasetsRequest(ListDatasetsRequest&& from) noexcept
    : ListDatasetsRequest() {
    *this = ::std::move(from);
  }

  inline ListDatasetsRequest& operator=(const ListDatasetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatasetsRequest& operator=(ListDatasetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDatasetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatasetsRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatasetsRequest*>(
               &_ListDatasetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(ListDatasetsRequest& a, ListDatasetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatasetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatasetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDatasetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDatasetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDatasetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListDatasetsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatasetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListDatasetsRequest";
  }
  protected:
  explicit ListDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListDatasetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDatasetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetDatasetRequest) */ {
 public:
  inline GetDatasetRequest() : GetDatasetRequest(nullptr) {}
  ~GetDatasetRequest() override;
  explicit constexpr GetDatasetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatasetRequest(const GetDatasetRequest& from);
  GetDatasetRequest(GetDatasetRequest&& from) noexcept
    : GetDatasetRequest() {
    *this = ::std::move(from);
  }

  inline GetDatasetRequest& operator=(const GetDatasetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatasetRequest& operator=(GetDatasetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDatasetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDatasetRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatasetRequest*>(
               &_GetDatasetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(GetDatasetRequest& a, GetDatasetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatasetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatasetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDatasetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDatasetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDatasetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDatasetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatasetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetDatasetRequest";
  }
  protected:
  explicit GetDatasetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetDatasetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostDatasetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostDatasetsRequest) */ {
 public:
  inline PostDatasetsRequest() : PostDatasetsRequest(nullptr) {}
  ~PostDatasetsRequest() override;
  explicit constexpr PostDatasetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostDatasetsRequest(const PostDatasetsRequest& from);
  PostDatasetsRequest(PostDatasetsRequest&& from) noexcept
    : PostDatasetsRequest() {
    *this = ::std::move(from);
  }

  inline PostDatasetsRequest& operator=(const PostDatasetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDatasetsRequest& operator=(PostDatasetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostDatasetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostDatasetsRequest* internal_default_instance() {
    return reinterpret_cast<const PostDatasetsRequest*>(
               &_PostDatasetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(PostDatasetsRequest& a, PostDatasetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDatasetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDatasetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostDatasetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostDatasetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostDatasetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostDatasetsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDatasetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostDatasetsRequest";
  }
  protected:
  explicit PostDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Dataset datasets = 2;
  int datasets_size() const;
  private:
  int _internal_datasets_size() const;
  public:
  void clear_datasets();
  ::clarifai::api::Dataset* mutable_datasets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset >*
      mutable_datasets();
  private:
  const ::clarifai::api::Dataset& _internal_datasets(int index) const;
  ::clarifai::api::Dataset* _internal_add_datasets();
  public:
  const ::clarifai::api::Dataset& datasets(int index) const;
  ::clarifai::api::Dataset* add_datasets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset >&
      datasets() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostDatasetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset > datasets_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchDatasetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchDatasetsRequest) */ {
 public:
  inline PatchDatasetsRequest() : PatchDatasetsRequest(nullptr) {}
  ~PatchDatasetsRequest() override;
  explicit constexpr PatchDatasetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchDatasetsRequest(const PatchDatasetsRequest& from);
  PatchDatasetsRequest(PatchDatasetsRequest&& from) noexcept
    : PatchDatasetsRequest() {
    *this = ::std::move(from);
  }

  inline PatchDatasetsRequest& operator=(const PatchDatasetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchDatasetsRequest& operator=(PatchDatasetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchDatasetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchDatasetsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchDatasetsRequest*>(
               &_PatchDatasetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(PatchDatasetsRequest& a, PatchDatasetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchDatasetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchDatasetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchDatasetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchDatasetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchDatasetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchDatasetsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchDatasetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchDatasetsRequest";
  }
  protected:
  explicit PatchDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Dataset datasets = 2;
  int datasets_size() const;
  private:
  int _internal_datasets_size() const;
  public:
  void clear_datasets();
  ::clarifai::api::Dataset* mutable_datasets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset >*
      mutable_datasets();
  private:
  const ::clarifai::api::Dataset& _internal_datasets(int index) const;
  ::clarifai::api::Dataset* _internal_add_datasets();
  public:
  const ::clarifai::api::Dataset& datasets(int index) const;
  ::clarifai::api::Dataset* add_datasets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset >&
      datasets() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchDatasetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset > datasets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteDatasetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteDatasetsRequest) */ {
 public:
  inline DeleteDatasetsRequest() : DeleteDatasetsRequest(nullptr) {}
  ~DeleteDatasetsRequest() override;
  explicit constexpr DeleteDatasetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDatasetsRequest(const DeleteDatasetsRequest& from);
  DeleteDatasetsRequest(DeleteDatasetsRequest&& from) noexcept
    : DeleteDatasetsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDatasetsRequest& operator=(const DeleteDatasetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDatasetsRequest& operator=(DeleteDatasetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDatasetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDatasetsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDatasetsRequest*>(
               &_DeleteDatasetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(DeleteDatasetsRequest& a, DeleteDatasetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDatasetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDatasetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDatasetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDatasetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDatasetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteDatasetsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDatasetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteDatasetsRequest";
  }
  protected:
  explicit DeleteDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string dataset_ids = 2;
  int dataset_ids_size() const;
  private:
  int _internal_dataset_ids_size() const;
  public:
  void clear_dataset_ids();
  const std::string& dataset_ids(int index) const;
  std::string* mutable_dataset_ids(int index);
  void set_dataset_ids(int index, const std::string& value);
  void set_dataset_ids(int index, std::string&& value);
  void set_dataset_ids(int index, const char* value);
  void set_dataset_ids(int index, const char* value, size_t size);
  std::string* add_dataset_ids();
  void add_dataset_ids(const std::string& value);
  void add_dataset_ids(std::string&& value);
  void add_dataset_ids(const char* value);
  void add_dataset_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dataset_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dataset_ids();
  private:
  const std::string& _internal_dataset_ids(int index) const;
  std::string* _internal_add_dataset_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteDatasetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dataset_ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiDatasetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiDatasetResponse) */ {
 public:
  inline MultiDatasetResponse() : MultiDatasetResponse(nullptr) {}
  ~MultiDatasetResponse() override;
  explicit constexpr MultiDatasetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiDatasetResponse(const MultiDatasetResponse& from);
  MultiDatasetResponse(MultiDatasetResponse&& from) noexcept
    : MultiDatasetResponse() {
    *this = ::std::move(from);
  }

  inline MultiDatasetResponse& operator=(const MultiDatasetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiDatasetResponse& operator=(MultiDatasetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiDatasetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiDatasetResponse* internal_default_instance() {
    return reinterpret_cast<const MultiDatasetResponse*>(
               &_MultiDatasetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(MultiDatasetResponse& a, MultiDatasetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiDatasetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiDatasetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiDatasetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiDatasetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiDatasetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiDatasetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiDatasetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiDatasetResponse";
  }
  protected:
  explicit MultiDatasetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Dataset datasets = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int datasets_size() const;
  private:
  int _internal_datasets_size() const;
  public:
  void clear_datasets();
  ::clarifai::api::Dataset* mutable_datasets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset >*
      mutable_datasets();
  private:
  const ::clarifai::api::Dataset& _internal_datasets(int index) const;
  ::clarifai::api::Dataset* _internal_add_datasets();
  public:
  const ::clarifai::api::Dataset& datasets(int index) const;
  ::clarifai::api::Dataset* add_datasets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset >&
      datasets() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiDatasetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset > datasets_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleDatasetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleDatasetResponse) */ {
 public:
  inline SingleDatasetResponse() : SingleDatasetResponse(nullptr) {}
  ~SingleDatasetResponse() override;
  explicit constexpr SingleDatasetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleDatasetResponse(const SingleDatasetResponse& from);
  SingleDatasetResponse(SingleDatasetResponse&& from) noexcept
    : SingleDatasetResponse() {
    *this = ::std::move(from);
  }

  inline SingleDatasetResponse& operator=(const SingleDatasetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleDatasetResponse& operator=(SingleDatasetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleDatasetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleDatasetResponse* internal_default_instance() {
    return reinterpret_cast<const SingleDatasetResponse*>(
               &_SingleDatasetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(SingleDatasetResponse& a, SingleDatasetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleDatasetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleDatasetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleDatasetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleDatasetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleDatasetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleDatasetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleDatasetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleDatasetResponse";
  }
  protected:
  explicit SingleDatasetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDatasetFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.Dataset dataset = 2;
  bool has_dataset() const;
  private:
  bool _internal_has_dataset() const;
  public:
  void clear_dataset();
  const ::clarifai::api::Dataset& dataset() const;
  PROTOBUF_NODISCARD ::clarifai::api::Dataset* release_dataset();
  ::clarifai::api::Dataset* mutable_dataset();
  void set_allocated_dataset(::clarifai::api::Dataset* dataset);
  private:
  const ::clarifai::api::Dataset& _internal_dataset() const;
  ::clarifai::api::Dataset* _internal_mutable_dataset();
  public:
  void unsafe_arena_set_allocated_dataset(
      ::clarifai::api::Dataset* dataset);
  ::clarifai::api::Dataset* unsafe_arena_release_dataset();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleDatasetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Dataset* dataset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListDatasetInputsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListDatasetInputsRequest) */ {
 public:
  inline ListDatasetInputsRequest() : ListDatasetInputsRequest(nullptr) {}
  ~ListDatasetInputsRequest() override;
  explicit constexpr ListDatasetInputsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatasetInputsRequest(const ListDatasetInputsRequest& from);
  ListDatasetInputsRequest(ListDatasetInputsRequest&& from) noexcept
    : ListDatasetInputsRequest() {
    *this = ::std::move(from);
  }

  inline ListDatasetInputsRequest& operator=(const ListDatasetInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatasetInputsRequest& operator=(ListDatasetInputsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDatasetInputsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatasetInputsRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatasetInputsRequest*>(
               &_ListDatasetInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(ListDatasetInputsRequest& a, ListDatasetInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatasetInputsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatasetInputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDatasetInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDatasetInputsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDatasetInputsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListDatasetInputsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatasetInputsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListDatasetInputsRequest";
  }
  protected:
  explicit ListDatasetInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
  };
  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 3;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListDatasetInputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDatasetInputRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetDatasetInputRequest) */ {
 public:
  inline GetDatasetInputRequest() : GetDatasetInputRequest(nullptr) {}
  ~GetDatasetInputRequest() override;
  explicit constexpr GetDatasetInputRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatasetInputRequest(const GetDatasetInputRequest& from);
  GetDatasetInputRequest(GetDatasetInputRequest&& from) noexcept
    : GetDatasetInputRequest() {
    *this = ::std::move(from);
  }

  inline GetDatasetInputRequest& operator=(const GetDatasetInputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatasetInputRequest& operator=(GetDatasetInputRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDatasetInputRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDatasetInputRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatasetInputRequest*>(
               &_GetDatasetInputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetDatasetInputRequest& a, GetDatasetInputRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatasetInputRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatasetInputRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDatasetInputRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDatasetInputRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDatasetInputRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDatasetInputRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatasetInputRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetDatasetInputRequest";
  }
  protected:
  explicit GetDatasetInputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetIdFieldNumber = 2,
    kInputIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // string input_id = 3;
  void clear_input_id();
  const std::string& input_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_id();
  PROTOBUF_NODISCARD std::string* release_input_id();
  void set_allocated_input_id(std::string* input_id);
  private:
  const std::string& _internal_input_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_id(const std::string& value);
  std::string* _internal_mutable_input_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetDatasetInputRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostDatasetInputsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostDatasetInputsRequest) */ {
 public:
  inline PostDatasetInputsRequest() : PostDatasetInputsRequest(nullptr) {}
  ~PostDatasetInputsRequest() override;
  explicit constexpr PostDatasetInputsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostDatasetInputsRequest(const PostDatasetInputsRequest& from);
  PostDatasetInputsRequest(PostDatasetInputsRequest&& from) noexcept
    : PostDatasetInputsRequest() {
    *this = ::std::move(from);
  }

  inline PostDatasetInputsRequest& operator=(const PostDatasetInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDatasetInputsRequest& operator=(PostDatasetInputsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostDatasetInputsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostDatasetInputsRequest* internal_default_instance() {
    return reinterpret_cast<const PostDatasetInputsRequest*>(
               &_PostDatasetInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(PostDatasetInputsRequest& a, PostDatasetInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDatasetInputsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDatasetInputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostDatasetInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostDatasetInputsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostDatasetInputsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostDatasetInputsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDatasetInputsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostDatasetInputsRequest";
  }
  protected:
  explicit PostDatasetInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetInputsFieldNumber = 3,
    kDatasetIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.DatasetInput dataset_inputs = 3;
  int dataset_inputs_size() const;
  private:
  int _internal_dataset_inputs_size() const;
  public:
  void clear_dataset_inputs();
  ::clarifai::api::DatasetInput* mutable_dataset_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetInput >*
      mutable_dataset_inputs();
  private:
  const ::clarifai::api::DatasetInput& _internal_dataset_inputs(int index) const;
  ::clarifai::api::DatasetInput* _internal_add_dataset_inputs();
  public:
  const ::clarifai::api::DatasetInput& dataset_inputs(int index) const;
  ::clarifai::api::DatasetInput* add_dataset_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetInput >&
      dataset_inputs() const;

  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostDatasetInputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetInput > dataset_inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteDatasetInputsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteDatasetInputsRequest) */ {
 public:
  inline DeleteDatasetInputsRequest() : DeleteDatasetInputsRequest(nullptr) {}
  ~DeleteDatasetInputsRequest() override;
  explicit constexpr DeleteDatasetInputsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDatasetInputsRequest(const DeleteDatasetInputsRequest& from);
  DeleteDatasetInputsRequest(DeleteDatasetInputsRequest&& from) noexcept
    : DeleteDatasetInputsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDatasetInputsRequest& operator=(const DeleteDatasetInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDatasetInputsRequest& operator=(DeleteDatasetInputsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDatasetInputsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDatasetInputsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDatasetInputsRequest*>(
               &_DeleteDatasetInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(DeleteDatasetInputsRequest& a, DeleteDatasetInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDatasetInputsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDatasetInputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDatasetInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDatasetInputsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDatasetInputsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteDatasetInputsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDatasetInputsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteDatasetInputsRequest";
  }
  protected:
  explicit DeleteDatasetInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputIdsFieldNumber = 3,
    kDatasetIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string input_ids = 3;
  int input_ids_size() const;
  private:
  int _internal_input_ids_size() const;
  public:
  void clear_input_ids();
  const std::string& input_ids(int index) const;
  std::string* mutable_input_ids(int index);
  void set_input_ids(int index, const std::string& value);
  void set_input_ids(int index, std::string&& value);
  void set_input_ids(int index, const char* value);
  void set_input_ids(int index, const char* value, size_t size);
  std::string* add_input_ids();
  void add_input_ids(const std::string& value);
  void add_input_ids(std::string&& value);
  void add_input_ids(const char* value);
  void add_input_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_ids();
  private:
  const std::string& _internal_input_ids(int index) const;
  std::string* _internal_add_input_ids();
  public:

  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteDatasetInputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiDatasetInputResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiDatasetInputResponse) */ {
 public:
  inline MultiDatasetInputResponse() : MultiDatasetInputResponse(nullptr) {}
  ~MultiDatasetInputResponse() override;
  explicit constexpr MultiDatasetInputResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiDatasetInputResponse(const MultiDatasetInputResponse& from);
  MultiDatasetInputResponse(MultiDatasetInputResponse&& from) noexcept
    : MultiDatasetInputResponse() {
    *this = ::std::move(from);
  }

  inline MultiDatasetInputResponse& operator=(const MultiDatasetInputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiDatasetInputResponse& operator=(MultiDatasetInputResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiDatasetInputResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiDatasetInputResponse* internal_default_instance() {
    return reinterpret_cast<const MultiDatasetInputResponse*>(
               &_MultiDatasetInputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(MultiDatasetInputResponse& a, MultiDatasetInputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiDatasetInputResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiDatasetInputResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiDatasetInputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiDatasetInputResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiDatasetInputResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiDatasetInputResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiDatasetInputResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiDatasetInputResponse";
  }
  protected:
  explicit MultiDatasetInputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetInputsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.DatasetInput dataset_inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int dataset_inputs_size() const;
  private:
  int _internal_dataset_inputs_size() const;
  public:
  void clear_dataset_inputs();
  ::clarifai::api::DatasetInput* mutable_dataset_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetInput >*
      mutable_dataset_inputs();
  private:
  const ::clarifai::api::DatasetInput& _internal_dataset_inputs(int index) const;
  ::clarifai::api::DatasetInput* _internal_add_dataset_inputs();
  public:
  const ::clarifai::api::DatasetInput& dataset_inputs(int index) const;
  ::clarifai::api::DatasetInput* add_dataset_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetInput >&
      dataset_inputs() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiDatasetInputResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetInput > dataset_inputs_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleDatasetInputResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleDatasetInputResponse) */ {
 public:
  inline SingleDatasetInputResponse() : SingleDatasetInputResponse(nullptr) {}
  ~SingleDatasetInputResponse() override;
  explicit constexpr SingleDatasetInputResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleDatasetInputResponse(const SingleDatasetInputResponse& from);
  SingleDatasetInputResponse(SingleDatasetInputResponse&& from) noexcept
    : SingleDatasetInputResponse() {
    *this = ::std::move(from);
  }

  inline SingleDatasetInputResponse& operator=(const SingleDatasetInputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleDatasetInputResponse& operator=(SingleDatasetInputResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleDatasetInputResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleDatasetInputResponse* internal_default_instance() {
    return reinterpret_cast<const SingleDatasetInputResponse*>(
               &_SingleDatasetInputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(SingleDatasetInputResponse& a, SingleDatasetInputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleDatasetInputResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleDatasetInputResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleDatasetInputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleDatasetInputResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleDatasetInputResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleDatasetInputResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleDatasetInputResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleDatasetInputResponse";
  }
  protected:
  explicit SingleDatasetInputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDatasetInputFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.DatasetInput dataset_input = 2;
  bool has_dataset_input() const;
  private:
  bool _internal_has_dataset_input() const;
  public:
  void clear_dataset_input();
  const ::clarifai::api::DatasetInput& dataset_input() const;
  PROTOBUF_NODISCARD ::clarifai::api::DatasetInput* release_dataset_input();
  ::clarifai::api::DatasetInput* mutable_dataset_input();
  void set_allocated_dataset_input(::clarifai::api::DatasetInput* dataset_input);
  private:
  const ::clarifai::api::DatasetInput& _internal_dataset_input() const;
  ::clarifai::api::DatasetInput* _internal_mutable_dataset_input();
  public:
  void unsafe_arena_set_allocated_dataset_input(
      ::clarifai::api::DatasetInput* dataset_input);
  ::clarifai::api::DatasetInput* unsafe_arena_release_dataset_input();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleDatasetInputResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::DatasetInput* dataset_input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListDatasetVersionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListDatasetVersionsRequest) */ {
 public:
  inline ListDatasetVersionsRequest() : ListDatasetVersionsRequest(nullptr) {}
  ~ListDatasetVersionsRequest() override;
  explicit constexpr ListDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatasetVersionsRequest(const ListDatasetVersionsRequest& from);
  ListDatasetVersionsRequest(ListDatasetVersionsRequest&& from) noexcept
    : ListDatasetVersionsRequest() {
    *this = ::std::move(from);
  }

  inline ListDatasetVersionsRequest& operator=(const ListDatasetVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatasetVersionsRequest& operator=(ListDatasetVersionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDatasetVersionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatasetVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatasetVersionsRequest*>(
               &_ListDatasetVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(ListDatasetVersionsRequest& a, ListDatasetVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatasetVersionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatasetVersionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDatasetVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDatasetVersionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDatasetVersionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListDatasetVersionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatasetVersionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListDatasetVersionsRequest";
  }
  protected:
  explicit ListDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
  };
  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 3;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListDatasetVersionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDatasetVersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetDatasetVersionRequest) */ {
 public:
  inline GetDatasetVersionRequest() : GetDatasetVersionRequest(nullptr) {}
  ~GetDatasetVersionRequest() override;
  explicit constexpr GetDatasetVersionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatasetVersionRequest(const GetDatasetVersionRequest& from);
  GetDatasetVersionRequest(GetDatasetVersionRequest&& from) noexcept
    : GetDatasetVersionRequest() {
    *this = ::std::move(from);
  }

  inline GetDatasetVersionRequest& operator=(const GetDatasetVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatasetVersionRequest& operator=(GetDatasetVersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDatasetVersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDatasetVersionRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatasetVersionRequest*>(
               &_GetDatasetVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(GetDatasetVersionRequest& a, GetDatasetVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatasetVersionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatasetVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDatasetVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDatasetVersionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDatasetVersionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDatasetVersionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatasetVersionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetDatasetVersionRequest";
  }
  protected:
  explicit GetDatasetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetIdFieldNumber = 2,
    kDatasetVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // string dataset_version_id = 3;
  void clear_dataset_version_id();
  const std::string& dataset_version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_version_id();
  PROTOBUF_NODISCARD std::string* release_dataset_version_id();
  void set_allocated_dataset_version_id(std::string* dataset_version_id);
  private:
  const std::string& _internal_dataset_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_version_id(const std::string& value);
  std::string* _internal_mutable_dataset_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetDatasetVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListDatasetVersionMetricsGroupsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListDatasetVersionMetricsGroupsRequest) */ {
 public:
  inline ListDatasetVersionMetricsGroupsRequest() : ListDatasetVersionMetricsGroupsRequest(nullptr) {}
  ~ListDatasetVersionMetricsGroupsRequest() override;
  explicit constexpr ListDatasetVersionMetricsGroupsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatasetVersionMetricsGroupsRequest(const ListDatasetVersionMetricsGroupsRequest& from);
  ListDatasetVersionMetricsGroupsRequest(ListDatasetVersionMetricsGroupsRequest&& from) noexcept
    : ListDatasetVersionMetricsGroupsRequest() {
    *this = ::std::move(from);
  }

  inline ListDatasetVersionMetricsGroupsRequest& operator=(const ListDatasetVersionMetricsGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatasetVersionMetricsGroupsRequest& operator=(ListDatasetVersionMetricsGroupsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDatasetVersionMetricsGroupsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatasetVersionMetricsGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatasetVersionMetricsGroupsRequest*>(
               &_ListDatasetVersionMetricsGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(ListDatasetVersionMetricsGroupsRequest& a, ListDatasetVersionMetricsGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatasetVersionMetricsGroupsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatasetVersionMetricsGroupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDatasetVersionMetricsGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDatasetVersionMetricsGroupsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDatasetVersionMetricsGroupsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListDatasetVersionMetricsGroupsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatasetVersionMetricsGroupsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListDatasetVersionMetricsGroupsRequest";
  }
  protected:
  explicit ListDatasetVersionMetricsGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentPathsFieldNumber = 6,
    kTypesFieldNumber = 7,
    kValuesFieldNumber = 8,
    kDatasetIdFieldNumber = 2,
    kDatasetVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 4,
    kPerPageFieldNumber = 5,
  };
  // repeated string parent_paths = 6;
  int parent_paths_size() const;
  private:
  int _internal_parent_paths_size() const;
  public:
  void clear_parent_paths();
  const std::string& parent_paths(int index) const;
  std::string* mutable_parent_paths(int index);
  void set_parent_paths(int index, const std::string& value);
  void set_parent_paths(int index, std::string&& value);
  void set_parent_paths(int index, const char* value);
  void set_parent_paths(int index, const char* value, size_t size);
  std::string* add_parent_paths();
  void add_parent_paths(const std::string& value);
  void add_parent_paths(std::string&& value);
  void add_parent_paths(const char* value);
  void add_parent_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parent_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parent_paths();
  private:
  const std::string& _internal_parent_paths(int index) const;
  std::string* _internal_add_parent_paths();
  public:

  // repeated .clarifai.api.DatasetVersionMetricsGroupType types = 7;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  private:
  ::clarifai::api::DatasetVersionMetricsGroupType _internal_types(int index) const;
  void _internal_add_types(::clarifai::api::DatasetVersionMetricsGroupType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_types();
  public:
  ::clarifai::api::DatasetVersionMetricsGroupType types(int index) const;
  void set_types(int index, ::clarifai::api::DatasetVersionMetricsGroupType value);
  void add_types(::clarifai::api::DatasetVersionMetricsGroupType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_types();

  // repeated .google.protobuf.Value values = 8;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Value >*
      mutable_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_values(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_add_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Value& values(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Value* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Value >&
      values() const;

  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // string dataset_version_id = 3;
  void clear_dataset_version_id();
  const std::string& dataset_version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_version_id();
  PROTOBUF_NODISCARD std::string* release_dataset_version_id();
  void set_allocated_dataset_version_id(std::string* dataset_version_id);
  private:
  const std::string& _internal_dataset_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_version_id(const std::string& value);
  std::string* _internal_mutable_dataset_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 4;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 5;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parent_paths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> types_;
  mutable std::atomic<int> _types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Value > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostDatasetVersionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostDatasetVersionsRequest) */ {
 public:
  inline PostDatasetVersionsRequest() : PostDatasetVersionsRequest(nullptr) {}
  ~PostDatasetVersionsRequest() override;
  explicit constexpr PostDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostDatasetVersionsRequest(const PostDatasetVersionsRequest& from);
  PostDatasetVersionsRequest(PostDatasetVersionsRequest&& from) noexcept
    : PostDatasetVersionsRequest() {
    *this = ::std::move(from);
  }

  inline PostDatasetVersionsRequest& operator=(const PostDatasetVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDatasetVersionsRequest& operator=(PostDatasetVersionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostDatasetVersionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostDatasetVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const PostDatasetVersionsRequest*>(
               &_PostDatasetVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(PostDatasetVersionsRequest& a, PostDatasetVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDatasetVersionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDatasetVersionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostDatasetVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostDatasetVersionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostDatasetVersionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostDatasetVersionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDatasetVersionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostDatasetVersionsRequest";
  }
  protected:
  explicit PostDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetVersionsFieldNumber = 3,
    kDatasetIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
  int dataset_versions_size() const;
  private:
  int _internal_dataset_versions_size() const;
  public:
  void clear_dataset_versions();
  ::clarifai::api::DatasetVersion* mutable_dataset_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion >*
      mutable_dataset_versions();
  private:
  const ::clarifai::api::DatasetVersion& _internal_dataset_versions(int index) const;
  ::clarifai::api::DatasetVersion* _internal_add_dataset_versions();
  public:
  const ::clarifai::api::DatasetVersion& dataset_versions(int index) const;
  ::clarifai::api::DatasetVersion* add_dataset_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion >&
      dataset_versions() const;

  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostDatasetVersionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion > dataset_versions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchDatasetVersionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchDatasetVersionsRequest) */ {
 public:
  inline PatchDatasetVersionsRequest() : PatchDatasetVersionsRequest(nullptr) {}
  ~PatchDatasetVersionsRequest() override;
  explicit constexpr PatchDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchDatasetVersionsRequest(const PatchDatasetVersionsRequest& from);
  PatchDatasetVersionsRequest(PatchDatasetVersionsRequest&& from) noexcept
    : PatchDatasetVersionsRequest() {
    *this = ::std::move(from);
  }

  inline PatchDatasetVersionsRequest& operator=(const PatchDatasetVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchDatasetVersionsRequest& operator=(PatchDatasetVersionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchDatasetVersionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchDatasetVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchDatasetVersionsRequest*>(
               &_PatchDatasetVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(PatchDatasetVersionsRequest& a, PatchDatasetVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchDatasetVersionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchDatasetVersionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchDatasetVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchDatasetVersionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchDatasetVersionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchDatasetVersionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchDatasetVersionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchDatasetVersionsRequest";
  }
  protected:
  explicit PatchDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetVersionsFieldNumber = 3,
    kDatasetIdFieldNumber = 2,
    kActionFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
  int dataset_versions_size() const;
  private:
  int _internal_dataset_versions_size() const;
  public:
  void clear_dataset_versions();
  ::clarifai::api::DatasetVersion* mutable_dataset_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion >*
      mutable_dataset_versions();
  private:
  const ::clarifai::api::DatasetVersion& _internal_dataset_versions(int index) const;
  ::clarifai::api::DatasetVersion* _internal_add_dataset_versions();
  public:
  const ::clarifai::api::DatasetVersion& dataset_versions(int index) const;
  ::clarifai::api::DatasetVersion* add_dataset_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion >&
      dataset_versions() const;

  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // string action = 4;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchDatasetVersionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion > dataset_versions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteDatasetVersionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteDatasetVersionsRequest) */ {
 public:
  inline DeleteDatasetVersionsRequest() : DeleteDatasetVersionsRequest(nullptr) {}
  ~DeleteDatasetVersionsRequest() override;
  explicit constexpr DeleteDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDatasetVersionsRequest(const DeleteDatasetVersionsRequest& from);
  DeleteDatasetVersionsRequest(DeleteDatasetVersionsRequest&& from) noexcept
    : DeleteDatasetVersionsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDatasetVersionsRequest& operator=(const DeleteDatasetVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDatasetVersionsRequest& operator=(DeleteDatasetVersionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDatasetVersionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDatasetVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDatasetVersionsRequest*>(
               &_DeleteDatasetVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(DeleteDatasetVersionsRequest& a, DeleteDatasetVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDatasetVersionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDatasetVersionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDatasetVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDatasetVersionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDatasetVersionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteDatasetVersionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDatasetVersionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteDatasetVersionsRequest";
  }
  protected:
  explicit DeleteDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetVersionIdsFieldNumber = 3,
    kDatasetIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string dataset_version_ids = 3;
  int dataset_version_ids_size() const;
  private:
  int _internal_dataset_version_ids_size() const;
  public:
  void clear_dataset_version_ids();
  const std::string& dataset_version_ids(int index) const;
  std::string* mutable_dataset_version_ids(int index);
  void set_dataset_version_ids(int index, const std::string& value);
  void set_dataset_version_ids(int index, std::string&& value);
  void set_dataset_version_ids(int index, const char* value);
  void set_dataset_version_ids(int index, const char* value, size_t size);
  std::string* add_dataset_version_ids();
  void add_dataset_version_ids(const std::string& value);
  void add_dataset_version_ids(std::string&& value);
  void add_dataset_version_ids(const char* value);
  void add_dataset_version_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dataset_version_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dataset_version_ids();
  private:
  const std::string& _internal_dataset_version_ids(int index) const;
  std::string* _internal_add_dataset_version_ids();
  public:

  // string dataset_id = 2;
  void clear_dataset_id();
  const std::string& dataset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_id();
  PROTOBUF_NODISCARD std::string* release_dataset_id();
  void set_allocated_dataset_id(std::string* dataset_id);
  private:
  const std::string& _internal_dataset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_id(const std::string& value);
  std::string* _internal_mutable_dataset_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteDatasetVersionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dataset_version_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiDatasetVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiDatasetVersionResponse) */ {
 public:
  inline MultiDatasetVersionResponse() : MultiDatasetVersionResponse(nullptr) {}
  ~MultiDatasetVersionResponse() override;
  explicit constexpr MultiDatasetVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiDatasetVersionResponse(const MultiDatasetVersionResponse& from);
  MultiDatasetVersionResponse(MultiDatasetVersionResponse&& from) noexcept
    : MultiDatasetVersionResponse() {
    *this = ::std::move(from);
  }

  inline MultiDatasetVersionResponse& operator=(const MultiDatasetVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiDatasetVersionResponse& operator=(MultiDatasetVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiDatasetVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiDatasetVersionResponse* internal_default_instance() {
    return reinterpret_cast<const MultiDatasetVersionResponse*>(
               &_MultiDatasetVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(MultiDatasetVersionResponse& a, MultiDatasetVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiDatasetVersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiDatasetVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiDatasetVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiDatasetVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiDatasetVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiDatasetVersionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiDatasetVersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiDatasetVersionResponse";
  }
  protected:
  explicit MultiDatasetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetVersionsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.DatasetVersion dataset_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int dataset_versions_size() const;
  private:
  int _internal_dataset_versions_size() const;
  public:
  void clear_dataset_versions();
  ::clarifai::api::DatasetVersion* mutable_dataset_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion >*
      mutable_dataset_versions();
  private:
  const ::clarifai::api::DatasetVersion& _internal_dataset_versions(int index) const;
  ::clarifai::api::DatasetVersion* _internal_add_dataset_versions();
  public:
  const ::clarifai::api::DatasetVersion& dataset_versions(int index) const;
  ::clarifai::api::DatasetVersion* add_dataset_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion >&
      dataset_versions() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiDatasetVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion > dataset_versions_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiDatasetVersionMetricsGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiDatasetVersionMetricsGroupResponse) */ {
 public:
  inline MultiDatasetVersionMetricsGroupResponse() : MultiDatasetVersionMetricsGroupResponse(nullptr) {}
  ~MultiDatasetVersionMetricsGroupResponse() override;
  explicit constexpr MultiDatasetVersionMetricsGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiDatasetVersionMetricsGroupResponse(const MultiDatasetVersionMetricsGroupResponse& from);
  MultiDatasetVersionMetricsGroupResponse(MultiDatasetVersionMetricsGroupResponse&& from) noexcept
    : MultiDatasetVersionMetricsGroupResponse() {
    *this = ::std::move(from);
  }

  inline MultiDatasetVersionMetricsGroupResponse& operator=(const MultiDatasetVersionMetricsGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiDatasetVersionMetricsGroupResponse& operator=(MultiDatasetVersionMetricsGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiDatasetVersionMetricsGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiDatasetVersionMetricsGroupResponse* internal_default_instance() {
    return reinterpret_cast<const MultiDatasetVersionMetricsGroupResponse*>(
               &_MultiDatasetVersionMetricsGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(MultiDatasetVersionMetricsGroupResponse& a, MultiDatasetVersionMetricsGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiDatasetVersionMetricsGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiDatasetVersionMetricsGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiDatasetVersionMetricsGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiDatasetVersionMetricsGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiDatasetVersionMetricsGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiDatasetVersionMetricsGroupResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiDatasetVersionMetricsGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiDatasetVersionMetricsGroupResponse";
  }
  protected:
  explicit MultiDatasetVersionMetricsGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetVersionMetricsGroupsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.DatasetVersionMetricsGroup dataset_version_metrics_groups = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int dataset_version_metrics_groups_size() const;
  private:
  int _internal_dataset_version_metrics_groups_size() const;
  public:
  void clear_dataset_version_metrics_groups();
  ::clarifai::api::DatasetVersionMetricsGroup* mutable_dataset_version_metrics_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersionMetricsGroup >*
      mutable_dataset_version_metrics_groups();
  private:
  const ::clarifai::api::DatasetVersionMetricsGroup& _internal_dataset_version_metrics_groups(int index) const;
  ::clarifai::api::DatasetVersionMetricsGroup* _internal_add_dataset_version_metrics_groups();
  public:
  const ::clarifai::api::DatasetVersionMetricsGroup& dataset_version_metrics_groups(int index) const;
  ::clarifai::api::DatasetVersionMetricsGroup* add_dataset_version_metrics_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersionMetricsGroup >&
      dataset_version_metrics_groups() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersionMetricsGroup > dataset_version_metrics_groups_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleDatasetVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleDatasetVersionResponse) */ {
 public:
  inline SingleDatasetVersionResponse() : SingleDatasetVersionResponse(nullptr) {}
  ~SingleDatasetVersionResponse() override;
  explicit constexpr SingleDatasetVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleDatasetVersionResponse(const SingleDatasetVersionResponse& from);
  SingleDatasetVersionResponse(SingleDatasetVersionResponse&& from) noexcept
    : SingleDatasetVersionResponse() {
    *this = ::std::move(from);
  }

  inline SingleDatasetVersionResponse& operator=(const SingleDatasetVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleDatasetVersionResponse& operator=(SingleDatasetVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleDatasetVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleDatasetVersionResponse* internal_default_instance() {
    return reinterpret_cast<const SingleDatasetVersionResponse*>(
               &_SingleDatasetVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SingleDatasetVersionResponse& a, SingleDatasetVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleDatasetVersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleDatasetVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleDatasetVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleDatasetVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleDatasetVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleDatasetVersionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleDatasetVersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleDatasetVersionResponse";
  }
  protected:
  explicit SingleDatasetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDatasetVersionFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.DatasetVersion dataset_version = 2;
  bool has_dataset_version() const;
  private:
  bool _internal_has_dataset_version() const;
  public:
  void clear_dataset_version();
  const ::clarifai::api::DatasetVersion& dataset_version() const;
  PROTOBUF_NODISCARD ::clarifai::api::DatasetVersion* release_dataset_version();
  ::clarifai::api::DatasetVersion* mutable_dataset_version();
  void set_allocated_dataset_version(::clarifai::api::DatasetVersion* dataset_version);
  private:
  const ::clarifai::api::DatasetVersion& _internal_dataset_version() const;
  ::clarifai::api::DatasetVersion* _internal_mutable_dataset_version();
  public:
  void unsafe_arena_set_allocated_dataset_version(
      ::clarifai::api::DatasetVersion* dataset_version);
  ::clarifai::api::DatasetVersion* unsafe_arena_release_dataset_version();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleDatasetVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::DatasetVersion* dataset_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelOutputsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelOutputsRequest) */ {
 public:
  inline PostModelOutputsRequest() : PostModelOutputsRequest(nullptr) {}
  ~PostModelOutputsRequest() override;
  explicit constexpr PostModelOutputsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostModelOutputsRequest(const PostModelOutputsRequest& from);
  PostModelOutputsRequest(PostModelOutputsRequest&& from) noexcept
    : PostModelOutputsRequest() {
    *this = ::std::move(from);
  }

  inline PostModelOutputsRequest& operator=(const PostModelOutputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelOutputsRequest& operator=(PostModelOutputsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostModelOutputsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostModelOutputsRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelOutputsRequest*>(
               &_PostModelOutputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(PostModelOutputsRequest& a, PostModelOutputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelOutputsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostModelOutputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostModelOutputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostModelOutputsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostModelOutputsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostModelOutputsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelOutputsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelOutputsRequest";
  }
  protected:
  explicit PostModelOutputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 4,
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kModelFieldNumber = 5,
  };
  // repeated .clarifai.api.Input inputs = 4;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::clarifai::api::Input* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_inputs();
  private:
  const ::clarifai::api::Input& _internal_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_inputs();
  public:
  const ::clarifai::api::Input& inputs(int index) const;
  ::clarifai::api::Input* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      inputs() const;

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.Model model = 5;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  PROTOBUF_NODISCARD ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::clarifai::api::Model* model);
  ::clarifai::api::Model* unsafe_arena_release_model();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelOutputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Model* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListModelInputsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListModelInputsRequest) */ {
 public:
  inline ListModelInputsRequest() : ListModelInputsRequest(nullptr) {}
  ~ListModelInputsRequest() override;
  explicit constexpr ListModelInputsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListModelInputsRequest(const ListModelInputsRequest& from);
  ListModelInputsRequest(ListModelInputsRequest&& from) noexcept
    : ListModelInputsRequest() {
    *this = ::std::move(from);
  }

  inline ListModelInputsRequest& operator=(const ListModelInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListModelInputsRequest& operator=(ListModelInputsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListModelInputsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListModelInputsRequest* internal_default_instance() {
    return reinterpret_cast<const ListModelInputsRequest*>(
               &_ListModelInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(ListModelInputsRequest& a, ListModelInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListModelInputsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListModelInputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListModelInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListModelInputsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListModelInputsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListModelInputsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListModelInputsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListModelInputsRequest";
  }
  protected:
  explicit ListModelInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 4,
    kPerPageFieldNumber = 5,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 4;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 5;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListModelInputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetKeyRequest) */ {
 public:
  inline GetKeyRequest() : GetKeyRequest(nullptr) {}
  ~GetKeyRequest() override;
  explicit constexpr GetKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetKeyRequest(const GetKeyRequest& from);
  GetKeyRequest(GetKeyRequest&& from) noexcept
    : GetKeyRequest() {
    *this = ::std::move(from);
  }

  inline GetKeyRequest& operator=(const GetKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKeyRequest& operator=(GetKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKeyRequest* internal_default_instance() {
    return reinterpret_cast<const GetKeyRequest*>(
               &_GetKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GetKeyRequest& a, GetKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetKeyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetKeyRequest";
  }
  protected:
  explicit GetKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string key_id = 2;
  void clear_key_id();
  const std::string& key_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_id();
  PROTOBUF_NODISCARD std::string* release_key_id();
  void set_allocated_key_id(std::string* key_id);
  private:
  const std::string& _internal_key_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_id(const std::string& value);
  std::string* _internal_mutable_key_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListKeysRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListKeysRequest) */ {
 public:
  inline ListKeysRequest() : ListKeysRequest(nullptr) {}
  ~ListKeysRequest() override;
  explicit constexpr ListKeysRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListKeysRequest(const ListKeysRequest& from);
  ListKeysRequest(ListKeysRequest&& from) noexcept
    : ListKeysRequest() {
    *this = ::std::move(from);
  }

  inline ListKeysRequest& operator=(const ListKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListKeysRequest& operator=(ListKeysRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListKeysRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListKeysRequest* internal_default_instance() {
    return reinterpret_cast<const ListKeysRequest*>(
               &_ListKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(ListKeysRequest& a, ListKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListKeysRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListKeysRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListKeysRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListKeysRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListKeysRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListKeysRequest";
  }
  protected:
  explicit ListKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAppKeysRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAppKeysRequest) */ {
 public:
  inline ListAppKeysRequest() : ListAppKeysRequest(nullptr) {}
  ~ListAppKeysRequest() override;
  explicit constexpr ListAppKeysRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAppKeysRequest(const ListAppKeysRequest& from);
  ListAppKeysRequest(ListAppKeysRequest&& from) noexcept
    : ListAppKeysRequest() {
    *this = ::std::move(from);
  }

  inline ListAppKeysRequest& operator=(const ListAppKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAppKeysRequest& operator=(ListAppKeysRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAppKeysRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAppKeysRequest* internal_default_instance() {
    return reinterpret_cast<const ListAppKeysRequest*>(
               &_ListAppKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(ListAppKeysRequest& a, ListAppKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAppKeysRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAppKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAppKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAppKeysRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAppKeysRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListAppKeysRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAppKeysRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAppKeysRequest";
  }
  protected:
  explicit ListAppKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAppKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostKeysRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostKeysRequest) */ {
 public:
  inline PostKeysRequest() : PostKeysRequest(nullptr) {}
  ~PostKeysRequest() override;
  explicit constexpr PostKeysRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostKeysRequest(const PostKeysRequest& from);
  PostKeysRequest(PostKeysRequest&& from) noexcept
    : PostKeysRequest() {
    *this = ::std::move(from);
  }

  inline PostKeysRequest& operator=(const PostKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostKeysRequest& operator=(PostKeysRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostKeysRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostKeysRequest* internal_default_instance() {
    return reinterpret_cast<const PostKeysRequest*>(
               &_PostKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(PostKeysRequest& a, PostKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostKeysRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostKeysRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostKeysRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostKeysRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostKeysRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostKeysRequest";
  }
  protected:
  explicit PostKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Key keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::clarifai::api::Key* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >*
      mutable_keys();
  private:
  const ::clarifai::api::Key& _internal_keys(int index) const;
  ::clarifai::api::Key* _internal_add_keys();
  public:
  const ::clarifai::api::Key& keys(int index) const;
  ::clarifai::api::Key* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >&
      keys() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key > keys_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteKeyRequest) */ {
 public:
  inline DeleteKeyRequest() : DeleteKeyRequest(nullptr) {}
  ~DeleteKeyRequest() override;
  explicit constexpr DeleteKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteKeyRequest(const DeleteKeyRequest& from);
  DeleteKeyRequest(DeleteKeyRequest&& from) noexcept
    : DeleteKeyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteKeyRequest& operator=(const DeleteKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteKeyRequest& operator=(DeleteKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteKeyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteKeyRequest*>(
               &_DeleteKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(DeleteKeyRequest& a, DeleteKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteKeyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteKeyRequest";
  }
  protected:
  explicit DeleteKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string key_id = 2;
  void clear_key_id();
  const std::string& key_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_id();
  PROTOBUF_NODISCARD std::string* release_key_id();
  void set_allocated_key_id(std::string* key_id);
  private:
  const std::string& _internal_key_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_id(const std::string& value);
  std::string* _internal_mutable_key_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchKeysRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchKeysRequest) */ {
 public:
  inline PatchKeysRequest() : PatchKeysRequest(nullptr) {}
  ~PatchKeysRequest() override;
  explicit constexpr PatchKeysRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchKeysRequest(const PatchKeysRequest& from);
  PatchKeysRequest(PatchKeysRequest&& from) noexcept
    : PatchKeysRequest() {
    *this = ::std::move(from);
  }

  inline PatchKeysRequest& operator=(const PatchKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchKeysRequest& operator=(PatchKeysRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchKeysRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchKeysRequest* internal_default_instance() {
    return reinterpret_cast<const PatchKeysRequest*>(
               &_PatchKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(PatchKeysRequest& a, PatchKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchKeysRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchKeysRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchKeysRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchKeysRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchKeysRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchKeysRequest";
  }
  protected:
  explicit PatchKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Key keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::clarifai::api::Key* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >*
      mutable_keys();
  private:
  const ::clarifai::api::Key& _internal_keys(int index) const;
  ::clarifai::api::Key* _internal_add_keys();
  public:
  const ::clarifai::api::Key& keys(int index) const;
  ::clarifai::api::Key* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >&
      keys() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleKeyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleKeyResponse) */ {
 public:
  inline SingleKeyResponse() : SingleKeyResponse(nullptr) {}
  ~SingleKeyResponse() override;
  explicit constexpr SingleKeyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleKeyResponse(const SingleKeyResponse& from);
  SingleKeyResponse(SingleKeyResponse&& from) noexcept
    : SingleKeyResponse() {
    *this = ::std::move(from);
  }

  inline SingleKeyResponse& operator=(const SingleKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleKeyResponse& operator=(SingleKeyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleKeyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleKeyResponse* internal_default_instance() {
    return reinterpret_cast<const SingleKeyResponse*>(
               &_SingleKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(SingleKeyResponse& a, SingleKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleKeyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleKeyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleKeyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleKeyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleKeyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleKeyResponse";
  }
  protected:
  explicit SingleKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.Key key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::clarifai::api::Key& key() const;
  PROTOBUF_NODISCARD ::clarifai::api::Key* release_key();
  ::clarifai::api::Key* mutable_key();
  void set_allocated_key(::clarifai::api::Key* key);
  private:
  const ::clarifai::api::Key& _internal_key() const;
  ::clarifai::api::Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::clarifai::api::Key* key);
  ::clarifai::api::Key* unsafe_arena_release_key();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Key* key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiKeyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiKeyResponse) */ {
 public:
  inline MultiKeyResponse() : MultiKeyResponse(nullptr) {}
  ~MultiKeyResponse() override;
  explicit constexpr MultiKeyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiKeyResponse(const MultiKeyResponse& from);
  MultiKeyResponse(MultiKeyResponse&& from) noexcept
    : MultiKeyResponse() {
    *this = ::std::move(from);
  }

  inline MultiKeyResponse& operator=(const MultiKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiKeyResponse& operator=(MultiKeyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiKeyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiKeyResponse* internal_default_instance() {
    return reinterpret_cast<const MultiKeyResponse*>(
               &_MultiKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(MultiKeyResponse& a, MultiKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiKeyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiKeyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiKeyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiKeyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiKeyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiKeyResponse";
  }
  protected:
  explicit MultiKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::clarifai::api::Key* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >*
      mutable_keys();
  private:
  const ::clarifai::api::Key& _internal_keys(int index) const;
  ::clarifai::api::Key* _internal_add_keys();
  public:
  const ::clarifai::api::Key& keys(int index) const;
  ::clarifai::api::Key* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >&
      keys() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key > keys_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetModelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetModelRequest) */ {
 public:
  inline GetModelRequest() : GetModelRequest(nullptr) {}
  ~GetModelRequest() override;
  explicit constexpr GetModelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelRequest(const GetModelRequest& from);
  GetModelRequest(GetModelRequest&& from) noexcept
    : GetModelRequest() {
    *this = ::std::move(from);
  }

  inline GetModelRequest& operator=(const GetModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelRequest& operator=(GetModelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelRequest* internal_default_instance() {
    return reinterpret_cast<const GetModelRequest*>(
               &_GetModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(GetModelRequest& a, GetModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetModelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetModelRequest";
  }
  protected:
  explicit GetModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalFieldsFieldNumber = 19,
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kLanguageFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
    kTrainedBeforeFieldNumber = 5,
  };
  // repeated string additional_fields = 19;
  int additional_fields_size() const;
  private:
  int _internal_additional_fields_size() const;
  public:
  void clear_additional_fields();
  const std::string& additional_fields(int index) const;
  std::string* mutable_additional_fields(int index);
  void set_additional_fields(int index, const std::string& value);
  void set_additional_fields(int index, std::string&& value);
  void set_additional_fields(int index, const char* value);
  void set_additional_fields(int index, const char* value, size_t size);
  std::string* add_additional_fields();
  void add_additional_fields(const std::string& value);
  void add_additional_fields(std::string&& value);
  void add_additional_fields(const char* value);
  void add_additional_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& additional_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_additional_fields();
  private:
  const std::string& _internal_additional_fields(int index) const;
  std::string* _internal_add_additional_fields();
  public:

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // string language = 4;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // bool trained_before = 5;
  void clear_trained_before();
  bool trained_before() const;
  void set_trained_before(bool value);
  private:
  bool _internal_trained_before() const;
  void _internal_set_trained_before(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> additional_fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool trained_before_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListModelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListModelsRequest) */ {
 public:
  inline ListModelsRequest() : ListModelsRequest(nullptr) {}
  ~ListModelsRequest() override;
  explicit constexpr ListModelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListModelsRequest(const ListModelsRequest& from);
  ListModelsRequest(ListModelsRequest&& from) noexcept
    : ListModelsRequest() {
    *this = ::std::move(from);
  }

  inline ListModelsRequest& operator=(const ListModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListModelsRequest& operator=(ListModelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListModelsRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SortByCase {
    kSortByName = 11,
    kSortByNumInputs = 12,
    kSortByModifiedAt = 13,
    SORT_BY_NOT_SET = 0,
  };

  static inline const ListModelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListModelsRequest*>(
               &_ListModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(ListModelsRequest& a, ListModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListModelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListModelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListModelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListModelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListModelsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListModelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListModelsRequest";
  }
  protected:
  explicit ListModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldsFieldNumber = 8,
    kOutputFieldsFieldNumber = 9,
    kToolkitsFieldNumber = 17,
    kUseCasesFieldNumber = 18,
    kAdditionalFieldsFieldNumber = 19,
    kLanguagesFieldNumber = 21,
    kNameFieldNumber = 5,
    kModelTypeIdFieldNumber = 6,
    kQueryFieldNumber = 14,
    kLicenseFieldNumber = 15,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
    kSortAscendingFieldNumber = 10,
    kFilterByUserIdFieldNumber = 22,
    kTrainedOnlyFieldNumber = 7,
    kFeaturedOnlyFieldNumber = 16,
    kStarredOnlyFieldNumber = 20,
    kSortByNameFieldNumber = 11,
    kSortByNumInputsFieldNumber = 12,
    kSortByModifiedAtFieldNumber = 13,
  };
  // repeated string input_fields = 8;
  int input_fields_size() const;
  private:
  int _internal_input_fields_size() const;
  public:
  void clear_input_fields();
  const std::string& input_fields(int index) const;
  std::string* mutable_input_fields(int index);
  void set_input_fields(int index, const std::string& value);
  void set_input_fields(int index, std::string&& value);
  void set_input_fields(int index, const char* value);
  void set_input_fields(int index, const char* value, size_t size);
  std::string* add_input_fields();
  void add_input_fields(const std::string& value);
  void add_input_fields(std::string&& value);
  void add_input_fields(const char* value);
  void add_input_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_fields();
  private:
  const std::string& _internal_input_fields(int index) const;
  std::string* _internal_add_input_fields();
  public:

  // repeated string output_fields = 9;
  int output_fields_size() const;
  private:
  int _internal_output_fields_size() const;
  public:
  void clear_output_fields();
  const std::string& output_fields(int index) const;
  std::string* mutable_output_fields(int index);
  void set_output_fields(int index, const std::string& value);
  void set_output_fields(int index, std::string&& value);
  void set_output_fields(int index, const char* value);
  void set_output_fields(int index, const char* value, size_t size);
  std::string* add_output_fields();
  void add_output_fields(const std::string& value);
  void add_output_fields(std::string&& value);
  void add_output_fields(const char* value);
  void add_output_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_fields();
  private:
  const std::string& _internal_output_fields(int index) const;
  std::string* _internal_add_output_fields();
  public:

  // repeated string toolkits = 17;
  int toolkits_size() const;
  private:
  int _internal_toolkits_size() const;
  public:
  void clear_toolkits();
  const std::string& toolkits(int index) const;
  std::string* mutable_toolkits(int index);
  void set_toolkits(int index, const std::string& value);
  void set_toolkits(int index, std::string&& value);
  void set_toolkits(int index, const char* value);
  void set_toolkits(int index, const char* value, size_t size);
  std::string* add_toolkits();
  void add_toolkits(const std::string& value);
  void add_toolkits(std::string&& value);
  void add_toolkits(const char* value);
  void add_toolkits(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& toolkits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_toolkits();
  private:
  const std::string& _internal_toolkits(int index) const;
  std::string* _internal_add_toolkits();
  public:

  // repeated string use_cases = 18;
  int use_cases_size() const;
  private:
  int _internal_use_cases_size() const;
  public:
  void clear_use_cases();
  const std::string& use_cases(int index) const;
  std::string* mutable_use_cases(int index);
  void set_use_cases(int index, const std::string& value);
  void set_use_cases(int index, std::string&& value);
  void set_use_cases(int index, const char* value);
  void set_use_cases(int index, const char* value, size_t size);
  std::string* add_use_cases();
  void add_use_cases(const std::string& value);
  void add_use_cases(std::string&& value);
  void add_use_cases(const char* value);
  void add_use_cases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& use_cases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_use_cases();
  private:
  const std::string& _internal_use_cases(int index) const;
  std::string* _internal_add_use_cases();
  public:

  // repeated string additional_fields = 19;
  int additional_fields_size() const;
  private:
  int _internal_additional_fields_size() const;
  public:
  void clear_additional_fields();
  const std::string& additional_fields(int index) const;
  std::string* mutable_additional_fields(int index);
  void set_additional_fields(int index, const std::string& value);
  void set_additional_fields(int index, std::string&& value);
  void set_additional_fields(int index, const char* value);
  void set_additional_fields(int index, const char* value, size_t size);
  std::string* add_additional_fields();
  void add_additional_fields(const std::string& value);
  void add_additional_fields(std::string&& value);
  void add_additional_fields(const char* value);
  void add_additional_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& additional_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_additional_fields();
  private:
  const std::string& _internal_additional_fields(int index) const;
  std::string* _internal_add_additional_fields();
  public:

  // repeated string languages = 21;
  int languages_size() const;
  private:
  int _internal_languages_size() const;
  public:
  void clear_languages();
  const std::string& languages(int index) const;
  std::string* mutable_languages(int index);
  void set_languages(int index, const std::string& value);
  void set_languages(int index, std::string&& value);
  void set_languages(int index, const char* value);
  void set_languages(int index, const char* value, size_t size);
  std::string* add_languages();
  void add_languages(const std::string& value);
  void add_languages(std::string&& value);
  void add_languages(const char* value);
  void add_languages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& languages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_languages();
  private:
  const std::string& _internal_languages(int index) const;
  std::string* _internal_add_languages();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string model_type_id = 6;
  void clear_model_type_id();
  const std::string& model_type_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_type_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_type_id();
  PROTOBUF_NODISCARD std::string* release_model_type_id();
  void set_allocated_model_type_id(std::string* model_type_id);
  private:
  const std::string& _internal_model_type_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_type_id(const std::string& value);
  std::string* _internal_mutable_model_type_id();
  public:

  // string query = 14;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string license = 15;
  void clear_license();
  const std::string& license() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_license(ArgT0&& arg0, ArgT... args);
  std::string* mutable_license();
  PROTOBUF_NODISCARD std::string* release_license();
  void set_allocated_license(std::string* license);
  private:
  const std::string& _internal_license() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_license(const std::string& value);
  std::string* _internal_mutable_license();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // bool sort_ascending = 10;
  void clear_sort_ascending();
  bool sort_ascending() const;
  void set_sort_ascending(bool value);
  private:
  bool _internal_sort_ascending() const;
  void _internal_set_sort_ascending(bool value);
  public:

  // bool filter_by_user_id = 22;
  void clear_filter_by_user_id();
  bool filter_by_user_id() const;
  void set_filter_by_user_id(bool value);
  private:
  bool _internal_filter_by_user_id() const;
  void _internal_set_filter_by_user_id(bool value);
  public:

  // bool trained_only = 7;
  void clear_trained_only();
  bool trained_only() const;
  void set_trained_only(bool value);
  private:
  bool _internal_trained_only() const;
  void _internal_set_trained_only(bool value);
  public:

  // bool featured_only = 16;
  void clear_featured_only();
  bool featured_only() const;
  void set_featured_only(bool value);
  private:
  bool _internal_featured_only() const;
  void _internal_set_featured_only(bool value);
  public:

  // bool starred_only = 20;
  void clear_starred_only();
  bool starred_only() const;
  void set_starred_only(bool value);
  private:
  bool _internal_starred_only() const;
  void _internal_set_starred_only(bool value);
  public:

  // bool sort_by_name = 11;
  bool has_sort_by_name() const;
  private:
  bool _internal_has_sort_by_name() const;
  public:
  void clear_sort_by_name();
  bool sort_by_name() const;
  void set_sort_by_name(bool value);
  private:
  bool _internal_sort_by_name() const;
  void _internal_set_sort_by_name(bool value);
  public:

  // bool sort_by_num_inputs = 12;
  bool has_sort_by_num_inputs() const;
  private:
  bool _internal_has_sort_by_num_inputs() const;
  public:
  void clear_sort_by_num_inputs();
  bool sort_by_num_inputs() const;
  void set_sort_by_num_inputs(bool value);
  private:
  bool _internal_sort_by_num_inputs() const;
  void _internal_set_sort_by_num_inputs(bool value);
  public:

  // bool sort_by_modified_at = 13;
  bool has_sort_by_modified_at() const;
  private:
  bool _internal_has_sort_by_modified_at() const;
  public:
  void clear_sort_by_modified_at();
  bool sort_by_modified_at() const;
  void set_sort_by_modified_at(bool value);
  private:
  bool _internal_sort_by_modified_at() const;
  void _internal_set_sort_by_modified_at(bool value);
  public:

  void clear_sort_by();
  SortByCase sort_by_case() const;
  // @@protoc_insertion_point(class_scope:clarifai.api.ListModelsRequest)
 private:
  class _Internal;
  void set_has_sort_by_name();
  void set_has_sort_by_num_inputs();
  void set_has_sort_by_modified_at();

  inline bool has_sort_by() const;
  inline void clear_has_sort_by();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> toolkits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> use_cases_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> additional_fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> languages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr license_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  bool sort_ascending_;
  bool filter_by_user_id_;
  bool trained_only_;
  bool featured_only_;
  bool starred_only_;
  union SortByUnion {
    constexpr SortByUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool sort_by_name_;
    bool sort_by_num_inputs_;
    bool sort_by_modified_at_;
  } sort_by_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchModelToolkitsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchModelToolkitsRequest) */ {
 public:
  inline PatchModelToolkitsRequest() : PatchModelToolkitsRequest(nullptr) {}
  ~PatchModelToolkitsRequest() override;
  explicit constexpr PatchModelToolkitsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchModelToolkitsRequest(const PatchModelToolkitsRequest& from);
  PatchModelToolkitsRequest(PatchModelToolkitsRequest&& from) noexcept
    : PatchModelToolkitsRequest() {
    *this = ::std::move(from);
  }

  inline PatchModelToolkitsRequest& operator=(const PatchModelToolkitsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchModelToolkitsRequest& operator=(PatchModelToolkitsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchModelToolkitsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchModelToolkitsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchModelToolkitsRequest*>(
               &_PatchModelToolkitsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(PatchModelToolkitsRequest& a, PatchModelToolkitsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchModelToolkitsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchModelToolkitsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchModelToolkitsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchModelToolkitsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchModelToolkitsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchModelToolkitsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchModelToolkitsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchModelToolkitsRequest";
  }
  protected:
  explicit PatchModelToolkitsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToolkitsFieldNumber = 3,
    kModelIdFieldNumber = 2,
    kActionFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string toolkits = 3;
  int toolkits_size() const;
  private:
  int _internal_toolkits_size() const;
  public:
  void clear_toolkits();
  const std::string& toolkits(int index) const;
  std::string* mutable_toolkits(int index);
  void set_toolkits(int index, const std::string& value);
  void set_toolkits(int index, std::string&& value);
  void set_toolkits(int index, const char* value);
  void set_toolkits(int index, const char* value, size_t size);
  std::string* add_toolkits();
  void add_toolkits(const std::string& value);
  void add_toolkits(std::string&& value);
  void add_toolkits(const char* value);
  void add_toolkits(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& toolkits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_toolkits();
  private:
  const std::string& _internal_toolkits(int index) const;
  std::string* _internal_add_toolkits();
  public:

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string action = 4;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchModelToolkitsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> toolkits_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchModelUseCasesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchModelUseCasesRequest) */ {
 public:
  inline PatchModelUseCasesRequest() : PatchModelUseCasesRequest(nullptr) {}
  ~PatchModelUseCasesRequest() override;
  explicit constexpr PatchModelUseCasesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchModelUseCasesRequest(const PatchModelUseCasesRequest& from);
  PatchModelUseCasesRequest(PatchModelUseCasesRequest&& from) noexcept
    : PatchModelUseCasesRequest() {
    *this = ::std::move(from);
  }

  inline PatchModelUseCasesRequest& operator=(const PatchModelUseCasesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchModelUseCasesRequest& operator=(PatchModelUseCasesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchModelUseCasesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchModelUseCasesRequest* internal_default_instance() {
    return reinterpret_cast<const PatchModelUseCasesRequest*>(
               &_PatchModelUseCasesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(PatchModelUseCasesRequest& a, PatchModelUseCasesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchModelUseCasesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchModelUseCasesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchModelUseCasesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchModelUseCasesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchModelUseCasesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchModelUseCasesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchModelUseCasesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchModelUseCasesRequest";
  }
  protected:
  explicit PatchModelUseCasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsecasesFieldNumber = 3,
    kModelIdFieldNumber = 2,
    kActionFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string usecases = 3;
  int usecases_size() const;
  private:
  int _internal_usecases_size() const;
  public:
  void clear_usecases();
  const std::string& usecases(int index) const;
  std::string* mutable_usecases(int index);
  void set_usecases(int index, const std::string& value);
  void set_usecases(int index, std::string&& value);
  void set_usecases(int index, const char* value);
  void set_usecases(int index, const char* value, size_t size);
  std::string* add_usecases();
  void add_usecases(const std::string& value);
  void add_usecases(std::string&& value);
  void add_usecases(const char* value);
  void add_usecases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& usecases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_usecases();
  private:
  const std::string& _internal_usecases(int index) const;
  std::string* _internal_add_usecases();
  public:

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string action = 4;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchModelUseCasesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> usecases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchModelLanguagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchModelLanguagesRequest) */ {
 public:
  inline PatchModelLanguagesRequest() : PatchModelLanguagesRequest(nullptr) {}
  ~PatchModelLanguagesRequest() override;
  explicit constexpr PatchModelLanguagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchModelLanguagesRequest(const PatchModelLanguagesRequest& from);
  PatchModelLanguagesRequest(PatchModelLanguagesRequest&& from) noexcept
    : PatchModelLanguagesRequest() {
    *this = ::std::move(from);
  }

  inline PatchModelLanguagesRequest& operator=(const PatchModelLanguagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchModelLanguagesRequest& operator=(PatchModelLanguagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchModelLanguagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchModelLanguagesRequest* internal_default_instance() {
    return reinterpret_cast<const PatchModelLanguagesRequest*>(
               &_PatchModelLanguagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(PatchModelLanguagesRequest& a, PatchModelLanguagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchModelLanguagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchModelLanguagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchModelLanguagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchModelLanguagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchModelLanguagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchModelLanguagesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchModelLanguagesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchModelLanguagesRequest";
  }
  protected:
  explicit PatchModelLanguagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguagesFieldNumber = 3,
    kModelIdFieldNumber = 2,
    kActionFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string languages = 3;
  int languages_size() const;
  private:
  int _internal_languages_size() const;
  public:
  void clear_languages();
  const std::string& languages(int index) const;
  std::string* mutable_languages(int index);
  void set_languages(int index, const std::string& value);
  void set_languages(int index, std::string&& value);
  void set_languages(int index, const char* value);
  void set_languages(int index, const char* value, size_t size);
  std::string* add_languages();
  void add_languages(const std::string& value);
  void add_languages(std::string&& value);
  void add_languages(const char* value);
  void add_languages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& languages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_languages();
  private:
  const std::string& _internal_languages(int index) const;
  std::string* _internal_add_languages();
  public:

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string action = 4;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchModelLanguagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> languages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiModelToolkitResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiModelToolkitResponse) */ {
 public:
  inline MultiModelToolkitResponse() : MultiModelToolkitResponse(nullptr) {}
  ~MultiModelToolkitResponse() override;
  explicit constexpr MultiModelToolkitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiModelToolkitResponse(const MultiModelToolkitResponse& from);
  MultiModelToolkitResponse(MultiModelToolkitResponse&& from) noexcept
    : MultiModelToolkitResponse() {
    *this = ::std::move(from);
  }

  inline MultiModelToolkitResponse& operator=(const MultiModelToolkitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiModelToolkitResponse& operator=(MultiModelToolkitResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiModelToolkitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiModelToolkitResponse* internal_default_instance() {
    return reinterpret_cast<const MultiModelToolkitResponse*>(
               &_MultiModelToolkitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(MultiModelToolkitResponse& a, MultiModelToolkitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiModelToolkitResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiModelToolkitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiModelToolkitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiModelToolkitResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiModelToolkitResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiModelToolkitResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiModelToolkitResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiModelToolkitResponse";
  }
  protected:
  explicit MultiModelToolkitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToolkitsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string toolkits = 2;
  int toolkits_size() const;
  private:
  int _internal_toolkits_size() const;
  public:
  void clear_toolkits();
  const std::string& toolkits(int index) const;
  std::string* mutable_toolkits(int index);
  void set_toolkits(int index, const std::string& value);
  void set_toolkits(int index, std::string&& value);
  void set_toolkits(int index, const char* value);
  void set_toolkits(int index, const char* value, size_t size);
  std::string* add_toolkits();
  void add_toolkits(const std::string& value);
  void add_toolkits(std::string&& value);
  void add_toolkits(const char* value);
  void add_toolkits(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& toolkits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_toolkits();
  private:
  const std::string& _internal_toolkits(int index) const;
  std::string* _internal_add_toolkits();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiModelToolkitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> toolkits_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiModelUseCaseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiModelUseCaseResponse) */ {
 public:
  inline MultiModelUseCaseResponse() : MultiModelUseCaseResponse(nullptr) {}
  ~MultiModelUseCaseResponse() override;
  explicit constexpr MultiModelUseCaseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiModelUseCaseResponse(const MultiModelUseCaseResponse& from);
  MultiModelUseCaseResponse(MultiModelUseCaseResponse&& from) noexcept
    : MultiModelUseCaseResponse() {
    *this = ::std::move(from);
  }

  inline MultiModelUseCaseResponse& operator=(const MultiModelUseCaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiModelUseCaseResponse& operator=(MultiModelUseCaseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiModelUseCaseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiModelUseCaseResponse* internal_default_instance() {
    return reinterpret_cast<const MultiModelUseCaseResponse*>(
               &_MultiModelUseCaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(MultiModelUseCaseResponse& a, MultiModelUseCaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiModelUseCaseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiModelUseCaseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiModelUseCaseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiModelUseCaseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiModelUseCaseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiModelUseCaseResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiModelUseCaseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiModelUseCaseResponse";
  }
  protected:
  explicit MultiModelUseCaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsecasesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string usecases = 2;
  int usecases_size() const;
  private:
  int _internal_usecases_size() const;
  public:
  void clear_usecases();
  const std::string& usecases(int index) const;
  std::string* mutable_usecases(int index);
  void set_usecases(int index, const std::string& value);
  void set_usecases(int index, std::string&& value);
  void set_usecases(int index, const char* value);
  void set_usecases(int index, const char* value, size_t size);
  std::string* add_usecases();
  void add_usecases(const std::string& value);
  void add_usecases(std::string&& value);
  void add_usecases(const char* value);
  void add_usecases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& usecases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_usecases();
  private:
  const std::string& _internal_usecases(int index) const;
  std::string* _internal_add_usecases();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiModelUseCaseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> usecases_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiModelLanguageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiModelLanguageResponse) */ {
 public:
  inline MultiModelLanguageResponse() : MultiModelLanguageResponse(nullptr) {}
  ~MultiModelLanguageResponse() override;
  explicit constexpr MultiModelLanguageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiModelLanguageResponse(const MultiModelLanguageResponse& from);
  MultiModelLanguageResponse(MultiModelLanguageResponse&& from) noexcept
    : MultiModelLanguageResponse() {
    *this = ::std::move(from);
  }

  inline MultiModelLanguageResponse& operator=(const MultiModelLanguageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiModelLanguageResponse& operator=(MultiModelLanguageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiModelLanguageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiModelLanguageResponse* internal_default_instance() {
    return reinterpret_cast<const MultiModelLanguageResponse*>(
               &_MultiModelLanguageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(MultiModelLanguageResponse& a, MultiModelLanguageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiModelLanguageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiModelLanguageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiModelLanguageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiModelLanguageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiModelLanguageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiModelLanguageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiModelLanguageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiModelLanguageResponse";
  }
  protected:
  explicit MultiModelLanguageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguagesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string languages = 2;
  int languages_size() const;
  private:
  int _internal_languages_size() const;
  public:
  void clear_languages();
  const std::string& languages(int index) const;
  std::string* mutable_languages(int index);
  void set_languages(int index, const std::string& value);
  void set_languages(int index, std::string&& value);
  void set_languages(int index, const char* value);
  void set_languages(int index, const char* value, size_t size);
  std::string* add_languages();
  void add_languages(const std::string& value);
  void add_languages(std::string&& value);
  void add_languages(const char* value);
  void add_languages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& languages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_languages();
  private:
  const std::string& _internal_languages(int index) const;
  std::string* _internal_add_languages();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiModelLanguageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> languages_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelsRequest) */ {
 public:
  inline PostModelsRequest() : PostModelsRequest(nullptr) {}
  ~PostModelsRequest() override;
  explicit constexpr PostModelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostModelsRequest(const PostModelsRequest& from);
  PostModelsRequest(PostModelsRequest&& from) noexcept
    : PostModelsRequest() {
    *this = ::std::move(from);
  }

  inline PostModelsRequest& operator=(const PostModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelsRequest& operator=(PostModelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostModelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostModelsRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelsRequest*>(
               &_PostModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(PostModelsRequest& a, PostModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostModelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostModelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostModelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostModelsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelsRequest";
  }
  protected:
  explicit PostModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kModelFieldNumber = 2,
  };
  // repeated .clarifai.api.Model models = 3;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::clarifai::api::Model* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >*
      mutable_models();
  private:
  const ::clarifai::api::Model& _internal_models(int index) const;
  ::clarifai::api::Model* _internal_add_models();
  public:
  const ::clarifai::api::Model& models(int index) const;
  ::clarifai::api::Model* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >&
      models() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.Model model = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  PROTOBUF_DEPRECATED void clear_model();
  PROTOBUF_DEPRECATED const ::clarifai::api::Model& model() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::clarifai::api::Model* release_model();
  PROTOBUF_DEPRECATED ::clarifai::api::Model* mutable_model();
  PROTOBUF_DEPRECATED void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_model(
      ::clarifai::api::Model* model);
  PROTOBUF_DEPRECATED ::clarifai::api::Model* unsafe_arena_release_model();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model > models_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Model* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchModelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchModelsRequest) */ {
 public:
  inline PatchModelsRequest() : PatchModelsRequest(nullptr) {}
  ~PatchModelsRequest() override;
  explicit constexpr PatchModelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchModelsRequest(const PatchModelsRequest& from);
  PatchModelsRequest(PatchModelsRequest&& from) noexcept
    : PatchModelsRequest() {
    *this = ::std::move(from);
  }

  inline PatchModelsRequest& operator=(const PatchModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchModelsRequest& operator=(PatchModelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchModelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchModelsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchModelsRequest*>(
               &_PatchModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(PatchModelsRequest& a, PatchModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchModelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchModelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchModelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchModelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchModelsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchModelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchModelsRequest";
  }
  protected:
  explicit PatchModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Model models = 2;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::clarifai::api::Model* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >*
      mutable_models();
  private:
  const ::clarifai::api::Model& _internal_models(int index) const;
  ::clarifai::api::Model* _internal_add_models();
  public:
  const ::clarifai::api::Model& models(int index) const;
  ::clarifai::api::Model* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >&
      models() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchModelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model > models_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class IdUpdateSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.IdUpdateSource) */ {
 public:
  inline IdUpdateSource() : IdUpdateSource(nullptr) {}
  ~IdUpdateSource() override;
  explicit constexpr IdUpdateSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdUpdateSource(const IdUpdateSource& from);
  IdUpdateSource(IdUpdateSource&& from) noexcept
    : IdUpdateSource() {
    *this = ::std::move(from);
  }

  inline IdUpdateSource& operator=(const IdUpdateSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdUpdateSource& operator=(IdUpdateSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdUpdateSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdUpdateSource* internal_default_instance() {
    return reinterpret_cast<const IdUpdateSource*>(
               &_IdUpdateSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(IdUpdateSource& a, IdUpdateSource& b) {
    a.Swap(&b);
  }
  inline void Swap(IdUpdateSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdUpdateSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdUpdateSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IdUpdateSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IdUpdateSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IdUpdateSource& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdUpdateSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.IdUpdateSource";
  }
  protected:
  explicit IdUpdateSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNewIdFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string new_id = 2;
  void clear_new_id();
  const std::string& new_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_id();
  PROTOBUF_NODISCARD std::string* release_new_id();
  void set_allocated_new_id(std::string* new_id);
  private:
  const std::string& _internal_new_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_id(const std::string& value);
  std::string* _internal_mutable_new_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.IdUpdateSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchModelIdsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchModelIdsRequest) */ {
 public:
  inline PatchModelIdsRequest() : PatchModelIdsRequest(nullptr) {}
  ~PatchModelIdsRequest() override;
  explicit constexpr PatchModelIdsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchModelIdsRequest(const PatchModelIdsRequest& from);
  PatchModelIdsRequest(PatchModelIdsRequest&& from) noexcept
    : PatchModelIdsRequest() {
    *this = ::std::move(from);
  }

  inline PatchModelIdsRequest& operator=(const PatchModelIdsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchModelIdsRequest& operator=(PatchModelIdsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchModelIdsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchModelIdsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchModelIdsRequest*>(
               &_PatchModelIdsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(PatchModelIdsRequest& a, PatchModelIdsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchModelIdsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchModelIdsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchModelIdsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchModelIdsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchModelIdsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchModelIdsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchModelIdsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchModelIdsRequest";
  }
  protected:
  explicit PatchModelIdsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 3,
    kActionFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.IdUpdateSource ids = 3;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  ::clarifai::api::IdUpdateSource* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::IdUpdateSource >*
      mutable_ids();
  private:
  const ::clarifai::api::IdUpdateSource& _internal_ids(int index) const;
  ::clarifai::api::IdUpdateSource* _internal_add_ids();
  public:
  const ::clarifai::api::IdUpdateSource& ids(int index) const;
  ::clarifai::api::IdUpdateSource* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::IdUpdateSource >&
      ids() const;

  // string action = 4;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchModelIdsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::IdUpdateSource > ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteModelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteModelRequest) */ {
 public:
  inline DeleteModelRequest() : DeleteModelRequest(nullptr) {}
  ~DeleteModelRequest() override;
  explicit constexpr DeleteModelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteModelRequest(const DeleteModelRequest& from);
  DeleteModelRequest(DeleteModelRequest&& from) noexcept
    : DeleteModelRequest() {
    *this = ::std::move(from);
  }

  inline DeleteModelRequest& operator=(const DeleteModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteModelRequest& operator=(DeleteModelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteModelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteModelRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteModelRequest*>(
               &_DeleteModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(DeleteModelRequest& a, DeleteModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteModelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteModelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteModelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteModelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteModelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteModelRequest";
  }
  protected:
  explicit DeleteModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteModelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteModelsRequest) */ {
 public:
  inline DeleteModelsRequest() : DeleteModelsRequest(nullptr) {}
  ~DeleteModelsRequest() override;
  explicit constexpr DeleteModelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteModelsRequest(const DeleteModelsRequest& from);
  DeleteModelsRequest(DeleteModelsRequest&& from) noexcept
    : DeleteModelsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteModelsRequest& operator=(const DeleteModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteModelsRequest& operator=(DeleteModelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteModelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteModelsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteModelsRequest*>(
               &_DeleteModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(DeleteModelsRequest& a, DeleteModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteModelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteModelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteModelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteModelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteModelsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteModelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteModelsRequest";
  }
  protected:
  explicit DeleteModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kDeleteAllFieldNumber = 3,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // bool delete_all = 3;
  void clear_delete_all();
  bool delete_all() const;
  void set_delete_all(bool value);
  private:
  bool _internal_delete_all() const;
  void _internal_set_delete_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteModelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool delete_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelsSearchesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelsSearchesRequest) */ {
 public:
  inline PostModelsSearchesRequest() : PostModelsSearchesRequest(nullptr) {}
  ~PostModelsSearchesRequest() override;
  explicit constexpr PostModelsSearchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostModelsSearchesRequest(const PostModelsSearchesRequest& from);
  PostModelsSearchesRequest(PostModelsSearchesRequest&& from) noexcept
    : PostModelsSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PostModelsSearchesRequest& operator=(const PostModelsSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelsSearchesRequest& operator=(PostModelsSearchesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostModelsSearchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostModelsSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelsSearchesRequest*>(
               &_PostModelsSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(PostModelsSearchesRequest& a, PostModelsSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelsSearchesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostModelsSearchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostModelsSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostModelsSearchesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostModelsSearchesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostModelsSearchesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelsSearchesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelsSearchesRequest";
  }
  protected:
  explicit PostModelsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kModelQueryFieldNumber = 2,
    kPaginationFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.ModelQuery model_query = 2;
  bool has_model_query() const;
  private:
  bool _internal_has_model_query() const;
  public:
  void clear_model_query();
  const ::clarifai::api::ModelQuery& model_query() const;
  PROTOBUF_NODISCARD ::clarifai::api::ModelQuery* release_model_query();
  ::clarifai::api::ModelQuery* mutable_model_query();
  void set_allocated_model_query(::clarifai::api::ModelQuery* model_query);
  private:
  const ::clarifai::api::ModelQuery& _internal_model_query() const;
  ::clarifai::api::ModelQuery* _internal_mutable_model_query();
  public:
  void unsafe_arena_set_allocated_model_query(
      ::clarifai::api::ModelQuery* model_query);
  ::clarifai::api::ModelQuery* unsafe_arena_release_model_query();

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::clarifai::api::Pagination* pagination);
  ::clarifai::api::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelsSearchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::ModelQuery* model_query_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleModelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleModelResponse) */ {
 public:
  inline SingleModelResponse() : SingleModelResponse(nullptr) {}
  ~SingleModelResponse() override;
  explicit constexpr SingleModelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleModelResponse(const SingleModelResponse& from);
  SingleModelResponse(SingleModelResponse&& from) noexcept
    : SingleModelResponse() {
    *this = ::std::move(from);
  }

  inline SingleModelResponse& operator=(const SingleModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleModelResponse& operator=(SingleModelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleModelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleModelResponse* internal_default_instance() {
    return reinterpret_cast<const SingleModelResponse*>(
               &_SingleModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(SingleModelResponse& a, SingleModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleModelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleModelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleModelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleModelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleModelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleModelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleModelResponse";
  }
  protected:
  explicit SingleModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kModelFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.Model model = 2;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  PROTOBUF_NODISCARD ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::clarifai::api::Model* model);
  ::clarifai::api::Model* unsafe_arena_release_model();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleModelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Model* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiModelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiModelResponse) */ {
 public:
  inline MultiModelResponse() : MultiModelResponse(nullptr) {}
  ~MultiModelResponse() override;
  explicit constexpr MultiModelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiModelResponse(const MultiModelResponse& from);
  MultiModelResponse(MultiModelResponse&& from) noexcept
    : MultiModelResponse() {
    *this = ::std::move(from);
  }

  inline MultiModelResponse& operator=(const MultiModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiModelResponse& operator=(MultiModelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiModelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiModelResponse* internal_default_instance() {
    return reinterpret_cast<const MultiModelResponse*>(
               &_MultiModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(MultiModelResponse& a, MultiModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiModelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiModelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiModelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiModelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiModelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiModelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiModelResponse";
  }
  protected:
  explicit MultiModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::clarifai::api::Model* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >*
      mutable_models();
  private:
  const ::clarifai::api::Model& _internal_models(int index) const;
  ::clarifai::api::Model* _internal_add_models();
  public:
  const ::clarifai::api::Model& models(int index) const;
  ::clarifai::api::Model* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >&
      models() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiModelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model > models_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchModelVersionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchModelVersionsRequest) */ {
 public:
  inline PatchModelVersionsRequest() : PatchModelVersionsRequest(nullptr) {}
  ~PatchModelVersionsRequest() override;
  explicit constexpr PatchModelVersionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchModelVersionsRequest(const PatchModelVersionsRequest& from);
  PatchModelVersionsRequest(PatchModelVersionsRequest&& from) noexcept
    : PatchModelVersionsRequest() {
    *this = ::std::move(from);
  }

  inline PatchModelVersionsRequest& operator=(const PatchModelVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchModelVersionsRequest& operator=(PatchModelVersionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchModelVersionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchModelVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchModelVersionsRequest*>(
               &_PatchModelVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(PatchModelVersionsRequest& a, PatchModelVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchModelVersionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchModelVersionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchModelVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchModelVersionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchModelVersionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchModelVersionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchModelVersionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchModelVersionsRequest";
  }
  protected:
  explicit PatchModelVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelVersionsFieldNumber = 3,
    kModelIdFieldNumber = 2,
    kActionFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.ModelVersion model_versions = 3;
  int model_versions_size() const;
  private:
  int _internal_model_versions_size() const;
  public:
  void clear_model_versions();
  ::clarifai::api::ModelVersion* mutable_model_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >*
      mutable_model_versions();
  private:
  const ::clarifai::api::ModelVersion& _internal_model_versions(int index) const;
  ::clarifai::api::ModelVersion* _internal_add_model_versions();
  public:
  const ::clarifai::api::ModelVersion& model_versions(int index) const;
  ::clarifai::api::ModelVersion* add_model_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >&
      model_versions() const;

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string action = 4;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchModelVersionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion > model_versions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetModelVersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetModelVersionRequest) */ {
 public:
  inline GetModelVersionRequest() : GetModelVersionRequest(nullptr) {}
  ~GetModelVersionRequest() override;
  explicit constexpr GetModelVersionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelVersionRequest(const GetModelVersionRequest& from);
  GetModelVersionRequest(GetModelVersionRequest&& from) noexcept
    : GetModelVersionRequest() {
    *this = ::std::move(from);
  }

  inline GetModelVersionRequest& operator=(const GetModelVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelVersionRequest& operator=(GetModelVersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelVersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelVersionRequest* internal_default_instance() {
    return reinterpret_cast<const GetModelVersionRequest*>(
               &_GetModelVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(GetModelVersionRequest& a, GetModelVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelVersionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelVersionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModelVersionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetModelVersionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelVersionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetModelVersionRequest";
  }
  protected:
  explicit GetModelVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetModelVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListModelVersionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListModelVersionsRequest) */ {
 public:
  inline ListModelVersionsRequest() : ListModelVersionsRequest(nullptr) {}
  ~ListModelVersionsRequest() override;
  explicit constexpr ListModelVersionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListModelVersionsRequest(const ListModelVersionsRequest& from);
  ListModelVersionsRequest(ListModelVersionsRequest&& from) noexcept
    : ListModelVersionsRequest() {
    *this = ::std::move(from);
  }

  inline ListModelVersionsRequest& operator=(const ListModelVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListModelVersionsRequest& operator=(ListModelVersionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListModelVersionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListModelVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListModelVersionsRequest*>(
               &_ListModelVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(ListModelVersionsRequest& a, ListModelVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListModelVersionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListModelVersionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListModelVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListModelVersionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListModelVersionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListModelVersionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListModelVersionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListModelVersionsRequest";
  }
  protected:
  explicit ListModelVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdsFieldNumber = 5,
    kModelIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
  };
  // repeated string concept_ids = 5;
  int concept_ids_size() const;
  private:
  int _internal_concept_ids_size() const;
  public:
  void clear_concept_ids();
  const std::string& concept_ids(int index) const;
  std::string* mutable_concept_ids(int index);
  void set_concept_ids(int index, const std::string& value);
  void set_concept_ids(int index, std::string&& value);
  void set_concept_ids(int index, const char* value);
  void set_concept_ids(int index, const char* value, size_t size);
  std::string* add_concept_ids();
  void add_concept_ids(const std::string& value);
  void add_concept_ids(std::string&& value);
  void add_concept_ids(const char* value);
  void add_concept_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& concept_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_concept_ids();
  private:
  const std::string& _internal_concept_ids(int index) const;
  std::string* _internal_add_concept_ids();
  public:

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 3;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListModelVersionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> concept_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteModelVersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteModelVersionRequest) */ {
 public:
  inline DeleteModelVersionRequest() : DeleteModelVersionRequest(nullptr) {}
  ~DeleteModelVersionRequest() override;
  explicit constexpr DeleteModelVersionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteModelVersionRequest(const DeleteModelVersionRequest& from);
  DeleteModelVersionRequest(DeleteModelVersionRequest&& from) noexcept
    : DeleteModelVersionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteModelVersionRequest& operator=(const DeleteModelVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteModelVersionRequest& operator=(DeleteModelVersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteModelVersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteModelVersionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteModelVersionRequest*>(
               &_DeleteModelVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(DeleteModelVersionRequest& a, DeleteModelVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteModelVersionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteModelVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteModelVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteModelVersionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteModelVersionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteModelVersionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteModelVersionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteModelVersionRequest";
  }
  protected:
  explicit DeleteModelVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 3,
    kVersionIdFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // string model_id = 3;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 4;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteModelVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleModelVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleModelVersionResponse) */ {
 public:
  inline SingleModelVersionResponse() : SingleModelVersionResponse(nullptr) {}
  ~SingleModelVersionResponse() override;
  explicit constexpr SingleModelVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleModelVersionResponse(const SingleModelVersionResponse& from);
  SingleModelVersionResponse(SingleModelVersionResponse&& from) noexcept
    : SingleModelVersionResponse() {
    *this = ::std::move(from);
  }

  inline SingleModelVersionResponse& operator=(const SingleModelVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleModelVersionResponse& operator=(SingleModelVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleModelVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleModelVersionResponse* internal_default_instance() {
    return reinterpret_cast<const SingleModelVersionResponse*>(
               &_SingleModelVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(SingleModelVersionResponse& a, SingleModelVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleModelVersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleModelVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleModelVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleModelVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleModelVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleModelVersionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleModelVersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleModelVersionResponse";
  }
  protected:
  explicit SingleModelVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kModelVersionFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.ModelVersion model_version = 2;
  bool has_model_version() const;
  private:
  bool _internal_has_model_version() const;
  public:
  void clear_model_version();
  const ::clarifai::api::ModelVersion& model_version() const;
  PROTOBUF_NODISCARD ::clarifai::api::ModelVersion* release_model_version();
  ::clarifai::api::ModelVersion* mutable_model_version();
  void set_allocated_model_version(::clarifai::api::ModelVersion* model_version);
  private:
  const ::clarifai::api::ModelVersion& _internal_model_version() const;
  ::clarifai::api::ModelVersion* _internal_mutable_model_version();
  public:
  void unsafe_arena_set_allocated_model_version(
      ::clarifai::api::ModelVersion* model_version);
  ::clarifai::api::ModelVersion* unsafe_arena_release_model_version();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleModelVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::ModelVersion* model_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiModelVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiModelVersionResponse) */ {
 public:
  inline MultiModelVersionResponse() : MultiModelVersionResponse(nullptr) {}
  ~MultiModelVersionResponse() override;
  explicit constexpr MultiModelVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiModelVersionResponse(const MultiModelVersionResponse& from);
  MultiModelVersionResponse(MultiModelVersionResponse&& from) noexcept
    : MultiModelVersionResponse() {
    *this = ::std::move(from);
  }

  inline MultiModelVersionResponse& operator=(const MultiModelVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiModelVersionResponse& operator=(MultiModelVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiModelVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiModelVersionResponse* internal_default_instance() {
    return reinterpret_cast<const MultiModelVersionResponse*>(
               &_MultiModelVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(MultiModelVersionResponse& a, MultiModelVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiModelVersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiModelVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiModelVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiModelVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiModelVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiModelVersionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiModelVersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiModelVersionResponse";
  }
  protected:
  explicit MultiModelVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelVersionsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int model_versions_size() const;
  private:
  int _internal_model_versions_size() const;
  public:
  void clear_model_versions();
  ::clarifai::api::ModelVersion* mutable_model_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >*
      mutable_model_versions();
  private:
  const ::clarifai::api::ModelVersion& _internal_model_versions(int index) const;
  ::clarifai::api::ModelVersion* _internal_add_model_versions();
  public:
  const ::clarifai::api::ModelVersion& model_versions(int index) const;
  ::clarifai::api::ModelVersion* add_model_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >&
      model_versions() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiModelVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion > model_versions_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelVersionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelVersionsRequest) */ {
 public:
  inline PostModelVersionsRequest() : PostModelVersionsRequest(nullptr) {}
  ~PostModelVersionsRequest() override;
  explicit constexpr PostModelVersionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostModelVersionsRequest(const PostModelVersionsRequest& from);
  PostModelVersionsRequest(PostModelVersionsRequest&& from) noexcept
    : PostModelVersionsRequest() {
    *this = ::std::move(from);
  }

  inline PostModelVersionsRequest& operator=(const PostModelVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelVersionsRequest& operator=(PostModelVersionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostModelVersionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostModelVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelVersionsRequest*>(
               &_PostModelVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(PostModelVersionsRequest& a, PostModelVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelVersionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostModelVersionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostModelVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostModelVersionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostModelVersionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostModelVersionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelVersionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelVersionsRequest";
  }
  protected:
  explicit PostModelVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelVersionsFieldNumber = 3,
    kModelIdFieldNumber = 2,
    kDescriptionFieldNumber = 8,
    kUserAppIdFieldNumber = 1,
    kSearchFieldNumber = 4,
    kTrainSearchFieldNumber = 5,
    kTestSearchFieldNumber = 6,
    kDatasetVersionFieldNumber = 9,
    kEvaluateAfterTrainingFieldNumber = 7,
  };
  // repeated .clarifai.api.ModelVersion model_versions = 3;
  int model_versions_size() const;
  private:
  int _internal_model_versions_size() const;
  public:
  void clear_model_versions();
  ::clarifai::api::ModelVersion* mutable_model_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >*
      mutable_model_versions();
  private:
  const ::clarifai::api::ModelVersion& _internal_model_versions(int index) const;
  ::clarifai::api::ModelVersion* _internal_add_model_versions();
  public:
  const ::clarifai::api::ModelVersion& model_versions(int index) const;
  ::clarifai::api::ModelVersion* add_model_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >&
      model_versions() const;

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string description = 8;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.Search search = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_search() const;
  private:
  bool _internal_has_search() const;
  public:
  PROTOBUF_DEPRECATED void clear_search();
  PROTOBUF_DEPRECATED const ::clarifai::api::Search& search() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::clarifai::api::Search* release_search();
  PROTOBUF_DEPRECATED ::clarifai::api::Search* mutable_search();
  PROTOBUF_DEPRECATED void set_allocated_search(::clarifai::api::Search* search);
  private:
  const ::clarifai::api::Search& _internal_search() const;
  ::clarifai::api::Search* _internal_mutable_search();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_search(
      ::clarifai::api::Search* search);
  PROTOBUF_DEPRECATED ::clarifai::api::Search* unsafe_arena_release_search();

  // .clarifai.api.Search train_search = 5;
  bool has_train_search() const;
  private:
  bool _internal_has_train_search() const;
  public:
  void clear_train_search();
  const ::clarifai::api::Search& train_search() const;
  PROTOBUF_NODISCARD ::clarifai::api::Search* release_train_search();
  ::clarifai::api::Search* mutable_train_search();
  void set_allocated_train_search(::clarifai::api::Search* train_search);
  private:
  const ::clarifai::api::Search& _internal_train_search() const;
  ::clarifai::api::Search* _internal_mutable_train_search();
  public:
  void unsafe_arena_set_allocated_train_search(
      ::clarifai::api::Search* train_search);
  ::clarifai::api::Search* unsafe_arena_release_train_search();

  // .clarifai.api.Search test_search = 6;
  bool has_test_search() const;
  private:
  bool _internal_has_test_search() const;
  public:
  void clear_test_search();
  const ::clarifai::api::Search& test_search() const;
  PROTOBUF_NODISCARD ::clarifai::api::Search* release_test_search();
  ::clarifai::api::Search* mutable_test_search();
  void set_allocated_test_search(::clarifai::api::Search* test_search);
  private:
  const ::clarifai::api::Search& _internal_test_search() const;
  ::clarifai::api::Search* _internal_mutable_test_search();
  public:
  void unsafe_arena_set_allocated_test_search(
      ::clarifai::api::Search* test_search);
  ::clarifai::api::Search* unsafe_arena_release_test_search();

  // .clarifai.api.DatasetVersion dataset_version = 9;
  bool has_dataset_version() const;
  private:
  bool _internal_has_dataset_version() const;
  public:
  void clear_dataset_version();
  const ::clarifai::api::DatasetVersion& dataset_version() const;
  PROTOBUF_NODISCARD ::clarifai::api::DatasetVersion* release_dataset_version();
  ::clarifai::api::DatasetVersion* mutable_dataset_version();
  void set_allocated_dataset_version(::clarifai::api::DatasetVersion* dataset_version);
  private:
  const ::clarifai::api::DatasetVersion& _internal_dataset_version() const;
  ::clarifai::api::DatasetVersion* _internal_mutable_dataset_version();
  public:
  void unsafe_arena_set_allocated_dataset_version(
      ::clarifai::api::DatasetVersion* dataset_version);
  ::clarifai::api::DatasetVersion* unsafe_arena_release_dataset_version();

  // bool evaluate_after_training = 7;
  void clear_evaluate_after_training();
  bool evaluate_after_training() const;
  void set_evaluate_after_training(bool value);
  private:
  bool _internal_evaluate_after_training() const;
  void _internal_set_evaluate_after_training(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelVersionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion > model_versions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Search* search_;
  ::clarifai::api::Search* train_search_;
  ::clarifai::api::Search* test_search_;
  ::clarifai::api::DatasetVersion* dataset_version_;
  bool evaluate_after_training_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostWorkflowVersionsUnPublishRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostWorkflowVersionsUnPublishRequest) */ {
 public:
  inline PostWorkflowVersionsUnPublishRequest() : PostWorkflowVersionsUnPublishRequest(nullptr) {}
  ~PostWorkflowVersionsUnPublishRequest() override;
  explicit constexpr PostWorkflowVersionsUnPublishRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostWorkflowVersionsUnPublishRequest(const PostWorkflowVersionsUnPublishRequest& from);
  PostWorkflowVersionsUnPublishRequest(PostWorkflowVersionsUnPublishRequest&& from) noexcept
    : PostWorkflowVersionsUnPublishRequest() {
    *this = ::std::move(from);
  }

  inline PostWorkflowVersionsUnPublishRequest& operator=(const PostWorkflowVersionsUnPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostWorkflowVersionsUnPublishRequest& operator=(PostWorkflowVersionsUnPublishRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostWorkflowVersionsUnPublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostWorkflowVersionsUnPublishRequest* internal_default_instance() {
    return reinterpret_cast<const PostWorkflowVersionsUnPublishRequest*>(
               &_PostWorkflowVersionsUnPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(PostWorkflowVersionsUnPublishRequest& a, PostWorkflowVersionsUnPublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostWorkflowVersionsUnPublishRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostWorkflowVersionsUnPublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostWorkflowVersionsUnPublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostWorkflowVersionsUnPublishRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostWorkflowVersionsUnPublishRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostWorkflowVersionsUnPublishRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostWorkflowVersionsUnPublishRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostWorkflowVersionsUnPublishRequest";
  }
  protected:
  explicit PostWorkflowVersionsUnPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicationsFieldNumber = 3,
    kWorkflowIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.WorkflowVersionUnPublishRequest publications = 3;
  int publications_size() const;
  private:
  int _internal_publications_size() const;
  public:
  void clear_publications();
  ::clarifai::api::WorkflowVersionUnPublishRequest* mutable_publications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersionUnPublishRequest >*
      mutable_publications();
  private:
  const ::clarifai::api::WorkflowVersionUnPublishRequest& _internal_publications(int index) const;
  ::clarifai::api::WorkflowVersionUnPublishRequest* _internal_add_publications();
  public:
  const ::clarifai::api::WorkflowVersionUnPublishRequest& publications(int index) const;
  ::clarifai::api::WorkflowVersionUnPublishRequest* add_publications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersionUnPublishRequest >&
      publications() const;

  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostWorkflowVersionsUnPublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersionUnPublishRequest > publications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostWorkflowVersionsPublishRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostWorkflowVersionsPublishRequest) */ {
 public:
  inline PostWorkflowVersionsPublishRequest() : PostWorkflowVersionsPublishRequest(nullptr) {}
  ~PostWorkflowVersionsPublishRequest() override;
  explicit constexpr PostWorkflowVersionsPublishRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostWorkflowVersionsPublishRequest(const PostWorkflowVersionsPublishRequest& from);
  PostWorkflowVersionsPublishRequest(PostWorkflowVersionsPublishRequest&& from) noexcept
    : PostWorkflowVersionsPublishRequest() {
    *this = ::std::move(from);
  }

  inline PostWorkflowVersionsPublishRequest& operator=(const PostWorkflowVersionsPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostWorkflowVersionsPublishRequest& operator=(PostWorkflowVersionsPublishRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostWorkflowVersionsPublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostWorkflowVersionsPublishRequest* internal_default_instance() {
    return reinterpret_cast<const PostWorkflowVersionsPublishRequest*>(
               &_PostWorkflowVersionsPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(PostWorkflowVersionsPublishRequest& a, PostWorkflowVersionsPublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostWorkflowVersionsPublishRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostWorkflowVersionsPublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostWorkflowVersionsPublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostWorkflowVersionsPublishRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostWorkflowVersionsPublishRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostWorkflowVersionsPublishRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostWorkflowVersionsPublishRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostWorkflowVersionsPublishRequest";
  }
  protected:
  explicit PostWorkflowVersionsPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicationsFieldNumber = 3,
    kWorkflowIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.WorkflowVersionPublishRequest publications = 3;
  int publications_size() const;
  private:
  int _internal_publications_size() const;
  public:
  void clear_publications();
  ::clarifai::api::WorkflowVersionPublishRequest* mutable_publications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersionPublishRequest >*
      mutable_publications();
  private:
  const ::clarifai::api::WorkflowVersionPublishRequest& _internal_publications(int index) const;
  ::clarifai::api::WorkflowVersionPublishRequest* _internal_add_publications();
  public:
  const ::clarifai::api::WorkflowVersionPublishRequest& publications(int index) const;
  ::clarifai::api::WorkflowVersionPublishRequest* add_publications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersionPublishRequest >&
      publications() const;

  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostWorkflowVersionsPublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersionPublishRequest > publications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class WorkflowVersionPublishRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.WorkflowVersionPublishRequest) */ {
 public:
  inline WorkflowVersionPublishRequest() : WorkflowVersionPublishRequest(nullptr) {}
  ~WorkflowVersionPublishRequest() override;
  explicit constexpr WorkflowVersionPublishRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowVersionPublishRequest(const WorkflowVersionPublishRequest& from);
  WorkflowVersionPublishRequest(WorkflowVersionPublishRequest&& from) noexcept
    : WorkflowVersionPublishRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowVersionPublishRequest& operator=(const WorkflowVersionPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowVersionPublishRequest& operator=(WorkflowVersionPublishRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowVersionPublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowVersionPublishRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowVersionPublishRequest*>(
               &_WorkflowVersionPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(WorkflowVersionPublishRequest& a, WorkflowVersionPublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowVersionPublishRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowVersionPublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowVersionPublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowVersionPublishRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorkflowVersionPublishRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WorkflowVersionPublishRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowVersionPublishRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.WorkflowVersionPublishRequest";
  }
  protected:
  explicit WorkflowVersionPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionIdFieldNumber = 1,
  };
  // string version_id = 1;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.WorkflowVersionPublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class WorkflowVersionUnPublishRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.WorkflowVersionUnPublishRequest) */ {
 public:
  inline WorkflowVersionUnPublishRequest() : WorkflowVersionUnPublishRequest(nullptr) {}
  ~WorkflowVersionUnPublishRequest() override;
  explicit constexpr WorkflowVersionUnPublishRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowVersionUnPublishRequest(const WorkflowVersionUnPublishRequest& from);
  WorkflowVersionUnPublishRequest(WorkflowVersionUnPublishRequest&& from) noexcept
    : WorkflowVersionUnPublishRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowVersionUnPublishRequest& operator=(const WorkflowVersionUnPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowVersionUnPublishRequest& operator=(WorkflowVersionUnPublishRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowVersionUnPublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowVersionUnPublishRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowVersionUnPublishRequest*>(
               &_WorkflowVersionUnPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(WorkflowVersionUnPublishRequest& a, WorkflowVersionUnPublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowVersionUnPublishRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowVersionUnPublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowVersionUnPublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowVersionUnPublishRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorkflowVersionUnPublishRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WorkflowVersionUnPublishRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowVersionUnPublishRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.WorkflowVersionUnPublishRequest";
  }
  protected:
  explicit WorkflowVersionUnPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionIdFieldNumber = 1,
  };
  // string version_id = 1;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.WorkflowVersionUnPublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ModelVersionPublishRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ModelVersionPublishRequest) */ {
 public:
  inline ModelVersionPublishRequest() : ModelVersionPublishRequest(nullptr) {}
  ~ModelVersionPublishRequest() override;
  explicit constexpr ModelVersionPublishRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelVersionPublishRequest(const ModelVersionPublishRequest& from);
  ModelVersionPublishRequest(ModelVersionPublishRequest&& from) noexcept
    : ModelVersionPublishRequest() {
    *this = ::std::move(from);
  }

  inline ModelVersionPublishRequest& operator=(const ModelVersionPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelVersionPublishRequest& operator=(ModelVersionPublishRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelVersionPublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelVersionPublishRequest* internal_default_instance() {
    return reinterpret_cast<const ModelVersionPublishRequest*>(
               &_ModelVersionPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(ModelVersionPublishRequest& a, ModelVersionPublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelVersionPublishRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelVersionPublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelVersionPublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelVersionPublishRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelVersionPublishRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelVersionPublishRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelVersionPublishRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ModelVersionPublishRequest";
  }
  protected:
  explicit ModelVersionPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionIdFieldNumber = 1,
  };
  // string version_id = 1;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ModelVersionPublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelVersionsPublishRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelVersionsPublishRequest) */ {
 public:
  inline PostModelVersionsPublishRequest() : PostModelVersionsPublishRequest(nullptr) {}
  ~PostModelVersionsPublishRequest() override;
  explicit constexpr PostModelVersionsPublishRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostModelVersionsPublishRequest(const PostModelVersionsPublishRequest& from);
  PostModelVersionsPublishRequest(PostModelVersionsPublishRequest&& from) noexcept
    : PostModelVersionsPublishRequest() {
    *this = ::std::move(from);
  }

  inline PostModelVersionsPublishRequest& operator=(const PostModelVersionsPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelVersionsPublishRequest& operator=(PostModelVersionsPublishRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostModelVersionsPublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostModelVersionsPublishRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelVersionsPublishRequest*>(
               &_PostModelVersionsPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(PostModelVersionsPublishRequest& a, PostModelVersionsPublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelVersionsPublishRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostModelVersionsPublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostModelVersionsPublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostModelVersionsPublishRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostModelVersionsPublishRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostModelVersionsPublishRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelVersionsPublishRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelVersionsPublishRequest";
  }
  protected:
  explicit PostModelVersionsPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicationsFieldNumber = 3,
    kModelIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.ModelVersionPublishRequest publications = 3;
  int publications_size() const;
  private:
  int _internal_publications_size() const;
  public:
  void clear_publications();
  ::clarifai::api::ModelVersionPublishRequest* mutable_publications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionPublishRequest >*
      mutable_publications();
  private:
  const ::clarifai::api::ModelVersionPublishRequest& _internal_publications(int index) const;
  ::clarifai::api::ModelVersionPublishRequest* _internal_add_publications();
  public:
  const ::clarifai::api::ModelVersionPublishRequest& publications(int index) const;
  ::clarifai::api::ModelVersionPublishRequest* add_publications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionPublishRequest >&
      publications() const;

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelVersionsPublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionPublishRequest > publications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ModelVersionUnpublishRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ModelVersionUnpublishRequest) */ {
 public:
  inline ModelVersionUnpublishRequest() : ModelVersionUnpublishRequest(nullptr) {}
  ~ModelVersionUnpublishRequest() override;
  explicit constexpr ModelVersionUnpublishRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelVersionUnpublishRequest(const ModelVersionUnpublishRequest& from);
  ModelVersionUnpublishRequest(ModelVersionUnpublishRequest&& from) noexcept
    : ModelVersionUnpublishRequest() {
    *this = ::std::move(from);
  }

  inline ModelVersionUnpublishRequest& operator=(const ModelVersionUnpublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelVersionUnpublishRequest& operator=(ModelVersionUnpublishRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelVersionUnpublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelVersionUnpublishRequest* internal_default_instance() {
    return reinterpret_cast<const ModelVersionUnpublishRequest*>(
               &_ModelVersionUnpublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(ModelVersionUnpublishRequest& a, ModelVersionUnpublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelVersionUnpublishRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelVersionUnpublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelVersionUnpublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelVersionUnpublishRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelVersionUnpublishRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelVersionUnpublishRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelVersionUnpublishRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ModelVersionUnpublishRequest";
  }
  protected:
  explicit ModelVersionUnpublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionIdFieldNumber = 1,
  };
  // string version_id = 1;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ModelVersionUnpublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelVersionsUnPublishRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelVersionsUnPublishRequest) */ {
 public:
  inline PostModelVersionsUnPublishRequest() : PostModelVersionsUnPublishRequest(nullptr) {}
  ~PostModelVersionsUnPublishRequest() override;
  explicit constexpr PostModelVersionsUnPublishRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostModelVersionsUnPublishRequest(const PostModelVersionsUnPublishRequest& from);
  PostModelVersionsUnPublishRequest(PostModelVersionsUnPublishRequest&& from) noexcept
    : PostModelVersionsUnPublishRequest() {
    *this = ::std::move(from);
  }

  inline PostModelVersionsUnPublishRequest& operator=(const PostModelVersionsUnPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelVersionsUnPublishRequest& operator=(PostModelVersionsUnPublishRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostModelVersionsUnPublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostModelVersionsUnPublishRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelVersionsUnPublishRequest*>(
               &_PostModelVersionsUnPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(PostModelVersionsUnPublishRequest& a, PostModelVersionsUnPublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelVersionsUnPublishRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostModelVersionsUnPublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostModelVersionsUnPublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostModelVersionsUnPublishRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostModelVersionsUnPublishRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostModelVersionsUnPublishRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelVersionsUnPublishRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelVersionsUnPublishRequest";
  }
  protected:
  explicit PostModelVersionsUnPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicationsFieldNumber = 3,
    kModelIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.ModelVersionUnpublishRequest publications = 3;
  int publications_size() const;
  private:
  int _internal_publications_size() const;
  public:
  void clear_publications();
  ::clarifai::api::ModelVersionUnpublishRequest* mutable_publications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionUnpublishRequest >*
      mutable_publications();
  private:
  const ::clarifai::api::ModelVersionUnpublishRequest& _internal_publications(int index) const;
  ::clarifai::api::ModelVersionUnpublishRequest* _internal_add_publications();
  public:
  const ::clarifai::api::ModelVersionUnpublishRequest& publications(int index) const;
  ::clarifai::api::ModelVersionUnpublishRequest* add_publications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionUnpublishRequest >&
      publications() const;

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelVersionsUnPublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionUnpublishRequest > publications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostModelVersionMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostModelVersionMetricsRequest) */ {
 public:
  inline PostModelVersionMetricsRequest() : PostModelVersionMetricsRequest(nullptr) {}
  ~PostModelVersionMetricsRequest() override;
  explicit constexpr PostModelVersionMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostModelVersionMetricsRequest(const PostModelVersionMetricsRequest& from);
  PostModelVersionMetricsRequest(PostModelVersionMetricsRequest&& from) noexcept
    : PostModelVersionMetricsRequest() {
    *this = ::std::move(from);
  }

  inline PostModelVersionMetricsRequest& operator=(const PostModelVersionMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostModelVersionMetricsRequest& operator=(PostModelVersionMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostModelVersionMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostModelVersionMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const PostModelVersionMetricsRequest*>(
               &_PostModelVersionMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(PostModelVersionMetricsRequest& a, PostModelVersionMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostModelVersionMetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostModelVersionMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostModelVersionMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostModelVersionMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostModelVersionMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostModelVersionMetricsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostModelVersionMetricsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostModelVersionMetricsRequest";
  }
  protected:
  explicit PostModelVersionMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kTestSearchFieldNumber = 5,
    kMaxExamplesFieldNumber = 4,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.Search test_search = 5;
  bool has_test_search() const;
  private:
  bool _internal_has_test_search() const;
  public:
  void clear_test_search();
  const ::clarifai::api::Search& test_search() const;
  PROTOBUF_NODISCARD ::clarifai::api::Search* release_test_search();
  ::clarifai::api::Search* mutable_test_search();
  void set_allocated_test_search(::clarifai::api::Search* test_search);
  private:
  const ::clarifai::api::Search& _internal_test_search() const;
  ::clarifai::api::Search* _internal_mutable_test_search();
  public:
  void unsafe_arena_set_allocated_test_search(
      ::clarifai::api::Search* test_search);
  ::clarifai::api::Search* unsafe_arena_release_test_search();

  // uint32 max_examples = 4;
  void clear_max_examples();
  uint32_t max_examples() const;
  void set_max_examples(uint32_t value);
  private:
  uint32_t _internal_max_examples() const;
  void _internal_set_max_examples(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostModelVersionMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Search* test_search_;
  uint32_t max_examples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetModelVersionMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetModelVersionMetricsRequest) */ {
 public:
  inline GetModelVersionMetricsRequest() : GetModelVersionMetricsRequest(nullptr) {}
  ~GetModelVersionMetricsRequest() override;
  explicit constexpr GetModelVersionMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelVersionMetricsRequest(const GetModelVersionMetricsRequest& from);
  GetModelVersionMetricsRequest(GetModelVersionMetricsRequest&& from) noexcept
    : GetModelVersionMetricsRequest() {
    *this = ::std::move(from);
  }

  inline GetModelVersionMetricsRequest& operator=(const GetModelVersionMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelVersionMetricsRequest& operator=(GetModelVersionMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelVersionMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelVersionMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const GetModelVersionMetricsRequest*>(
               &_GetModelVersionMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(GetModelVersionMetricsRequest& a, GetModelVersionMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelVersionMetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelVersionMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelVersionMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelVersionMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModelVersionMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetModelVersionMetricsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelVersionMetricsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetModelVersionMetricsRequest";
  }
  protected:
  explicit GetModelVersionMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kFieldsFieldNumber = 4,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string version_id = 3;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.FieldsValue fields = 4;
  bool has_fields() const;
  private:
  bool _internal_has_fields() const;
  public:
  void clear_fields();
  const ::clarifai::api::FieldsValue& fields() const;
  PROTOBUF_NODISCARD ::clarifai::api::FieldsValue* release_fields();
  ::clarifai::api::FieldsValue* mutable_fields();
  void set_allocated_fields(::clarifai::api::FieldsValue* fields);
  private:
  const ::clarifai::api::FieldsValue& _internal_fields() const;
  ::clarifai::api::FieldsValue* _internal_mutable_fields();
  public:
  void unsafe_arena_set_allocated_fields(
      ::clarifai::api::FieldsValue* fields);
  ::clarifai::api::FieldsValue* unsafe_arena_release_fields();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetModelVersionMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::FieldsValue* fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetModelTypeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetModelTypeRequest) */ {
 public:
  inline GetModelTypeRequest() : GetModelTypeRequest(nullptr) {}
  ~GetModelTypeRequest() override;
  explicit constexpr GetModelTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelTypeRequest(const GetModelTypeRequest& from);
  GetModelTypeRequest(GetModelTypeRequest&& from) noexcept
    : GetModelTypeRequest() {
    *this = ::std::move(from);
  }

  inline GetModelTypeRequest& operator=(const GetModelTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelTypeRequest& operator=(GetModelTypeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelTypeRequest* internal_default_instance() {
    return reinterpret_cast<const GetModelTypeRequest*>(
               &_GetModelTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(GetModelTypeRequest& a, GetModelTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelTypeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelTypeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModelTypeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetModelTypeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelTypeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetModelTypeRequest";
  }
  protected:
  explicit GetModelTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelTypeIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string model_type_id = 2;
  void clear_model_type_id();
  const std::string& model_type_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_type_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_type_id();
  PROTOBUF_NODISCARD std::string* release_model_type_id();
  void set_allocated_model_type_id(std::string* model_type_id);
  private:
  const std::string& _internal_model_type_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_type_id(const std::string& value);
  std::string* _internal_mutable_model_type_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetModelTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListModelTypesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListModelTypesRequest) */ {
 public:
  inline ListModelTypesRequest() : ListModelTypesRequest(nullptr) {}
  ~ListModelTypesRequest() override;
  explicit constexpr ListModelTypesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListModelTypesRequest(const ListModelTypesRequest& from);
  ListModelTypesRequest(ListModelTypesRequest&& from) noexcept
    : ListModelTypesRequest() {
    *this = ::std::move(from);
  }

  inline ListModelTypesRequest& operator=(const ListModelTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListModelTypesRequest& operator=(ListModelTypesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListModelTypesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListModelTypesRequest* internal_default_instance() {
    return reinterpret_cast<const ListModelTypesRequest*>(
               &_ListModelTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(ListModelTypesRequest& a, ListModelTypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListModelTypesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListModelTypesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListModelTypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListModelTypesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListModelTypesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListModelTypesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListModelTypesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListModelTypesRequest";
  }
  protected:
  explicit ListModelTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListModelTypesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListOpenSourceLicensesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:clarifai.api.ListOpenSourceLicensesRequest) */ {
 public:
  inline ListOpenSourceLicensesRequest() : ListOpenSourceLicensesRequest(nullptr) {}
  explicit constexpr ListOpenSourceLicensesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListOpenSourceLicensesRequest(const ListOpenSourceLicensesRequest& from);
  ListOpenSourceLicensesRequest(ListOpenSourceLicensesRequest&& from) noexcept
    : ListOpenSourceLicensesRequest() {
    *this = ::std::move(from);
  }

  inline ListOpenSourceLicensesRequest& operator=(const ListOpenSourceLicensesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOpenSourceLicensesRequest& operator=(ListOpenSourceLicensesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListOpenSourceLicensesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListOpenSourceLicensesRequest* internal_default_instance() {
    return reinterpret_cast<const ListOpenSourceLicensesRequest*>(
               &_ListOpenSourceLicensesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(ListOpenSourceLicensesRequest& a, ListOpenSourceLicensesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOpenSourceLicensesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListOpenSourceLicensesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListOpenSourceLicensesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListOpenSourceLicensesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListOpenSourceLicensesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListOpenSourceLicensesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListOpenSourceLicensesRequest";
  }
  protected:
  explicit ListOpenSourceLicensesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.api.ListOpenSourceLicensesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListOpenSourceLicensesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListOpenSourceLicensesResponse) */ {
 public:
  inline ListOpenSourceLicensesResponse() : ListOpenSourceLicensesResponse(nullptr) {}
  ~ListOpenSourceLicensesResponse() override;
  explicit constexpr ListOpenSourceLicensesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListOpenSourceLicensesResponse(const ListOpenSourceLicensesResponse& from);
  ListOpenSourceLicensesResponse(ListOpenSourceLicensesResponse&& from) noexcept
    : ListOpenSourceLicensesResponse() {
    *this = ::std::move(from);
  }

  inline ListOpenSourceLicensesResponse& operator=(const ListOpenSourceLicensesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOpenSourceLicensesResponse& operator=(ListOpenSourceLicensesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListOpenSourceLicensesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListOpenSourceLicensesResponse* internal_default_instance() {
    return reinterpret_cast<const ListOpenSourceLicensesResponse*>(
               &_ListOpenSourceLicensesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(ListOpenSourceLicensesResponse& a, ListOpenSourceLicensesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOpenSourceLicensesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListOpenSourceLicensesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListOpenSourceLicensesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListOpenSourceLicensesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListOpenSourceLicensesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListOpenSourceLicensesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOpenSourceLicensesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListOpenSourceLicensesResponse";
  }
  protected:
  explicit ListOpenSourceLicensesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLicensesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string licenses = 2;
  int licenses_size() const;
  private:
  int _internal_licenses_size() const;
  public:
  void clear_licenses();
  const std::string& licenses(int index) const;
  std::string* mutable_licenses(int index);
  void set_licenses(int index, const std::string& value);
  void set_licenses(int index, std::string&& value);
  void set_licenses(int index, const char* value);
  void set_licenses(int index, const char* value, size_t size);
  std::string* add_licenses();
  void add_licenses(const std::string& value);
  void add_licenses(std::string&& value);
  void add_licenses(const char* value);
  void add_licenses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& licenses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_licenses();
  private:
  const std::string& _internal_licenses(int index) const;
  std::string* _internal_add_licenses();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.ListOpenSourceLicensesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> licenses_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleModelTypeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleModelTypeResponse) */ {
 public:
  inline SingleModelTypeResponse() : SingleModelTypeResponse(nullptr) {}
  ~SingleModelTypeResponse() override;
  explicit constexpr SingleModelTypeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleModelTypeResponse(const SingleModelTypeResponse& from);
  SingleModelTypeResponse(SingleModelTypeResponse&& from) noexcept
    : SingleModelTypeResponse() {
    *this = ::std::move(from);
  }

  inline SingleModelTypeResponse& operator=(const SingleModelTypeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleModelTypeResponse& operator=(SingleModelTypeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleModelTypeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleModelTypeResponse* internal_default_instance() {
    return reinterpret_cast<const SingleModelTypeResponse*>(
               &_SingleModelTypeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(SingleModelTypeResponse& a, SingleModelTypeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleModelTypeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleModelTypeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleModelTypeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleModelTypeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleModelTypeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleModelTypeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleModelTypeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleModelTypeResponse";
  }
  protected:
  explicit SingleModelTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kModelTypeFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.ModelType model_type = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  bool has_model_type() const;
  private:
  bool _internal_has_model_type() const;
  public:
  void clear_model_type();
  const ::clarifai::api::ModelType& model_type() const;
  PROTOBUF_NODISCARD ::clarifai::api::ModelType* release_model_type();
  ::clarifai::api::ModelType* mutable_model_type();
  void set_allocated_model_type(::clarifai::api::ModelType* model_type);
  private:
  const ::clarifai::api::ModelType& _internal_model_type() const;
  ::clarifai::api::ModelType* _internal_mutable_model_type();
  public:
  void unsafe_arena_set_allocated_model_type(
      ::clarifai::api::ModelType* model_type);
  ::clarifai::api::ModelType* unsafe_arena_release_model_type();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleModelTypeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::ModelType* model_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiModelTypeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiModelTypeResponse) */ {
 public:
  inline MultiModelTypeResponse() : MultiModelTypeResponse(nullptr) {}
  ~MultiModelTypeResponse() override;
  explicit constexpr MultiModelTypeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiModelTypeResponse(const MultiModelTypeResponse& from);
  MultiModelTypeResponse(MultiModelTypeResponse&& from) noexcept
    : MultiModelTypeResponse() {
    *this = ::std::move(from);
  }

  inline MultiModelTypeResponse& operator=(const MultiModelTypeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiModelTypeResponse& operator=(MultiModelTypeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiModelTypeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiModelTypeResponse* internal_default_instance() {
    return reinterpret_cast<const MultiModelTypeResponse*>(
               &_MultiModelTypeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(MultiModelTypeResponse& a, MultiModelTypeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiModelTypeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiModelTypeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiModelTypeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiModelTypeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiModelTypeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiModelTypeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiModelTypeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiModelTypeResponse";
  }
  protected:
  explicit MultiModelTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelTypesFieldNumber = 2,
    kStatusFieldNumber = 1,
    kModelImportersFieldNumber = 3,
  };
  // repeated .clarifai.api.ModelType model_types = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int model_types_size() const;
  private:
  int _internal_model_types_size() const;
  public:
  void clear_model_types();
  ::clarifai::api::ModelType* mutable_model_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelType >*
      mutable_model_types();
  private:
  const ::clarifai::api::ModelType& _internal_model_types(int index) const;
  ::clarifai::api::ModelType* _internal_add_model_types();
  public:
  const ::clarifai::api::ModelType& model_types(int index) const;
  ::clarifai::api::ModelType* add_model_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelType >&
      model_types() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.ModelTypeField model_importers = 3;
  bool has_model_importers() const;
  private:
  bool _internal_has_model_importers() const;
  public:
  void clear_model_importers();
  const ::clarifai::api::ModelTypeField& model_importers() const;
  PROTOBUF_NODISCARD ::clarifai::api::ModelTypeField* release_model_importers();
  ::clarifai::api::ModelTypeField* mutable_model_importers();
  void set_allocated_model_importers(::clarifai::api::ModelTypeField* model_importers);
  private:
  const ::clarifai::api::ModelTypeField& _internal_model_importers() const;
  ::clarifai::api::ModelTypeField* _internal_mutable_model_importers();
  public:
  void unsafe_arena_set_allocated_model_importers(
      ::clarifai::api::ModelTypeField* model_importers);
  ::clarifai::api::ModelTypeField* unsafe_arena_release_model_importers();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiModelTypeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelType > model_types_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::ModelTypeField* model_importers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetModelVersionInputExampleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetModelVersionInputExampleRequest) */ {
 public:
  inline GetModelVersionInputExampleRequest() : GetModelVersionInputExampleRequest(nullptr) {}
  ~GetModelVersionInputExampleRequest() override;
  explicit constexpr GetModelVersionInputExampleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelVersionInputExampleRequest(const GetModelVersionInputExampleRequest& from);
  GetModelVersionInputExampleRequest(GetModelVersionInputExampleRequest&& from) noexcept
    : GetModelVersionInputExampleRequest() {
    *this = ::std::move(from);
  }

  inline GetModelVersionInputExampleRequest& operator=(const GetModelVersionInputExampleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelVersionInputExampleRequest& operator=(GetModelVersionInputExampleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelVersionInputExampleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelVersionInputExampleRequest* internal_default_instance() {
    return reinterpret_cast<const GetModelVersionInputExampleRequest*>(
               &_GetModelVersionInputExampleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(GetModelVersionInputExampleRequest& a, GetModelVersionInputExampleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelVersionInputExampleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelVersionInputExampleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelVersionInputExampleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelVersionInputExampleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModelVersionInputExampleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetModelVersionInputExampleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelVersionInputExampleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetModelVersionInputExampleRequest";
  }
  protected:
  explicit GetModelVersionInputExampleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kModelVersionIdFieldNumber = 3,
    kExampleIdFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string model_version_id = 3;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_version_id();
  PROTOBUF_NODISCARD std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);
  private:
  const std::string& _internal_model_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_version_id(const std::string& value);
  std::string* _internal_mutable_model_version_id();
  public:

  // string example_id = 4;
  void clear_example_id();
  const std::string& example_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_example_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_example_id();
  PROTOBUF_NODISCARD std::string* release_example_id();
  void set_allocated_example_id(std::string* example_id);
  private:
  const std::string& _internal_example_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_example_id(const std::string& value);
  std::string* _internal_mutable_example_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetModelVersionInputExampleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr example_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListModelVersionInputExamplesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListModelVersionInputExamplesRequest) */ {
 public:
  inline ListModelVersionInputExamplesRequest() : ListModelVersionInputExamplesRequest(nullptr) {}
  ~ListModelVersionInputExamplesRequest() override;
  explicit constexpr ListModelVersionInputExamplesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListModelVersionInputExamplesRequest(const ListModelVersionInputExamplesRequest& from);
  ListModelVersionInputExamplesRequest(ListModelVersionInputExamplesRequest&& from) noexcept
    : ListModelVersionInputExamplesRequest() {
    *this = ::std::move(from);
  }

  inline ListModelVersionInputExamplesRequest& operator=(const ListModelVersionInputExamplesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListModelVersionInputExamplesRequest& operator=(ListModelVersionInputExamplesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListModelVersionInputExamplesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListModelVersionInputExamplesRequest* internal_default_instance() {
    return reinterpret_cast<const ListModelVersionInputExamplesRequest*>(
               &_ListModelVersionInputExamplesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(ListModelVersionInputExamplesRequest& a, ListModelVersionInputExamplesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListModelVersionInputExamplesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListModelVersionInputExamplesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListModelVersionInputExamplesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListModelVersionInputExamplesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListModelVersionInputExamplesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListModelVersionInputExamplesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListModelVersionInputExamplesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListModelVersionInputExamplesRequest";
  }
  protected:
  explicit ListModelVersionInputExamplesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kModelVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 4,
    kPerPageFieldNumber = 5,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string model_version_id = 3;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_version_id();
  PROTOBUF_NODISCARD std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);
  private:
  const std::string& _internal_model_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_version_id(const std::string& value);
  std::string* _internal_mutable_model_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 4;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 5;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListModelVersionInputExamplesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleModelVersionInputExampleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleModelVersionInputExampleResponse) */ {
 public:
  inline SingleModelVersionInputExampleResponse() : SingleModelVersionInputExampleResponse(nullptr) {}
  ~SingleModelVersionInputExampleResponse() override;
  explicit constexpr SingleModelVersionInputExampleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleModelVersionInputExampleResponse(const SingleModelVersionInputExampleResponse& from);
  SingleModelVersionInputExampleResponse(SingleModelVersionInputExampleResponse&& from) noexcept
    : SingleModelVersionInputExampleResponse() {
    *this = ::std::move(from);
  }

  inline SingleModelVersionInputExampleResponse& operator=(const SingleModelVersionInputExampleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleModelVersionInputExampleResponse& operator=(SingleModelVersionInputExampleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleModelVersionInputExampleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleModelVersionInputExampleResponse* internal_default_instance() {
    return reinterpret_cast<const SingleModelVersionInputExampleResponse*>(
               &_SingleModelVersionInputExampleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(SingleModelVersionInputExampleResponse& a, SingleModelVersionInputExampleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleModelVersionInputExampleResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleModelVersionInputExampleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleModelVersionInputExampleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleModelVersionInputExampleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleModelVersionInputExampleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleModelVersionInputExampleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleModelVersionInputExampleResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleModelVersionInputExampleResponse";
  }
  protected:
  explicit SingleModelVersionInputExampleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kModelVersionInputExampleFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.ModelVersionInputExample model_version_input_example = 2;
  bool has_model_version_input_example() const;
  private:
  bool _internal_has_model_version_input_example() const;
  public:
  void clear_model_version_input_example();
  const ::clarifai::api::ModelVersionInputExample& model_version_input_example() const;
  PROTOBUF_NODISCARD ::clarifai::api::ModelVersionInputExample* release_model_version_input_example();
  ::clarifai::api::ModelVersionInputExample* mutable_model_version_input_example();
  void set_allocated_model_version_input_example(::clarifai::api::ModelVersionInputExample* model_version_input_example);
  private:
  const ::clarifai::api::ModelVersionInputExample& _internal_model_version_input_example() const;
  ::clarifai::api::ModelVersionInputExample* _internal_mutable_model_version_input_example();
  public:
  void unsafe_arena_set_allocated_model_version_input_example(
      ::clarifai::api::ModelVersionInputExample* model_version_input_example);
  ::clarifai::api::ModelVersionInputExample* unsafe_arena_release_model_version_input_example();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleModelVersionInputExampleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::ModelVersionInputExample* model_version_input_example_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiModelVersionInputExampleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiModelVersionInputExampleResponse) */ {
 public:
  inline MultiModelVersionInputExampleResponse() : MultiModelVersionInputExampleResponse(nullptr) {}
  ~MultiModelVersionInputExampleResponse() override;
  explicit constexpr MultiModelVersionInputExampleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiModelVersionInputExampleResponse(const MultiModelVersionInputExampleResponse& from);
  MultiModelVersionInputExampleResponse(MultiModelVersionInputExampleResponse&& from) noexcept
    : MultiModelVersionInputExampleResponse() {
    *this = ::std::move(from);
  }

  inline MultiModelVersionInputExampleResponse& operator=(const MultiModelVersionInputExampleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiModelVersionInputExampleResponse& operator=(MultiModelVersionInputExampleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiModelVersionInputExampleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiModelVersionInputExampleResponse* internal_default_instance() {
    return reinterpret_cast<const MultiModelVersionInputExampleResponse*>(
               &_MultiModelVersionInputExampleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(MultiModelVersionInputExampleResponse& a, MultiModelVersionInputExampleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiModelVersionInputExampleResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiModelVersionInputExampleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiModelVersionInputExampleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiModelVersionInputExampleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiModelVersionInputExampleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiModelVersionInputExampleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiModelVersionInputExampleResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiModelVersionInputExampleResponse";
  }
  protected:
  explicit MultiModelVersionInputExampleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelVersionInputExamplesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ModelVersionInputExample model_version_input_examples = 2;
  int model_version_input_examples_size() const;
  private:
  int _internal_model_version_input_examples_size() const;
  public:
  void clear_model_version_input_examples();
  ::clarifai::api::ModelVersionInputExample* mutable_model_version_input_examples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionInputExample >*
      mutable_model_version_input_examples();
  private:
  const ::clarifai::api::ModelVersionInputExample& _internal_model_version_input_examples(int index) const;
  ::clarifai::api::ModelVersionInputExample* _internal_add_model_version_input_examples();
  public:
  const ::clarifai::api::ModelVersionInputExample& model_version_input_examples(int index) const;
  ::clarifai::api::ModelVersionInputExample* add_model_version_input_examples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionInputExample >&
      model_version_input_examples() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiModelVersionInputExampleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionInputExample > model_version_input_examples_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListModelReferencesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListModelReferencesRequest) */ {
 public:
  inline ListModelReferencesRequest() : ListModelReferencesRequest(nullptr) {}
  ~ListModelReferencesRequest() override;
  explicit constexpr ListModelReferencesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListModelReferencesRequest(const ListModelReferencesRequest& from);
  ListModelReferencesRequest(ListModelReferencesRequest&& from) noexcept
    : ListModelReferencesRequest() {
    *this = ::std::move(from);
  }

  inline ListModelReferencesRequest& operator=(const ListModelReferencesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListModelReferencesRequest& operator=(ListModelReferencesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListModelReferencesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListModelReferencesRequest* internal_default_instance() {
    return reinterpret_cast<const ListModelReferencesRequest*>(
               &_ListModelReferencesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(ListModelReferencesRequest& a, ListModelReferencesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListModelReferencesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListModelReferencesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListModelReferencesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListModelReferencesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListModelReferencesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListModelReferencesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListModelReferencesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListModelReferencesRequest";
  }
  protected:
  explicit ListModelReferencesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
  };
  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 3;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListModelReferencesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiModelReferenceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiModelReferenceResponse) */ {
 public:
  inline MultiModelReferenceResponse() : MultiModelReferenceResponse(nullptr) {}
  ~MultiModelReferenceResponse() override;
  explicit constexpr MultiModelReferenceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiModelReferenceResponse(const MultiModelReferenceResponse& from);
  MultiModelReferenceResponse(MultiModelReferenceResponse&& from) noexcept
    : MultiModelReferenceResponse() {
    *this = ::std::move(from);
  }

  inline MultiModelReferenceResponse& operator=(const MultiModelReferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiModelReferenceResponse& operator=(MultiModelReferenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiModelReferenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiModelReferenceResponse* internal_default_instance() {
    return reinterpret_cast<const MultiModelReferenceResponse*>(
               &_MultiModelReferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(MultiModelReferenceResponse& a, MultiModelReferenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiModelReferenceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiModelReferenceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiModelReferenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiModelReferenceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiModelReferenceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiModelReferenceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiModelReferenceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiModelReferenceResponse";
  }
  protected:
  explicit MultiModelReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelReferencesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ModelReference model_references = 2;
  int model_references_size() const;
  private:
  int _internal_model_references_size() const;
  public:
  void clear_model_references();
  ::clarifai::api::ModelReference* mutable_model_references(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelReference >*
      mutable_model_references();
  private:
  const ::clarifai::api::ModelReference& _internal_model_references(int index) const;
  ::clarifai::api::ModelReference* _internal_add_model_references();
  public:
  const ::clarifai::api::ModelReference& model_references(int index) const;
  ::clarifai::api::ModelReference* add_model_references();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelReference >&
      model_references() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiModelReferenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelReference > model_references_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiOutputResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiOutputResponse) */ {
 public:
  inline MultiOutputResponse() : MultiOutputResponse(nullptr) {}
  ~MultiOutputResponse() override;
  explicit constexpr MultiOutputResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiOutputResponse(const MultiOutputResponse& from);
  MultiOutputResponse(MultiOutputResponse&& from) noexcept
    : MultiOutputResponse() {
    *this = ::std::move(from);
  }

  inline MultiOutputResponse& operator=(const MultiOutputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiOutputResponse& operator=(MultiOutputResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiOutputResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiOutputResponse* internal_default_instance() {
    return reinterpret_cast<const MultiOutputResponse*>(
               &_MultiOutputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(MultiOutputResponse& a, MultiOutputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiOutputResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiOutputResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiOutputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiOutputResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiOutputResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiOutputResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiOutputResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiOutputResponse";
  }
  protected:
  explicit MultiOutputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::clarifai::api::Output* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >*
      mutable_outputs();
  private:
  const ::clarifai::api::Output& _internal_outputs(int index) const;
  ::clarifai::api::Output* _internal_add_outputs();
  public:
  const ::clarifai::api::Output& outputs(int index) const;
  ::clarifai::api::Output* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >&
      outputs() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiOutputResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output > outputs_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListScopesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListScopesRequest) */ {
 public:
  inline ListScopesRequest() : ListScopesRequest(nullptr) {}
  ~ListScopesRequest() override;
  explicit constexpr ListScopesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListScopesRequest(const ListScopesRequest& from);
  ListScopesRequest(ListScopesRequest&& from) noexcept
    : ListScopesRequest() {
    *this = ::std::move(from);
  }

  inline ListScopesRequest& operator=(const ListScopesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListScopesRequest& operator=(ListScopesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListScopesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListScopesRequest* internal_default_instance() {
    return reinterpret_cast<const ListScopesRequest*>(
               &_ListScopesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(ListScopesRequest& a, ListScopesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListScopesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListScopesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListScopesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListScopesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListScopesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListScopesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListScopesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListScopesRequest";
  }
  protected:
  explicit ListScopesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyTypeFieldNumber = 1,
    kUserAppIdFieldNumber = 2,
  };
  // string key_type = 1;
  void clear_key_type();
  const std::string& key_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_type();
  PROTOBUF_NODISCARD std::string* release_key_type();
  void set_allocated_key_type(std::string* key_type);
  private:
  const std::string& _internal_key_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_type(const std::string& value);
  std::string* _internal_mutable_key_type();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 2;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.ListScopesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_type_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MyScopesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MyScopesRequest) */ {
 public:
  inline MyScopesRequest() : MyScopesRequest(nullptr) {}
  ~MyScopesRequest() override;
  explicit constexpr MyScopesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MyScopesRequest(const MyScopesRequest& from);
  MyScopesRequest(MyScopesRequest&& from) noexcept
    : MyScopesRequest() {
    *this = ::std::move(from);
  }

  inline MyScopesRequest& operator=(const MyScopesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyScopesRequest& operator=(MyScopesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MyScopesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MyScopesRequest* internal_default_instance() {
    return reinterpret_cast<const MyScopesRequest*>(
               &_MyScopesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(MyScopesRequest& a, MyScopesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MyScopesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyScopesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MyScopesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MyScopesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MyScopesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MyScopesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyScopesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MyScopesRequest";
  }
  protected:
  explicit MyScopesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.MyScopesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MyScopesUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MyScopesUserRequest) */ {
 public:
  inline MyScopesUserRequest() : MyScopesUserRequest(nullptr) {}
  ~MyScopesUserRequest() override;
  explicit constexpr MyScopesUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MyScopesUserRequest(const MyScopesUserRequest& from);
  MyScopesUserRequest(MyScopesUserRequest&& from) noexcept
    : MyScopesUserRequest() {
    *this = ::std::move(from);
  }

  inline MyScopesUserRequest& operator=(const MyScopesUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyScopesUserRequest& operator=(MyScopesUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MyScopesUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MyScopesUserRequest* internal_default_instance() {
    return reinterpret_cast<const MyScopesUserRequest*>(
               &_MyScopesUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(MyScopesUserRequest& a, MyScopesUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MyScopesUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyScopesUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MyScopesUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MyScopesUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MyScopesUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MyScopesUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyScopesUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MyScopesUserRequest";
  }
  protected:
  explicit MyScopesUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.MyScopesUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MyScopesRootRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:clarifai.api.MyScopesRootRequest) */ {
 public:
  inline MyScopesRootRequest() : MyScopesRootRequest(nullptr) {}
  explicit constexpr MyScopesRootRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MyScopesRootRequest(const MyScopesRootRequest& from);
  MyScopesRootRequest(MyScopesRootRequest&& from) noexcept
    : MyScopesRootRequest() {
    *this = ::std::move(from);
  }

  inline MyScopesRootRequest& operator=(const MyScopesRootRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyScopesRootRequest& operator=(MyScopesRootRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MyScopesRootRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MyScopesRootRequest* internal_default_instance() {
    return reinterpret_cast<const MyScopesRootRequest*>(
               &_MyScopesRootRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(MyScopesRootRequest& a, MyScopesRootRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MyScopesRootRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyScopesRootRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MyScopesRootRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MyScopesRootRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MyScopesRootRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MyScopesRootRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MyScopesRootRequest";
  }
  protected:
  explicit MyScopesRootRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clarifai.api.MyScopesRootRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiScopeDepsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiScopeDepsResponse) */ {
 public:
  inline MultiScopeDepsResponse() : MultiScopeDepsResponse(nullptr) {}
  ~MultiScopeDepsResponse() override;
  explicit constexpr MultiScopeDepsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiScopeDepsResponse(const MultiScopeDepsResponse& from);
  MultiScopeDepsResponse(MultiScopeDepsResponse&& from) noexcept
    : MultiScopeDepsResponse() {
    *this = ::std::move(from);
  }

  inline MultiScopeDepsResponse& operator=(const MultiScopeDepsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiScopeDepsResponse& operator=(MultiScopeDepsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiScopeDepsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiScopeDepsResponse* internal_default_instance() {
    return reinterpret_cast<const MultiScopeDepsResponse*>(
               &_MultiScopeDepsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(MultiScopeDepsResponse& a, MultiScopeDepsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiScopeDepsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiScopeDepsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiScopeDepsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiScopeDepsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiScopeDepsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiScopeDepsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiScopeDepsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiScopeDepsResponse";
  }
  protected:
  explicit MultiScopeDepsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopeDepsFieldNumber = 2,
    kEndpointDepsFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.ScopeDeps scope_deps = 2;
  int scope_deps_size() const;
  private:
  int _internal_scope_deps_size() const;
  public:
  void clear_scope_deps();
  ::clarifai::api::ScopeDeps* mutable_scope_deps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ScopeDeps >*
      mutable_scope_deps();
  private:
  const ::clarifai::api::ScopeDeps& _internal_scope_deps(int index) const;
  ::clarifai::api::ScopeDeps* _internal_add_scope_deps();
  public:
  const ::clarifai::api::ScopeDeps& scope_deps(int index) const;
  ::clarifai::api::ScopeDeps* add_scope_deps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ScopeDeps >&
      scope_deps() const;

  // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
  int endpoint_deps_size() const;
  private:
  int _internal_endpoint_deps_size() const;
  public:
  void clear_endpoint_deps();
  ::clarifai::api::EndpointDeps* mutable_endpoint_deps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EndpointDeps >*
      mutable_endpoint_deps();
  private:
  const ::clarifai::api::EndpointDeps& _internal_endpoint_deps(int index) const;
  ::clarifai::api::EndpointDeps* _internal_add_endpoint_deps();
  public:
  const ::clarifai::api::EndpointDeps& endpoint_deps(int index) const;
  ::clarifai::api::EndpointDeps* add_endpoint_deps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EndpointDeps >&
      endpoint_deps() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiScopeDepsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ScopeDeps > scope_deps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EndpointDeps > endpoint_deps_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiScopeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiScopeResponse) */ {
 public:
  inline MultiScopeResponse() : MultiScopeResponse(nullptr) {}
  ~MultiScopeResponse() override;
  explicit constexpr MultiScopeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiScopeResponse(const MultiScopeResponse& from);
  MultiScopeResponse(MultiScopeResponse&& from) noexcept
    : MultiScopeResponse() {
    *this = ::std::move(from);
  }

  inline MultiScopeResponse& operator=(const MultiScopeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiScopeResponse& operator=(MultiScopeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiScopeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiScopeResponse* internal_default_instance() {
    return reinterpret_cast<const MultiScopeResponse*>(
               &_MultiScopeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(MultiScopeResponse& a, MultiScopeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiScopeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiScopeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiScopeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiScopeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiScopeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiScopeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiScopeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiScopeResponse";
  }
  protected:
  explicit MultiScopeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 2,
    kEndpointsFieldNumber = 4,
    kStatusFieldNumber = 1,
    kAppFieldNumber = 3,
  };
  // repeated string scopes = 2;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated string endpoints = 4;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.App app = 3;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const ::clarifai::api::App& app() const;
  PROTOBUF_NODISCARD ::clarifai::api::App* release_app();
  ::clarifai::api::App* mutable_app();
  void set_allocated_app(::clarifai::api::App* app);
  private:
  const ::clarifai::api::App& _internal_app() const;
  ::clarifai::api::App* _internal_mutable_app();
  public:
  void unsafe_arena_set_allocated_app(
      ::clarifai::api::App* app);
  ::clarifai::api::App* unsafe_arena_release_app();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiScopeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::App* app_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiScopeUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiScopeUserResponse) */ {
 public:
  inline MultiScopeUserResponse() : MultiScopeUserResponse(nullptr) {}
  ~MultiScopeUserResponse() override;
  explicit constexpr MultiScopeUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiScopeUserResponse(const MultiScopeUserResponse& from);
  MultiScopeUserResponse(MultiScopeUserResponse&& from) noexcept
    : MultiScopeUserResponse() {
    *this = ::std::move(from);
  }

  inline MultiScopeUserResponse& operator=(const MultiScopeUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiScopeUserResponse& operator=(MultiScopeUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiScopeUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiScopeUserResponse* internal_default_instance() {
    return reinterpret_cast<const MultiScopeUserResponse*>(
               &_MultiScopeUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(MultiScopeUserResponse& a, MultiScopeUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiScopeUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiScopeUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiScopeUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiScopeUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiScopeUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiScopeUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiScopeUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiScopeUserResponse";
  }
  protected:
  explicit MultiScopeUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 2,
    kEndpointsFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // repeated string scopes = 2;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated string endpoints = 4;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiScopeUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiScopeRootResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiScopeRootResponse) */ {
 public:
  inline MultiScopeRootResponse() : MultiScopeRootResponse(nullptr) {}
  ~MultiScopeRootResponse() override;
  explicit constexpr MultiScopeRootResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiScopeRootResponse(const MultiScopeRootResponse& from);
  MultiScopeRootResponse(MultiScopeRootResponse&& from) noexcept
    : MultiScopeRootResponse() {
    *this = ::std::move(from);
  }

  inline MultiScopeRootResponse& operator=(const MultiScopeRootResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiScopeRootResponse& operator=(MultiScopeRootResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiScopeRootResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiScopeRootResponse* internal_default_instance() {
    return reinterpret_cast<const MultiScopeRootResponse*>(
               &_MultiScopeRootResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(MultiScopeRootResponse& a, MultiScopeRootResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiScopeRootResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiScopeRootResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiScopeRootResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiScopeRootResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiScopeRootResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiScopeRootResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiScopeRootResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiScopeRootResponse";
  }
  protected:
  explicit MultiScopeRootResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 2,
    kEndpointsFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // repeated string scopes = 2;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated string endpoints = 4;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiScopeRootResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetSearchRequest) */ {
 public:
  inline GetSearchRequest() : GetSearchRequest(nullptr) {}
  ~GetSearchRequest() override;
  explicit constexpr GetSearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSearchRequest(const GetSearchRequest& from);
  GetSearchRequest(GetSearchRequest&& from) noexcept
    : GetSearchRequest() {
    *this = ::std::move(from);
  }

  inline GetSearchRequest& operator=(const GetSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSearchRequest& operator=(GetSearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSearchRequest* internal_default_instance() {
    return reinterpret_cast<const GetSearchRequest*>(
               &_GetSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(GetSearchRequest& a, GetSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSearchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetSearchRequest";
  }
  protected:
  explicit GetSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetSearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListSearchesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListSearchesRequest) */ {
 public:
  inline ListSearchesRequest() : ListSearchesRequest(nullptr) {}
  ~ListSearchesRequest() override;
  explicit constexpr ListSearchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSearchesRequest(const ListSearchesRequest& from);
  ListSearchesRequest(ListSearchesRequest&& from) noexcept
    : ListSearchesRequest() {
    *this = ::std::move(from);
  }

  inline ListSearchesRequest& operator=(const ListSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSearchesRequest& operator=(ListSearchesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSearchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const ListSearchesRequest*>(
               &_ListSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(ListSearchesRequest& a, ListSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSearchesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSearchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSearchesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSearchesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSearchesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSearchesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListSearchesRequest";
  }
  protected:
  explicit ListSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListSearchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostSearchesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostSearchesRequest) */ {
 public:
  inline PostSearchesRequest() : PostSearchesRequest(nullptr) {}
  ~PostSearchesRequest() override;
  explicit constexpr PostSearchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostSearchesRequest(const PostSearchesRequest& from);
  PostSearchesRequest(PostSearchesRequest&& from) noexcept
    : PostSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PostSearchesRequest& operator=(const PostSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostSearchesRequest& operator=(PostSearchesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostSearchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PostSearchesRequest*>(
               &_PostSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(PostSearchesRequest& a, PostSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostSearchesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostSearchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostSearchesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostSearchesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostSearchesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostSearchesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostSearchesRequest";
  }
  protected:
  explicit PostSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchesFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
    kQueryFieldNumber = 2,
    kPaginationFieldNumber = 4,
  };
  // repeated .clarifai.api.Search searches = 3;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.Query query = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  PROTOBUF_DEPRECATED void clear_query();
  PROTOBUF_DEPRECATED const ::clarifai::api::Query& query() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::clarifai::api::Query* release_query();
  PROTOBUF_DEPRECATED ::clarifai::api::Query* mutable_query();
  PROTOBUF_DEPRECATED void set_allocated_query(::clarifai::api::Query* query);
  private:
  const ::clarifai::api::Query& _internal_query() const;
  ::clarifai::api::Query* _internal_mutable_query();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_query(
      ::clarifai::api::Query* query);
  PROTOBUF_DEPRECATED ::clarifai::api::Query* unsafe_arena_release_query();

  // .clarifai.api.Pagination pagination = 4;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::clarifai::api::Pagination* pagination);
  ::clarifai::api::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostSearchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Query* query_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchInputsSearchesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchInputsSearchesRequest) */ {
 public:
  inline PatchInputsSearchesRequest() : PatchInputsSearchesRequest(nullptr) {}
  ~PatchInputsSearchesRequest() override;
  explicit constexpr PatchInputsSearchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchInputsSearchesRequest(const PatchInputsSearchesRequest& from);
  PatchInputsSearchesRequest(PatchInputsSearchesRequest&& from) noexcept
    : PatchInputsSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PatchInputsSearchesRequest& operator=(const PatchInputsSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchInputsSearchesRequest& operator=(PatchInputsSearchesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchInputsSearchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchInputsSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PatchInputsSearchesRequest*>(
               &_PatchInputsSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(PatchInputsSearchesRequest& a, PatchInputsSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchInputsSearchesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchInputsSearchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchInputsSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchInputsSearchesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchInputsSearchesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchInputsSearchesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchInputsSearchesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchInputsSearchesRequest";
  }
  protected:
  explicit PatchInputsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchesFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Search searches = 2;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchInputsSearchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchAnnotationsSearchesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchAnnotationsSearchesRequest) */ {
 public:
  inline PatchAnnotationsSearchesRequest() : PatchAnnotationsSearchesRequest(nullptr) {}
  ~PatchAnnotationsSearchesRequest() override;
  explicit constexpr PatchAnnotationsSearchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchAnnotationsSearchesRequest(const PatchAnnotationsSearchesRequest& from);
  PatchAnnotationsSearchesRequest(PatchAnnotationsSearchesRequest&& from) noexcept
    : PatchAnnotationsSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PatchAnnotationsSearchesRequest& operator=(const PatchAnnotationsSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchAnnotationsSearchesRequest& operator=(PatchAnnotationsSearchesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchAnnotationsSearchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchAnnotationsSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PatchAnnotationsSearchesRequest*>(
               &_PatchAnnotationsSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(PatchAnnotationsSearchesRequest& a, PatchAnnotationsSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchAnnotationsSearchesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchAnnotationsSearchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchAnnotationsSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchAnnotationsSearchesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchAnnotationsSearchesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchAnnotationsSearchesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchAnnotationsSearchesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchAnnotationsSearchesRequest";
  }
  protected:
  explicit PatchAnnotationsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchesFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Search searches = 2;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchAnnotationsSearchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchSearchesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchSearchesRequest) */ {
 public:
  inline PatchSearchesRequest() : PatchSearchesRequest(nullptr) {}
  ~PatchSearchesRequest() override;
  explicit constexpr PatchSearchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchSearchesRequest(const PatchSearchesRequest& from);
  PatchSearchesRequest(PatchSearchesRequest&& from) noexcept
    : PatchSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PatchSearchesRequest& operator=(const PatchSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchSearchesRequest& operator=(PatchSearchesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchSearchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PatchSearchesRequest*>(
               &_PatchSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(PatchSearchesRequest& a, PatchSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchSearchesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchSearchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchSearchesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchSearchesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchSearchesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchSearchesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchSearchesRequest";
  }
  protected:
  explicit PatchSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchesFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Search searches = 2;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchSearchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostSearchesByIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostSearchesByIDRequest) */ {
 public:
  inline PostSearchesByIDRequest() : PostSearchesByIDRequest(nullptr) {}
  ~PostSearchesByIDRequest() override;
  explicit constexpr PostSearchesByIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostSearchesByIDRequest(const PostSearchesByIDRequest& from);
  PostSearchesByIDRequest(PostSearchesByIDRequest&& from) noexcept
    : PostSearchesByIDRequest() {
    *this = ::std::move(from);
  }

  inline PostSearchesByIDRequest& operator=(const PostSearchesByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostSearchesByIDRequest& operator=(PostSearchesByIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostSearchesByIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostSearchesByIDRequest* internal_default_instance() {
    return reinterpret_cast<const PostSearchesByIDRequest*>(
               &_PostSearchesByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(PostSearchesByIDRequest& a, PostSearchesByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostSearchesByIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostSearchesByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostSearchesByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostSearchesByIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostSearchesByIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostSearchesByIDRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostSearchesByIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostSearchesByIDRequest";
  }
  protected:
  explicit PostSearchesByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPaginationFieldNumber = 3,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::clarifai::api::Pagination* pagination);
  ::clarifai::api::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostSearchesByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteSearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteSearchRequest) */ {
 public:
  inline DeleteSearchRequest() : DeleteSearchRequest(nullptr) {}
  ~DeleteSearchRequest() override;
  explicit constexpr DeleteSearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSearchRequest(const DeleteSearchRequest& from);
  DeleteSearchRequest(DeleteSearchRequest&& from) noexcept
    : DeleteSearchRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSearchRequest& operator=(const DeleteSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSearchRequest& operator=(DeleteSearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSearchRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSearchRequest*>(
               &_DeleteSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(DeleteSearchRequest& a, DeleteSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteSearchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteSearchRequest";
  }
  protected:
  explicit DeleteSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteSearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAnnotationsSearchesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAnnotationsSearchesRequest) */ {
 public:
  inline PostAnnotationsSearchesRequest() : PostAnnotationsSearchesRequest(nullptr) {}
  ~PostAnnotationsSearchesRequest() override;
  explicit constexpr PostAnnotationsSearchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostAnnotationsSearchesRequest(const PostAnnotationsSearchesRequest& from);
  PostAnnotationsSearchesRequest(PostAnnotationsSearchesRequest&& from) noexcept
    : PostAnnotationsSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PostAnnotationsSearchesRequest& operator=(const PostAnnotationsSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAnnotationsSearchesRequest& operator=(PostAnnotationsSearchesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostAnnotationsSearchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostAnnotationsSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PostAnnotationsSearchesRequest*>(
               &_PostAnnotationsSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(PostAnnotationsSearchesRequest& a, PostAnnotationsSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAnnotationsSearchesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostAnnotationsSearchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostAnnotationsSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostAnnotationsSearchesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostAnnotationsSearchesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostAnnotationsSearchesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAnnotationsSearchesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAnnotationsSearchesRequest";
  }
  protected:
  explicit PostAnnotationsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchesFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPaginationFieldNumber = 3,
  };
  // repeated .clarifai.api.Search searches = 2;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::clarifai::api::Pagination* pagination);
  ::clarifai::api::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAnnotationsSearchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteAnnotationSearchMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteAnnotationSearchMetricsRequest) */ {
 public:
  inline DeleteAnnotationSearchMetricsRequest() : DeleteAnnotationSearchMetricsRequest(nullptr) {}
  ~DeleteAnnotationSearchMetricsRequest() override;
  explicit constexpr DeleteAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAnnotationSearchMetricsRequest(const DeleteAnnotationSearchMetricsRequest& from);
  DeleteAnnotationSearchMetricsRequest(DeleteAnnotationSearchMetricsRequest&& from) noexcept
    : DeleteAnnotationSearchMetricsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAnnotationSearchMetricsRequest& operator=(const DeleteAnnotationSearchMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAnnotationSearchMetricsRequest& operator=(DeleteAnnotationSearchMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAnnotationSearchMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAnnotationSearchMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAnnotationSearchMetricsRequest*>(
               &_DeleteAnnotationSearchMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(DeleteAnnotationSearchMetricsRequest& a, DeleteAnnotationSearchMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAnnotationSearchMetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAnnotationSearchMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAnnotationSearchMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAnnotationSearchMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAnnotationSearchMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteAnnotationSearchMetricsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAnnotationSearchMetricsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteAnnotationSearchMetricsRequest";
  }
  protected:
  explicit DeleteAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteAnnotationSearchMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostInputsSearchesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostInputsSearchesRequest) */ {
 public:
  inline PostInputsSearchesRequest() : PostInputsSearchesRequest(nullptr) {}
  ~PostInputsSearchesRequest() override;
  explicit constexpr PostInputsSearchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostInputsSearchesRequest(const PostInputsSearchesRequest& from);
  PostInputsSearchesRequest(PostInputsSearchesRequest&& from) noexcept
    : PostInputsSearchesRequest() {
    *this = ::std::move(from);
  }

  inline PostInputsSearchesRequest& operator=(const PostInputsSearchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostInputsSearchesRequest& operator=(PostInputsSearchesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostInputsSearchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostInputsSearchesRequest* internal_default_instance() {
    return reinterpret_cast<const PostInputsSearchesRequest*>(
               &_PostInputsSearchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(PostInputsSearchesRequest& a, PostInputsSearchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostInputsSearchesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostInputsSearchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostInputsSearchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostInputsSearchesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostInputsSearchesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostInputsSearchesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostInputsSearchesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostInputsSearchesRequest";
  }
  protected:
  explicit PostInputsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchesFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPaginationFieldNumber = 3,
  };
  // repeated .clarifai.api.Search searches = 2;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.Pagination pagination = 3;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::clarifai::api::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::clarifai::api::Pagination* release_pagination();
  ::clarifai::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::clarifai::api::Pagination* pagination);
  private:
  const ::clarifai::api::Pagination& _internal_pagination() const;
  ::clarifai::api::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::clarifai::api::Pagination* pagination);
  ::clarifai::api::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostInputsSearchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleSearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleSearchResponse) */ {
 public:
  inline SingleSearchResponse() : SingleSearchResponse(nullptr) {}
  ~SingleSearchResponse() override;
  explicit constexpr SingleSearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleSearchResponse(const SingleSearchResponse& from);
  SingleSearchResponse(SingleSearchResponse&& from) noexcept
    : SingleSearchResponse() {
    *this = ::std::move(from);
  }

  inline SingleSearchResponse& operator=(const SingleSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleSearchResponse& operator=(SingleSearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleSearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleSearchResponse* internal_default_instance() {
    return reinterpret_cast<const SingleSearchResponse*>(
               &_SingleSearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(SingleSearchResponse& a, SingleSearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleSearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleSearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleSearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleSearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleSearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleSearchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleSearchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleSearchResponse";
  }
  protected:
  explicit SingleSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kSearchFieldNumber = 5,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.Search search = 5;
  bool has_search() const;
  private:
  bool _internal_has_search() const;
  public:
  void clear_search();
  const ::clarifai::api::Search& search() const;
  PROTOBUF_NODISCARD ::clarifai::api::Search* release_search();
  ::clarifai::api::Search* mutable_search();
  void set_allocated_search(::clarifai::api::Search* search);
  private:
  const ::clarifai::api::Search& _internal_search() const;
  ::clarifai::api::Search* _internal_mutable_search();
  public:
  void unsafe_arena_set_allocated_search(
      ::clarifai::api::Search* search);
  ::clarifai::api::Search* unsafe_arena_release_search();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleSearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Search* search_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiSearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiSearchResponse) */ {
 public:
  inline MultiSearchResponse() : MultiSearchResponse(nullptr) {}
  ~MultiSearchResponse() override;
  explicit constexpr MultiSearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiSearchResponse(const MultiSearchResponse& from);
  MultiSearchResponse(MultiSearchResponse&& from) noexcept
    : MultiSearchResponse() {
    *this = ::std::move(from);
  }

  inline MultiSearchResponse& operator=(const MultiSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiSearchResponse& operator=(MultiSearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiSearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiSearchResponse* internal_default_instance() {
    return reinterpret_cast<const MultiSearchResponse*>(
               &_MultiSearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(MultiSearchResponse& a, MultiSearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiSearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiSearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiSearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiSearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiSearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiSearchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiSearchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiSearchResponse";
  }
  protected:
  explicit MultiSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitsFieldNumber = 3,
    kSearchesFieldNumber = 5,
    kIdFieldNumber = 2,
    kStatusFieldNumber = 1,
    kQueryFieldNumber = 4,
  };
  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int hits_size() const;
  private:
  int _internal_hits_size() const;
  public:
  void clear_hits();
  ::clarifai::api::Hit* mutable_hits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >*
      mutable_hits();
  private:
  const ::clarifai::api::Hit& _internal_hits(int index) const;
  ::clarifai::api::Hit* _internal_add_hits();
  public:
  const ::clarifai::api::Hit& hits(int index) const;
  ::clarifai::api::Hit* add_hits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >&
      hits() const;

  // repeated .clarifai.api.Search searches = 5;
  int searches_size() const;
  private:
  int _internal_searches_size() const;
  public:
  void clear_searches();
  ::clarifai::api::Search* mutable_searches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
      mutable_searches();
  private:
  const ::clarifai::api::Search& _internal_searches(int index) const;
  ::clarifai::api::Search* _internal_add_searches();
  public:
  const ::clarifai::api::Search& searches(int index) const;
  ::clarifai::api::Search* add_searches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
      searches() const;

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.Query query = 4;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::clarifai::api::Query& query() const;
  PROTOBUF_NODISCARD ::clarifai::api::Query* release_query();
  ::clarifai::api::Query* mutable_query();
  void set_allocated_query(::clarifai::api::Query* query);
  private:
  const ::clarifai::api::Query& _internal_query() const;
  ::clarifai::api::Query* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::clarifai::api::Query* query);
  ::clarifai::api::Query* unsafe_arena_release_query();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiSearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit > hits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search > searches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Query* query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAnnotationSearchMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAnnotationSearchMetricsRequest) */ {
 public:
  inline PostAnnotationSearchMetricsRequest() : PostAnnotationSearchMetricsRequest(nullptr) {}
  ~PostAnnotationSearchMetricsRequest() override;
  explicit constexpr PostAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostAnnotationSearchMetricsRequest(const PostAnnotationSearchMetricsRequest& from);
  PostAnnotationSearchMetricsRequest(PostAnnotationSearchMetricsRequest&& from) noexcept
    : PostAnnotationSearchMetricsRequest() {
    *this = ::std::move(from);
  }

  inline PostAnnotationSearchMetricsRequest& operator=(const PostAnnotationSearchMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAnnotationSearchMetricsRequest& operator=(PostAnnotationSearchMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostAnnotationSearchMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostAnnotationSearchMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const PostAnnotationSearchMetricsRequest*>(
               &_PostAnnotationSearchMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(PostAnnotationSearchMetricsRequest& a, PostAnnotationSearchMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAnnotationSearchMetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostAnnotationSearchMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostAnnotationSearchMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostAnnotationSearchMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostAnnotationSearchMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostAnnotationSearchMetricsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAnnotationSearchMetricsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAnnotationSearchMetricsRequest";
  }
  protected:
  explicit PostAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kGroundTruthFieldNumber = 3,
    kSearchToEvalFieldNumber = 4,
    kDataFieldNumber = 5,
    kEvaluationTypeFieldNumber = 6,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.Search ground_truth = 3;
  bool has_ground_truth() const;
  private:
  bool _internal_has_ground_truth() const;
  public:
  void clear_ground_truth();
  const ::clarifai::api::Search& ground_truth() const;
  PROTOBUF_NODISCARD ::clarifai::api::Search* release_ground_truth();
  ::clarifai::api::Search* mutable_ground_truth();
  void set_allocated_ground_truth(::clarifai::api::Search* ground_truth);
  private:
  const ::clarifai::api::Search& _internal_ground_truth() const;
  ::clarifai::api::Search* _internal_mutable_ground_truth();
  public:
  void unsafe_arena_set_allocated_ground_truth(
      ::clarifai::api::Search* ground_truth);
  ::clarifai::api::Search* unsafe_arena_release_ground_truth();

  // .clarifai.api.Search search_to_eval = 4;
  bool has_search_to_eval() const;
  private:
  bool _internal_has_search_to_eval() const;
  public:
  void clear_search_to_eval();
  const ::clarifai::api::Search& search_to_eval() const;
  PROTOBUF_NODISCARD ::clarifai::api::Search* release_search_to_eval();
  ::clarifai::api::Search* mutable_search_to_eval();
  void set_allocated_search_to_eval(::clarifai::api::Search* search_to_eval);
  private:
  const ::clarifai::api::Search& _internal_search_to_eval() const;
  ::clarifai::api::Search* _internal_mutable_search_to_eval();
  public:
  void unsafe_arena_set_allocated_search_to_eval(
      ::clarifai::api::Search* search_to_eval);
  ::clarifai::api::Search* unsafe_arena_release_search_to_eval();

  // .clarifai.api.Data data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  PROTOBUF_NODISCARD ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::clarifai::api::Data* data);
  ::clarifai::api::Data* unsafe_arena_release_data();

  // .clarifai.api.EvaluationType evaluation_type = 6;
  void clear_evaluation_type();
  ::clarifai::api::EvaluationType evaluation_type() const;
  void set_evaluation_type(::clarifai::api::EvaluationType value);
  private:
  ::clarifai::api::EvaluationType _internal_evaluation_type() const;
  void _internal_set_evaluation_type(::clarifai::api::EvaluationType value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAnnotationSearchMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Search* ground_truth_;
  ::clarifai::api::Search* search_to_eval_;
  ::clarifai::api::Data* data_;
  int evaluation_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAnnotationSearchMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetAnnotationSearchMetricsRequest) */ {
 public:
  inline GetAnnotationSearchMetricsRequest() : GetAnnotationSearchMetricsRequest(nullptr) {}
  ~GetAnnotationSearchMetricsRequest() override;
  explicit constexpr GetAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAnnotationSearchMetricsRequest(const GetAnnotationSearchMetricsRequest& from);
  GetAnnotationSearchMetricsRequest(GetAnnotationSearchMetricsRequest&& from) noexcept
    : GetAnnotationSearchMetricsRequest() {
    *this = ::std::move(from);
  }

  inline GetAnnotationSearchMetricsRequest& operator=(const GetAnnotationSearchMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAnnotationSearchMetricsRequest& operator=(GetAnnotationSearchMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAnnotationSearchMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAnnotationSearchMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAnnotationSearchMetricsRequest*>(
               &_GetAnnotationSearchMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(GetAnnotationSearchMetricsRequest& a, GetAnnotationSearchMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAnnotationSearchMetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAnnotationSearchMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAnnotationSearchMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAnnotationSearchMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAnnotationSearchMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAnnotationSearchMetricsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAnnotationSearchMetricsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetAnnotationSearchMetricsRequest";
  }
  protected:
  explicit GetAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetAnnotationSearchMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAnnotationSearchMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAnnotationSearchMetricsRequest) */ {
 public:
  inline ListAnnotationSearchMetricsRequest() : ListAnnotationSearchMetricsRequest(nullptr) {}
  ~ListAnnotationSearchMetricsRequest() override;
  explicit constexpr ListAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAnnotationSearchMetricsRequest(const ListAnnotationSearchMetricsRequest& from);
  ListAnnotationSearchMetricsRequest(ListAnnotationSearchMetricsRequest&& from) noexcept
    : ListAnnotationSearchMetricsRequest() {
    *this = ::std::move(from);
  }

  inline ListAnnotationSearchMetricsRequest& operator=(const ListAnnotationSearchMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAnnotationSearchMetricsRequest& operator=(ListAnnotationSearchMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAnnotationSearchMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAnnotationSearchMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAnnotationSearchMetricsRequest*>(
               &_ListAnnotationSearchMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(ListAnnotationSearchMetricsRequest& a, ListAnnotationSearchMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAnnotationSearchMetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAnnotationSearchMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAnnotationSearchMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAnnotationSearchMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAnnotationSearchMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListAnnotationSearchMetricsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAnnotationSearchMetricsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAnnotationSearchMetricsRequest";
  }
  protected:
  explicit ListAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAnnotationSearchMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiAnnotationSearchMetricsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiAnnotationSearchMetricsResponse) */ {
 public:
  inline MultiAnnotationSearchMetricsResponse() : MultiAnnotationSearchMetricsResponse(nullptr) {}
  ~MultiAnnotationSearchMetricsResponse() override;
  explicit constexpr MultiAnnotationSearchMetricsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiAnnotationSearchMetricsResponse(const MultiAnnotationSearchMetricsResponse& from);
  MultiAnnotationSearchMetricsResponse(MultiAnnotationSearchMetricsResponse&& from) noexcept
    : MultiAnnotationSearchMetricsResponse() {
    *this = ::std::move(from);
  }

  inline MultiAnnotationSearchMetricsResponse& operator=(const MultiAnnotationSearchMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAnnotationSearchMetricsResponse& operator=(MultiAnnotationSearchMetricsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiAnnotationSearchMetricsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiAnnotationSearchMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const MultiAnnotationSearchMetricsResponse*>(
               &_MultiAnnotationSearchMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(MultiAnnotationSearchMetricsResponse& a, MultiAnnotationSearchMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiAnnotationSearchMetricsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiAnnotationSearchMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiAnnotationSearchMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiAnnotationSearchMetricsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiAnnotationSearchMetricsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiAnnotationSearchMetricsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiAnnotationSearchMetricsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiAnnotationSearchMetricsResponse";
  }
  protected:
  explicit MultiAnnotationSearchMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationSearchMetricsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
  int annotation_search_metrics_size() const;
  private:
  int _internal_annotation_search_metrics_size() const;
  public:
  void clear_annotation_search_metrics();
  ::clarifai::api::AnnotationSearchMetrics* mutable_annotation_search_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationSearchMetrics >*
      mutable_annotation_search_metrics();
  private:
  const ::clarifai::api::AnnotationSearchMetrics& _internal_annotation_search_metrics(int index) const;
  ::clarifai::api::AnnotationSearchMetrics* _internal_add_annotation_search_metrics();
  public:
  const ::clarifai::api::AnnotationSearchMetrics& annotation_search_metrics(int index) const;
  ::clarifai::api::AnnotationSearchMetrics* add_annotation_search_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationSearchMetrics >&
      annotation_search_metrics() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiAnnotationSearchMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationSearchMetrics > annotation_search_metrics_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAnnotationFiltersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAnnotationFiltersRequest) */ {
 public:
  inline ListAnnotationFiltersRequest() : ListAnnotationFiltersRequest(nullptr) {}
  ~ListAnnotationFiltersRequest() override;
  explicit constexpr ListAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAnnotationFiltersRequest(const ListAnnotationFiltersRequest& from);
  ListAnnotationFiltersRequest(ListAnnotationFiltersRequest&& from) noexcept
    : ListAnnotationFiltersRequest() {
    *this = ::std::move(from);
  }

  inline ListAnnotationFiltersRequest& operator=(const ListAnnotationFiltersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAnnotationFiltersRequest& operator=(ListAnnotationFiltersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAnnotationFiltersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAnnotationFiltersRequest* internal_default_instance() {
    return reinterpret_cast<const ListAnnotationFiltersRequest*>(
               &_ListAnnotationFiltersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(ListAnnotationFiltersRequest& a, ListAnnotationFiltersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAnnotationFiltersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAnnotationFiltersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAnnotationFiltersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAnnotationFiltersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAnnotationFiltersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListAnnotationFiltersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAnnotationFiltersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAnnotationFiltersRequest";
  }
  protected:
  explicit ListAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAnnotationFiltersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAnnotationFilterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetAnnotationFilterRequest) */ {
 public:
  inline GetAnnotationFilterRequest() : GetAnnotationFilterRequest(nullptr) {}
  ~GetAnnotationFilterRequest() override;
  explicit constexpr GetAnnotationFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAnnotationFilterRequest(const GetAnnotationFilterRequest& from);
  GetAnnotationFilterRequest(GetAnnotationFilterRequest&& from) noexcept
    : GetAnnotationFilterRequest() {
    *this = ::std::move(from);
  }

  inline GetAnnotationFilterRequest& operator=(const GetAnnotationFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAnnotationFilterRequest& operator=(GetAnnotationFilterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAnnotationFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAnnotationFilterRequest* internal_default_instance() {
    return reinterpret_cast<const GetAnnotationFilterRequest*>(
               &_GetAnnotationFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(GetAnnotationFilterRequest& a, GetAnnotationFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAnnotationFilterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAnnotationFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAnnotationFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAnnotationFilterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAnnotationFilterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAnnotationFilterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAnnotationFilterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetAnnotationFilterRequest";
  }
  protected:
  explicit GetAnnotationFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFilterIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string annotation_filter_id = 2;
  void clear_annotation_filter_id();
  const std::string& annotation_filter_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_annotation_filter_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_annotation_filter_id();
  PROTOBUF_NODISCARD std::string* release_annotation_filter_id();
  void set_allocated_annotation_filter_id(std::string* annotation_filter_id);
  private:
  const std::string& _internal_annotation_filter_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annotation_filter_id(const std::string& value);
  std::string* _internal_mutable_annotation_filter_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetAnnotationFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annotation_filter_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAnnotationFiltersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAnnotationFiltersRequest) */ {
 public:
  inline PostAnnotationFiltersRequest() : PostAnnotationFiltersRequest(nullptr) {}
  ~PostAnnotationFiltersRequest() override;
  explicit constexpr PostAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostAnnotationFiltersRequest(const PostAnnotationFiltersRequest& from);
  PostAnnotationFiltersRequest(PostAnnotationFiltersRequest&& from) noexcept
    : PostAnnotationFiltersRequest() {
    *this = ::std::move(from);
  }

  inline PostAnnotationFiltersRequest& operator=(const PostAnnotationFiltersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAnnotationFiltersRequest& operator=(PostAnnotationFiltersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostAnnotationFiltersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostAnnotationFiltersRequest* internal_default_instance() {
    return reinterpret_cast<const PostAnnotationFiltersRequest*>(
               &_PostAnnotationFiltersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(PostAnnotationFiltersRequest& a, PostAnnotationFiltersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAnnotationFiltersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostAnnotationFiltersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostAnnotationFiltersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostAnnotationFiltersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostAnnotationFiltersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostAnnotationFiltersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAnnotationFiltersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAnnotationFiltersRequest";
  }
  protected:
  explicit PostAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFiltersFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
  int annotation_filters_size() const;
  private:
  int _internal_annotation_filters_size() const;
  public:
  void clear_annotation_filters();
  ::clarifai::api::AnnotationFilter* mutable_annotation_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter >*
      mutable_annotation_filters();
  private:
  const ::clarifai::api::AnnotationFilter& _internal_annotation_filters(int index) const;
  ::clarifai::api::AnnotationFilter* _internal_add_annotation_filters();
  public:
  const ::clarifai::api::AnnotationFilter& annotation_filters(int index) const;
  ::clarifai::api::AnnotationFilter* add_annotation_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter >&
      annotation_filters() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAnnotationFiltersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter > annotation_filters_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchAnnotationFiltersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchAnnotationFiltersRequest) */ {
 public:
  inline PatchAnnotationFiltersRequest() : PatchAnnotationFiltersRequest(nullptr) {}
  ~PatchAnnotationFiltersRequest() override;
  explicit constexpr PatchAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchAnnotationFiltersRequest(const PatchAnnotationFiltersRequest& from);
  PatchAnnotationFiltersRequest(PatchAnnotationFiltersRequest&& from) noexcept
    : PatchAnnotationFiltersRequest() {
    *this = ::std::move(from);
  }

  inline PatchAnnotationFiltersRequest& operator=(const PatchAnnotationFiltersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchAnnotationFiltersRequest& operator=(PatchAnnotationFiltersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchAnnotationFiltersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchAnnotationFiltersRequest* internal_default_instance() {
    return reinterpret_cast<const PatchAnnotationFiltersRequest*>(
               &_PatchAnnotationFiltersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(PatchAnnotationFiltersRequest& a, PatchAnnotationFiltersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchAnnotationFiltersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchAnnotationFiltersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchAnnotationFiltersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchAnnotationFiltersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchAnnotationFiltersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchAnnotationFiltersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchAnnotationFiltersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchAnnotationFiltersRequest";
  }
  protected:
  explicit PatchAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFiltersFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
  int annotation_filters_size() const;
  private:
  int _internal_annotation_filters_size() const;
  public:
  void clear_annotation_filters();
  ::clarifai::api::AnnotationFilter* mutable_annotation_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter >*
      mutable_annotation_filters();
  private:
  const ::clarifai::api::AnnotationFilter& _internal_annotation_filters(int index) const;
  ::clarifai::api::AnnotationFilter* _internal_add_annotation_filters();
  public:
  const ::clarifai::api::AnnotationFilter& annotation_filters(int index) const;
  ::clarifai::api::AnnotationFilter* add_annotation_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter >&
      annotation_filters() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchAnnotationFiltersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter > annotation_filters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteAnnotationFiltersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteAnnotationFiltersRequest) */ {
 public:
  inline DeleteAnnotationFiltersRequest() : DeleteAnnotationFiltersRequest(nullptr) {}
  ~DeleteAnnotationFiltersRequest() override;
  explicit constexpr DeleteAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAnnotationFiltersRequest(const DeleteAnnotationFiltersRequest& from);
  DeleteAnnotationFiltersRequest(DeleteAnnotationFiltersRequest&& from) noexcept
    : DeleteAnnotationFiltersRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAnnotationFiltersRequest& operator=(const DeleteAnnotationFiltersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAnnotationFiltersRequest& operator=(DeleteAnnotationFiltersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAnnotationFiltersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAnnotationFiltersRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAnnotationFiltersRequest*>(
               &_DeleteAnnotationFiltersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(DeleteAnnotationFiltersRequest& a, DeleteAnnotationFiltersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAnnotationFiltersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAnnotationFiltersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAnnotationFiltersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAnnotationFiltersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAnnotationFiltersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteAnnotationFiltersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAnnotationFiltersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteAnnotationFiltersRequest";
  }
  protected:
  explicit DeleteAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFilterIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string annotation_filter_ids = 2;
  int annotation_filter_ids_size() const;
  private:
  int _internal_annotation_filter_ids_size() const;
  public:
  void clear_annotation_filter_ids();
  const std::string& annotation_filter_ids(int index) const;
  std::string* mutable_annotation_filter_ids(int index);
  void set_annotation_filter_ids(int index, const std::string& value);
  void set_annotation_filter_ids(int index, std::string&& value);
  void set_annotation_filter_ids(int index, const char* value);
  void set_annotation_filter_ids(int index, const char* value, size_t size);
  std::string* add_annotation_filter_ids();
  void add_annotation_filter_ids(const std::string& value);
  void add_annotation_filter_ids(std::string&& value);
  void add_annotation_filter_ids(const char* value);
  void add_annotation_filter_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& annotation_filter_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_annotation_filter_ids();
  private:
  const std::string& _internal_annotation_filter_ids(int index) const;
  std::string* _internal_add_annotation_filter_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteAnnotationFiltersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> annotation_filter_ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiAnnotationFilterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiAnnotationFilterResponse) */ {
 public:
  inline MultiAnnotationFilterResponse() : MultiAnnotationFilterResponse(nullptr) {}
  ~MultiAnnotationFilterResponse() override;
  explicit constexpr MultiAnnotationFilterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiAnnotationFilterResponse(const MultiAnnotationFilterResponse& from);
  MultiAnnotationFilterResponse(MultiAnnotationFilterResponse&& from) noexcept
    : MultiAnnotationFilterResponse() {
    *this = ::std::move(from);
  }

  inline MultiAnnotationFilterResponse& operator=(const MultiAnnotationFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAnnotationFilterResponse& operator=(MultiAnnotationFilterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiAnnotationFilterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiAnnotationFilterResponse* internal_default_instance() {
    return reinterpret_cast<const MultiAnnotationFilterResponse*>(
               &_MultiAnnotationFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(MultiAnnotationFilterResponse& a, MultiAnnotationFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiAnnotationFilterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiAnnotationFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiAnnotationFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiAnnotationFilterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiAnnotationFilterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiAnnotationFilterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiAnnotationFilterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiAnnotationFilterResponse";
  }
  protected:
  explicit MultiAnnotationFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFiltersFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int annotation_filters_size() const;
  private:
  int _internal_annotation_filters_size() const;
  public:
  void clear_annotation_filters();
  ::clarifai::api::AnnotationFilter* mutable_annotation_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter >*
      mutable_annotation_filters();
  private:
  const ::clarifai::api::AnnotationFilter& _internal_annotation_filters(int index) const;
  ::clarifai::api::AnnotationFilter* _internal_add_annotation_filters();
  public:
  const ::clarifai::api::AnnotationFilter& annotation_filters(int index) const;
  ::clarifai::api::AnnotationFilter* add_annotation_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter >&
      annotation_filters() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiAnnotationFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter > annotation_filters_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleAnnotationFilterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleAnnotationFilterResponse) */ {
 public:
  inline SingleAnnotationFilterResponse() : SingleAnnotationFilterResponse(nullptr) {}
  ~SingleAnnotationFilterResponse() override;
  explicit constexpr SingleAnnotationFilterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleAnnotationFilterResponse(const SingleAnnotationFilterResponse& from);
  SingleAnnotationFilterResponse(SingleAnnotationFilterResponse&& from) noexcept
    : SingleAnnotationFilterResponse() {
    *this = ::std::move(from);
  }

  inline SingleAnnotationFilterResponse& operator=(const SingleAnnotationFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleAnnotationFilterResponse& operator=(SingleAnnotationFilterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleAnnotationFilterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleAnnotationFilterResponse* internal_default_instance() {
    return reinterpret_cast<const SingleAnnotationFilterResponse*>(
               &_SingleAnnotationFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(SingleAnnotationFilterResponse& a, SingleAnnotationFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleAnnotationFilterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleAnnotationFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleAnnotationFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleAnnotationFilterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleAnnotationFilterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleAnnotationFilterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleAnnotationFilterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleAnnotationFilterResponse";
  }
  protected:
  explicit SingleAnnotationFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kAnnotationFilterFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.AnnotationFilter annotation_filter = 2;
  bool has_annotation_filter() const;
  private:
  bool _internal_has_annotation_filter() const;
  public:
  void clear_annotation_filter();
  const ::clarifai::api::AnnotationFilter& annotation_filter() const;
  PROTOBUF_NODISCARD ::clarifai::api::AnnotationFilter* release_annotation_filter();
  ::clarifai::api::AnnotationFilter* mutable_annotation_filter();
  void set_allocated_annotation_filter(::clarifai::api::AnnotationFilter* annotation_filter);
  private:
  const ::clarifai::api::AnnotationFilter& _internal_annotation_filter() const;
  ::clarifai::api::AnnotationFilter* _internal_mutable_annotation_filter();
  public:
  void unsafe_arena_set_allocated_annotation_filter(
      ::clarifai::api::AnnotationFilter* annotation_filter);
  ::clarifai::api::AnnotationFilter* unsafe_arena_release_annotation_filter();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleAnnotationFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::AnnotationFilter* annotation_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostValidatePasswordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostValidatePasswordRequest) */ {
 public:
  inline PostValidatePasswordRequest() : PostValidatePasswordRequest(nullptr) {}
  ~PostValidatePasswordRequest() override;
  explicit constexpr PostValidatePasswordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostValidatePasswordRequest(const PostValidatePasswordRequest& from);
  PostValidatePasswordRequest(PostValidatePasswordRequest&& from) noexcept
    : PostValidatePasswordRequest() {
    *this = ::std::move(from);
  }

  inline PostValidatePasswordRequest& operator=(const PostValidatePasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostValidatePasswordRequest& operator=(PostValidatePasswordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostValidatePasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostValidatePasswordRequest* internal_default_instance() {
    return reinterpret_cast<const PostValidatePasswordRequest*>(
               &_PostValidatePasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(PostValidatePasswordRequest& a, PostValidatePasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostValidatePasswordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostValidatePasswordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostValidatePasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostValidatePasswordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostValidatePasswordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostValidatePasswordRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostValidatePasswordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostValidatePasswordRequest";
  }
  protected:
  explicit PostValidatePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.Password password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const ::clarifai::api::Password& password() const;
  PROTOBUF_NODISCARD ::clarifai::api::Password* release_password();
  ::clarifai::api::Password* mutable_password();
  void set_allocated_password(::clarifai::api::Password* password);
  private:
  const ::clarifai::api::Password& _internal_password() const;
  ::clarifai::api::Password* _internal_mutable_password();
  public:
  void unsafe_arena_set_allocated_password(
      ::clarifai::api::Password* password);
  ::clarifai::api::Password* unsafe_arena_release_password();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostValidatePasswordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::Password* password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SinglePasswordValidationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SinglePasswordValidationResponse) */ {
 public:
  inline SinglePasswordValidationResponse() : SinglePasswordValidationResponse(nullptr) {}
  ~SinglePasswordValidationResponse() override;
  explicit constexpr SinglePasswordValidationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SinglePasswordValidationResponse(const SinglePasswordValidationResponse& from);
  SinglePasswordValidationResponse(SinglePasswordValidationResponse&& from) noexcept
    : SinglePasswordValidationResponse() {
    *this = ::std::move(from);
  }

  inline SinglePasswordValidationResponse& operator=(const SinglePasswordValidationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SinglePasswordValidationResponse& operator=(SinglePasswordValidationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SinglePasswordValidationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SinglePasswordValidationResponse* internal_default_instance() {
    return reinterpret_cast<const SinglePasswordValidationResponse*>(
               &_SinglePasswordValidationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(SinglePasswordValidationResponse& a, SinglePasswordValidationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SinglePasswordValidationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SinglePasswordValidationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SinglePasswordValidationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SinglePasswordValidationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SinglePasswordValidationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SinglePasswordValidationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SinglePasswordValidationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SinglePasswordValidationResponse";
  }
  protected:
  explicit SinglePasswordValidationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kPasswordViolationsFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.PasswordViolations password_violations = 2;
  bool has_password_violations() const;
  private:
  bool _internal_has_password_violations() const;
  public:
  void clear_password_violations();
  const ::clarifai::api::PasswordViolations& password_violations() const;
  PROTOBUF_NODISCARD ::clarifai::api::PasswordViolations* release_password_violations();
  ::clarifai::api::PasswordViolations* mutable_password_violations();
  void set_allocated_password_violations(::clarifai::api::PasswordViolations* password_violations);
  private:
  const ::clarifai::api::PasswordViolations& _internal_password_violations() const;
  ::clarifai::api::PasswordViolations* _internal_mutable_password_violations();
  public:
  void unsafe_arena_set_allocated_password_violations(
      ::clarifai::api::PasswordViolations* password_violations);
  ::clarifai::api::PasswordViolations* unsafe_arena_release_password_violations();

  // @@protoc_insertion_point(class_scope:clarifai.api.SinglePasswordValidationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::PasswordViolations* password_violations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetWorkflowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetWorkflowRequest) */ {
 public:
  inline GetWorkflowRequest() : GetWorkflowRequest(nullptr) {}
  ~GetWorkflowRequest() override;
  explicit constexpr GetWorkflowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWorkflowRequest(const GetWorkflowRequest& from);
  GetWorkflowRequest(GetWorkflowRequest&& from) noexcept
    : GetWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline GetWorkflowRequest& operator=(const GetWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkflowRequest& operator=(GetWorkflowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorkflowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorkflowRequest*>(
               &_GetWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(GetWorkflowRequest& a, GetWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkflowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWorkflowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWorkflowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetWorkflowRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkflowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetWorkflowRequest";
  }
  protected:
  explicit GetWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalFieldsFieldNumber = 4,
    kWorkflowIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kFavorClarifaiWorkflowsFieldNumber = 3,
    kExcludeClarifaiWorkflowsFieldNumber = 5,
  };
  // repeated string additional_fields = 4;
  int additional_fields_size() const;
  private:
  int _internal_additional_fields_size() const;
  public:
  void clear_additional_fields();
  const std::string& additional_fields(int index) const;
  std::string* mutable_additional_fields(int index);
  void set_additional_fields(int index, const std::string& value);
  void set_additional_fields(int index, std::string&& value);
  void set_additional_fields(int index, const char* value);
  void set_additional_fields(int index, const char* value, size_t size);
  std::string* add_additional_fields();
  void add_additional_fields(const std::string& value);
  void add_additional_fields(std::string&& value);
  void add_additional_fields(const char* value);
  void add_additional_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& additional_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_additional_fields();
  private:
  const std::string& _internal_additional_fields(int index) const;
  std::string* _internal_add_additional_fields();
  public:

  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // bool favor_clarifai_workflows = 3;
  void clear_favor_clarifai_workflows();
  bool favor_clarifai_workflows() const;
  void set_favor_clarifai_workflows(bool value);
  private:
  bool _internal_favor_clarifai_workflows() const;
  void _internal_set_favor_clarifai_workflows(bool value);
  public:

  // bool exclude_clarifai_workflows = 5;
  void clear_exclude_clarifai_workflows();
  bool exclude_clarifai_workflows() const;
  void set_exclude_clarifai_workflows(bool value);
  private:
  bool _internal_exclude_clarifai_workflows() const;
  void _internal_set_exclude_clarifai_workflows(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GetWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> additional_fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool favor_clarifai_workflows_;
  bool exclude_clarifai_workflows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListWorkflowsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListWorkflowsRequest) */ {
 public:
  inline ListWorkflowsRequest() : ListWorkflowsRequest(nullptr) {}
  ~ListWorkflowsRequest() override;
  explicit constexpr ListWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListWorkflowsRequest(const ListWorkflowsRequest& from);
  ListWorkflowsRequest(ListWorkflowsRequest&& from) noexcept
    : ListWorkflowsRequest() {
    *this = ::std::move(from);
  }

  inline ListWorkflowsRequest& operator=(const ListWorkflowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWorkflowsRequest& operator=(ListWorkflowsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListWorkflowsRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SortByCase {
    kSortById = 6,
    kSortByModifiedAt = 7,
    SORT_BY_NOT_SET = 0,
  };

  static inline const ListWorkflowsRequest* internal_default_instance() {
    return reinterpret_cast<const ListWorkflowsRequest*>(
               &_ListWorkflowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(ListWorkflowsRequest& a, ListWorkflowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListWorkflowsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListWorkflowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListWorkflowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListWorkflowsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListWorkflowsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListWorkflowsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWorkflowsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListWorkflowsRequest";
  }
  protected:
  explicit ListWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalFieldsFieldNumber = 10,
    kIdFieldNumber = 4,
    kQueryFieldNumber = 8,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
    kSortAscendingFieldNumber = 5,
    kFeaturedOnlyFieldNumber = 9,
    kStarredOnlyFieldNumber = 11,
    kSortByIdFieldNumber = 6,
    kSortByModifiedAtFieldNumber = 7,
  };
  // repeated string additional_fields = 10;
  int additional_fields_size() const;
  private:
  int _internal_additional_fields_size() const;
  public:
  void clear_additional_fields();
  const std::string& additional_fields(int index) const;
  std::string* mutable_additional_fields(int index);
  void set_additional_fields(int index, const std::string& value);
  void set_additional_fields(int index, std::string&& value);
  void set_additional_fields(int index, const char* value);
  void set_additional_fields(int index, const char* value, size_t size);
  std::string* add_additional_fields();
  void add_additional_fields(const std::string& value);
  void add_additional_fields(std::string&& value);
  void add_additional_fields(const char* value);
  void add_additional_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& additional_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_additional_fields();
  private:
  const std::string& _internal_additional_fields(int index) const;
  std::string* _internal_add_additional_fields();
  public:

  // string id = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_id();
  PROTOBUF_DEPRECATED const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_id(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_id();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_id();
  PROTOBUF_DEPRECATED void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string query = 8;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // bool sort_ascending = 5;
  void clear_sort_ascending();
  bool sort_ascending() const;
  void set_sort_ascending(bool value);
  private:
  bool _internal_sort_ascending() const;
  void _internal_set_sort_ascending(bool value);
  public:

  // bool featured_only = 9;
  void clear_featured_only();
  bool featured_only() const;
  void set_featured_only(bool value);
  private:
  bool _internal_featured_only() const;
  void _internal_set_featured_only(bool value);
  public:

  // bool starred_only = 11;
  void clear_starred_only();
  bool starred_only() const;
  void set_starred_only(bool value);
  private:
  bool _internal_starred_only() const;
  void _internal_set_starred_only(bool value);
  public:

  // bool sort_by_id = 6;
  bool has_sort_by_id() const;
  private:
  bool _internal_has_sort_by_id() const;
  public:
  void clear_sort_by_id();
  bool sort_by_id() const;
  void set_sort_by_id(bool value);
  private:
  bool _internal_sort_by_id() const;
  void _internal_set_sort_by_id(bool value);
  public:

  // bool sort_by_modified_at = 7;
  bool has_sort_by_modified_at() const;
  private:
  bool _internal_has_sort_by_modified_at() const;
  public:
  void clear_sort_by_modified_at();
  bool sort_by_modified_at() const;
  void set_sort_by_modified_at(bool value);
  private:
  bool _internal_sort_by_modified_at() const;
  void _internal_set_sort_by_modified_at(bool value);
  public:

  void clear_sort_by();
  SortByCase sort_by_case() const;
  // @@protoc_insertion_point(class_scope:clarifai.api.ListWorkflowsRequest)
 private:
  class _Internal;
  void set_has_sort_by_id();
  void set_has_sort_by_modified_at();

  inline bool has_sort_by() const;
  inline void clear_has_sort_by();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> additional_fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  bool sort_ascending_;
  bool featured_only_;
  bool starred_only_;
  union SortByUnion {
    constexpr SortByUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool sort_by_id_;
    bool sort_by_modified_at_;
  } sort_by_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostWorkflowsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostWorkflowsRequest) */ {
 public:
  inline PostWorkflowsRequest() : PostWorkflowsRequest(nullptr) {}
  ~PostWorkflowsRequest() override;
  explicit constexpr PostWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostWorkflowsRequest(const PostWorkflowsRequest& from);
  PostWorkflowsRequest(PostWorkflowsRequest&& from) noexcept
    : PostWorkflowsRequest() {
    *this = ::std::move(from);
  }

  inline PostWorkflowsRequest& operator=(const PostWorkflowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostWorkflowsRequest& operator=(PostWorkflowsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostWorkflowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostWorkflowsRequest* internal_default_instance() {
    return reinterpret_cast<const PostWorkflowsRequest*>(
               &_PostWorkflowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(PostWorkflowsRequest& a, PostWorkflowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostWorkflowsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostWorkflowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostWorkflowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostWorkflowsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostWorkflowsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostWorkflowsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostWorkflowsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostWorkflowsRequest";
  }
  protected:
  explicit PostWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Workflow workflows = 2;
  int workflows_size() const;
  private:
  int _internal_workflows_size() const;
  public:
  void clear_workflows();
  ::clarifai::api::Workflow* mutable_workflows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >*
      mutable_workflows();
  private:
  const ::clarifai::api::Workflow& _internal_workflows(int index) const;
  ::clarifai::api::Workflow* _internal_add_workflows();
  public:
  const ::clarifai::api::Workflow& workflows(int index) const;
  ::clarifai::api::Workflow* add_workflows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >&
      workflows() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostWorkflowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow > workflows_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchWorkflowsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchWorkflowsRequest) */ {
 public:
  inline PatchWorkflowsRequest() : PatchWorkflowsRequest(nullptr) {}
  ~PatchWorkflowsRequest() override;
  explicit constexpr PatchWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchWorkflowsRequest(const PatchWorkflowsRequest& from);
  PatchWorkflowsRequest(PatchWorkflowsRequest&& from) noexcept
    : PatchWorkflowsRequest() {
    *this = ::std::move(from);
  }

  inline PatchWorkflowsRequest& operator=(const PatchWorkflowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchWorkflowsRequest& operator=(PatchWorkflowsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchWorkflowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchWorkflowsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchWorkflowsRequest*>(
               &_PatchWorkflowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(PatchWorkflowsRequest& a, PatchWorkflowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchWorkflowsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchWorkflowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchWorkflowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchWorkflowsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchWorkflowsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchWorkflowsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchWorkflowsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchWorkflowsRequest";
  }
  protected:
  explicit PatchWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Workflow workflows = 2;
  int workflows_size() const;
  private:
  int _internal_workflows_size() const;
  public:
  void clear_workflows();
  ::clarifai::api::Workflow* mutable_workflows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >*
      mutable_workflows();
  private:
  const ::clarifai::api::Workflow& _internal_workflows(int index) const;
  ::clarifai::api::Workflow* _internal_add_workflows();
  public:
  const ::clarifai::api::Workflow& workflows(int index) const;
  ::clarifai::api::Workflow* add_workflows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >&
      workflows() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchWorkflowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow > workflows_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteWorkflowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteWorkflowRequest) */ {
 public:
  inline DeleteWorkflowRequest() : DeleteWorkflowRequest(nullptr) {}
  ~DeleteWorkflowRequest() override;
  explicit constexpr DeleteWorkflowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteWorkflowRequest(const DeleteWorkflowRequest& from);
  DeleteWorkflowRequest(DeleteWorkflowRequest&& from) noexcept
    : DeleteWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline DeleteWorkflowRequest& operator=(const DeleteWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteWorkflowRequest& operator=(DeleteWorkflowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteWorkflowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteWorkflowRequest*>(
               &_DeleteWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(DeleteWorkflowRequest& a, DeleteWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteWorkflowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteWorkflowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteWorkflowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteWorkflowRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteWorkflowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteWorkflowRequest";
  }
  protected:
  explicit DeleteWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteWorkflowsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteWorkflowsRequest) */ {
 public:
  inline DeleteWorkflowsRequest() : DeleteWorkflowsRequest(nullptr) {}
  ~DeleteWorkflowsRequest() override;
  explicit constexpr DeleteWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteWorkflowsRequest(const DeleteWorkflowsRequest& from);
  DeleteWorkflowsRequest(DeleteWorkflowsRequest&& from) noexcept
    : DeleteWorkflowsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteWorkflowsRequest& operator=(const DeleteWorkflowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteWorkflowsRequest& operator=(DeleteWorkflowsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteWorkflowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteWorkflowsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteWorkflowsRequest*>(
               &_DeleteWorkflowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(DeleteWorkflowsRequest& a, DeleteWorkflowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteWorkflowsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteWorkflowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteWorkflowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteWorkflowsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteWorkflowsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteWorkflowsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteWorkflowsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteWorkflowsRequest";
  }
  protected:
  explicit DeleteWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kDeleteAllFieldNumber = 3,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // bool delete_all = 3;
  void clear_delete_all();
  bool delete_all() const;
  void set_delete_all(bool value);
  private:
  bool _internal_delete_all() const;
  void _internal_set_delete_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteWorkflowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool delete_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleWorkflowResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleWorkflowResponse) */ {
 public:
  inline SingleWorkflowResponse() : SingleWorkflowResponse(nullptr) {}
  ~SingleWorkflowResponse() override;
  explicit constexpr SingleWorkflowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleWorkflowResponse(const SingleWorkflowResponse& from);
  SingleWorkflowResponse(SingleWorkflowResponse&& from) noexcept
    : SingleWorkflowResponse() {
    *this = ::std::move(from);
  }

  inline SingleWorkflowResponse& operator=(const SingleWorkflowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleWorkflowResponse& operator=(SingleWorkflowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleWorkflowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleWorkflowResponse* internal_default_instance() {
    return reinterpret_cast<const SingleWorkflowResponse*>(
               &_SingleWorkflowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(SingleWorkflowResponse& a, SingleWorkflowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleWorkflowResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleWorkflowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleWorkflowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleWorkflowResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleWorkflowResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleWorkflowResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleWorkflowResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleWorkflowResponse";
  }
  protected:
  explicit SingleWorkflowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kWorkflowFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.Workflow workflow = 2;
  bool has_workflow() const;
  private:
  bool _internal_has_workflow() const;
  public:
  void clear_workflow();
  const ::clarifai::api::Workflow& workflow() const;
  PROTOBUF_NODISCARD ::clarifai::api::Workflow* release_workflow();
  ::clarifai::api::Workflow* mutable_workflow();
  void set_allocated_workflow(::clarifai::api::Workflow* workflow);
  private:
  const ::clarifai::api::Workflow& _internal_workflow() const;
  ::clarifai::api::Workflow* _internal_mutable_workflow();
  public:
  void unsafe_arena_set_allocated_workflow(
      ::clarifai::api::Workflow* workflow);
  ::clarifai::api::Workflow* unsafe_arena_release_workflow();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleWorkflowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Workflow* workflow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiWorkflowResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiWorkflowResponse) */ {
 public:
  inline MultiWorkflowResponse() : MultiWorkflowResponse(nullptr) {}
  ~MultiWorkflowResponse() override;
  explicit constexpr MultiWorkflowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiWorkflowResponse(const MultiWorkflowResponse& from);
  MultiWorkflowResponse(MultiWorkflowResponse&& from) noexcept
    : MultiWorkflowResponse() {
    *this = ::std::move(from);
  }

  inline MultiWorkflowResponse& operator=(const MultiWorkflowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiWorkflowResponse& operator=(MultiWorkflowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiWorkflowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiWorkflowResponse* internal_default_instance() {
    return reinterpret_cast<const MultiWorkflowResponse*>(
               &_MultiWorkflowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(MultiWorkflowResponse& a, MultiWorkflowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiWorkflowResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiWorkflowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiWorkflowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiWorkflowResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiWorkflowResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiWorkflowResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiWorkflowResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiWorkflowResponse";
  }
  protected:
  explicit MultiWorkflowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int workflows_size() const;
  private:
  int _internal_workflows_size() const;
  public:
  void clear_workflows();
  ::clarifai::api::Workflow* mutable_workflows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >*
      mutable_workflows();
  private:
  const ::clarifai::api::Workflow& _internal_workflows(int index) const;
  ::clarifai::api::Workflow* _internal_add_workflows();
  public:
  const ::clarifai::api::Workflow& workflows(int index) const;
  ::clarifai::api::Workflow* add_workflows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >&
      workflows() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiWorkflowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow > workflows_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostWorkflowResultsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostWorkflowResultsRequest) */ {
 public:
  inline PostWorkflowResultsRequest() : PostWorkflowResultsRequest(nullptr) {}
  ~PostWorkflowResultsRequest() override;
  explicit constexpr PostWorkflowResultsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostWorkflowResultsRequest(const PostWorkflowResultsRequest& from);
  PostWorkflowResultsRequest(PostWorkflowResultsRequest&& from) noexcept
    : PostWorkflowResultsRequest() {
    *this = ::std::move(from);
  }

  inline PostWorkflowResultsRequest& operator=(const PostWorkflowResultsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostWorkflowResultsRequest& operator=(PostWorkflowResultsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostWorkflowResultsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostWorkflowResultsRequest* internal_default_instance() {
    return reinterpret_cast<const PostWorkflowResultsRequest*>(
               &_PostWorkflowResultsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(PostWorkflowResultsRequest& a, PostWorkflowResultsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostWorkflowResultsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostWorkflowResultsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostWorkflowResultsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostWorkflowResultsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostWorkflowResultsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostWorkflowResultsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostWorkflowResultsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostWorkflowResultsRequest";
  }
  protected:
  explicit PostWorkflowResultsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 3,
    kWorkflowIdFieldNumber = 2,
    kVersionIdFieldNumber = 7,
    kUserAppIdFieldNumber = 1,
    kOutputConfigFieldNumber = 4,
    kWorkflowStateFieldNumber = 6,
    kFavorClarifaiWorkflowsFieldNumber = 5,
  };
  // repeated .clarifai.api.Input inputs = 3;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::clarifai::api::Input* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_inputs();
  private:
  const ::clarifai::api::Input& _internal_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_inputs();
  public:
  const ::clarifai::api::Input& inputs(int index) const;
  ::clarifai::api::Input* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      inputs() const;

  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // string version_id = 7;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // .clarifai.api.OutputConfig output_config = 4;
  bool has_output_config() const;
  private:
  bool _internal_has_output_config() const;
  public:
  void clear_output_config();
  const ::clarifai::api::OutputConfig& output_config() const;
  PROTOBUF_NODISCARD ::clarifai::api::OutputConfig* release_output_config();
  ::clarifai::api::OutputConfig* mutable_output_config();
  void set_allocated_output_config(::clarifai::api::OutputConfig* output_config);
  private:
  const ::clarifai::api::OutputConfig& _internal_output_config() const;
  ::clarifai::api::OutputConfig* _internal_mutable_output_config();
  public:
  void unsafe_arena_set_allocated_output_config(
      ::clarifai::api::OutputConfig* output_config);
  ::clarifai::api::OutputConfig* unsafe_arena_release_output_config();

  // .clarifai.api.WorkflowState workflow_state = 6;
  bool has_workflow_state() const;
  private:
  bool _internal_has_workflow_state() const;
  public:
  void clear_workflow_state();
  const ::clarifai::api::WorkflowState& workflow_state() const;
  PROTOBUF_NODISCARD ::clarifai::api::WorkflowState* release_workflow_state();
  ::clarifai::api::WorkflowState* mutable_workflow_state();
  void set_allocated_workflow_state(::clarifai::api::WorkflowState* workflow_state);
  private:
  const ::clarifai::api::WorkflowState& _internal_workflow_state() const;
  ::clarifai::api::WorkflowState* _internal_mutable_workflow_state();
  public:
  void unsafe_arena_set_allocated_workflow_state(
      ::clarifai::api::WorkflowState* workflow_state);
  ::clarifai::api::WorkflowState* unsafe_arena_release_workflow_state();

  // bool favor_clarifai_workflows = 5;
  void clear_favor_clarifai_workflows();
  bool favor_clarifai_workflows() const;
  void set_favor_clarifai_workflows(bool value);
  private:
  bool _internal_favor_clarifai_workflows() const;
  void _internal_set_favor_clarifai_workflows(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostWorkflowResultsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  ::clarifai::api::OutputConfig* output_config_;
  ::clarifai::api::WorkflowState* workflow_state_;
  bool favor_clarifai_workflows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostWorkflowResultsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostWorkflowResultsResponse) */ {
 public:
  inline PostWorkflowResultsResponse() : PostWorkflowResultsResponse(nullptr) {}
  ~PostWorkflowResultsResponse() override;
  explicit constexpr PostWorkflowResultsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostWorkflowResultsResponse(const PostWorkflowResultsResponse& from);
  PostWorkflowResultsResponse(PostWorkflowResultsResponse&& from) noexcept
    : PostWorkflowResultsResponse() {
    *this = ::std::move(from);
  }

  inline PostWorkflowResultsResponse& operator=(const PostWorkflowResultsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostWorkflowResultsResponse& operator=(PostWorkflowResultsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostWorkflowResultsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostWorkflowResultsResponse* internal_default_instance() {
    return reinterpret_cast<const PostWorkflowResultsResponse*>(
               &_PostWorkflowResultsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  friend void swap(PostWorkflowResultsResponse& a, PostWorkflowResultsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostWorkflowResultsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostWorkflowResultsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostWorkflowResultsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostWorkflowResultsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostWorkflowResultsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostWorkflowResultsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostWorkflowResultsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostWorkflowResultsResponse";
  }
  protected:
  explicit PostWorkflowResultsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kWorkflowFieldNumber = 2,
    kWorkflowStateFieldNumber = 4,
  };
  // repeated .clarifai.api.WorkflowResult results = 3;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::clarifai::api::WorkflowResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResult >*
      mutable_results();
  private:
  const ::clarifai::api::WorkflowResult& _internal_results(int index) const;
  ::clarifai::api::WorkflowResult* _internal_add_results();
  public:
  const ::clarifai::api::WorkflowResult& results(int index) const;
  ::clarifai::api::WorkflowResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResult >&
      results() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.Workflow workflow = 2;
  bool has_workflow() const;
  private:
  bool _internal_has_workflow() const;
  public:
  void clear_workflow();
  const ::clarifai::api::Workflow& workflow() const;
  PROTOBUF_NODISCARD ::clarifai::api::Workflow* release_workflow();
  ::clarifai::api::Workflow* mutable_workflow();
  void set_allocated_workflow(::clarifai::api::Workflow* workflow);
  private:
  const ::clarifai::api::Workflow& _internal_workflow() const;
  ::clarifai::api::Workflow* _internal_mutable_workflow();
  public:
  void unsafe_arena_set_allocated_workflow(
      ::clarifai::api::Workflow* workflow);
  ::clarifai::api::Workflow* unsafe_arena_release_workflow();

  // .clarifai.api.WorkflowState workflow_state = 4;
  bool has_workflow_state() const;
  private:
  bool _internal_has_workflow_state() const;
  public:
  void clear_workflow_state();
  const ::clarifai::api::WorkflowState& workflow_state() const;
  PROTOBUF_NODISCARD ::clarifai::api::WorkflowState* release_workflow_state();
  ::clarifai::api::WorkflowState* mutable_workflow_state();
  void set_allocated_workflow_state(::clarifai::api::WorkflowState* workflow_state);
  private:
  const ::clarifai::api::WorkflowState& _internal_workflow_state() const;
  ::clarifai::api::WorkflowState* _internal_mutable_workflow_state();
  public:
  void unsafe_arena_set_allocated_workflow_state(
      ::clarifai::api::WorkflowState* workflow_state);
  ::clarifai::api::WorkflowState* unsafe_arena_release_workflow_state();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostWorkflowResultsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResult > results_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Workflow* workflow_;
  ::clarifai::api::WorkflowState* workflow_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostWorkflowResultsSimilarityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostWorkflowResultsSimilarityRequest) */ {
 public:
  inline PostWorkflowResultsSimilarityRequest() : PostWorkflowResultsSimilarityRequest(nullptr) {}
  ~PostWorkflowResultsSimilarityRequest() override;
  explicit constexpr PostWorkflowResultsSimilarityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostWorkflowResultsSimilarityRequest(const PostWorkflowResultsSimilarityRequest& from);
  PostWorkflowResultsSimilarityRequest(PostWorkflowResultsSimilarityRequest&& from) noexcept
    : PostWorkflowResultsSimilarityRequest() {
    *this = ::std::move(from);
  }

  inline PostWorkflowResultsSimilarityRequest& operator=(const PostWorkflowResultsSimilarityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostWorkflowResultsSimilarityRequest& operator=(PostWorkflowResultsSimilarityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostWorkflowResultsSimilarityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostWorkflowResultsSimilarityRequest* internal_default_instance() {
    return reinterpret_cast<const PostWorkflowResultsSimilarityRequest*>(
               &_PostWorkflowResultsSimilarityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  friend void swap(PostWorkflowResultsSimilarityRequest& a, PostWorkflowResultsSimilarityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostWorkflowResultsSimilarityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostWorkflowResultsSimilarityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostWorkflowResultsSimilarityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostWorkflowResultsSimilarityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostWorkflowResultsSimilarityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostWorkflowResultsSimilarityRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostWorkflowResultsSimilarityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostWorkflowResultsSimilarityRequest";
  }
  protected:
  explicit PostWorkflowResultsSimilarityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProbeInputsFieldNumber = 4,
    kPoolInputsFieldNumber = 5,
    kWorkflowIdFieldNumber = 2,
    kModelVersionIdFieldNumber = 3,
    kVersionIdFieldNumber = 7,
    kUserAppIdFieldNumber = 1,
    kFavorClarifaiWorkflowsFieldNumber = 6,
  };
  // repeated .clarifai.api.Input probe_inputs = 4;
  int probe_inputs_size() const;
  private:
  int _internal_probe_inputs_size() const;
  public:
  void clear_probe_inputs();
  ::clarifai::api::Input* mutable_probe_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_probe_inputs();
  private:
  const ::clarifai::api::Input& _internal_probe_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_probe_inputs();
  public:
  const ::clarifai::api::Input& probe_inputs(int index) const;
  ::clarifai::api::Input* add_probe_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      probe_inputs() const;

  // repeated .clarifai.api.Input pool_inputs = 5;
  int pool_inputs_size() const;
  private:
  int _internal_pool_inputs_size() const;
  public:
  void clear_pool_inputs();
  ::clarifai::api::Input* mutable_pool_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
      mutable_pool_inputs();
  private:
  const ::clarifai::api::Input& _internal_pool_inputs(int index) const;
  ::clarifai::api::Input* _internal_add_pool_inputs();
  public:
  const ::clarifai::api::Input& pool_inputs(int index) const;
  ::clarifai::api::Input* add_pool_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
      pool_inputs() const;

  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // string model_version_id = 3;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_version_id();
  PROTOBUF_NODISCARD std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);
  private:
  const std::string& _internal_model_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_version_id(const std::string& value);
  std::string* _internal_mutable_model_version_id();
  public:

  // string version_id = 7;
  void clear_version_id();
  const std::string& version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_id();
  PROTOBUF_NODISCARD std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // bool favor_clarifai_workflows = 6;
  void clear_favor_clarifai_workflows();
  bool favor_clarifai_workflows() const;
  void set_favor_clarifai_workflows(bool value);
  private:
  bool _internal_favor_clarifai_workflows() const;
  void _internal_set_favor_clarifai_workflows(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PostWorkflowResultsSimilarityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > probe_inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input > pool_inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool favor_clarifai_workflows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostWorkflowResultsSimilarityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostWorkflowResultsSimilarityResponse) */ {
 public:
  inline PostWorkflowResultsSimilarityResponse() : PostWorkflowResultsSimilarityResponse(nullptr) {}
  ~PostWorkflowResultsSimilarityResponse() override;
  explicit constexpr PostWorkflowResultsSimilarityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostWorkflowResultsSimilarityResponse(const PostWorkflowResultsSimilarityResponse& from);
  PostWorkflowResultsSimilarityResponse(PostWorkflowResultsSimilarityResponse&& from) noexcept
    : PostWorkflowResultsSimilarityResponse() {
    *this = ::std::move(from);
  }

  inline PostWorkflowResultsSimilarityResponse& operator=(const PostWorkflowResultsSimilarityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostWorkflowResultsSimilarityResponse& operator=(PostWorkflowResultsSimilarityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostWorkflowResultsSimilarityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostWorkflowResultsSimilarityResponse* internal_default_instance() {
    return reinterpret_cast<const PostWorkflowResultsSimilarityResponse*>(
               &_PostWorkflowResultsSimilarityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  friend void swap(PostWorkflowResultsSimilarityResponse& a, PostWorkflowResultsSimilarityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostWorkflowResultsSimilarityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostWorkflowResultsSimilarityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostWorkflowResultsSimilarityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostWorkflowResultsSimilarityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostWorkflowResultsSimilarityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostWorkflowResultsSimilarityResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostWorkflowResultsSimilarityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostWorkflowResultsSimilarityResponse";
  }
  protected:
  explicit PostWorkflowResultsSimilarityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::clarifai::api::WorkflowResultsSimilarity* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResultsSimilarity >*
      mutable_results();
  private:
  const ::clarifai::api::WorkflowResultsSimilarity& _internal_results(int index) const;
  ::clarifai::api::WorkflowResultsSimilarity* _internal_add_results();
  public:
  const ::clarifai::api::WorkflowResultsSimilarity& results(int index) const;
  ::clarifai::api::WorkflowResultsSimilarity* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResultsSimilarity >&
      results() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostWorkflowResultsSimilarityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResultsSimilarity > results_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListWorkflowVersionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListWorkflowVersionsRequest) */ {
 public:
  inline ListWorkflowVersionsRequest() : ListWorkflowVersionsRequest(nullptr) {}
  ~ListWorkflowVersionsRequest() override;
  explicit constexpr ListWorkflowVersionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListWorkflowVersionsRequest(const ListWorkflowVersionsRequest& from);
  ListWorkflowVersionsRequest(ListWorkflowVersionsRequest&& from) noexcept
    : ListWorkflowVersionsRequest() {
    *this = ::std::move(from);
  }

  inline ListWorkflowVersionsRequest& operator=(const ListWorkflowVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWorkflowVersionsRequest& operator=(ListWorkflowVersionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListWorkflowVersionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListWorkflowVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListWorkflowVersionsRequest*>(
               &_ListWorkflowVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    192;

  friend void swap(ListWorkflowVersionsRequest& a, ListWorkflowVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListWorkflowVersionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListWorkflowVersionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListWorkflowVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListWorkflowVersionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListWorkflowVersionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListWorkflowVersionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWorkflowVersionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListWorkflowVersionsRequest";
  }
  protected:
  explicit ListWorkflowVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
  };
  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 3;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListWorkflowVersionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetWorkflowVersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetWorkflowVersionRequest) */ {
 public:
  inline GetWorkflowVersionRequest() : GetWorkflowVersionRequest(nullptr) {}
  ~GetWorkflowVersionRequest() override;
  explicit constexpr GetWorkflowVersionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWorkflowVersionRequest(const GetWorkflowVersionRequest& from);
  GetWorkflowVersionRequest(GetWorkflowVersionRequest&& from) noexcept
    : GetWorkflowVersionRequest() {
    *this = ::std::move(from);
  }

  inline GetWorkflowVersionRequest& operator=(const GetWorkflowVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkflowVersionRequest& operator=(GetWorkflowVersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorkflowVersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorkflowVersionRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorkflowVersionRequest*>(
               &_GetWorkflowVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    193;

  friend void swap(GetWorkflowVersionRequest& a, GetWorkflowVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkflowVersionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkflowVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorkflowVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWorkflowVersionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWorkflowVersionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetWorkflowVersionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkflowVersionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetWorkflowVersionRequest";
  }
  protected:
  explicit GetWorkflowVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowIdFieldNumber = 2,
    kWorkflowVersionIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // string workflow_version_id = 3;
  void clear_workflow_version_id();
  const std::string& workflow_version_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow_version_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow_version_id();
  PROTOBUF_NODISCARD std::string* release_workflow_version_id();
  void set_allocated_workflow_version_id(std::string* workflow_version_id);
  private:
  const std::string& _internal_workflow_version_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_version_id(const std::string& value);
  std::string* _internal_mutable_workflow_version_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetWorkflowVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_version_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteWorkflowVersionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteWorkflowVersionsRequest) */ {
 public:
  inline DeleteWorkflowVersionsRequest() : DeleteWorkflowVersionsRequest(nullptr) {}
  ~DeleteWorkflowVersionsRequest() override;
  explicit constexpr DeleteWorkflowVersionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteWorkflowVersionsRequest(const DeleteWorkflowVersionsRequest& from);
  DeleteWorkflowVersionsRequest(DeleteWorkflowVersionsRequest&& from) noexcept
    : DeleteWorkflowVersionsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteWorkflowVersionsRequest& operator=(const DeleteWorkflowVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteWorkflowVersionsRequest& operator=(DeleteWorkflowVersionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteWorkflowVersionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteWorkflowVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteWorkflowVersionsRequest*>(
               &_DeleteWorkflowVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    194;

  friend void swap(DeleteWorkflowVersionsRequest& a, DeleteWorkflowVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteWorkflowVersionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteWorkflowVersionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteWorkflowVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteWorkflowVersionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteWorkflowVersionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteWorkflowVersionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteWorkflowVersionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteWorkflowVersionsRequest";
  }
  protected:
  explicit DeleteWorkflowVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowVersionIdsFieldNumber = 3,
    kWorkflowIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string workflow_version_ids = 3;
  int workflow_version_ids_size() const;
  private:
  int _internal_workflow_version_ids_size() const;
  public:
  void clear_workflow_version_ids();
  const std::string& workflow_version_ids(int index) const;
  std::string* mutable_workflow_version_ids(int index);
  void set_workflow_version_ids(int index, const std::string& value);
  void set_workflow_version_ids(int index, std::string&& value);
  void set_workflow_version_ids(int index, const char* value);
  void set_workflow_version_ids(int index, const char* value, size_t size);
  std::string* add_workflow_version_ids();
  void add_workflow_version_ids(const std::string& value);
  void add_workflow_version_ids(std::string&& value);
  void add_workflow_version_ids(const char* value);
  void add_workflow_version_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& workflow_version_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_workflow_version_ids();
  private:
  const std::string& _internal_workflow_version_ids(int index) const;
  std::string* _internal_add_workflow_version_ids();
  public:

  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteWorkflowVersionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> workflow_version_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchWorkflowVersionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchWorkflowVersionsRequest) */ {
 public:
  inline PatchWorkflowVersionsRequest() : PatchWorkflowVersionsRequest(nullptr) {}
  ~PatchWorkflowVersionsRequest() override;
  explicit constexpr PatchWorkflowVersionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchWorkflowVersionsRequest(const PatchWorkflowVersionsRequest& from);
  PatchWorkflowVersionsRequest(PatchWorkflowVersionsRequest&& from) noexcept
    : PatchWorkflowVersionsRequest() {
    *this = ::std::move(from);
  }

  inline PatchWorkflowVersionsRequest& operator=(const PatchWorkflowVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchWorkflowVersionsRequest& operator=(PatchWorkflowVersionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchWorkflowVersionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchWorkflowVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchWorkflowVersionsRequest*>(
               &_PatchWorkflowVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    195;

  friend void swap(PatchWorkflowVersionsRequest& a, PatchWorkflowVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchWorkflowVersionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchWorkflowVersionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchWorkflowVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchWorkflowVersionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchWorkflowVersionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchWorkflowVersionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchWorkflowVersionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchWorkflowVersionsRequest";
  }
  protected:
  explicit PatchWorkflowVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowVersionsFieldNumber = 3,
    kWorkflowIdFieldNumber = 2,
    kActionFieldNumber = 4,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.WorkflowVersion workflow_versions = 3;
  int workflow_versions_size() const;
  private:
  int _internal_workflow_versions_size() const;
  public:
  void clear_workflow_versions();
  ::clarifai::api::WorkflowVersion* mutable_workflow_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersion >*
      mutable_workflow_versions();
  private:
  const ::clarifai::api::WorkflowVersion& _internal_workflow_versions(int index) const;
  ::clarifai::api::WorkflowVersion* _internal_add_workflow_versions();
  public:
  const ::clarifai::api::WorkflowVersion& workflow_versions(int index) const;
  ::clarifai::api::WorkflowVersion* add_workflow_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersion >&
      workflow_versions() const;

  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // string action = 4;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchWorkflowVersionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersion > workflow_versions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiWorkflowVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiWorkflowVersionResponse) */ {
 public:
  inline MultiWorkflowVersionResponse() : MultiWorkflowVersionResponse(nullptr) {}
  ~MultiWorkflowVersionResponse() override;
  explicit constexpr MultiWorkflowVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiWorkflowVersionResponse(const MultiWorkflowVersionResponse& from);
  MultiWorkflowVersionResponse(MultiWorkflowVersionResponse&& from) noexcept
    : MultiWorkflowVersionResponse() {
    *this = ::std::move(from);
  }

  inline MultiWorkflowVersionResponse& operator=(const MultiWorkflowVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiWorkflowVersionResponse& operator=(MultiWorkflowVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiWorkflowVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiWorkflowVersionResponse* internal_default_instance() {
    return reinterpret_cast<const MultiWorkflowVersionResponse*>(
               &_MultiWorkflowVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    196;

  friend void swap(MultiWorkflowVersionResponse& a, MultiWorkflowVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiWorkflowVersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiWorkflowVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiWorkflowVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiWorkflowVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiWorkflowVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiWorkflowVersionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiWorkflowVersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiWorkflowVersionResponse";
  }
  protected:
  explicit MultiWorkflowVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowVersionsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.WorkflowVersion workflow_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int workflow_versions_size() const;
  private:
  int _internal_workflow_versions_size() const;
  public:
  void clear_workflow_versions();
  ::clarifai::api::WorkflowVersion* mutable_workflow_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersion >*
      mutable_workflow_versions();
  private:
  const ::clarifai::api::WorkflowVersion& _internal_workflow_versions(int index) const;
  ::clarifai::api::WorkflowVersion* _internal_add_workflow_versions();
  public:
  const ::clarifai::api::WorkflowVersion& workflow_versions(int index) const;
  ::clarifai::api::WorkflowVersion* add_workflow_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersion >&
      workflow_versions() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiWorkflowVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersion > workflow_versions_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleWorkflowVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleWorkflowVersionResponse) */ {
 public:
  inline SingleWorkflowVersionResponse() : SingleWorkflowVersionResponse(nullptr) {}
  ~SingleWorkflowVersionResponse() override;
  explicit constexpr SingleWorkflowVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleWorkflowVersionResponse(const SingleWorkflowVersionResponse& from);
  SingleWorkflowVersionResponse(SingleWorkflowVersionResponse&& from) noexcept
    : SingleWorkflowVersionResponse() {
    *this = ::std::move(from);
  }

  inline SingleWorkflowVersionResponse& operator=(const SingleWorkflowVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleWorkflowVersionResponse& operator=(SingleWorkflowVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleWorkflowVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleWorkflowVersionResponse* internal_default_instance() {
    return reinterpret_cast<const SingleWorkflowVersionResponse*>(
               &_SingleWorkflowVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    197;

  friend void swap(SingleWorkflowVersionResponse& a, SingleWorkflowVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleWorkflowVersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleWorkflowVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleWorkflowVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleWorkflowVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleWorkflowVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleWorkflowVersionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleWorkflowVersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleWorkflowVersionResponse";
  }
  protected:
  explicit SingleWorkflowVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kWorkflowVersionFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.WorkflowVersion workflow_version = 2;
  bool has_workflow_version() const;
  private:
  bool _internal_has_workflow_version() const;
  public:
  void clear_workflow_version();
  const ::clarifai::api::WorkflowVersion& workflow_version() const;
  PROTOBUF_NODISCARD ::clarifai::api::WorkflowVersion* release_workflow_version();
  ::clarifai::api::WorkflowVersion* mutable_workflow_version();
  void set_allocated_workflow_version(::clarifai::api::WorkflowVersion* workflow_version);
  private:
  const ::clarifai::api::WorkflowVersion& _internal_workflow_version() const;
  ::clarifai::api::WorkflowVersion* _internal_mutable_workflow_version();
  public:
  void unsafe_arena_set_allocated_workflow_version(
      ::clarifai::api::WorkflowVersion* workflow_version);
  ::clarifai::api::WorkflowVersion* unsafe_arena_release_workflow_version();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleWorkflowVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::WorkflowVersion* workflow_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostAppDuplicationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostAppDuplicationsRequest) */ {
 public:
  inline PostAppDuplicationsRequest() : PostAppDuplicationsRequest(nullptr) {}
  ~PostAppDuplicationsRequest() override;
  explicit constexpr PostAppDuplicationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostAppDuplicationsRequest(const PostAppDuplicationsRequest& from);
  PostAppDuplicationsRequest(PostAppDuplicationsRequest&& from) noexcept
    : PostAppDuplicationsRequest() {
    *this = ::std::move(from);
  }

  inline PostAppDuplicationsRequest& operator=(const PostAppDuplicationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostAppDuplicationsRequest& operator=(PostAppDuplicationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostAppDuplicationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostAppDuplicationsRequest* internal_default_instance() {
    return reinterpret_cast<const PostAppDuplicationsRequest*>(
               &_PostAppDuplicationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    198;

  friend void swap(PostAppDuplicationsRequest& a, PostAppDuplicationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostAppDuplicationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostAppDuplicationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostAppDuplicationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostAppDuplicationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostAppDuplicationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostAppDuplicationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostAppDuplicationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostAppDuplicationsRequest";
  }
  protected:
  explicit PostAppDuplicationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppDuplicationsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  int app_duplications_size() const;
  private:
  int _internal_app_duplications_size() const;
  public:
  void clear_app_duplications();
  ::clarifai::api::AppDuplication* mutable_app_duplications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >*
      mutable_app_duplications();
  private:
  const ::clarifai::api::AppDuplication& _internal_app_duplications(int index) const;
  ::clarifai::api::AppDuplication* _internal_add_app_duplications();
  public:
  const ::clarifai::api::AppDuplication& app_duplications(int index) const;
  ::clarifai::api::AppDuplication* add_app_duplications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >&
      app_duplications() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostAppDuplicationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication > app_duplications_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAppDuplicationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetAppDuplicationRequest) */ {
 public:
  inline GetAppDuplicationRequest() : GetAppDuplicationRequest(nullptr) {}
  ~GetAppDuplicationRequest() override;
  explicit constexpr GetAppDuplicationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAppDuplicationRequest(const GetAppDuplicationRequest& from);
  GetAppDuplicationRequest(GetAppDuplicationRequest&& from) noexcept
    : GetAppDuplicationRequest() {
    *this = ::std::move(from);
  }

  inline GetAppDuplicationRequest& operator=(const GetAppDuplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppDuplicationRequest& operator=(GetAppDuplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAppDuplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAppDuplicationRequest* internal_default_instance() {
    return reinterpret_cast<const GetAppDuplicationRequest*>(
               &_GetAppDuplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    199;

  friend void swap(GetAppDuplicationRequest& a, GetAppDuplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppDuplicationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppDuplicationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAppDuplicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAppDuplicationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAppDuplicationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAppDuplicationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppDuplicationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetAppDuplicationRequest";
  }
  protected:
  explicit GetAppDuplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppDuplicationIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string app_duplication_id = 2;
  void clear_app_duplication_id();
  const std::string& app_duplication_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_duplication_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_duplication_id();
  PROTOBUF_NODISCARD std::string* release_app_duplication_id();
  void set_allocated_app_duplication_id(std::string* app_duplication_id);
  private:
  const std::string& _internal_app_duplication_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_duplication_id(const std::string& value);
  std::string* _internal_mutable_app_duplication_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetAppDuplicationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_duplication_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListAppDuplicationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListAppDuplicationsRequest) */ {
 public:
  inline ListAppDuplicationsRequest() : ListAppDuplicationsRequest(nullptr) {}
  ~ListAppDuplicationsRequest() override;
  explicit constexpr ListAppDuplicationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAppDuplicationsRequest(const ListAppDuplicationsRequest& from);
  ListAppDuplicationsRequest(ListAppDuplicationsRequest&& from) noexcept
    : ListAppDuplicationsRequest() {
    *this = ::std::move(from);
  }

  inline ListAppDuplicationsRequest& operator=(const ListAppDuplicationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAppDuplicationsRequest& operator=(ListAppDuplicationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAppDuplicationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAppDuplicationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAppDuplicationsRequest*>(
               &_ListAppDuplicationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    200;

  friend void swap(ListAppDuplicationsRequest& a, ListAppDuplicationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAppDuplicationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAppDuplicationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAppDuplicationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAppDuplicationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAppDuplicationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListAppDuplicationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAppDuplicationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListAppDuplicationsRequest";
  }
  protected:
  explicit ListAppDuplicationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListAppDuplicationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiAppDuplicationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiAppDuplicationsResponse) */ {
 public:
  inline MultiAppDuplicationsResponse() : MultiAppDuplicationsResponse(nullptr) {}
  ~MultiAppDuplicationsResponse() override;
  explicit constexpr MultiAppDuplicationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiAppDuplicationsResponse(const MultiAppDuplicationsResponse& from);
  MultiAppDuplicationsResponse(MultiAppDuplicationsResponse&& from) noexcept
    : MultiAppDuplicationsResponse() {
    *this = ::std::move(from);
  }

  inline MultiAppDuplicationsResponse& operator=(const MultiAppDuplicationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAppDuplicationsResponse& operator=(MultiAppDuplicationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiAppDuplicationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiAppDuplicationsResponse* internal_default_instance() {
    return reinterpret_cast<const MultiAppDuplicationsResponse*>(
               &_MultiAppDuplicationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    201;

  friend void swap(MultiAppDuplicationsResponse& a, MultiAppDuplicationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiAppDuplicationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiAppDuplicationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiAppDuplicationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiAppDuplicationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiAppDuplicationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiAppDuplicationsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiAppDuplicationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiAppDuplicationsResponse";
  }
  protected:
  explicit MultiAppDuplicationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppDuplicationsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  int app_duplications_size() const;
  private:
  int _internal_app_duplications_size() const;
  public:
  void clear_app_duplications();
  ::clarifai::api::AppDuplication* mutable_app_duplications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >*
      mutable_app_duplications();
  private:
  const ::clarifai::api::AppDuplication& _internal_app_duplications(int index) const;
  ::clarifai::api::AppDuplication* _internal_add_app_duplications();
  public:
  const ::clarifai::api::AppDuplication& app_duplications(int index) const;
  ::clarifai::api::AppDuplication* add_app_duplications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >&
      app_duplications() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiAppDuplicationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication > app_duplications_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleAppDuplicationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleAppDuplicationResponse) */ {
 public:
  inline SingleAppDuplicationResponse() : SingleAppDuplicationResponse(nullptr) {}
  ~SingleAppDuplicationResponse() override;
  explicit constexpr SingleAppDuplicationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleAppDuplicationResponse(const SingleAppDuplicationResponse& from);
  SingleAppDuplicationResponse(SingleAppDuplicationResponse&& from) noexcept
    : SingleAppDuplicationResponse() {
    *this = ::std::move(from);
  }

  inline SingleAppDuplicationResponse& operator=(const SingleAppDuplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleAppDuplicationResponse& operator=(SingleAppDuplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleAppDuplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleAppDuplicationResponse* internal_default_instance() {
    return reinterpret_cast<const SingleAppDuplicationResponse*>(
               &_SingleAppDuplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    202;

  friend void swap(SingleAppDuplicationResponse& a, SingleAppDuplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleAppDuplicationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleAppDuplicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleAppDuplicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleAppDuplicationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleAppDuplicationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleAppDuplicationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleAppDuplicationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleAppDuplicationResponse";
  }
  protected:
  explicit SingleAppDuplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kAppDuplicationFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.AppDuplication app_duplication = 2;
  bool has_app_duplication() const;
  private:
  bool _internal_has_app_duplication() const;
  public:
  void clear_app_duplication();
  const ::clarifai::api::AppDuplication& app_duplication() const;
  PROTOBUF_NODISCARD ::clarifai::api::AppDuplication* release_app_duplication();
  ::clarifai::api::AppDuplication* mutable_app_duplication();
  void set_allocated_app_duplication(::clarifai::api::AppDuplication* app_duplication);
  private:
  const ::clarifai::api::AppDuplication& _internal_app_duplication() const;
  ::clarifai::api::AppDuplication* _internal_mutable_app_duplication();
  public:
  void unsafe_arena_set_allocated_app_duplication(
      ::clarifai::api::AppDuplication* app_duplication);
  ::clarifai::api::AppDuplication* unsafe_arena_release_app_duplication();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleAppDuplicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::AppDuplication* app_duplication_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostTasksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostTasksRequest) */ {
 public:
  inline PostTasksRequest() : PostTasksRequest(nullptr) {}
  ~PostTasksRequest() override;
  explicit constexpr PostTasksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostTasksRequest(const PostTasksRequest& from);
  PostTasksRequest(PostTasksRequest&& from) noexcept
    : PostTasksRequest() {
    *this = ::std::move(from);
  }

  inline PostTasksRequest& operator=(const PostTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostTasksRequest& operator=(PostTasksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostTasksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostTasksRequest* internal_default_instance() {
    return reinterpret_cast<const PostTasksRequest*>(
               &_PostTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    203;

  friend void swap(PostTasksRequest& a, PostTasksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostTasksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostTasksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostTasksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostTasksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostTasksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostTasksRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostTasksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostTasksRequest";
  }
  protected:
  explicit PostTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Task tasks = 2;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::clarifai::api::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >*
      mutable_tasks();
  private:
  const ::clarifai::api::Task& _internal_tasks(int index) const;
  ::clarifai::api::Task* _internal_add_tasks();
  public:
  const ::clarifai::api::Task& tasks(int index) const;
  ::clarifai::api::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >&
      tasks() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostTasksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task > tasks_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetTaskRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetTaskRequest) */ {
 public:
  inline GetTaskRequest() : GetTaskRequest(nullptr) {}
  ~GetTaskRequest() override;
  explicit constexpr GetTaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTaskRequest(const GetTaskRequest& from);
  GetTaskRequest(GetTaskRequest&& from) noexcept
    : GetTaskRequest() {
    *this = ::std::move(from);
  }

  inline GetTaskRequest& operator=(const GetTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTaskRequest& operator=(GetTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTaskRequest* internal_default_instance() {
    return reinterpret_cast<const GetTaskRequest*>(
               &_GetTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    204;

  friend void swap(GetTaskRequest& a, GetTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTaskRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTaskRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTaskRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTaskRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTaskRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetTaskRequest";
  }
  protected:
  explicit GetTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string task_id = 2;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListTasksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListTasksRequest) */ {
 public:
  inline ListTasksRequest() : ListTasksRequest(nullptr) {}
  ~ListTasksRequest() override;
  explicit constexpr ListTasksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTasksRequest(const ListTasksRequest& from);
  ListTasksRequest(ListTasksRequest&& from) noexcept
    : ListTasksRequest() {
    *this = ::std::move(from);
  }

  inline ListTasksRequest& operator=(const ListTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTasksRequest& operator=(ListTasksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTasksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTasksRequest* internal_default_instance() {
    return reinterpret_cast<const ListTasksRequest*>(
               &_ListTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    205;

  friend void swap(ListTasksRequest& a, ListTasksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTasksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTasksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTasksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTasksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTasksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListTasksRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTasksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListTasksRequest";
  }
  protected:
  explicit ListTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerUserIdsFieldNumber = 4,
    kReviewUserIdsFieldNumber = 5,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
    kIncludingLabelOrderTasksFieldNumber = 6,
  };
  // repeated string worker_user_ids = 4;
  int worker_user_ids_size() const;
  private:
  int _internal_worker_user_ids_size() const;
  public:
  void clear_worker_user_ids();
  const std::string& worker_user_ids(int index) const;
  std::string* mutable_worker_user_ids(int index);
  void set_worker_user_ids(int index, const std::string& value);
  void set_worker_user_ids(int index, std::string&& value);
  void set_worker_user_ids(int index, const char* value);
  void set_worker_user_ids(int index, const char* value, size_t size);
  std::string* add_worker_user_ids();
  void add_worker_user_ids(const std::string& value);
  void add_worker_user_ids(std::string&& value);
  void add_worker_user_ids(const char* value);
  void add_worker_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& worker_user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_worker_user_ids();
  private:
  const std::string& _internal_worker_user_ids(int index) const;
  std::string* _internal_add_worker_user_ids();
  public:

  // repeated string review_user_ids = 5;
  int review_user_ids_size() const;
  private:
  int _internal_review_user_ids_size() const;
  public:
  void clear_review_user_ids();
  const std::string& review_user_ids(int index) const;
  std::string* mutable_review_user_ids(int index);
  void set_review_user_ids(int index, const std::string& value);
  void set_review_user_ids(int index, std::string&& value);
  void set_review_user_ids(int index, const char* value);
  void set_review_user_ids(int index, const char* value, size_t size);
  std::string* add_review_user_ids();
  void add_review_user_ids(const std::string& value);
  void add_review_user_ids(std::string&& value);
  void add_review_user_ids(const char* value);
  void add_review_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& review_user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_review_user_ids();
  private:
  const std::string& _internal_review_user_ids(int index) const;
  std::string* _internal_add_review_user_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // bool including_label_order_tasks = 6;
  void clear_including_label_order_tasks();
  bool including_label_order_tasks() const;
  void set_including_label_order_tasks(bool value);
  private:
  bool _internal_including_label_order_tasks() const;
  void _internal_set_including_label_order_tasks(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListTasksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> worker_user_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> review_user_ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  bool including_label_order_tasks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchTasksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchTasksRequest) */ {
 public:
  inline PatchTasksRequest() : PatchTasksRequest(nullptr) {}
  ~PatchTasksRequest() override;
  explicit constexpr PatchTasksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchTasksRequest(const PatchTasksRequest& from);
  PatchTasksRequest(PatchTasksRequest&& from) noexcept
    : PatchTasksRequest() {
    *this = ::std::move(from);
  }

  inline PatchTasksRequest& operator=(const PatchTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchTasksRequest& operator=(PatchTasksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchTasksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchTasksRequest* internal_default_instance() {
    return reinterpret_cast<const PatchTasksRequest*>(
               &_PatchTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    206;

  friend void swap(PatchTasksRequest& a, PatchTasksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchTasksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchTasksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchTasksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchTasksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchTasksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchTasksRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchTasksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchTasksRequest";
  }
  protected:
  explicit PatchTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Task tasks = 2;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::clarifai::api::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >*
      mutable_tasks();
  private:
  const ::clarifai::api::Task& _internal_tasks(int index) const;
  ::clarifai::api::Task* _internal_add_tasks();
  public:
  const ::clarifai::api::Task& tasks(int index) const;
  ::clarifai::api::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >&
      tasks() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchTasksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task > tasks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteTasksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteTasksRequest) */ {
 public:
  inline DeleteTasksRequest() : DeleteTasksRequest(nullptr) {}
  ~DeleteTasksRequest() override;
  explicit constexpr DeleteTasksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTasksRequest(const DeleteTasksRequest& from);
  DeleteTasksRequest(DeleteTasksRequest&& from) noexcept
    : DeleteTasksRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTasksRequest& operator=(const DeleteTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTasksRequest& operator=(DeleteTasksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTasksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTasksRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTasksRequest*>(
               &_DeleteTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    207;

  friend void swap(DeleteTasksRequest& a, DeleteTasksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTasksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTasksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteTasksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteTasksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTasksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteTasksRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTasksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteTasksRequest";
  }
  protected:
  explicit DeleteTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteTasksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiTaskResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiTaskResponse) */ {
 public:
  inline MultiTaskResponse() : MultiTaskResponse(nullptr) {}
  ~MultiTaskResponse() override;
  explicit constexpr MultiTaskResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiTaskResponse(const MultiTaskResponse& from);
  MultiTaskResponse(MultiTaskResponse&& from) noexcept
    : MultiTaskResponse() {
    *this = ::std::move(from);
  }

  inline MultiTaskResponse& operator=(const MultiTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiTaskResponse& operator=(MultiTaskResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiTaskResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiTaskResponse* internal_default_instance() {
    return reinterpret_cast<const MultiTaskResponse*>(
               &_MultiTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    208;

  friend void swap(MultiTaskResponse& a, MultiTaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiTaskResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiTaskResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiTaskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiTaskResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiTaskResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiTaskResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiTaskResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiTaskResponse";
  }
  protected:
  explicit MultiTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::clarifai::api::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >*
      mutable_tasks();
  private:
  const ::clarifai::api::Task& _internal_tasks(int index) const;
  ::clarifai::api::Task* _internal_add_tasks();
  public:
  const ::clarifai::api::Task& tasks(int index) const;
  ::clarifai::api::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >&
      tasks() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiTaskResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task > tasks_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleTaskResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleTaskResponse) */ {
 public:
  inline SingleTaskResponse() : SingleTaskResponse(nullptr) {}
  ~SingleTaskResponse() override;
  explicit constexpr SingleTaskResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleTaskResponse(const SingleTaskResponse& from);
  SingleTaskResponse(SingleTaskResponse&& from) noexcept
    : SingleTaskResponse() {
    *this = ::std::move(from);
  }

  inline SingleTaskResponse& operator=(const SingleTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleTaskResponse& operator=(SingleTaskResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleTaskResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleTaskResponse* internal_default_instance() {
    return reinterpret_cast<const SingleTaskResponse*>(
               &_SingleTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    209;

  friend void swap(SingleTaskResponse& a, SingleTaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleTaskResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleTaskResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleTaskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleTaskResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleTaskResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleTaskResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleTaskResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleTaskResponse";
  }
  protected:
  explicit SingleTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kTaskFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.Task task = 2;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::clarifai::api::Task& task() const;
  PROTOBUF_NODISCARD ::clarifai::api::Task* release_task();
  ::clarifai::api::Task* mutable_task();
  void set_allocated_task(::clarifai::api::Task* task);
  private:
  const ::clarifai::api::Task& _internal_task() const;
  ::clarifai::api::Task* _internal_mutable_task();
  public:
  void unsafe_arena_set_allocated_task(
      ::clarifai::api::Task* task);
  ::clarifai::api::Task* unsafe_arena_release_task();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleTaskResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Task* task_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetTaskCountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetTaskCountRequest) */ {
 public:
  inline GetTaskCountRequest() : GetTaskCountRequest(nullptr) {}
  ~GetTaskCountRequest() override;
  explicit constexpr GetTaskCountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTaskCountRequest(const GetTaskCountRequest& from);
  GetTaskCountRequest(GetTaskCountRequest&& from) noexcept
    : GetTaskCountRequest() {
    *this = ::std::move(from);
  }

  inline GetTaskCountRequest& operator=(const GetTaskCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTaskCountRequest& operator=(GetTaskCountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTaskCountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTaskCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetTaskCountRequest*>(
               &_GetTaskCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    210;

  friend void swap(GetTaskCountRequest& a, GetTaskCountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTaskCountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTaskCountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTaskCountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTaskCountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTaskCountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTaskCountRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTaskCountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetTaskCountRequest";
  }
  protected:
  explicit GetTaskCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 3,
    kTaskIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string user_ids = 3;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // string task_id = 2;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetTaskCountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleTaskCountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleTaskCountResponse) */ {
 public:
  inline SingleTaskCountResponse() : SingleTaskCountResponse(nullptr) {}
  ~SingleTaskCountResponse() override;
  explicit constexpr SingleTaskCountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleTaskCountResponse(const SingleTaskCountResponse& from);
  SingleTaskCountResponse(SingleTaskCountResponse&& from) noexcept
    : SingleTaskCountResponse() {
    *this = ::std::move(from);
  }

  inline SingleTaskCountResponse& operator=(const SingleTaskCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleTaskCountResponse& operator=(SingleTaskCountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleTaskCountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleTaskCountResponse* internal_default_instance() {
    return reinterpret_cast<const SingleTaskCountResponse*>(
               &_SingleTaskCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    211;

  friend void swap(SingleTaskCountResponse& a, SingleTaskCountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleTaskCountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleTaskCountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleTaskCountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleTaskCountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleTaskCountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleTaskCountResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleTaskCountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleTaskCountResponse";
  }
  protected:
  explicit SingleTaskCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountsFieldNumber = 4,
    kAppIdFieldNumber = 2,
    kTaskIdFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.TaskStatusCountPerUser counts = 4;
  int counts_size() const;
  private:
  int _internal_counts_size() const;
  public:
  void clear_counts();
  ::clarifai::api::TaskStatusCountPerUser* mutable_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TaskStatusCountPerUser >*
      mutable_counts();
  private:
  const ::clarifai::api::TaskStatusCountPerUser& _internal_counts(int index) const;
  ::clarifai::api::TaskStatusCountPerUser* _internal_add_counts();
  public:
  const ::clarifai::api::TaskStatusCountPerUser& counts(int index) const;
  ::clarifai::api::TaskStatusCountPerUser* add_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TaskStatusCountPerUser >&
      counts() const;

  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string task_id = 3;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleTaskCountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TaskStatusCountPerUser > counts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostLabelOrdersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostLabelOrdersRequest) */ {
 public:
  inline PostLabelOrdersRequest() : PostLabelOrdersRequest(nullptr) {}
  ~PostLabelOrdersRequest() override;
  explicit constexpr PostLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostLabelOrdersRequest(const PostLabelOrdersRequest& from);
  PostLabelOrdersRequest(PostLabelOrdersRequest&& from) noexcept
    : PostLabelOrdersRequest() {
    *this = ::std::move(from);
  }

  inline PostLabelOrdersRequest& operator=(const PostLabelOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostLabelOrdersRequest& operator=(PostLabelOrdersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostLabelOrdersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostLabelOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const PostLabelOrdersRequest*>(
               &_PostLabelOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    212;

  friend void swap(PostLabelOrdersRequest& a, PostLabelOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostLabelOrdersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostLabelOrdersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostLabelOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostLabelOrdersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostLabelOrdersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostLabelOrdersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostLabelOrdersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostLabelOrdersRequest";
  }
  protected:
  explicit PostLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelOrdersFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.LabelOrder label_orders = 2;
  int label_orders_size() const;
  private:
  int _internal_label_orders_size() const;
  public:
  void clear_label_orders();
  ::clarifai::api::LabelOrder* mutable_label_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder >*
      mutable_label_orders();
  private:
  const ::clarifai::api::LabelOrder& _internal_label_orders(int index) const;
  ::clarifai::api::LabelOrder* _internal_add_label_orders();
  public:
  const ::clarifai::api::LabelOrder& label_orders(int index) const;
  ::clarifai::api::LabelOrder* add_label_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder >&
      label_orders() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostLabelOrdersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder > label_orders_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLabelOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetLabelOrderRequest) */ {
 public:
  inline GetLabelOrderRequest() : GetLabelOrderRequest(nullptr) {}
  ~GetLabelOrderRequest() override;
  explicit constexpr GetLabelOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLabelOrderRequest(const GetLabelOrderRequest& from);
  GetLabelOrderRequest(GetLabelOrderRequest&& from) noexcept
    : GetLabelOrderRequest() {
    *this = ::std::move(from);
  }

  inline GetLabelOrderRequest& operator=(const GetLabelOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLabelOrderRequest& operator=(GetLabelOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLabelOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLabelOrderRequest* internal_default_instance() {
    return reinterpret_cast<const GetLabelOrderRequest*>(
               &_GetLabelOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    213;

  friend void swap(GetLabelOrderRequest& a, GetLabelOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLabelOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLabelOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLabelOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLabelOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLabelOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLabelOrderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLabelOrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetLabelOrderRequest";
  }
  protected:
  explicit GetLabelOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelOrderIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string label_order_id = 2;
  void clear_label_order_id();
  const std::string& label_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label_order_id();
  PROTOBUF_NODISCARD std::string* release_label_order_id();
  void set_allocated_label_order_id(std::string* label_order_id);
  private:
  const std::string& _internal_label_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_order_id(const std::string& value);
  std::string* _internal_mutable_label_order_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetLabelOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_order_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListLabelOrdersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListLabelOrdersRequest) */ {
 public:
  inline ListLabelOrdersRequest() : ListLabelOrdersRequest(nullptr) {}
  ~ListLabelOrdersRequest() override;
  explicit constexpr ListLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListLabelOrdersRequest(const ListLabelOrdersRequest& from);
  ListLabelOrdersRequest(ListLabelOrdersRequest&& from) noexcept
    : ListLabelOrdersRequest() {
    *this = ::std::move(from);
  }

  inline ListLabelOrdersRequest& operator=(const ListLabelOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLabelOrdersRequest& operator=(ListLabelOrdersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListLabelOrdersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLabelOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const ListLabelOrdersRequest*>(
               &_ListLabelOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    214;

  friend void swap(ListLabelOrdersRequest& a, ListLabelOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLabelOrdersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLabelOrdersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListLabelOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListLabelOrdersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListLabelOrdersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListLabelOrdersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLabelOrdersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListLabelOrdersRequest";
  }
  protected:
  explicit ListLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListLabelOrdersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchLabelOrdersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchLabelOrdersRequest) */ {
 public:
  inline PatchLabelOrdersRequest() : PatchLabelOrdersRequest(nullptr) {}
  ~PatchLabelOrdersRequest() override;
  explicit constexpr PatchLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchLabelOrdersRequest(const PatchLabelOrdersRequest& from);
  PatchLabelOrdersRequest(PatchLabelOrdersRequest&& from) noexcept
    : PatchLabelOrdersRequest() {
    *this = ::std::move(from);
  }

  inline PatchLabelOrdersRequest& operator=(const PatchLabelOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchLabelOrdersRequest& operator=(PatchLabelOrdersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchLabelOrdersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchLabelOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const PatchLabelOrdersRequest*>(
               &_PatchLabelOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    215;

  friend void swap(PatchLabelOrdersRequest& a, PatchLabelOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchLabelOrdersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchLabelOrdersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchLabelOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchLabelOrdersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchLabelOrdersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchLabelOrdersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchLabelOrdersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchLabelOrdersRequest";
  }
  protected:
  explicit PatchLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelOrdersFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.LabelOrder label_orders = 2;
  int label_orders_size() const;
  private:
  int _internal_label_orders_size() const;
  public:
  void clear_label_orders();
  ::clarifai::api::LabelOrder* mutable_label_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder >*
      mutable_label_orders();
  private:
  const ::clarifai::api::LabelOrder& _internal_label_orders(int index) const;
  ::clarifai::api::LabelOrder* _internal_add_label_orders();
  public:
  const ::clarifai::api::LabelOrder& label_orders(int index) const;
  ::clarifai::api::LabelOrder* add_label_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder >&
      label_orders() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchLabelOrdersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder > label_orders_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteLabelOrdersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteLabelOrdersRequest) */ {
 public:
  inline DeleteLabelOrdersRequest() : DeleteLabelOrdersRequest(nullptr) {}
  ~DeleteLabelOrdersRequest() override;
  explicit constexpr DeleteLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteLabelOrdersRequest(const DeleteLabelOrdersRequest& from);
  DeleteLabelOrdersRequest(DeleteLabelOrdersRequest&& from) noexcept
    : DeleteLabelOrdersRequest() {
    *this = ::std::move(from);
  }

  inline DeleteLabelOrdersRequest& operator=(const DeleteLabelOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLabelOrdersRequest& operator=(DeleteLabelOrdersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteLabelOrdersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteLabelOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLabelOrdersRequest*>(
               &_DeleteLabelOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    216;

  friend void swap(DeleteLabelOrdersRequest& a, DeleteLabelOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLabelOrdersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLabelOrdersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteLabelOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteLabelOrdersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteLabelOrdersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteLabelOrdersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLabelOrdersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteLabelOrdersRequest";
  }
  protected:
  explicit DeleteLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteLabelOrdersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiLabelOrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiLabelOrderResponse) */ {
 public:
  inline MultiLabelOrderResponse() : MultiLabelOrderResponse(nullptr) {}
  ~MultiLabelOrderResponse() override;
  explicit constexpr MultiLabelOrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiLabelOrderResponse(const MultiLabelOrderResponse& from);
  MultiLabelOrderResponse(MultiLabelOrderResponse&& from) noexcept
    : MultiLabelOrderResponse() {
    *this = ::std::move(from);
  }

  inline MultiLabelOrderResponse& operator=(const MultiLabelOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiLabelOrderResponse& operator=(MultiLabelOrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiLabelOrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiLabelOrderResponse* internal_default_instance() {
    return reinterpret_cast<const MultiLabelOrderResponse*>(
               &_MultiLabelOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    217;

  friend void swap(MultiLabelOrderResponse& a, MultiLabelOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiLabelOrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiLabelOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiLabelOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiLabelOrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiLabelOrderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiLabelOrderResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiLabelOrderResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiLabelOrderResponse";
  }
  protected:
  explicit MultiLabelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelOrdersFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.LabelOrder label_orders = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int label_orders_size() const;
  private:
  int _internal_label_orders_size() const;
  public:
  void clear_label_orders();
  ::clarifai::api::LabelOrder* mutable_label_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder >*
      mutable_label_orders();
  private:
  const ::clarifai::api::LabelOrder& _internal_label_orders(int index) const;
  ::clarifai::api::LabelOrder* _internal_add_label_orders();
  public:
  const ::clarifai::api::LabelOrder& label_orders(int index) const;
  ::clarifai::api::LabelOrder* add_label_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder >&
      label_orders() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiLabelOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder > label_orders_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleLabelOrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleLabelOrderResponse) */ {
 public:
  inline SingleLabelOrderResponse() : SingleLabelOrderResponse(nullptr) {}
  ~SingleLabelOrderResponse() override;
  explicit constexpr SingleLabelOrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleLabelOrderResponse(const SingleLabelOrderResponse& from);
  SingleLabelOrderResponse(SingleLabelOrderResponse&& from) noexcept
    : SingleLabelOrderResponse() {
    *this = ::std::move(from);
  }

  inline SingleLabelOrderResponse& operator=(const SingleLabelOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleLabelOrderResponse& operator=(SingleLabelOrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleLabelOrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleLabelOrderResponse* internal_default_instance() {
    return reinterpret_cast<const SingleLabelOrderResponse*>(
               &_SingleLabelOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    218;

  friend void swap(SingleLabelOrderResponse& a, SingleLabelOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleLabelOrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleLabelOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleLabelOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleLabelOrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleLabelOrderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleLabelOrderResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleLabelOrderResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleLabelOrderResponse";
  }
  protected:
  explicit SingleLabelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kLabelOrderFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.LabelOrder label_order = 2;
  bool has_label_order() const;
  private:
  bool _internal_has_label_order() const;
  public:
  void clear_label_order();
  const ::clarifai::api::LabelOrder& label_order() const;
  PROTOBUF_NODISCARD ::clarifai::api::LabelOrder* release_label_order();
  ::clarifai::api::LabelOrder* mutable_label_order();
  void set_allocated_label_order(::clarifai::api::LabelOrder* label_order);
  private:
  const ::clarifai::api::LabelOrder& _internal_label_order() const;
  ::clarifai::api::LabelOrder* _internal_mutable_label_order();
  public:
  void unsafe_arena_set_allocated_label_order(
      ::clarifai::api::LabelOrder* label_order);
  ::clarifai::api::LabelOrder* unsafe_arena_release_label_order();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleLabelOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::LabelOrder* label_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostCollectorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostCollectorsRequest) */ {
 public:
  inline PostCollectorsRequest() : PostCollectorsRequest(nullptr) {}
  ~PostCollectorsRequest() override;
  explicit constexpr PostCollectorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostCollectorsRequest(const PostCollectorsRequest& from);
  PostCollectorsRequest(PostCollectorsRequest&& from) noexcept
    : PostCollectorsRequest() {
    *this = ::std::move(from);
  }

  inline PostCollectorsRequest& operator=(const PostCollectorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostCollectorsRequest& operator=(PostCollectorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostCollectorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostCollectorsRequest* internal_default_instance() {
    return reinterpret_cast<const PostCollectorsRequest*>(
               &_PostCollectorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    219;

  friend void swap(PostCollectorsRequest& a, PostCollectorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostCollectorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostCollectorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostCollectorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostCollectorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostCollectorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostCollectorsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostCollectorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostCollectorsRequest";
  }
  protected:
  explicit PostCollectorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectorsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Collector collectors = 2;
  int collectors_size() const;
  private:
  int _internal_collectors_size() const;
  public:
  void clear_collectors();
  ::clarifai::api::Collector* mutable_collectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >*
      mutable_collectors();
  private:
  const ::clarifai::api::Collector& _internal_collectors(int index) const;
  ::clarifai::api::Collector* _internal_add_collectors();
  public:
  const ::clarifai::api::Collector& collectors(int index) const;
  ::clarifai::api::Collector* add_collectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >&
      collectors() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostCollectorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector > collectors_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PatchCollectorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchCollectorsRequest) */ {
 public:
  inline PatchCollectorsRequest() : PatchCollectorsRequest(nullptr) {}
  ~PatchCollectorsRequest() override;
  explicit constexpr PatchCollectorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchCollectorsRequest(const PatchCollectorsRequest& from);
  PatchCollectorsRequest(PatchCollectorsRequest&& from) noexcept
    : PatchCollectorsRequest() {
    *this = ::std::move(from);
  }

  inline PatchCollectorsRequest& operator=(const PatchCollectorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchCollectorsRequest& operator=(PatchCollectorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchCollectorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchCollectorsRequest* internal_default_instance() {
    return reinterpret_cast<const PatchCollectorsRequest*>(
               &_PatchCollectorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    220;

  friend void swap(PatchCollectorsRequest& a, PatchCollectorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchCollectorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchCollectorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatchCollectorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatchCollectorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatchCollectorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PatchCollectorsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchCollectorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchCollectorsRequest";
  }
  protected:
  explicit PatchCollectorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectorsFieldNumber = 2,
    kActionFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.Collector collectors = 2;
  int collectors_size() const;
  private:
  int _internal_collectors_size() const;
  public:
  void clear_collectors();
  ::clarifai::api::Collector* mutable_collectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >*
      mutable_collectors();
  private:
  const ::clarifai::api::Collector& _internal_collectors(int index) const;
  ::clarifai::api::Collector* _internal_add_collectors();
  public:
  const ::clarifai::api::Collector& collectors(int index) const;
  ::clarifai::api::Collector* add_collectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >&
      collectors() const;

  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchCollectorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector > collectors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteCollectorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DeleteCollectorsRequest) */ {
 public:
  inline DeleteCollectorsRequest() : DeleteCollectorsRequest(nullptr) {}
  ~DeleteCollectorsRequest() override;
  explicit constexpr DeleteCollectorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCollectorsRequest(const DeleteCollectorsRequest& from);
  DeleteCollectorsRequest(DeleteCollectorsRequest&& from) noexcept
    : DeleteCollectorsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCollectorsRequest& operator=(const DeleteCollectorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCollectorsRequest& operator=(DeleteCollectorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCollectorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCollectorsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCollectorsRequest*>(
               &_DeleteCollectorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    221;

  friend void swap(DeleteCollectorsRequest& a, DeleteCollectorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCollectorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCollectorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCollectorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCollectorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCollectorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteCollectorsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCollectorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DeleteCollectorsRequest";
  }
  protected:
  explicit DeleteCollectorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kDeleteAllFieldNumber = 3,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // bool delete_all = 3;
  void clear_delete_all();
  bool delete_all() const;
  void set_delete_all(bool value);
  private:
  bool _internal_delete_all() const;
  void _internal_set_delete_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DeleteCollectorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  bool delete_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class GetCollectorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GetCollectorRequest) */ {
 public:
  inline GetCollectorRequest() : GetCollectorRequest(nullptr) {}
  ~GetCollectorRequest() override;
  explicit constexpr GetCollectorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCollectorRequest(const GetCollectorRequest& from);
  GetCollectorRequest(GetCollectorRequest&& from) noexcept
    : GetCollectorRequest() {
    *this = ::std::move(from);
  }

  inline GetCollectorRequest& operator=(const GetCollectorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollectorRequest& operator=(GetCollectorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCollectorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCollectorRequest* internal_default_instance() {
    return reinterpret_cast<const GetCollectorRequest*>(
               &_GetCollectorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    222;

  friend void swap(GetCollectorRequest& a, GetCollectorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCollectorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCollectorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCollectorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCollectorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCollectorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCollectorRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollectorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GetCollectorRequest";
  }
  protected:
  explicit GetCollectorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectorIdFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // string collector_id = 2;
  void clear_collector_id();
  const std::string& collector_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collector_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collector_id();
  PROTOBUF_NODISCARD std::string* release_collector_id();
  void set_allocated_collector_id(std::string* collector_id);
  private:
  const std::string& _internal_collector_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collector_id(const std::string& value);
  std::string* _internal_mutable_collector_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.GetCollectorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collector_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListCollectorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListCollectorsRequest) */ {
 public:
  inline ListCollectorsRequest() : ListCollectorsRequest(nullptr) {}
  ~ListCollectorsRequest() override;
  explicit constexpr ListCollectorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCollectorsRequest(const ListCollectorsRequest& from);
  ListCollectorsRequest(ListCollectorsRequest&& from) noexcept
    : ListCollectorsRequest() {
    *this = ::std::move(from);
  }

  inline ListCollectorsRequest& operator=(const ListCollectorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCollectorsRequest& operator=(ListCollectorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCollectorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCollectorsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCollectorsRequest*>(
               &_ListCollectorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    223;

  friend void swap(ListCollectorsRequest& a, ListCollectorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCollectorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCollectorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCollectorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCollectorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCollectorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListCollectorsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCollectorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListCollectorsRequest";
  }
  protected:
  explicit ListCollectorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 2;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 3;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListCollectorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiCollectorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiCollectorResponse) */ {
 public:
  inline MultiCollectorResponse() : MultiCollectorResponse(nullptr) {}
  ~MultiCollectorResponse() override;
  explicit constexpr MultiCollectorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiCollectorResponse(const MultiCollectorResponse& from);
  MultiCollectorResponse(MultiCollectorResponse&& from) noexcept
    : MultiCollectorResponse() {
    *this = ::std::move(from);
  }

  inline MultiCollectorResponse& operator=(const MultiCollectorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiCollectorResponse& operator=(MultiCollectorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiCollectorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiCollectorResponse* internal_default_instance() {
    return reinterpret_cast<const MultiCollectorResponse*>(
               &_MultiCollectorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    224;

  friend void swap(MultiCollectorResponse& a, MultiCollectorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiCollectorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiCollectorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiCollectorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiCollectorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiCollectorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiCollectorResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiCollectorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiCollectorResponse";
  }
  protected:
  explicit MultiCollectorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectorsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.Collector collectors = 2;
  int collectors_size() const;
  private:
  int _internal_collectors_size() const;
  public:
  void clear_collectors();
  ::clarifai::api::Collector* mutable_collectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >*
      mutable_collectors();
  private:
  const ::clarifai::api::Collector& _internal_collectors(int index) const;
  ::clarifai::api::Collector* _internal_add_collectors();
  public:
  const ::clarifai::api::Collector& collectors(int index) const;
  ::clarifai::api::Collector* add_collectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >&
      collectors() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiCollectorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector > collectors_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class SingleCollectorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.SingleCollectorResponse) */ {
 public:
  inline SingleCollectorResponse() : SingleCollectorResponse(nullptr) {}
  ~SingleCollectorResponse() override;
  explicit constexpr SingleCollectorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleCollectorResponse(const SingleCollectorResponse& from);
  SingleCollectorResponse(SingleCollectorResponse&& from) noexcept
    : SingleCollectorResponse() {
    *this = ::std::move(from);
  }

  inline SingleCollectorResponse& operator=(const SingleCollectorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleCollectorResponse& operator=(SingleCollectorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleCollectorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleCollectorResponse* internal_default_instance() {
    return reinterpret_cast<const SingleCollectorResponse*>(
               &_SingleCollectorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    225;

  friend void swap(SingleCollectorResponse& a, SingleCollectorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleCollectorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleCollectorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingleCollectorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingleCollectorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleCollectorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleCollectorResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleCollectorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.SingleCollectorResponse";
  }
  protected:
  explicit SingleCollectorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCollectorFieldNumber = 2,
  };
  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // .clarifai.api.Collector collector = 2;
  bool has_collector() const;
  private:
  bool _internal_has_collector() const;
  public:
  void clear_collector();
  const ::clarifai::api::Collector& collector() const;
  PROTOBUF_NODISCARD ::clarifai::api::Collector* release_collector();
  ::clarifai::api::Collector* mutable_collector();
  void set_allocated_collector(::clarifai::api::Collector* collector);
  private:
  const ::clarifai::api::Collector& _internal_collector() const;
  ::clarifai::api::Collector* _internal_mutable_collector();
  public:
  void unsafe_arena_set_allocated_collector(
      ::clarifai::api::Collector* collector);
  ::clarifai::api::Collector* unsafe_arena_release_collector();

  // @@protoc_insertion_point(class_scope:clarifai.api.SingleCollectorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::Collector* collector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostStatValuesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostStatValuesRequest) */ {
 public:
  inline PostStatValuesRequest() : PostStatValuesRequest(nullptr) {}
  ~PostStatValuesRequest() override;
  explicit constexpr PostStatValuesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostStatValuesRequest(const PostStatValuesRequest& from);
  PostStatValuesRequest(PostStatValuesRequest&& from) noexcept
    : PostStatValuesRequest() {
    *this = ::std::move(from);
  }

  inline PostStatValuesRequest& operator=(const PostStatValuesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostStatValuesRequest& operator=(PostStatValuesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostStatValuesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostStatValuesRequest* internal_default_instance() {
    return reinterpret_cast<const PostStatValuesRequest*>(
               &_PostStatValuesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    226;

  friend void swap(PostStatValuesRequest& a, PostStatValuesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostStatValuesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostStatValuesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostStatValuesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostStatValuesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostStatValuesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostStatValuesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostStatValuesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostStatValuesRequest";
  }
  protected:
  explicit PostStatValuesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatValuesFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.StatValue stat_values = 2;
  int stat_values_size() const;
  private:
  int _internal_stat_values_size() const;
  public:
  void clear_stat_values();
  ::clarifai::api::StatValue* mutable_stat_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >*
      mutable_stat_values();
  private:
  const ::clarifai::api::StatValue& _internal_stat_values(int index) const;
  ::clarifai::api::StatValue* _internal_add_stat_values();
  public:
  const ::clarifai::api::StatValue& stat_values(int index) const;
  ::clarifai::api::StatValue* add_stat_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >&
      stat_values() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostStatValuesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue > stat_values_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiStatValueResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiStatValueResponse) */ {
 public:
  inline MultiStatValueResponse() : MultiStatValueResponse(nullptr) {}
  ~MultiStatValueResponse() override;
  explicit constexpr MultiStatValueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiStatValueResponse(const MultiStatValueResponse& from);
  MultiStatValueResponse(MultiStatValueResponse&& from) noexcept
    : MultiStatValueResponse() {
    *this = ::std::move(from);
  }

  inline MultiStatValueResponse& operator=(const MultiStatValueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiStatValueResponse& operator=(MultiStatValueResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiStatValueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiStatValueResponse* internal_default_instance() {
    return reinterpret_cast<const MultiStatValueResponse*>(
               &_MultiStatValueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    227;

  friend void swap(MultiStatValueResponse& a, MultiStatValueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiStatValueResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiStatValueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiStatValueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiStatValueResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiStatValueResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiStatValueResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiStatValueResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiStatValueResponse";
  }
  protected:
  explicit MultiStatValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatValuesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int stat_values_size() const;
  private:
  int _internal_stat_values_size() const;
  public:
  void clear_stat_values();
  ::clarifai::api::StatValue* mutable_stat_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >*
      mutable_stat_values();
  private:
  const ::clarifai::api::StatValue& _internal_stat_values(int index) const;
  ::clarifai::api::StatValue* _internal_add_stat_values();
  public:
  const ::clarifai::api::StatValue& stat_values(int index) const;
  ::clarifai::api::StatValue* add_stat_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >&
      stat_values() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiStatValueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue > stat_values_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostStatValuesAggregateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostStatValuesAggregateRequest) */ {
 public:
  inline PostStatValuesAggregateRequest() : PostStatValuesAggregateRequest(nullptr) {}
  ~PostStatValuesAggregateRequest() override;
  explicit constexpr PostStatValuesAggregateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostStatValuesAggregateRequest(const PostStatValuesAggregateRequest& from);
  PostStatValuesAggregateRequest(PostStatValuesAggregateRequest&& from) noexcept
    : PostStatValuesAggregateRequest() {
    *this = ::std::move(from);
  }

  inline PostStatValuesAggregateRequest& operator=(const PostStatValuesAggregateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostStatValuesAggregateRequest& operator=(PostStatValuesAggregateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostStatValuesAggregateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostStatValuesAggregateRequest* internal_default_instance() {
    return reinterpret_cast<const PostStatValuesAggregateRequest*>(
               &_PostStatValuesAggregateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    228;

  friend void swap(PostStatValuesAggregateRequest& a, PostStatValuesAggregateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostStatValuesAggregateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostStatValuesAggregateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostStatValuesAggregateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostStatValuesAggregateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostStatValuesAggregateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostStatValuesAggregateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostStatValuesAggregateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostStatValuesAggregateRequest";
  }
  protected:
  explicit PostStatValuesAggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatValueAggregateQueriesFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
  };
  // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
  int stat_value_aggregate_queries_size() const;
  private:
  int _internal_stat_value_aggregate_queries_size() const;
  public:
  void clear_stat_value_aggregate_queries();
  ::clarifai::api::StatValueAggregateQuery* mutable_stat_value_aggregate_queries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateQuery >*
      mutable_stat_value_aggregate_queries();
  private:
  const ::clarifai::api::StatValueAggregateQuery& _internal_stat_value_aggregate_queries(int index) const;
  ::clarifai::api::StatValueAggregateQuery* _internal_add_stat_value_aggregate_queries();
  public:
  const ::clarifai::api::StatValueAggregateQuery& stat_value_aggregate_queries(int index) const;
  ::clarifai::api::StatValueAggregateQuery* add_stat_value_aggregate_queries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateQuery >&
      stat_value_aggregate_queries() const;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostStatValuesAggregateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateQuery > stat_value_aggregate_queries_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiStatValueAggregateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiStatValueAggregateResponse) */ {
 public:
  inline MultiStatValueAggregateResponse() : MultiStatValueAggregateResponse(nullptr) {}
  ~MultiStatValueAggregateResponse() override;
  explicit constexpr MultiStatValueAggregateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiStatValueAggregateResponse(const MultiStatValueAggregateResponse& from);
  MultiStatValueAggregateResponse(MultiStatValueAggregateResponse&& from) noexcept
    : MultiStatValueAggregateResponse() {
    *this = ::std::move(from);
  }

  inline MultiStatValueAggregateResponse& operator=(const MultiStatValueAggregateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiStatValueAggregateResponse& operator=(MultiStatValueAggregateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiStatValueAggregateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiStatValueAggregateResponse* internal_default_instance() {
    return reinterpret_cast<const MultiStatValueAggregateResponse*>(
               &_MultiStatValueAggregateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    229;

  friend void swap(MultiStatValueAggregateResponse& a, MultiStatValueAggregateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiStatValueAggregateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiStatValueAggregateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiStatValueAggregateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiStatValueAggregateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiStatValueAggregateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiStatValueAggregateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiStatValueAggregateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiStatValueAggregateResponse";
  }
  protected:
  explicit MultiStatValueAggregateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatValueAggregateResultsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
  int stat_value_aggregate_results_size() const;
  private:
  int _internal_stat_value_aggregate_results_size() const;
  public:
  void clear_stat_value_aggregate_results();
  ::clarifai::api::StatValueAggregateResult* mutable_stat_value_aggregate_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateResult >*
      mutable_stat_value_aggregate_results();
  private:
  const ::clarifai::api::StatValueAggregateResult& _internal_stat_value_aggregate_results(int index) const;
  ::clarifai::api::StatValueAggregateResult* _internal_add_stat_value_aggregate_results();
  public:
  const ::clarifai::api::StatValueAggregateResult& stat_value_aggregate_results(int index) const;
  ::clarifai::api::StatValueAggregateResult* add_stat_value_aggregate_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateResult >&
      stat_value_aggregate_results() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiStatValueAggregateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateResult > stat_value_aggregate_results_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class PostTrendingMetricsViewRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PostTrendingMetricsViewRequest) */ {
 public:
  inline PostTrendingMetricsViewRequest() : PostTrendingMetricsViewRequest(nullptr) {}
  ~PostTrendingMetricsViewRequest() override;
  explicit constexpr PostTrendingMetricsViewRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostTrendingMetricsViewRequest(const PostTrendingMetricsViewRequest& from);
  PostTrendingMetricsViewRequest(PostTrendingMetricsViewRequest&& from) noexcept
    : PostTrendingMetricsViewRequest() {
    *this = ::std::move(from);
  }

  inline PostTrendingMetricsViewRequest& operator=(const PostTrendingMetricsViewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostTrendingMetricsViewRequest& operator=(PostTrendingMetricsViewRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostTrendingMetricsViewRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostTrendingMetricsViewRequest* internal_default_instance() {
    return reinterpret_cast<const PostTrendingMetricsViewRequest*>(
               &_PostTrendingMetricsViewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    230;

  friend void swap(PostTrendingMetricsViewRequest& a, PostTrendingMetricsViewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostTrendingMetricsViewRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostTrendingMetricsViewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostTrendingMetricsViewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostTrendingMetricsViewRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostTrendingMetricsViewRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostTrendingMetricsViewRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostTrendingMetricsViewRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PostTrendingMetricsViewRequest";
  }
  protected:
  explicit PostTrendingMetricsViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewTypeFieldNumber = 2,
    kObjectIdFieldNumber = 3,
    kUserAppIdFieldNumber = 1,
  };
  // string view_type = 2;
  void clear_view_type();
  const std::string& view_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_view_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_view_type();
  PROTOBUF_NODISCARD std::string* release_view_type();
  void set_allocated_view_type(std::string* view_type);
  private:
  const std::string& _internal_view_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_view_type(const std::string& value);
  std::string* _internal_mutable_view_type();
  public:

  // string object_id = 3;
  void clear_object_id();
  const std::string& object_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object_id();
  PROTOBUF_NODISCARD std::string* release_object_id();
  void set_allocated_object_id(std::string* object_id);
  private:
  const std::string& _internal_object_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object_id(const std::string& value);
  std::string* _internal_mutable_object_id();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // @@protoc_insertion_point(class_scope:clarifai.api.PostTrendingMetricsViewRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_id_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class ListTrendingMetricsViewsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ListTrendingMetricsViewsRequest) */ {
 public:
  inline ListTrendingMetricsViewsRequest() : ListTrendingMetricsViewsRequest(nullptr) {}
  ~ListTrendingMetricsViewsRequest() override;
  explicit constexpr ListTrendingMetricsViewsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTrendingMetricsViewsRequest(const ListTrendingMetricsViewsRequest& from);
  ListTrendingMetricsViewsRequest(ListTrendingMetricsViewsRequest&& from) noexcept
    : ListTrendingMetricsViewsRequest() {
    *this = ::std::move(from);
  }

  inline ListTrendingMetricsViewsRequest& operator=(const ListTrendingMetricsViewsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTrendingMetricsViewsRequest& operator=(ListTrendingMetricsViewsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTrendingMetricsViewsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTrendingMetricsViewsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTrendingMetricsViewsRequest*>(
               &_ListTrendingMetricsViewsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    231;

  friend void swap(ListTrendingMetricsViewsRequest& a, ListTrendingMetricsViewsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTrendingMetricsViewsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTrendingMetricsViewsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTrendingMetricsViewsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTrendingMetricsViewsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTrendingMetricsViewsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListTrendingMetricsViewsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTrendingMetricsViewsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ListTrendingMetricsViewsRequest";
  }
  protected:
  explicit ListTrendingMetricsViewsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewTypeFieldNumber = 2,
    kUserAppIdFieldNumber = 1,
    kPageFieldNumber = 3,
    kPerPageFieldNumber = 4,
  };
  // string view_type = 2;
  void clear_view_type();
  const std::string& view_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_view_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_view_type();
  PROTOBUF_NODISCARD std::string* release_view_type();
  void set_allocated_view_type(std::string* view_type);
  private:
  const std::string& _internal_view_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_view_type(const std::string& value);
  std::string* _internal_mutable_view_type();
  public:

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  bool has_user_app_id() const;
  private:
  bool _internal_has_user_app_id() const;
  public:
  void clear_user_app_id();
  const ::clarifai::api::UserAppIDSet& user_app_id() const;
  PROTOBUF_NODISCARD ::clarifai::api::UserAppIDSet* release_user_app_id();
  ::clarifai::api::UserAppIDSet* mutable_user_app_id();
  void set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id);
  private:
  const ::clarifai::api::UserAppIDSet& _internal_user_app_id() const;
  ::clarifai::api::UserAppIDSet* _internal_mutable_user_app_id();
  public:
  void unsafe_arena_set_allocated_user_app_id(
      ::clarifai::api::UserAppIDSet* user_app_id);
  ::clarifai::api::UserAppIDSet* unsafe_arena_release_user_app_id();

  // uint32 page = 3;
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // uint32 per_page = 4;
  void clear_per_page();
  uint32_t per_page() const;
  void set_per_page(uint32_t value);
  private:
  uint32_t _internal_per_page() const;
  void _internal_set_per_page(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ListTrendingMetricsViewsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_type_;
  ::clarifai::api::UserAppIDSet* user_app_id_;
  uint32_t page_;
  uint32_t per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// -------------------------------------------------------------------

class MultiTrendingMetricsViewResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MultiTrendingMetricsViewResponse) */ {
 public:
  inline MultiTrendingMetricsViewResponse() : MultiTrendingMetricsViewResponse(nullptr) {}
  ~MultiTrendingMetricsViewResponse() override;
  explicit constexpr MultiTrendingMetricsViewResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiTrendingMetricsViewResponse(const MultiTrendingMetricsViewResponse& from);
  MultiTrendingMetricsViewResponse(MultiTrendingMetricsViewResponse&& from) noexcept
    : MultiTrendingMetricsViewResponse() {
    *this = ::std::move(from);
  }

  inline MultiTrendingMetricsViewResponse& operator=(const MultiTrendingMetricsViewResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiTrendingMetricsViewResponse& operator=(MultiTrendingMetricsViewResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiTrendingMetricsViewResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiTrendingMetricsViewResponse* internal_default_instance() {
    return reinterpret_cast<const MultiTrendingMetricsViewResponse*>(
               &_MultiTrendingMetricsViewResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    232;

  friend void swap(MultiTrendingMetricsViewResponse& a, MultiTrendingMetricsViewResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiTrendingMetricsViewResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiTrendingMetricsViewResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiTrendingMetricsViewResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiTrendingMetricsViewResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiTrendingMetricsViewResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MultiTrendingMetricsViewResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiTrendingMetricsViewResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MultiTrendingMetricsViewResponse";
  }
  protected:
  explicit MultiTrendingMetricsViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .clarifai.api.TrendingMetric metrics = 2;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::clarifai::api::TrendingMetric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrendingMetric >*
      mutable_metrics();
  private:
  const ::clarifai::api::TrendingMetric& _internal_metrics(int index) const;
  ::clarifai::api::TrendingMetric* _internal_add_metrics();
  public:
  const ::clarifai::api::TrendingMetric& metrics(int index) const;
  ::clarifai::api::TrendingMetric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrendingMetric >&
      metrics() const;

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  PROTOBUF_NODISCARD ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::clarifai::api::status::Status* status);
  ::clarifai::api::status::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:clarifai.api.MultiTrendingMetricsViewResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrendingMetric > metrics_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pagination

// uint32 page = 1;
inline void Pagination::clear_page() {
  page_ = 0u;
}
inline uint32_t Pagination::_internal_page() const {
  return page_;
}
inline uint32_t Pagination::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Pagination.page)
  return _internal_page();
}
inline void Pagination::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void Pagination::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Pagination.page)
}

// uint32 per_page = 2;
inline void Pagination::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t Pagination::_internal_per_page() const {
  return per_page_;
}
inline uint32_t Pagination::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Pagination.per_page)
  return _internal_per_page();
}
inline void Pagination::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void Pagination::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Pagination.per_page)
}

// -------------------------------------------------------------------

// GetAnnotationRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetAnnotationRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetAnnotationRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetAnnotationRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetAnnotationRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAnnotationRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetAnnotationRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetAnnotationRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAnnotationRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAnnotationRequest.user_app_id)
  return _msg;
}
inline void GetAnnotationRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAnnotationRequest.user_app_id)
}

// string annotation_id = 2;
inline void GetAnnotationRequest::clear_annotation_id() {
  annotation_id_.ClearToEmpty();
}
inline const std::string& GetAnnotationRequest::annotation_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAnnotationRequest.annotation_id)
  return _internal_annotation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAnnotationRequest::set_annotation_id(ArgT0&& arg0, ArgT... args) {
 
 annotation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetAnnotationRequest.annotation_id)
}
inline std::string* GetAnnotationRequest::mutable_annotation_id() {
  std::string* _s = _internal_mutable_annotation_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAnnotationRequest.annotation_id)
  return _s;
}
inline const std::string& GetAnnotationRequest::_internal_annotation_id() const {
  return annotation_id_.Get();
}
inline void GetAnnotationRequest::_internal_set_annotation_id(const std::string& value) {
  
  annotation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetAnnotationRequest::_internal_mutable_annotation_id() {
  
  return annotation_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetAnnotationRequest::release_annotation_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAnnotationRequest.annotation_id)
  return annotation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetAnnotationRequest::set_allocated_annotation_id(std::string* annotation_id) {
  if (annotation_id != nullptr) {
    
  } else {
    
  }
  annotation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), annotation_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (annotation_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAnnotationRequest.annotation_id)
}

// string input_id = 3;
inline void GetAnnotationRequest::clear_input_id() {
  input_id_.ClearToEmpty();
}
inline const std::string& GetAnnotationRequest::input_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAnnotationRequest.input_id)
  return _internal_input_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAnnotationRequest::set_input_id(ArgT0&& arg0, ArgT... args) {
 
 input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetAnnotationRequest.input_id)
}
inline std::string* GetAnnotationRequest::mutable_input_id() {
  std::string* _s = _internal_mutable_input_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAnnotationRequest.input_id)
  return _s;
}
inline const std::string& GetAnnotationRequest::_internal_input_id() const {
  return input_id_.Get();
}
inline void GetAnnotationRequest::_internal_set_input_id(const std::string& value) {
  
  input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetAnnotationRequest::_internal_mutable_input_id() {
  
  return input_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetAnnotationRequest::release_input_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAnnotationRequest.input_id)
  return input_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetAnnotationRequest::set_allocated_input_id(std::string* input_id) {
  if (input_id != nullptr) {
    
  } else {
    
  }
  input_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAnnotationRequest.input_id)
}

// -------------------------------------------------------------------

// ListAnnotationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListAnnotationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListAnnotationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListAnnotationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListAnnotationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListAnnotationsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListAnnotationsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAnnotationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.user_app_id)
  return _msg;
}
inline void ListAnnotationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAnnotationsRequest.user_app_id)
}

// repeated string ids = 2;
inline int ListAnnotationsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int ListAnnotationsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void ListAnnotationsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* ListAnnotationsRequest::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListAnnotationsRequest.ids)
  return _s;
}
inline const std::string& ListAnnotationsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& ListAnnotationsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.ids)
  return _internal_ids(index);
}
inline std::string* ListAnnotationsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.ids)
  return ids_.Mutable(index);
}
inline void ListAnnotationsRequest::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.ids)
}
inline void ListAnnotationsRequest::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.ids)
}
inline void ListAnnotationsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListAnnotationsRequest.ids)
}
inline void ListAnnotationsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListAnnotationsRequest.ids)
}
inline std::string* ListAnnotationsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void ListAnnotationsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.ids)
}
inline void ListAnnotationsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.ids)
}
inline void ListAnnotationsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListAnnotationsRequest.ids)
}
inline void ListAnnotationsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListAnnotationsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAnnotationsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListAnnotationsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAnnotationsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListAnnotationsRequest.ids)
  return &ids_;
}

// repeated string input_ids = 3;
inline int ListAnnotationsRequest::_internal_input_ids_size() const {
  return input_ids_.size();
}
inline int ListAnnotationsRequest::input_ids_size() const {
  return _internal_input_ids_size();
}
inline void ListAnnotationsRequest::clear_input_ids() {
  input_ids_.Clear();
}
inline std::string* ListAnnotationsRequest::add_input_ids() {
  std::string* _s = _internal_add_input_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListAnnotationsRequest.input_ids)
  return _s;
}
inline const std::string& ListAnnotationsRequest::_internal_input_ids(int index) const {
  return input_ids_.Get(index);
}
inline const std::string& ListAnnotationsRequest::input_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.input_ids)
  return _internal_input_ids(index);
}
inline std::string* ListAnnotationsRequest::mutable_input_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.input_ids)
  return input_ids_.Mutable(index);
}
inline void ListAnnotationsRequest::set_input_ids(int index, const std::string& value) {
  input_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline void ListAnnotationsRequest::set_input_ids(int index, std::string&& value) {
  input_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline void ListAnnotationsRequest::set_input_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline void ListAnnotationsRequest::set_input_ids(int index, const char* value, size_t size) {
  input_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline std::string* ListAnnotationsRequest::_internal_add_input_ids() {
  return input_ids_.Add();
}
inline void ListAnnotationsRequest::add_input_ids(const std::string& value) {
  input_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline void ListAnnotationsRequest::add_input_ids(std::string&& value) {
  input_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline void ListAnnotationsRequest::add_input_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline void ListAnnotationsRequest::add_input_ids(const char* value, size_t size) {
  input_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListAnnotationsRequest.input_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAnnotationsRequest::input_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListAnnotationsRequest.input_ids)
  return input_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAnnotationsRequest::mutable_input_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListAnnotationsRequest.input_ids)
  return &input_ids_;
}

// repeated string user_ids = 9;
inline int ListAnnotationsRequest::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int ListAnnotationsRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void ListAnnotationsRequest::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* ListAnnotationsRequest::add_user_ids() {
  std::string* _s = _internal_add_user_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListAnnotationsRequest.user_ids)
  return _s;
}
inline const std::string& ListAnnotationsRequest::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& ListAnnotationsRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* ListAnnotationsRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.user_ids)
  return user_ids_.Mutable(index);
}
inline void ListAnnotationsRequest::set_user_ids(int index, const std::string& value) {
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline void ListAnnotationsRequest::set_user_ids(int index, std::string&& value) {
  user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline void ListAnnotationsRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline void ListAnnotationsRequest::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline std::string* ListAnnotationsRequest::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void ListAnnotationsRequest::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline void ListAnnotationsRequest::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline void ListAnnotationsRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline void ListAnnotationsRequest::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListAnnotationsRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAnnotationsRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListAnnotationsRequest.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAnnotationsRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListAnnotationsRequest.user_ids)
  return &user_ids_;
}

// repeated string model_version_ids = 10;
inline int ListAnnotationsRequest::_internal_model_version_ids_size() const {
  return model_version_ids_.size();
}
inline int ListAnnotationsRequest::model_version_ids_size() const {
  return _internal_model_version_ids_size();
}
inline void ListAnnotationsRequest::clear_model_version_ids() {
  model_version_ids_.Clear();
}
inline std::string* ListAnnotationsRequest::add_model_version_ids() {
  std::string* _s = _internal_add_model_version_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListAnnotationsRequest.model_version_ids)
  return _s;
}
inline const std::string& ListAnnotationsRequest::_internal_model_version_ids(int index) const {
  return model_version_ids_.Get(index);
}
inline const std::string& ListAnnotationsRequest::model_version_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.model_version_ids)
  return _internal_model_version_ids(index);
}
inline std::string* ListAnnotationsRequest::mutable_model_version_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.model_version_ids)
  return model_version_ids_.Mutable(index);
}
inline void ListAnnotationsRequest::set_model_version_ids(int index, const std::string& value) {
  model_version_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline void ListAnnotationsRequest::set_model_version_ids(int index, std::string&& value) {
  model_version_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline void ListAnnotationsRequest::set_model_version_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  model_version_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline void ListAnnotationsRequest::set_model_version_ids(int index, const char* value, size_t size) {
  model_version_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline std::string* ListAnnotationsRequest::_internal_add_model_version_ids() {
  return model_version_ids_.Add();
}
inline void ListAnnotationsRequest::add_model_version_ids(const std::string& value) {
  model_version_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline void ListAnnotationsRequest::add_model_version_ids(std::string&& value) {
  model_version_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline void ListAnnotationsRequest::add_model_version_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  model_version_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline void ListAnnotationsRequest::add_model_version_ids(const char* value, size_t size) {
  model_version_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListAnnotationsRequest.model_version_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAnnotationsRequest::model_version_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListAnnotationsRequest.model_version_ids)
  return model_version_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAnnotationsRequest::mutable_model_version_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListAnnotationsRequest.model_version_ids)
  return &model_version_ids_;
}

// repeated .clarifai.api.status.Status statuses = 5;
inline int ListAnnotationsRequest::_internal_statuses_size() const {
  return statuses_.size();
}
inline int ListAnnotationsRequest::statuses_size() const {
  return _internal_statuses_size();
}
inline ::clarifai::api::status::Status* ListAnnotationsRequest::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.statuses)
  return statuses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >*
ListAnnotationsRequest::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListAnnotationsRequest.statuses)
  return &statuses_;
}
inline const ::clarifai::api::status::Status& ListAnnotationsRequest::_internal_statuses(int index) const {
  return statuses_.Get(index);
}
inline const ::clarifai::api::status::Status& ListAnnotationsRequest::statuses(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.statuses)
  return _internal_statuses(index);
}
inline ::clarifai::api::status::Status* ListAnnotationsRequest::_internal_add_statuses() {
  return statuses_.Add();
}
inline ::clarifai::api::status::Status* ListAnnotationsRequest::add_statuses() {
  ::clarifai::api::status::Status* _add = _internal_add_statuses();
  // @@protoc_insertion_point(field_add:clarifai.api.ListAnnotationsRequest.statuses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >&
ListAnnotationsRequest::statuses() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListAnnotationsRequest.statuses)
  return statuses_;
}

// bool list_all_annotations = 6;
inline void ListAnnotationsRequest::clear_list_all_annotations() {
  list_all_annotations_ = false;
}
inline bool ListAnnotationsRequest::_internal_list_all_annotations() const {
  return list_all_annotations_;
}
inline bool ListAnnotationsRequest::list_all_annotations() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.list_all_annotations)
  return _internal_list_all_annotations();
}
inline void ListAnnotationsRequest::_internal_set_list_all_annotations(bool value) {
  
  list_all_annotations_ = value;
}
inline void ListAnnotationsRequest::set_list_all_annotations(bool value) {
  _internal_set_list_all_annotations(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.list_all_annotations)
}

// bool return_model_output = 12;
inline void ListAnnotationsRequest::clear_return_model_output() {
  return_model_output_ = false;
}
inline bool ListAnnotationsRequest::_internal_return_model_output() const {
  return return_model_output_;
}
inline bool ListAnnotationsRequest::return_model_output() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.return_model_output)
  return _internal_return_model_output();
}
inline void ListAnnotationsRequest::_internal_set_return_model_output(bool value) {
  
  return_model_output_ = value;
}
inline void ListAnnotationsRequest::set_return_model_output(bool value) {
  _internal_set_return_model_output(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.return_model_output)
}

// uint32 page = 7;
inline void ListAnnotationsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListAnnotationsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListAnnotationsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.page)
  return _internal_page();
}
inline void ListAnnotationsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListAnnotationsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.page)
}

// uint32 per_page = 8;
inline void ListAnnotationsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListAnnotationsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListAnnotationsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.per_page)
  return _internal_per_page();
}
inline void ListAnnotationsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListAnnotationsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.per_page)
}

// string task_id = 11;
inline void ListAnnotationsRequest::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& ListAnnotationsRequest::task_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationsRequest.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAnnotationsRequest::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationsRequest.task_id)
}
inline std::string* ListAnnotationsRequest::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationsRequest.task_id)
  return _s;
}
inline const std::string& ListAnnotationsRequest::_internal_task_id() const {
  return task_id_.Get();
}
inline void ListAnnotationsRequest::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListAnnotationsRequest::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListAnnotationsRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAnnotationsRequest.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListAnnotationsRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAnnotationsRequest.task_id)
}

// -------------------------------------------------------------------

// PostAnnotationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAnnotationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAnnotationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostAnnotationsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAnnotationsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationsRequest.user_app_id)
  return _msg;
}
inline void PostAnnotationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationsRequest.user_app_id)
}

// repeated .clarifai.api.Annotation annotations = 2;
inline int PostAnnotationsRequest::_internal_annotations_size() const {
  return annotations_.size();
}
inline int PostAnnotationsRequest::annotations_size() const {
  return _internal_annotations_size();
}
inline ::clarifai::api::Annotation* PostAnnotationsRequest::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationsRequest.annotations)
  return annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >*
PostAnnotationsRequest::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostAnnotationsRequest.annotations)
  return &annotations_;
}
inline const ::clarifai::api::Annotation& PostAnnotationsRequest::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const ::clarifai::api::Annotation& PostAnnotationsRequest::annotations(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationsRequest.annotations)
  return _internal_annotations(index);
}
inline ::clarifai::api::Annotation* PostAnnotationsRequest::_internal_add_annotations() {
  return annotations_.Add();
}
inline ::clarifai::api::Annotation* PostAnnotationsRequest::add_annotations() {
  ::clarifai::api::Annotation* _add = _internal_add_annotations();
  // @@protoc_insertion_point(field_add:clarifai.api.PostAnnotationsRequest.annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >&
PostAnnotationsRequest::annotations() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostAnnotationsRequest.annotations)
  return annotations_;
}

// -------------------------------------------------------------------

// PatchAnnotationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchAnnotationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchAnnotationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchAnnotationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchAnnotationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchAnnotationsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchAnnotationsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAnnotationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsRequest.user_app_id)
  return _msg;
}
inline void PatchAnnotationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAnnotationsRequest.user_app_id)
}

// repeated .clarifai.api.Annotation annotations = 2;
inline int PatchAnnotationsRequest::_internal_annotations_size() const {
  return annotations_.size();
}
inline int PatchAnnotationsRequest::annotations_size() const {
  return _internal_annotations_size();
}
inline ::clarifai::api::Annotation* PatchAnnotationsRequest::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsRequest.annotations)
  return annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >*
PatchAnnotationsRequest::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchAnnotationsRequest.annotations)
  return &annotations_;
}
inline const ::clarifai::api::Annotation& PatchAnnotationsRequest::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const ::clarifai::api::Annotation& PatchAnnotationsRequest::annotations(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsRequest.annotations)
  return _internal_annotations(index);
}
inline ::clarifai::api::Annotation* PatchAnnotationsRequest::_internal_add_annotations() {
  return annotations_.Add();
}
inline ::clarifai::api::Annotation* PatchAnnotationsRequest::add_annotations() {
  ::clarifai::api::Annotation* _add = _internal_add_annotations();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchAnnotationsRequest.annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >&
PatchAnnotationsRequest::annotations() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchAnnotationsRequest.annotations)
  return annotations_;
}

// string action = 3;
inline void PatchAnnotationsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchAnnotationsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchAnnotationsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAnnotationsRequest.action)
}
inline std::string* PatchAnnotationsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsRequest.action)
  return _s;
}
inline const std::string& PatchAnnotationsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchAnnotationsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchAnnotationsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchAnnotationsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAnnotationsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchAnnotationsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAnnotationsRequest.action)
}

// -------------------------------------------------------------------

// PatchAnnotationsStatusRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchAnnotationsStatusRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchAnnotationsStatusRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchAnnotationsStatusRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchAnnotationsStatusRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsStatusRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchAnnotationsStatusRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchAnnotationsStatusRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsStatusRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsStatusRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAnnotationsStatusRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsStatusRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsStatusRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsStatusRequest.user_app_id)
  return _msg;
}
inline void PatchAnnotationsStatusRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAnnotationsStatusRequest.user_app_id)
}

// .clarifai.api.status.StatusCode status_code = 2;
inline void PatchAnnotationsStatusRequest::clear_status_code() {
  status_code_ = 0;
}
inline ::clarifai::api::status::StatusCode PatchAnnotationsStatusRequest::_internal_status_code() const {
  return static_cast< ::clarifai::api::status::StatusCode >(status_code_);
}
inline ::clarifai::api::status::StatusCode PatchAnnotationsStatusRequest::status_code() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsStatusRequest.status_code)
  return _internal_status_code();
}
inline void PatchAnnotationsStatusRequest::_internal_set_status_code(::clarifai::api::status::StatusCode value) {
  
  status_code_ = value;
}
inline void PatchAnnotationsStatusRequest::set_status_code(::clarifai::api::status::StatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAnnotationsStatusRequest.status_code)
}

// repeated string user_ids = 3;
inline int PatchAnnotationsStatusRequest::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int PatchAnnotationsStatusRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void PatchAnnotationsStatusRequest::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* PatchAnnotationsStatusRequest::add_user_ids() {
  std::string* _s = _internal_add_user_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
  return _s;
}
inline const std::string& PatchAnnotationsStatusRequest::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& PatchAnnotationsStatusRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* PatchAnnotationsStatusRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
  return user_ids_.Mutable(index);
}
inline void PatchAnnotationsStatusRequest::set_user_ids(int index, const std::string& value) {
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
}
inline void PatchAnnotationsStatusRequest::set_user_ids(int index, std::string&& value) {
  user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
}
inline void PatchAnnotationsStatusRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
}
inline void PatchAnnotationsStatusRequest::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
}
inline std::string* PatchAnnotationsStatusRequest::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void PatchAnnotationsStatusRequest::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
}
inline void PatchAnnotationsStatusRequest::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
}
inline void PatchAnnotationsStatusRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
}
inline void PatchAnnotationsStatusRequest::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PatchAnnotationsStatusRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PatchAnnotationsStatusRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchAnnotationsStatusRequest.user_ids)
  return &user_ids_;
}

// string task_id = 4;
inline void PatchAnnotationsStatusRequest::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& PatchAnnotationsStatusRequest::task_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsStatusRequest.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchAnnotationsStatusRequest::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAnnotationsStatusRequest.task_id)
}
inline std::string* PatchAnnotationsStatusRequest::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsStatusRequest.task_id)
  return _s;
}
inline const std::string& PatchAnnotationsStatusRequest::_internal_task_id() const {
  return task_id_.Get();
}
inline void PatchAnnotationsStatusRequest::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchAnnotationsStatusRequest::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchAnnotationsStatusRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAnnotationsStatusRequest.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchAnnotationsStatusRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAnnotationsStatusRequest.task_id)
}

// string action = 5;
inline void PatchAnnotationsStatusRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchAnnotationsStatusRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsStatusRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchAnnotationsStatusRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAnnotationsStatusRequest.action)
}
inline std::string* PatchAnnotationsStatusRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsStatusRequest.action)
  return _s;
}
inline const std::string& PatchAnnotationsStatusRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchAnnotationsStatusRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchAnnotationsStatusRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchAnnotationsStatusRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAnnotationsStatusRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchAnnotationsStatusRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAnnotationsStatusRequest.action)
}

// -------------------------------------------------------------------

// PatchAnnotationsStatusResponse

// .clarifai.api.status.Status status = 1;
inline bool PatchAnnotationsStatusResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PatchAnnotationsStatusResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& PatchAnnotationsStatusResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& PatchAnnotationsStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsStatusResponse.status)
  return _internal_status();
}
inline void PatchAnnotationsStatusResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchAnnotationsStatusResponse.status)
}
inline ::clarifai::api::status::Status* PatchAnnotationsStatusResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* PatchAnnotationsStatusResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAnnotationsStatusResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* PatchAnnotationsStatusResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* PatchAnnotationsStatusResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsStatusResponse.status)
  return _msg;
}
inline void PatchAnnotationsStatusResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAnnotationsStatusResponse.status)
}

// repeated string user_ids = 2;
inline int PatchAnnotationsStatusResponse::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int PatchAnnotationsStatusResponse::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void PatchAnnotationsStatusResponse::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* PatchAnnotationsStatusResponse::add_user_ids() {
  std::string* _s = _internal_add_user_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
  return _s;
}
inline const std::string& PatchAnnotationsStatusResponse::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& PatchAnnotationsStatusResponse::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
  return _internal_user_ids(index);
}
inline std::string* PatchAnnotationsStatusResponse::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
  return user_ids_.Mutable(index);
}
inline void PatchAnnotationsStatusResponse::set_user_ids(int index, const std::string& value) {
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
}
inline void PatchAnnotationsStatusResponse::set_user_ids(int index, std::string&& value) {
  user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
}
inline void PatchAnnotationsStatusResponse::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
}
inline void PatchAnnotationsStatusResponse::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
}
inline std::string* PatchAnnotationsStatusResponse::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void PatchAnnotationsStatusResponse::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
}
inline void PatchAnnotationsStatusResponse::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
}
inline void PatchAnnotationsStatusResponse::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
}
inline void PatchAnnotationsStatusResponse::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PatchAnnotationsStatusResponse::user_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PatchAnnotationsStatusResponse::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchAnnotationsStatusResponse.user_ids)
  return &user_ids_;
}

// uint32 updated_count = 3;
inline void PatchAnnotationsStatusResponse::clear_updated_count() {
  updated_count_ = 0u;
}
inline uint32_t PatchAnnotationsStatusResponse::_internal_updated_count() const {
  return updated_count_;
}
inline uint32_t PatchAnnotationsStatusResponse::updated_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsStatusResponse.updated_count)
  return _internal_updated_count();
}
inline void PatchAnnotationsStatusResponse::_internal_set_updated_count(uint32_t value) {
  
  updated_count_ = value;
}
inline void PatchAnnotationsStatusResponse::set_updated_count(uint32_t value) {
  _internal_set_updated_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAnnotationsStatusResponse.updated_count)
}

// -------------------------------------------------------------------

// DeleteAnnotationRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteAnnotationRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteAnnotationRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteAnnotationRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteAnnotationRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteAnnotationRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteAnnotationRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAnnotationRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationRequest.user_app_id)
  return _msg;
}
inline void DeleteAnnotationRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAnnotationRequest.user_app_id)
}

// string input_id = 2;
inline void DeleteAnnotationRequest::clear_input_id() {
  input_id_.ClearToEmpty();
}
inline const std::string& DeleteAnnotationRequest::input_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationRequest.input_id)
  return _internal_input_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteAnnotationRequest::set_input_id(ArgT0&& arg0, ArgT... args) {
 
 input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationRequest.input_id)
}
inline std::string* DeleteAnnotationRequest::mutable_input_id() {
  std::string* _s = _internal_mutable_input_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationRequest.input_id)
  return _s;
}
inline const std::string& DeleteAnnotationRequest::_internal_input_id() const {
  return input_id_.Get();
}
inline void DeleteAnnotationRequest::_internal_set_input_id(const std::string& value) {
  
  input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteAnnotationRequest::_internal_mutable_input_id() {
  
  return input_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteAnnotationRequest::release_input_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAnnotationRequest.input_id)
  return input_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteAnnotationRequest::set_allocated_input_id(std::string* input_id) {
  if (input_id != nullptr) {
    
  } else {
    
  }
  input_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAnnotationRequest.input_id)
}

// string annotation_id = 3;
inline void DeleteAnnotationRequest::clear_annotation_id() {
  annotation_id_.ClearToEmpty();
}
inline const std::string& DeleteAnnotationRequest::annotation_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationRequest.annotation_id)
  return _internal_annotation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteAnnotationRequest::set_annotation_id(ArgT0&& arg0, ArgT... args) {
 
 annotation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationRequest.annotation_id)
}
inline std::string* DeleteAnnotationRequest::mutable_annotation_id() {
  std::string* _s = _internal_mutable_annotation_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationRequest.annotation_id)
  return _s;
}
inline const std::string& DeleteAnnotationRequest::_internal_annotation_id() const {
  return annotation_id_.Get();
}
inline void DeleteAnnotationRequest::_internal_set_annotation_id(const std::string& value) {
  
  annotation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteAnnotationRequest::_internal_mutable_annotation_id() {
  
  return annotation_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteAnnotationRequest::release_annotation_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAnnotationRequest.annotation_id)
  return annotation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteAnnotationRequest::set_allocated_annotation_id(std::string* annotation_id) {
  if (annotation_id != nullptr) {
    
  } else {
    
  }
  annotation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), annotation_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (annotation_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAnnotationRequest.annotation_id)
}

// -------------------------------------------------------------------

// DeleteAnnotationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteAnnotationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteAnnotationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteAnnotationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteAnnotationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteAnnotationsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteAnnotationsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAnnotationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationsRequest.user_app_id)
  return _msg;
}
inline void DeleteAnnotationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAnnotationsRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteAnnotationsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteAnnotationsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteAnnotationsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteAnnotationsRequest::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteAnnotationsRequest.ids)
  return _s;
}
inline const std::string& DeleteAnnotationsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteAnnotationsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteAnnotationsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteAnnotationsRequest::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline void DeleteAnnotationsRequest::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline void DeleteAnnotationsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline void DeleteAnnotationsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline std::string* DeleteAnnotationsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteAnnotationsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline void DeleteAnnotationsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline void DeleteAnnotationsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline void DeleteAnnotationsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteAnnotationsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteAnnotationsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteAnnotationsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteAnnotationsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteAnnotationsRequest.ids)
  return &ids_;
}

// repeated string input_ids = 3;
inline int DeleteAnnotationsRequest::_internal_input_ids_size() const {
  return input_ids_.size();
}
inline int DeleteAnnotationsRequest::input_ids_size() const {
  return _internal_input_ids_size();
}
inline void DeleteAnnotationsRequest::clear_input_ids() {
  input_ids_.Clear();
}
inline std::string* DeleteAnnotationsRequest::add_input_ids() {
  std::string* _s = _internal_add_input_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteAnnotationsRequest.input_ids)
  return _s;
}
inline const std::string& DeleteAnnotationsRequest::_internal_input_ids(int index) const {
  return input_ids_.Get(index);
}
inline const std::string& DeleteAnnotationsRequest::input_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationsRequest.input_ids)
  return _internal_input_ids(index);
}
inline std::string* DeleteAnnotationsRequest::mutable_input_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationsRequest.input_ids)
  return input_ids_.Mutable(index);
}
inline void DeleteAnnotationsRequest::set_input_ids(int index, const std::string& value) {
  input_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline void DeleteAnnotationsRequest::set_input_ids(int index, std::string&& value) {
  input_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline void DeleteAnnotationsRequest::set_input_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline void DeleteAnnotationsRequest::set_input_ids(int index, const char* value, size_t size) {
  input_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline std::string* DeleteAnnotationsRequest::_internal_add_input_ids() {
  return input_ids_.Add();
}
inline void DeleteAnnotationsRequest::add_input_ids(const std::string& value) {
  input_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline void DeleteAnnotationsRequest::add_input_ids(std::string&& value) {
  input_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline void DeleteAnnotationsRequest::add_input_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline void DeleteAnnotationsRequest::add_input_ids(const char* value, size_t size) {
  input_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteAnnotationsRequest.input_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteAnnotationsRequest::input_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteAnnotationsRequest.input_ids)
  return input_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteAnnotationsRequest::mutable_input_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteAnnotationsRequest.input_ids)
  return &input_ids_;
}

// -------------------------------------------------------------------

// SingleAnnotationResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleAnnotationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleAnnotationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleAnnotationResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleAnnotationResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAnnotationResponse.status)
  return _internal_status();
}
inline void SingleAnnotationResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleAnnotationResponse.status)
}
inline ::clarifai::api::status::Status* SingleAnnotationResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleAnnotationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAnnotationResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleAnnotationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleAnnotationResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAnnotationResponse.status)
  return _msg;
}
inline void SingleAnnotationResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAnnotationResponse.status)
}

// .clarifai.api.Annotation annotation = 2;
inline bool SingleAnnotationResponse::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool SingleAnnotationResponse::has_annotation() const {
  return _internal_has_annotation();
}
inline const ::clarifai::api::Annotation& SingleAnnotationResponse::_internal_annotation() const {
  const ::clarifai::api::Annotation* p = annotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Annotation&>(
      ::clarifai::api::_Annotation_default_instance_);
}
inline const ::clarifai::api::Annotation& SingleAnnotationResponse::annotation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAnnotationResponse.annotation)
  return _internal_annotation();
}
inline void SingleAnnotationResponse::unsafe_arena_set_allocated_annotation(
    ::clarifai::api::Annotation* annotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_);
  }
  annotation_ = annotation;
  if (annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleAnnotationResponse.annotation)
}
inline ::clarifai::api::Annotation* SingleAnnotationResponse::release_annotation() {
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Annotation* SingleAnnotationResponse::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAnnotationResponse.annotation)
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::clarifai::api::Annotation* SingleAnnotationResponse::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Annotation>(GetArenaForAllocation());
    annotation_ = p;
  }
  return annotation_;
}
inline ::clarifai::api::Annotation* SingleAnnotationResponse::mutable_annotation() {
  ::clarifai::api::Annotation* _msg = _internal_mutable_annotation();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAnnotationResponse.annotation)
  return _msg;
}
inline void SingleAnnotationResponse::set_allocated_annotation(::clarifai::api::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_);
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation));
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAnnotationResponse.annotation)
}

// -------------------------------------------------------------------

// MultiAnnotationResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiAnnotationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiAnnotationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiAnnotationResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiAnnotationResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAnnotationResponse.status)
  return _internal_status();
}
inline void MultiAnnotationResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiAnnotationResponse.status)
}
inline ::clarifai::api::status::Status* MultiAnnotationResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiAnnotationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiAnnotationResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiAnnotationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiAnnotationResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAnnotationResponse.status)
  return _msg;
}
inline void MultiAnnotationResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiAnnotationResponse.status)
}

// repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiAnnotationResponse::_internal_annotations_size() const {
  return annotations_.size();
}
inline int MultiAnnotationResponse::annotations_size() const {
  return _internal_annotations_size();
}
inline ::clarifai::api::Annotation* MultiAnnotationResponse::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAnnotationResponse.annotations)
  return annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >*
MultiAnnotationResponse::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiAnnotationResponse.annotations)
  return &annotations_;
}
inline const ::clarifai::api::Annotation& MultiAnnotationResponse::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const ::clarifai::api::Annotation& MultiAnnotationResponse::annotations(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAnnotationResponse.annotations)
  return _internal_annotations(index);
}
inline ::clarifai::api::Annotation* MultiAnnotationResponse::_internal_add_annotations() {
  return annotations_.Add();
}
inline ::clarifai::api::Annotation* MultiAnnotationResponse::add_annotations() {
  ::clarifai::api::Annotation* _add = _internal_add_annotations();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiAnnotationResponse.annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Annotation >&
MultiAnnotationResponse::annotations() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiAnnotationResponse.annotations)
  return annotations_;
}

// -------------------------------------------------------------------

// GetAppRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetAppRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetAppRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetAppRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetAppRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAppRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetAppRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetAppRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetAppRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAppRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAppRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAppRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetAppRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAppRequest.user_app_id)
  return _msg;
}
inline void GetAppRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAppRequest.user_app_id)
}

// repeated string additional_fields = 2;
inline int GetAppRequest::_internal_additional_fields_size() const {
  return additional_fields_.size();
}
inline int GetAppRequest::additional_fields_size() const {
  return _internal_additional_fields_size();
}
inline void GetAppRequest::clear_additional_fields() {
  additional_fields_.Clear();
}
inline std::string* GetAppRequest::add_additional_fields() {
  std::string* _s = _internal_add_additional_fields();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.GetAppRequest.additional_fields)
  return _s;
}
inline const std::string& GetAppRequest::_internal_additional_fields(int index) const {
  return additional_fields_.Get(index);
}
inline const std::string& GetAppRequest::additional_fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAppRequest.additional_fields)
  return _internal_additional_fields(index);
}
inline std::string* GetAppRequest::mutable_additional_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAppRequest.additional_fields)
  return additional_fields_.Mutable(index);
}
inline void GetAppRequest::set_additional_fields(int index, const std::string& value) {
  additional_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetAppRequest.additional_fields)
}
inline void GetAppRequest::set_additional_fields(int index, std::string&& value) {
  additional_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.GetAppRequest.additional_fields)
}
inline void GetAppRequest::set_additional_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetAppRequest.additional_fields)
}
inline void GetAppRequest::set_additional_fields(int index, const char* value, size_t size) {
  additional_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetAppRequest.additional_fields)
}
inline std::string* GetAppRequest::_internal_add_additional_fields() {
  return additional_fields_.Add();
}
inline void GetAppRequest::add_additional_fields(const std::string& value) {
  additional_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.GetAppRequest.additional_fields)
}
inline void GetAppRequest::add_additional_fields(std::string&& value) {
  additional_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.GetAppRequest.additional_fields)
}
inline void GetAppRequest::add_additional_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.GetAppRequest.additional_fields)
}
inline void GetAppRequest::add_additional_fields(const char* value, size_t size) {
  additional_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.GetAppRequest.additional_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAppRequest::additional_fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.GetAppRequest.additional_fields)
  return additional_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAppRequest::mutable_additional_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.GetAppRequest.additional_fields)
  return &additional_fields_;
}

// -------------------------------------------------------------------

// ListAppsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListAppsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListAppsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListAppsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListAppsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListAppsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListAppsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListAppsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAppsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAppsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAppsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListAppsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAppsRequest.user_app_id)
  return _msg;
}
inline void ListAppsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAppsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListAppsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListAppsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListAppsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.page)
  return _internal_page();
}
inline void ListAppsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListAppsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.page)
}

// uint32 per_page = 3;
inline void ListAppsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListAppsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListAppsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.per_page)
  return _internal_per_page();
}
inline void ListAppsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListAppsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.per_page)
}

// bool sort_ascending = 5;
inline void ListAppsRequest::clear_sort_ascending() {
  sort_ascending_ = false;
}
inline bool ListAppsRequest::_internal_sort_ascending() const {
  return sort_ascending_;
}
inline bool ListAppsRequest::sort_ascending() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.sort_ascending)
  return _internal_sort_ascending();
}
inline void ListAppsRequest::_internal_set_sort_ascending(bool value) {
  
  sort_ascending_ = value;
}
inline void ListAppsRequest::set_sort_ascending(bool value) {
  _internal_set_sort_ascending(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.sort_ascending)
}

// bool sort_by_name = 6;
inline bool ListAppsRequest::_internal_has_sort_by_name() const {
  return sort_by_case() == kSortByName;
}
inline bool ListAppsRequest::has_sort_by_name() const {
  return _internal_has_sort_by_name();
}
inline void ListAppsRequest::set_has_sort_by_name() {
  _oneof_case_[0] = kSortByName;
}
inline void ListAppsRequest::clear_sort_by_name() {
  if (_internal_has_sort_by_name()) {
    sort_by_.sort_by_name_ = false;
    clear_has_sort_by();
  }
}
inline bool ListAppsRequest::_internal_sort_by_name() const {
  if (_internal_has_sort_by_name()) {
    return sort_by_.sort_by_name_;
  }
  return false;
}
inline void ListAppsRequest::_internal_set_sort_by_name(bool value) {
  if (!_internal_has_sort_by_name()) {
    clear_sort_by();
    set_has_sort_by_name();
  }
  sort_by_.sort_by_name_ = value;
}
inline bool ListAppsRequest::sort_by_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.sort_by_name)
  return _internal_sort_by_name();
}
inline void ListAppsRequest::set_sort_by_name(bool value) {
  _internal_set_sort_by_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.sort_by_name)
}

// bool sort_by_modified_at = 7;
inline bool ListAppsRequest::_internal_has_sort_by_modified_at() const {
  return sort_by_case() == kSortByModifiedAt;
}
inline bool ListAppsRequest::has_sort_by_modified_at() const {
  return _internal_has_sort_by_modified_at();
}
inline void ListAppsRequest::set_has_sort_by_modified_at() {
  _oneof_case_[0] = kSortByModifiedAt;
}
inline void ListAppsRequest::clear_sort_by_modified_at() {
  if (_internal_has_sort_by_modified_at()) {
    sort_by_.sort_by_modified_at_ = false;
    clear_has_sort_by();
  }
}
inline bool ListAppsRequest::_internal_sort_by_modified_at() const {
  if (_internal_has_sort_by_modified_at()) {
    return sort_by_.sort_by_modified_at_;
  }
  return false;
}
inline void ListAppsRequest::_internal_set_sort_by_modified_at(bool value) {
  if (!_internal_has_sort_by_modified_at()) {
    clear_sort_by();
    set_has_sort_by_modified_at();
  }
  sort_by_.sort_by_modified_at_ = value;
}
inline bool ListAppsRequest::sort_by_modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.sort_by_modified_at)
  return _internal_sort_by_modified_at();
}
inline void ListAppsRequest::set_sort_by_modified_at(bool value) {
  _internal_set_sort_by_modified_at(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.sort_by_modified_at)
}

// string query = 8;
inline void ListAppsRequest::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& ListAppsRequest::query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAppsRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.query)
}
inline std::string* ListAppsRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAppsRequest.query)
  return _s;
}
inline const std::string& ListAppsRequest::_internal_query() const {
  return query_.Get();
}
inline void ListAppsRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListAppsRequest::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListAppsRequest::release_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAppsRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListAppsRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (query_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAppsRequest.query)
}

// string name = 4 [deprecated = true];
inline void ListAppsRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListAppsRequest::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAppsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.name)
}
inline std::string* ListAppsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAppsRequest.name)
  return _s;
}
inline const std::string& ListAppsRequest::_internal_name() const {
  return name_.Get();
}
inline void ListAppsRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListAppsRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListAppsRequest::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAppsRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListAppsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAppsRequest.name)
}

// bool featured_only = 9;
inline void ListAppsRequest::clear_featured_only() {
  featured_only_ = false;
}
inline bool ListAppsRequest::_internal_featured_only() const {
  return featured_only_;
}
inline bool ListAppsRequest::featured_only() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.featured_only)
  return _internal_featured_only();
}
inline void ListAppsRequest::_internal_set_featured_only(bool value) {
  
  featured_only_ = value;
}
inline void ListAppsRequest::set_featured_only(bool value) {
  _internal_set_featured_only(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.featured_only)
}

// bool starred_only = 11;
inline void ListAppsRequest::clear_starred_only() {
  starred_only_ = false;
}
inline bool ListAppsRequest::_internal_starred_only() const {
  return starred_only_;
}
inline bool ListAppsRequest::starred_only() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.starred_only)
  return _internal_starred_only();
}
inline void ListAppsRequest::_internal_set_starred_only(bool value) {
  
  starred_only_ = value;
}
inline void ListAppsRequest::set_starred_only(bool value) {
  _internal_set_starred_only(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.starred_only)
}

// repeated string additional_fields = 10;
inline int ListAppsRequest::_internal_additional_fields_size() const {
  return additional_fields_.size();
}
inline int ListAppsRequest::additional_fields_size() const {
  return _internal_additional_fields_size();
}
inline void ListAppsRequest::clear_additional_fields() {
  additional_fields_.Clear();
}
inline std::string* ListAppsRequest::add_additional_fields() {
  std::string* _s = _internal_add_additional_fields();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListAppsRequest.additional_fields)
  return _s;
}
inline const std::string& ListAppsRequest::_internal_additional_fields(int index) const {
  return additional_fields_.Get(index);
}
inline const std::string& ListAppsRequest::additional_fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppsRequest.additional_fields)
  return _internal_additional_fields(index);
}
inline std::string* ListAppsRequest::mutable_additional_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAppsRequest.additional_fields)
  return additional_fields_.Mutable(index);
}
inline void ListAppsRequest::set_additional_fields(int index, const std::string& value) {
  additional_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.additional_fields)
}
inline void ListAppsRequest::set_additional_fields(int index, std::string&& value) {
  additional_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppsRequest.additional_fields)
}
inline void ListAppsRequest::set_additional_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListAppsRequest.additional_fields)
}
inline void ListAppsRequest::set_additional_fields(int index, const char* value, size_t size) {
  additional_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListAppsRequest.additional_fields)
}
inline std::string* ListAppsRequest::_internal_add_additional_fields() {
  return additional_fields_.Add();
}
inline void ListAppsRequest::add_additional_fields(const std::string& value) {
  additional_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListAppsRequest.additional_fields)
}
inline void ListAppsRequest::add_additional_fields(std::string&& value) {
  additional_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListAppsRequest.additional_fields)
}
inline void ListAppsRequest::add_additional_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListAppsRequest.additional_fields)
}
inline void ListAppsRequest::add_additional_fields(const char* value, size_t size) {
  additional_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListAppsRequest.additional_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAppsRequest::additional_fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListAppsRequest.additional_fields)
  return additional_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAppsRequest::mutable_additional_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListAppsRequest.additional_fields)
  return &additional_fields_;
}

inline bool ListAppsRequest::has_sort_by() const {
  return sort_by_case() != SORT_BY_NOT_SET;
}
inline void ListAppsRequest::clear_has_sort_by() {
  _oneof_case_[0] = SORT_BY_NOT_SET;
}
inline ListAppsRequest::SortByCase ListAppsRequest::sort_by_case() const {
  return ListAppsRequest::SortByCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PostAppsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAppsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAppsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAppsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAppsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAppsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostAppsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAppsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostAppsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAppsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAppsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAppsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAppsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAppsRequest.user_app_id)
  return _msg;
}
inline void PostAppsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAppsRequest.user_app_id)
}

// repeated .clarifai.api.App apps = 2;
inline int PostAppsRequest::_internal_apps_size() const {
  return apps_.size();
}
inline int PostAppsRequest::apps_size() const {
  return _internal_apps_size();
}
inline ::clarifai::api::App* PostAppsRequest::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAppsRequest.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
PostAppsRequest::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostAppsRequest.apps)
  return &apps_;
}
inline const ::clarifai::api::App& PostAppsRequest::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::clarifai::api::App& PostAppsRequest::apps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAppsRequest.apps)
  return _internal_apps(index);
}
inline ::clarifai::api::App* PostAppsRequest::_internal_add_apps() {
  return apps_.Add();
}
inline ::clarifai::api::App* PostAppsRequest::add_apps() {
  ::clarifai::api::App* _add = _internal_add_apps();
  // @@protoc_insertion_point(field_add:clarifai.api.PostAppsRequest.apps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
PostAppsRequest::apps() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostAppsRequest.apps)
  return apps_;
}

// -------------------------------------------------------------------

// DeleteAppRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteAppRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteAppRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteAppRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteAppRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAppRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteAppRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteAppRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteAppRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAppRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAppRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAppRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteAppRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAppRequest.user_app_id)
  return _msg;
}
inline void DeleteAppRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAppRequest.user_app_id)
}

// -------------------------------------------------------------------

// PatchAppsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchAppsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchAppsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchAppsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchAppsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAppsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchAppsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchAppsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchAppsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchAppsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAppsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchAppsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchAppsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAppsRequest.user_app_id)
  return _msg;
}
inline void PatchAppsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAppsRequest.user_app_id)
}

// repeated .clarifai.api.App apps = 2;
inline int PatchAppsRequest::_internal_apps_size() const {
  return apps_.size();
}
inline int PatchAppsRequest::apps_size() const {
  return _internal_apps_size();
}
inline ::clarifai::api::App* PatchAppsRequest::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAppsRequest.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
PatchAppsRequest::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchAppsRequest.apps)
  return &apps_;
}
inline const ::clarifai::api::App& PatchAppsRequest::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::clarifai::api::App& PatchAppsRequest::apps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAppsRequest.apps)
  return _internal_apps(index);
}
inline ::clarifai::api::App* PatchAppsRequest::_internal_add_apps() {
  return apps_.Add();
}
inline ::clarifai::api::App* PatchAppsRequest::add_apps() {
  ::clarifai::api::App* _add = _internal_add_apps();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchAppsRequest.apps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
PatchAppsRequest::apps() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchAppsRequest.apps)
  return apps_;
}

// string action = 3;
inline void PatchAppsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchAppsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAppsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchAppsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAppsRequest.action)
}
inline std::string* PatchAppsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAppsRequest.action)
  return _s;
}
inline const std::string& PatchAppsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchAppsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchAppsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchAppsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAppsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchAppsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAppsRequest.action)
}

// .clarifai.api.PatchAction metadata_action = 4;
inline bool PatchAppsRequest::_internal_has_metadata_action() const {
  return this != internal_default_instance() && metadata_action_ != nullptr;
}
inline bool PatchAppsRequest::has_metadata_action() const {
  return _internal_has_metadata_action();
}
inline const ::clarifai::api::PatchAction& PatchAppsRequest::_internal_metadata_action() const {
  const ::clarifai::api::PatchAction* p = metadata_action_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::PatchAction&>(
      ::clarifai::api::_PatchAction_default_instance_);
}
inline const ::clarifai::api::PatchAction& PatchAppsRequest::metadata_action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAppsRequest.metadata_action)
  return _internal_metadata_action();
}
inline void PatchAppsRequest::unsafe_arena_set_allocated_metadata_action(
    ::clarifai::api::PatchAction* metadata_action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_action_);
  }
  metadata_action_ = metadata_action;
  if (metadata_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchAppsRequest.metadata_action)
}
inline ::clarifai::api::PatchAction* PatchAppsRequest::release_metadata_action() {
  
  ::clarifai::api::PatchAction* temp = metadata_action_;
  metadata_action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::PatchAction* PatchAppsRequest::unsafe_arena_release_metadata_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAppsRequest.metadata_action)
  
  ::clarifai::api::PatchAction* temp = metadata_action_;
  metadata_action_ = nullptr;
  return temp;
}
inline ::clarifai::api::PatchAction* PatchAppsRequest::_internal_mutable_metadata_action() {
  
  if (metadata_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::PatchAction>(GetArenaForAllocation());
    metadata_action_ = p;
  }
  return metadata_action_;
}
inline ::clarifai::api::PatchAction* PatchAppsRequest::mutable_metadata_action() {
  ::clarifai::api::PatchAction* _msg = _internal_mutable_metadata_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAppsRequest.metadata_action)
  return _msg;
}
inline void PatchAppsRequest::set_allocated_metadata_action(::clarifai::api::PatchAction* metadata_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_action_);
  }
  if (metadata_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_action));
    if (message_arena != submessage_arena) {
      metadata_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata_action, submessage_arena);
    }
    
  } else {
    
  }
  metadata_action_ = metadata_action;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAppsRequest.metadata_action)
}

// bool reindex = 5;
inline void PatchAppsRequest::clear_reindex() {
  reindex_ = false;
}
inline bool PatchAppsRequest::_internal_reindex() const {
  return reindex_;
}
inline bool PatchAppsRequest::reindex() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAppsRequest.reindex)
  return _internal_reindex();
}
inline void PatchAppsRequest::_internal_set_reindex(bool value) {
  
  reindex_ = value;
}
inline void PatchAppsRequest::set_reindex(bool value) {
  _internal_set_reindex(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAppsRequest.reindex)
}

// -------------------------------------------------------------------

// PostAppsSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAppsSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAppsSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAppsSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAppsSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAppsSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostAppsSearchesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAppsSearchesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostAppsSearchesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAppsSearchesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAppsSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAppsSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAppsSearchesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAppsSearchesRequest.user_app_id)
  return _msg;
}
inline void PostAppsSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAppsSearchesRequest.user_app_id)
}

// .clarifai.api.AppQuery app_query = 2;
inline bool PostAppsSearchesRequest::_internal_has_app_query() const {
  return this != internal_default_instance() && app_query_ != nullptr;
}
inline bool PostAppsSearchesRequest::has_app_query() const {
  return _internal_has_app_query();
}
inline const ::clarifai::api::AppQuery& PostAppsSearchesRequest::_internal_app_query() const {
  const ::clarifai::api::AppQuery* p = app_query_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::AppQuery&>(
      ::clarifai::api::_AppQuery_default_instance_);
}
inline const ::clarifai::api::AppQuery& PostAppsSearchesRequest::app_query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAppsSearchesRequest.app_query)
  return _internal_app_query();
}
inline void PostAppsSearchesRequest::unsafe_arena_set_allocated_app_query(
    ::clarifai::api::AppQuery* app_query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_query_);
  }
  app_query_ = app_query;
  if (app_query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAppsSearchesRequest.app_query)
}
inline ::clarifai::api::AppQuery* PostAppsSearchesRequest::release_app_query() {
  
  ::clarifai::api::AppQuery* temp = app_query_;
  app_query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::AppQuery* PostAppsSearchesRequest::unsafe_arena_release_app_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAppsSearchesRequest.app_query)
  
  ::clarifai::api::AppQuery* temp = app_query_;
  app_query_ = nullptr;
  return temp;
}
inline ::clarifai::api::AppQuery* PostAppsSearchesRequest::_internal_mutable_app_query() {
  
  if (app_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::AppQuery>(GetArenaForAllocation());
    app_query_ = p;
  }
  return app_query_;
}
inline ::clarifai::api::AppQuery* PostAppsSearchesRequest::mutable_app_query() {
  ::clarifai::api::AppQuery* _msg = _internal_mutable_app_query();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAppsSearchesRequest.app_query)
  return _msg;
}
inline void PostAppsSearchesRequest::set_allocated_app_query(::clarifai::api::AppQuery* app_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_query_);
  }
  if (app_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_query));
    if (message_arena != submessage_arena) {
      app_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_query, submessage_arena);
    }
    
  } else {
    
  }
  app_query_ = app_query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAppsSearchesRequest.app_query)
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostAppsSearchesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostAppsSearchesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostAppsSearchesRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostAppsSearchesRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Pagination&>(
      ::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostAppsSearchesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAppsSearchesRequest.pagination)
  return _internal_pagination();
}
inline void PostAppsSearchesRequest::unsafe_arena_set_allocated_pagination(
    ::clarifai::api::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAppsSearchesRequest.pagination)
}
inline ::clarifai::api::Pagination* PostAppsSearchesRequest::release_pagination() {
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Pagination* PostAppsSearchesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAppsSearchesRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostAppsSearchesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaForAllocation());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostAppsSearchesRequest::mutable_pagination() {
  ::clarifai::api::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAppsSearchesRequest.pagination)
  return _msg;
}
inline void PostAppsSearchesRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::clarifai::api::Pagination>::GetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAppsSearchesRequest.pagination)
}

// -------------------------------------------------------------------

// SingleAppResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleAppResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleAppResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleAppResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleAppResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAppResponse.status)
  return _internal_status();
}
inline void SingleAppResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleAppResponse.status)
}
inline ::clarifai::api::status::Status* SingleAppResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleAppResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAppResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleAppResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleAppResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAppResponse.status)
  return _msg;
}
inline void SingleAppResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAppResponse.status)
}

// .clarifai.api.App app = 2;
inline bool SingleAppResponse::_internal_has_app() const {
  return this != internal_default_instance() && app_ != nullptr;
}
inline bool SingleAppResponse::has_app() const {
  return _internal_has_app();
}
inline const ::clarifai::api::App& SingleAppResponse::_internal_app() const {
  const ::clarifai::api::App* p = app_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::App&>(
      ::clarifai::api::_App_default_instance_);
}
inline const ::clarifai::api::App& SingleAppResponse::app() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAppResponse.app)
  return _internal_app();
}
inline void SingleAppResponse::unsafe_arena_set_allocated_app(
    ::clarifai::api::App* app) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_);
  }
  app_ = app;
  if (app) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleAppResponse.app)
}
inline ::clarifai::api::App* SingleAppResponse::release_app() {
  
  ::clarifai::api::App* temp = app_;
  app_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::App* SingleAppResponse::unsafe_arena_release_app() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAppResponse.app)
  
  ::clarifai::api::App* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::clarifai::api::App* SingleAppResponse::_internal_mutable_app() {
  
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::App>(GetArenaForAllocation());
    app_ = p;
  }
  return app_;
}
inline ::clarifai::api::App* SingleAppResponse::mutable_app() {
  ::clarifai::api::App* _msg = _internal_mutable_app();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAppResponse.app)
  return _msg;
}
inline void SingleAppResponse::set_allocated_app(::clarifai::api::App* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_);
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app));
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAppResponse.app)
}

// -------------------------------------------------------------------

// MultiAppResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiAppResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiAppResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiAppResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiAppResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAppResponse.status)
  return _internal_status();
}
inline void MultiAppResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiAppResponse.status)
}
inline ::clarifai::api::status::Status* MultiAppResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiAppResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiAppResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiAppResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiAppResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAppResponse.status)
  return _msg;
}
inline void MultiAppResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiAppResponse.status)
}

// repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiAppResponse::_internal_apps_size() const {
  return apps_.size();
}
inline int MultiAppResponse::apps_size() const {
  return _internal_apps_size();
}
inline ::clarifai::api::App* MultiAppResponse::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAppResponse.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
MultiAppResponse::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiAppResponse.apps)
  return &apps_;
}
inline const ::clarifai::api::App& MultiAppResponse::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::clarifai::api::App& MultiAppResponse::apps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAppResponse.apps)
  return _internal_apps(index);
}
inline ::clarifai::api::App* MultiAppResponse::_internal_add_apps() {
  return apps_.Add();
}
inline ::clarifai::api::App* MultiAppResponse::add_apps() {
  ::clarifai::api::App* _add = _internal_add_apps();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiAppResponse.apps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
MultiAppResponse::apps() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiAppResponse.apps)
  return apps_;
}

// -------------------------------------------------------------------

// ListCollaboratorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListCollaboratorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListCollaboratorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListCollaboratorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListCollaboratorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollaboratorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListCollaboratorsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListCollaboratorsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListCollaboratorsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListCollaboratorsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListCollaboratorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListCollaboratorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListCollaboratorsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListCollaboratorsRequest.user_app_id)
  return _msg;
}
inline void ListCollaboratorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListCollaboratorsRequest.user_app_id)
}

// bool list_all_collaborators = 2;
inline void ListCollaboratorsRequest::clear_list_all_collaborators() {
  list_all_collaborators_ = false;
}
inline bool ListCollaboratorsRequest::_internal_list_all_collaborators() const {
  return list_all_collaborators_;
}
inline bool ListCollaboratorsRequest::list_all_collaborators() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollaboratorsRequest.list_all_collaborators)
  return _internal_list_all_collaborators();
}
inline void ListCollaboratorsRequest::_internal_set_list_all_collaborators(bool value) {
  
  list_all_collaborators_ = value;
}
inline void ListCollaboratorsRequest::set_list_all_collaborators(bool value) {
  _internal_set_list_all_collaborators(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListCollaboratorsRequest.list_all_collaborators)
}

// -------------------------------------------------------------------

// PostCollaboratorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostCollaboratorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostCollaboratorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostCollaboratorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostCollaboratorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostCollaboratorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostCollaboratorsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostCollaboratorsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostCollaboratorsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostCollaboratorsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostCollaboratorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostCollaboratorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostCollaboratorsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostCollaboratorsRequest.user_app_id)
  return _msg;
}
inline void PostCollaboratorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostCollaboratorsRequest.user_app_id)
}

// repeated .clarifai.api.Collaborator collaborators = 2;
inline int PostCollaboratorsRequest::_internal_collaborators_size() const {
  return collaborators_.size();
}
inline int PostCollaboratorsRequest::collaborators_size() const {
  return _internal_collaborators_size();
}
inline ::clarifai::api::Collaborator* PostCollaboratorsRequest::mutable_collaborators(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostCollaboratorsRequest.collaborators)
  return collaborators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >*
PostCollaboratorsRequest::mutable_collaborators() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostCollaboratorsRequest.collaborators)
  return &collaborators_;
}
inline const ::clarifai::api::Collaborator& PostCollaboratorsRequest::_internal_collaborators(int index) const {
  return collaborators_.Get(index);
}
inline const ::clarifai::api::Collaborator& PostCollaboratorsRequest::collaborators(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostCollaboratorsRequest.collaborators)
  return _internal_collaborators(index);
}
inline ::clarifai::api::Collaborator* PostCollaboratorsRequest::_internal_add_collaborators() {
  return collaborators_.Add();
}
inline ::clarifai::api::Collaborator* PostCollaboratorsRequest::add_collaborators() {
  ::clarifai::api::Collaborator* _add = _internal_add_collaborators();
  // @@protoc_insertion_point(field_add:clarifai.api.PostCollaboratorsRequest.collaborators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >&
PostCollaboratorsRequest::collaborators() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostCollaboratorsRequest.collaborators)
  return collaborators_;
}

// -------------------------------------------------------------------

// PatchCollaboratorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchCollaboratorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchCollaboratorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchCollaboratorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchCollaboratorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCollaboratorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchCollaboratorsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchCollaboratorsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchCollaboratorsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchCollaboratorsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchCollaboratorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchCollaboratorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchCollaboratorsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCollaboratorsRequest.user_app_id)
  return _msg;
}
inline void PatchCollaboratorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchCollaboratorsRequest.user_app_id)
}

// repeated .clarifai.api.Collaborator collaborators = 2;
inline int PatchCollaboratorsRequest::_internal_collaborators_size() const {
  return collaborators_.size();
}
inline int PatchCollaboratorsRequest::collaborators_size() const {
  return _internal_collaborators_size();
}
inline ::clarifai::api::Collaborator* PatchCollaboratorsRequest::mutable_collaborators(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCollaboratorsRequest.collaborators)
  return collaborators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >*
PatchCollaboratorsRequest::mutable_collaborators() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchCollaboratorsRequest.collaborators)
  return &collaborators_;
}
inline const ::clarifai::api::Collaborator& PatchCollaboratorsRequest::_internal_collaborators(int index) const {
  return collaborators_.Get(index);
}
inline const ::clarifai::api::Collaborator& PatchCollaboratorsRequest::collaborators(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCollaboratorsRequest.collaborators)
  return _internal_collaborators(index);
}
inline ::clarifai::api::Collaborator* PatchCollaboratorsRequest::_internal_add_collaborators() {
  return collaborators_.Add();
}
inline ::clarifai::api::Collaborator* PatchCollaboratorsRequest::add_collaborators() {
  ::clarifai::api::Collaborator* _add = _internal_add_collaborators();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchCollaboratorsRequest.collaborators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >&
PatchCollaboratorsRequest::collaborators() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchCollaboratorsRequest.collaborators)
  return collaborators_;
}

// string action = 3;
inline void PatchCollaboratorsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchCollaboratorsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCollaboratorsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchCollaboratorsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchCollaboratorsRequest.action)
}
inline std::string* PatchCollaboratorsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCollaboratorsRequest.action)
  return _s;
}
inline const std::string& PatchCollaboratorsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchCollaboratorsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchCollaboratorsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchCollaboratorsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchCollaboratorsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchCollaboratorsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchCollaboratorsRequest.action)
}

// -------------------------------------------------------------------

// DeleteCollaboratorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteCollaboratorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteCollaboratorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteCollaboratorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteCollaboratorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCollaboratorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteCollaboratorsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteCollaboratorsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteCollaboratorsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteCollaboratorsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteCollaboratorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteCollaboratorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteCollaboratorsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteCollaboratorsRequest.user_app_id)
  return _msg;
}
inline void DeleteCollaboratorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteCollaboratorsRequest.user_app_id)
}

// repeated string collaborator_ids = 2;
inline int DeleteCollaboratorsRequest::_internal_collaborator_ids_size() const {
  return collaborator_ids_.size();
}
inline int DeleteCollaboratorsRequest::collaborator_ids_size() const {
  return _internal_collaborator_ids_size();
}
inline void DeleteCollaboratorsRequest::clear_collaborator_ids() {
  collaborator_ids_.Clear();
}
inline std::string* DeleteCollaboratorsRequest::add_collaborator_ids() {
  std::string* _s = _internal_add_collaborator_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
  return _s;
}
inline const std::string& DeleteCollaboratorsRequest::_internal_collaborator_ids(int index) const {
  return collaborator_ids_.Get(index);
}
inline const std::string& DeleteCollaboratorsRequest::collaborator_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
  return _internal_collaborator_ids(index);
}
inline std::string* DeleteCollaboratorsRequest::mutable_collaborator_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
  return collaborator_ids_.Mutable(index);
}
inline void DeleteCollaboratorsRequest::set_collaborator_ids(int index, const std::string& value) {
  collaborator_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline void DeleteCollaboratorsRequest::set_collaborator_ids(int index, std::string&& value) {
  collaborator_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline void DeleteCollaboratorsRequest::set_collaborator_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collaborator_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline void DeleteCollaboratorsRequest::set_collaborator_ids(int index, const char* value, size_t size) {
  collaborator_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline std::string* DeleteCollaboratorsRequest::_internal_add_collaborator_ids() {
  return collaborator_ids_.Add();
}
inline void DeleteCollaboratorsRequest::add_collaborator_ids(const std::string& value) {
  collaborator_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline void DeleteCollaboratorsRequest::add_collaborator_ids(std::string&& value) {
  collaborator_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline void DeleteCollaboratorsRequest::add_collaborator_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collaborator_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline void DeleteCollaboratorsRequest::add_collaborator_ids(const char* value, size_t size) {
  collaborator_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteCollaboratorsRequest::collaborator_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
  return collaborator_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteCollaboratorsRequest::mutable_collaborator_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteCollaboratorsRequest.collaborator_ids)
  return &collaborator_ids_;
}

// repeated string user_emails = 3;
inline int DeleteCollaboratorsRequest::_internal_user_emails_size() const {
  return user_emails_.size();
}
inline int DeleteCollaboratorsRequest::user_emails_size() const {
  return _internal_user_emails_size();
}
inline void DeleteCollaboratorsRequest::clear_user_emails() {
  user_emails_.Clear();
}
inline std::string* DeleteCollaboratorsRequest::add_user_emails() {
  std::string* _s = _internal_add_user_emails();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteCollaboratorsRequest.user_emails)
  return _s;
}
inline const std::string& DeleteCollaboratorsRequest::_internal_user_emails(int index) const {
  return user_emails_.Get(index);
}
inline const std::string& DeleteCollaboratorsRequest::user_emails(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCollaboratorsRequest.user_emails)
  return _internal_user_emails(index);
}
inline std::string* DeleteCollaboratorsRequest::mutable_user_emails(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteCollaboratorsRequest.user_emails)
  return user_emails_.Mutable(index);
}
inline void DeleteCollaboratorsRequest::set_user_emails(int index, const std::string& value) {
  user_emails_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline void DeleteCollaboratorsRequest::set_user_emails(int index, std::string&& value) {
  user_emails_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline void DeleteCollaboratorsRequest::set_user_emails(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_emails_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline void DeleteCollaboratorsRequest::set_user_emails(int index, const char* value, size_t size) {
  user_emails_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline std::string* DeleteCollaboratorsRequest::_internal_add_user_emails() {
  return user_emails_.Add();
}
inline void DeleteCollaboratorsRequest::add_user_emails(const std::string& value) {
  user_emails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline void DeleteCollaboratorsRequest::add_user_emails(std::string&& value) {
  user_emails_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline void DeleteCollaboratorsRequest::add_user_emails(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_emails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline void DeleteCollaboratorsRequest::add_user_emails(const char* value, size_t size) {
  user_emails_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteCollaboratorsRequest.user_emails)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteCollaboratorsRequest::user_emails() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteCollaboratorsRequest.user_emails)
  return user_emails_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteCollaboratorsRequest::mutable_user_emails() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteCollaboratorsRequest.user_emails)
  return &user_emails_;
}

// -------------------------------------------------------------------

// MultiCollaboratorsResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiCollaboratorsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiCollaboratorsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiCollaboratorsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiCollaboratorsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiCollaboratorsResponse.status)
  return _internal_status();
}
inline void MultiCollaboratorsResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiCollaboratorsResponse.status)
}
inline ::clarifai::api::status::Status* MultiCollaboratorsResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiCollaboratorsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiCollaboratorsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiCollaboratorsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiCollaboratorsResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiCollaboratorsResponse.status)
  return _msg;
}
inline void MultiCollaboratorsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiCollaboratorsResponse.status)
}

// repeated .clarifai.api.Collaborator collaborators = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiCollaboratorsResponse::_internal_collaborators_size() const {
  return collaborators_.size();
}
inline int MultiCollaboratorsResponse::collaborators_size() const {
  return _internal_collaborators_size();
}
inline ::clarifai::api::Collaborator* MultiCollaboratorsResponse::mutable_collaborators(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiCollaboratorsResponse.collaborators)
  return collaborators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >*
MultiCollaboratorsResponse::mutable_collaborators() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiCollaboratorsResponse.collaborators)
  return &collaborators_;
}
inline const ::clarifai::api::Collaborator& MultiCollaboratorsResponse::_internal_collaborators(int index) const {
  return collaborators_.Get(index);
}
inline const ::clarifai::api::Collaborator& MultiCollaboratorsResponse::collaborators(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiCollaboratorsResponse.collaborators)
  return _internal_collaborators(index);
}
inline ::clarifai::api::Collaborator* MultiCollaboratorsResponse::_internal_add_collaborators() {
  return collaborators_.Add();
}
inline ::clarifai::api::Collaborator* MultiCollaboratorsResponse::add_collaborators() {
  ::clarifai::api::Collaborator* _add = _internal_add_collaborators();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiCollaboratorsResponse.collaborators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaborator >&
MultiCollaboratorsResponse::collaborators() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiCollaboratorsResponse.collaborators)
  return collaborators_;
}

// -------------------------------------------------------------------

// ListCollaborationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListCollaborationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListCollaborationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListCollaborationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListCollaborationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollaborationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListCollaborationsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListCollaborationsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListCollaborationsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListCollaborationsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListCollaborationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListCollaborationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListCollaborationsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListCollaborationsRequest.user_app_id)
  return _msg;
}
inline void ListCollaborationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListCollaborationsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListCollaborationsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListCollaborationsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListCollaborationsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollaborationsRequest.page)
  return _internal_page();
}
inline void ListCollaborationsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListCollaborationsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListCollaborationsRequest.page)
}

// uint32 per_page = 3;
inline void ListCollaborationsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListCollaborationsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListCollaborationsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollaborationsRequest.per_page)
  return _internal_per_page();
}
inline void ListCollaborationsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListCollaborationsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListCollaborationsRequest.per_page)
}

// -------------------------------------------------------------------

// MultiCollaborationsResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiCollaborationsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiCollaborationsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiCollaborationsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiCollaborationsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiCollaborationsResponse.status)
  return _internal_status();
}
inline void MultiCollaborationsResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiCollaborationsResponse.status)
}
inline ::clarifai::api::status::Status* MultiCollaborationsResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiCollaborationsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiCollaborationsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiCollaborationsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiCollaborationsResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiCollaborationsResponse.status)
  return _msg;
}
inline void MultiCollaborationsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiCollaborationsResponse.status)
}

// repeated .clarifai.api.Collaboration collaborations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiCollaborationsResponse::_internal_collaborations_size() const {
  return collaborations_.size();
}
inline int MultiCollaborationsResponse::collaborations_size() const {
  return _internal_collaborations_size();
}
inline ::clarifai::api::Collaboration* MultiCollaborationsResponse::mutable_collaborations(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiCollaborationsResponse.collaborations)
  return collaborations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaboration >*
MultiCollaborationsResponse::mutable_collaborations() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiCollaborationsResponse.collaborations)
  return &collaborations_;
}
inline const ::clarifai::api::Collaboration& MultiCollaborationsResponse::_internal_collaborations(int index) const {
  return collaborations_.Get(index);
}
inline const ::clarifai::api::Collaboration& MultiCollaborationsResponse::collaborations(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiCollaborationsResponse.collaborations)
  return _internal_collaborations(index);
}
inline ::clarifai::api::Collaboration* MultiCollaborationsResponse::_internal_add_collaborations() {
  return collaborations_.Add();
}
inline ::clarifai::api::Collaboration* MultiCollaborationsResponse::add_collaborations() {
  ::clarifai::api::Collaboration* _add = _internal_add_collaborations();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiCollaborationsResponse.collaborations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collaboration >&
MultiCollaborationsResponse::collaborations() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiCollaborationsResponse.collaborations)
  return collaborations_;
}

// -------------------------------------------------------------------

// GetStatusCodeRequest

// string status_code_id = 1;
inline void GetStatusCodeRequest::clear_status_code_id() {
  status_code_id_.ClearToEmpty();
}
inline const std::string& GetStatusCodeRequest::status_code_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetStatusCodeRequest.status_code_id)
  return _internal_status_code_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStatusCodeRequest::set_status_code_id(ArgT0&& arg0, ArgT... args) {
 
 status_code_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetStatusCodeRequest.status_code_id)
}
inline std::string* GetStatusCodeRequest::mutable_status_code_id() {
  std::string* _s = _internal_mutable_status_code_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetStatusCodeRequest.status_code_id)
  return _s;
}
inline const std::string& GetStatusCodeRequest::_internal_status_code_id() const {
  return status_code_id_.Get();
}
inline void GetStatusCodeRequest::_internal_set_status_code_id(const std::string& value) {
  
  status_code_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetStatusCodeRequest::_internal_mutable_status_code_id() {
  
  return status_code_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetStatusCodeRequest::release_status_code_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetStatusCodeRequest.status_code_id)
  return status_code_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetStatusCodeRequest::set_allocated_status_code_id(std::string* status_code_id) {
  if (status_code_id != nullptr) {
    
  } else {
    
  }
  status_code_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_code_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_code_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetStatusCodeRequest.status_code_id)
}

// -------------------------------------------------------------------

// ListStatusCodesRequest

// -------------------------------------------------------------------

// SingleStatusCodeResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleStatusCodeResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleStatusCodeResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleStatusCodeResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleStatusCodeResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleStatusCodeResponse.status)
  return _internal_status();
}
inline void SingleStatusCodeResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleStatusCodeResponse.status)
}
inline ::clarifai::api::status::Status* SingleStatusCodeResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleStatusCodeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleStatusCodeResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleStatusCodeResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleStatusCodeResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleStatusCodeResponse.status)
  return _msg;
}
inline void SingleStatusCodeResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleStatusCodeResponse.status)
}

// -------------------------------------------------------------------

// MultiStatusCodeResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiStatusCodeResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiStatusCodeResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiStatusCodeResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiStatusCodeResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiStatusCodeResponse.status)
  return _internal_status();
}
inline void MultiStatusCodeResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiStatusCodeResponse.status)
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiStatusCodeResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiStatusCodeResponse.status)
  return _msg;
}
inline void MultiStatusCodeResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiStatusCodeResponse.status)
}

// repeated .clarifai.api.status.Status statuses = 2;
inline int MultiStatusCodeResponse::_internal_statuses_size() const {
  return statuses_.size();
}
inline int MultiStatusCodeResponse::statuses_size() const {
  return _internal_statuses_size();
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiStatusCodeResponse.statuses)
  return statuses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >*
MultiStatusCodeResponse::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiStatusCodeResponse.statuses)
  return &statuses_;
}
inline const ::clarifai::api::status::Status& MultiStatusCodeResponse::_internal_statuses(int index) const {
  return statuses_.Get(index);
}
inline const ::clarifai::api::status::Status& MultiStatusCodeResponse::statuses(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiStatusCodeResponse.statuses)
  return _internal_statuses(index);
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::_internal_add_statuses() {
  return statuses_.Add();
}
inline ::clarifai::api::status::Status* MultiStatusCodeResponse::add_statuses() {
  ::clarifai::api::status::Status* _add = _internal_add_statuses();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiStatusCodeResponse.statuses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::status::Status >&
MultiStatusCodeResponse::statuses() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiStatusCodeResponse.statuses)
  return statuses_;
}

// -------------------------------------------------------------------

// GetConceptRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetConceptRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetConceptRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetConceptRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetConceptRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetConceptRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetConceptRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetConceptRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetConceptRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetConceptRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetConceptRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetConceptRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetConceptRequest.user_app_id)
  return _msg;
}
inline void GetConceptRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetConceptRequest.user_app_id)
}

// string concept_id = 2;
inline void GetConceptRequest::clear_concept_id() {
  concept_id_.ClearToEmpty();
}
inline const std::string& GetConceptRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptRequest.concept_id)
  return _internal_concept_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConceptRequest::set_concept_id(ArgT0&& arg0, ArgT... args) {
 
 concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetConceptRequest.concept_id)
}
inline std::string* GetConceptRequest::mutable_concept_id() {
  std::string* _s = _internal_mutable_concept_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetConceptRequest.concept_id)
  return _s;
}
inline const std::string& GetConceptRequest::_internal_concept_id() const {
  return concept_id_.Get();
}
inline void GetConceptRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetConceptRequest::_internal_mutable_concept_id() {
  
  return concept_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetConceptRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetConceptRequest.concept_id)
  return concept_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetConceptRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (concept_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetConceptRequest.concept_id)
}

// -------------------------------------------------------------------

// ListConceptsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListConceptsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListConceptsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListConceptsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListConceptsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListConceptsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListConceptsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListConceptsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListConceptsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListConceptsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListConceptsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptsRequest.user_app_id)
  return _msg;
}
inline void ListConceptsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListConceptsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListConceptsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListConceptsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptsRequest.page)
  return _internal_page();
}
inline void ListConceptsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListConceptsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptsRequest.page)
}

// uint32 per_page = 3;
inline void ListConceptsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListConceptsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListConceptsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptsRequest.per_page)
  return _internal_per_page();
}
inline void ListConceptsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListConceptsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptsRequest.per_page)
}

// -------------------------------------------------------------------

// PostConceptsSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostConceptsSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostConceptsSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostConceptsSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostConceptsSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptsSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostConceptsSearchesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostConceptsSearchesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostConceptsSearchesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptsSearchesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptsSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptsSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostConceptsSearchesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptsSearchesRequest.user_app_id)
  return _msg;
}
inline void PostConceptsSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptsSearchesRequest.user_app_id)
}

// .clarifai.api.ConceptQuery concept_query = 2;
inline bool PostConceptsSearchesRequest::_internal_has_concept_query() const {
  return this != internal_default_instance() && concept_query_ != nullptr;
}
inline bool PostConceptsSearchesRequest::has_concept_query() const {
  return _internal_has_concept_query();
}
inline const ::clarifai::api::ConceptQuery& PostConceptsSearchesRequest::_internal_concept_query() const {
  const ::clarifai::api::ConceptQuery* p = concept_query_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::ConceptQuery&>(
      ::clarifai::api::_ConceptQuery_default_instance_);
}
inline const ::clarifai::api::ConceptQuery& PostConceptsSearchesRequest::concept_query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptsSearchesRequest.concept_query)
  return _internal_concept_query();
}
inline void PostConceptsSearchesRequest::unsafe_arena_set_allocated_concept_query(
    ::clarifai::api::ConceptQuery* concept_query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_query_);
  }
  concept_query_ = concept_query;
  if (concept_query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostConceptsSearchesRequest.concept_query)
}
inline ::clarifai::api::ConceptQuery* PostConceptsSearchesRequest::release_concept_query() {
  
  ::clarifai::api::ConceptQuery* temp = concept_query_;
  concept_query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::ConceptQuery* PostConceptsSearchesRequest::unsafe_arena_release_concept_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptsSearchesRequest.concept_query)
  
  ::clarifai::api::ConceptQuery* temp = concept_query_;
  concept_query_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptQuery* PostConceptsSearchesRequest::_internal_mutable_concept_query() {
  
  if (concept_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptQuery>(GetArenaForAllocation());
    concept_query_ = p;
  }
  return concept_query_;
}
inline ::clarifai::api::ConceptQuery* PostConceptsSearchesRequest::mutable_concept_query() {
  ::clarifai::api::ConceptQuery* _msg = _internal_mutable_concept_query();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptsSearchesRequest.concept_query)
  return _msg;
}
inline void PostConceptsSearchesRequest::set_allocated_concept_query(::clarifai::api::ConceptQuery* concept_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_query_);
  }
  if (concept_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_query));
    if (message_arena != submessage_arena) {
      concept_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept_query, submessage_arena);
    }
    
  } else {
    
  }
  concept_query_ = concept_query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptsSearchesRequest.concept_query)
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostConceptsSearchesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostConceptsSearchesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostConceptsSearchesRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostConceptsSearchesRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Pagination&>(
      ::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostConceptsSearchesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptsSearchesRequest.pagination)
  return _internal_pagination();
}
inline void PostConceptsSearchesRequest::unsafe_arena_set_allocated_pagination(
    ::clarifai::api::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostConceptsSearchesRequest.pagination)
}
inline ::clarifai::api::Pagination* PostConceptsSearchesRequest::release_pagination() {
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Pagination* PostConceptsSearchesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptsSearchesRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostConceptsSearchesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaForAllocation());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostConceptsSearchesRequest::mutable_pagination() {
  ::clarifai::api::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptsSearchesRequest.pagination)
  return _msg;
}
inline void PostConceptsSearchesRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::clarifai::api::Pagination>::GetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptsSearchesRequest.pagination)
}

// -------------------------------------------------------------------

// PostConceptsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostConceptsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostConceptsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostConceptsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostConceptsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostConceptsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostConceptsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostConceptsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostConceptsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptsRequest.user_app_id)
  return _msg;
}
inline void PostConceptsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptsRequest.user_app_id)
}

// repeated .clarifai.api.Concept concepts = 2;
inline int PostConceptsRequest::_internal_concepts_size() const {
  return concepts_.size();
}
inline int PostConceptsRequest::concepts_size() const {
  return _internal_concepts_size();
}
inline ::clarifai::api::Concept* PostConceptsRequest::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptsRequest.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
PostConceptsRequest::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostConceptsRequest.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& PostConceptsRequest::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& PostConceptsRequest::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptsRequest.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* PostConceptsRequest::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* PostConceptsRequest::add_concepts() {
  ::clarifai::api::Concept* _add = _internal_add_concepts();
  // @@protoc_insertion_point(field_add:clarifai.api.PostConceptsRequest.concepts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
PostConceptsRequest::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostConceptsRequest.concepts)
  return concepts_;
}

// -------------------------------------------------------------------

// PatchConceptsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchConceptsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchConceptsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchConceptsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchConceptsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchConceptsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchConceptsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchConceptsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchConceptsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchConceptsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchConceptsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchConceptsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptsRequest.user_app_id)
  return _msg;
}
inline void PatchConceptsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchConceptsRequest.user_app_id)
}

// repeated .clarifai.api.Concept concepts = 2;
inline int PatchConceptsRequest::_internal_concepts_size() const {
  return concepts_.size();
}
inline int PatchConceptsRequest::concepts_size() const {
  return _internal_concepts_size();
}
inline ::clarifai::api::Concept* PatchConceptsRequest::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptsRequest.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
PatchConceptsRequest::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchConceptsRequest.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& PatchConceptsRequest::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& PatchConceptsRequest::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptsRequest.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* PatchConceptsRequest::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* PatchConceptsRequest::add_concepts() {
  ::clarifai::api::Concept* _add = _internal_add_concepts();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchConceptsRequest.concepts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
PatchConceptsRequest::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchConceptsRequest.concepts)
  return concepts_;
}

// string action = 3;
inline void PatchConceptsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchConceptsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchConceptsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchConceptsRequest.action)
}
inline std::string* PatchConceptsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptsRequest.action)
  return _s;
}
inline const std::string& PatchConceptsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchConceptsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchConceptsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchConceptsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchConceptsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchConceptsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchConceptsRequest.action)
}

// -------------------------------------------------------------------

// GetConceptCountsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetConceptCountsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetConceptCountsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetConceptCountsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetConceptCountsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptCountsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetConceptCountsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetConceptCountsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetConceptCountsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetConceptCountsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetConceptCountsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetConceptCountsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetConceptCountsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetConceptCountsRequest.user_app_id)
  return _msg;
}
inline void GetConceptCountsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetConceptCountsRequest.user_app_id)
}

// uint32 page = 2;
inline void GetConceptCountsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t GetConceptCountsRequest::_internal_page() const {
  return page_;
}
inline uint32_t GetConceptCountsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptCountsRequest.page)
  return _internal_page();
}
inline void GetConceptCountsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void GetConceptCountsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetConceptCountsRequest.page)
}

// uint32 per_page = 3;
inline void GetConceptCountsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t GetConceptCountsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t GetConceptCountsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptCountsRequest.per_page)
  return _internal_per_page();
}
inline void GetConceptCountsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void GetConceptCountsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetConceptCountsRequest.per_page)
}

// -------------------------------------------------------------------

// SingleConceptResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleConceptResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleConceptResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleConceptResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleConceptResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptResponse.status)
  return _internal_status();
}
inline void SingleConceptResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleConceptResponse.status)
}
inline ::clarifai::api::status::Status* SingleConceptResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleConceptResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleConceptResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleConceptResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptResponse.status)
  return _msg;
}
inline void SingleConceptResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptResponse.status)
}

// .clarifai.api.Concept concept = 2;
inline bool SingleConceptResponse::_internal_has_concept() const {
  return this != internal_default_instance() && concept_ != nullptr;
}
inline bool SingleConceptResponse::has_concept() const {
  return _internal_has_concept();
}
inline const ::clarifai::api::Concept& SingleConceptResponse::_internal_concept() const {
  const ::clarifai::api::Concept* p = concept_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Concept&>(
      ::clarifai::api::_Concept_default_instance_);
}
inline const ::clarifai::api::Concept& SingleConceptResponse::concept() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptResponse.concept)
  return _internal_concept();
}
inline void SingleConceptResponse::unsafe_arena_set_allocated_concept(
    ::clarifai::api::Concept* concept) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_);
  }
  concept_ = concept;
  if (concept) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleConceptResponse.concept)
}
inline ::clarifai::api::Concept* SingleConceptResponse::release_concept() {
  
  ::clarifai::api::Concept* temp = concept_;
  concept_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Concept* SingleConceptResponse::unsafe_arena_release_concept() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptResponse.concept)
  
  ::clarifai::api::Concept* temp = concept_;
  concept_ = nullptr;
  return temp;
}
inline ::clarifai::api::Concept* SingleConceptResponse::_internal_mutable_concept() {
  
  if (concept_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Concept>(GetArenaForAllocation());
    concept_ = p;
  }
  return concept_;
}
inline ::clarifai::api::Concept* SingleConceptResponse::mutable_concept() {
  ::clarifai::api::Concept* _msg = _internal_mutable_concept();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptResponse.concept)
  return _msg;
}
inline void SingleConceptResponse::set_allocated_concept(::clarifai::api::Concept* concept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_);
  }
  if (concept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept));
    if (message_arena != submessage_arena) {
      concept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept, submessage_arena);
    }
    
  } else {
    
  }
  concept_ = concept;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptResponse.concept)
}

// -------------------------------------------------------------------

// MultiConceptResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiConceptResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiConceptResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiConceptResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiConceptResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptResponse.status)
  return _internal_status();
}
inline void MultiConceptResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiConceptResponse.status)
}
inline ::clarifai::api::status::Status* MultiConceptResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiConceptResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiConceptResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptResponse.status)
  return _msg;
}
inline void MultiConceptResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiConceptResponse.status)
}

// repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiConceptResponse::_internal_concepts_size() const {
  return concepts_.size();
}
inline int MultiConceptResponse::concepts_size() const {
  return _internal_concepts_size();
}
inline ::clarifai::api::Concept* MultiConceptResponse::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptResponse.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
MultiConceptResponse::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiConceptResponse.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& MultiConceptResponse::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& MultiConceptResponse::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptResponse.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* MultiConceptResponse::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* MultiConceptResponse::add_concepts() {
  ::clarifai::api::Concept* _add = _internal_add_concepts();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptResponse.concepts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
MultiConceptResponse::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiConceptResponse.concepts)
  return concepts_;
}

// -------------------------------------------------------------------

// MultiConceptCountResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiConceptCountResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiConceptCountResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiConceptCountResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiConceptCountResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptCountResponse.status)
  return _internal_status();
}
inline void MultiConceptCountResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiConceptCountResponse.status)
}
inline ::clarifai::api::status::Status* MultiConceptCountResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptCountResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiConceptCountResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptCountResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiConceptCountResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptCountResponse.status)
  return _msg;
}
inline void MultiConceptCountResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiConceptCountResponse.status)
}

// repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiConceptCountResponse::_internal_concept_counts_size() const {
  return concept_counts_.size();
}
inline int MultiConceptCountResponse::concept_counts_size() const {
  return _internal_concept_counts_size();
}
inline ::clarifai::api::ConceptCount* MultiConceptCountResponse::mutable_concept_counts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptCountResponse.concept_counts)
  return concept_counts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptCount >*
MultiConceptCountResponse::mutable_concept_counts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiConceptCountResponse.concept_counts)
  return &concept_counts_;
}
inline const ::clarifai::api::ConceptCount& MultiConceptCountResponse::_internal_concept_counts(int index) const {
  return concept_counts_.Get(index);
}
inline const ::clarifai::api::ConceptCount& MultiConceptCountResponse::concept_counts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptCountResponse.concept_counts)
  return _internal_concept_counts(index);
}
inline ::clarifai::api::ConceptCount* MultiConceptCountResponse::_internal_add_concept_counts() {
  return concept_counts_.Add();
}
inline ::clarifai::api::ConceptCount* MultiConceptCountResponse::add_concept_counts() {
  ::clarifai::api::ConceptCount* _add = _internal_add_concept_counts();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptCountResponse.concept_counts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptCount >&
MultiConceptCountResponse::concept_counts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiConceptCountResponse.concept_counts)
  return concept_counts_;
}

// -------------------------------------------------------------------

// ListConceptRelationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListConceptRelationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListConceptRelationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListConceptRelationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListConceptRelationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptRelationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListConceptRelationsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListConceptRelationsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListConceptRelationsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListConceptRelationsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptRelationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListConceptRelationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListConceptRelationsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptRelationsRequest.user_app_id)
  return _msg;
}
inline void ListConceptRelationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptRelationsRequest.user_app_id)
}

// string concept_id = 2;
inline void ListConceptRelationsRequest::clear_concept_id() {
  concept_id_.ClearToEmpty();
}
inline const std::string& ListConceptRelationsRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptRelationsRequest.concept_id)
  return _internal_concept_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConceptRelationsRequest::set_concept_id(ArgT0&& arg0, ArgT... args) {
 
 concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptRelationsRequest.concept_id)
}
inline std::string* ListConceptRelationsRequest::mutable_concept_id() {
  std::string* _s = _internal_mutable_concept_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptRelationsRequest.concept_id)
  return _s;
}
inline const std::string& ListConceptRelationsRequest::_internal_concept_id() const {
  return concept_id_.Get();
}
inline void ListConceptRelationsRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConceptRelationsRequest::_internal_mutable_concept_id() {
  
  return concept_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConceptRelationsRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptRelationsRequest.concept_id)
  return concept_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConceptRelationsRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (concept_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptRelationsRequest.concept_id)
}

// string predicate = 3;
inline void ListConceptRelationsRequest::clear_predicate() {
  predicate_.ClearToEmpty();
}
inline const std::string& ListConceptRelationsRequest::predicate() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptRelationsRequest.predicate)
  return _internal_predicate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConceptRelationsRequest::set_predicate(ArgT0&& arg0, ArgT... args) {
 
 predicate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptRelationsRequest.predicate)
}
inline std::string* ListConceptRelationsRequest::mutable_predicate() {
  std::string* _s = _internal_mutable_predicate();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptRelationsRequest.predicate)
  return _s;
}
inline const std::string& ListConceptRelationsRequest::_internal_predicate() const {
  return predicate_.Get();
}
inline void ListConceptRelationsRequest::_internal_set_predicate(const std::string& value) {
  
  predicate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConceptRelationsRequest::_internal_mutable_predicate() {
  
  return predicate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConceptRelationsRequest::release_predicate() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptRelationsRequest.predicate)
  return predicate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConceptRelationsRequest::set_allocated_predicate(std::string* predicate) {
  if (predicate != nullptr) {
    
  } else {
    
  }
  predicate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), predicate,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (predicate_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    predicate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptRelationsRequest.predicate)
}

// string knowledge_graph_id = 4;
inline void ListConceptRelationsRequest::clear_knowledge_graph_id() {
  knowledge_graph_id_.ClearToEmpty();
}
inline const std::string& ListConceptRelationsRequest::knowledge_graph_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
  return _internal_knowledge_graph_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConceptRelationsRequest::set_knowledge_graph_id(ArgT0&& arg0, ArgT... args) {
 
 knowledge_graph_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
}
inline std::string* ListConceptRelationsRequest::mutable_knowledge_graph_id() {
  std::string* _s = _internal_mutable_knowledge_graph_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
  return _s;
}
inline const std::string& ListConceptRelationsRequest::_internal_knowledge_graph_id() const {
  return knowledge_graph_id_.Get();
}
inline void ListConceptRelationsRequest::_internal_set_knowledge_graph_id(const std::string& value) {
  
  knowledge_graph_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConceptRelationsRequest::_internal_mutable_knowledge_graph_id() {
  
  return knowledge_graph_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConceptRelationsRequest::release_knowledge_graph_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
  return knowledge_graph_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConceptRelationsRequest::set_allocated_knowledge_graph_id(std::string* knowledge_graph_id) {
  if (knowledge_graph_id != nullptr) {
    
  } else {
    
  }
  knowledge_graph_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), knowledge_graph_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (knowledge_graph_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptRelationsRequest.knowledge_graph_id)
}

// uint32 page = 5;
inline void ListConceptRelationsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListConceptRelationsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListConceptRelationsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptRelationsRequest.page)
  return _internal_page();
}
inline void ListConceptRelationsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListConceptRelationsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptRelationsRequest.page)
}

// uint32 per_page = 6;
inline void ListConceptRelationsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListConceptRelationsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListConceptRelationsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptRelationsRequest.per_page)
  return _internal_per_page();
}
inline void ListConceptRelationsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListConceptRelationsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptRelationsRequest.per_page)
}

// -------------------------------------------------------------------

// PostConceptRelationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostConceptRelationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostConceptRelationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostConceptRelationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostConceptRelationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptRelationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostConceptRelationsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostConceptRelationsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostConceptRelationsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptRelationsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptRelationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptRelationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostConceptRelationsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptRelationsRequest.user_app_id)
  return _msg;
}
inline void PostConceptRelationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptRelationsRequest.user_app_id)
}

// string concept_id = 2;
inline void PostConceptRelationsRequest::clear_concept_id() {
  concept_id_.ClearToEmpty();
}
inline const std::string& PostConceptRelationsRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptRelationsRequest.concept_id)
  return _internal_concept_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostConceptRelationsRequest::set_concept_id(ArgT0&& arg0, ArgT... args) {
 
 concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostConceptRelationsRequest.concept_id)
}
inline std::string* PostConceptRelationsRequest::mutable_concept_id() {
  std::string* _s = _internal_mutable_concept_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptRelationsRequest.concept_id)
  return _s;
}
inline const std::string& PostConceptRelationsRequest::_internal_concept_id() const {
  return concept_id_.Get();
}
inline void PostConceptRelationsRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostConceptRelationsRequest::_internal_mutable_concept_id() {
  
  return concept_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostConceptRelationsRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptRelationsRequest.concept_id)
  return concept_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostConceptRelationsRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (concept_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptRelationsRequest.concept_id)
}

// repeated .clarifai.api.ConceptRelation concept_relations = 3;
inline int PostConceptRelationsRequest::_internal_concept_relations_size() const {
  return concept_relations_.size();
}
inline int PostConceptRelationsRequest::concept_relations_size() const {
  return _internal_concept_relations_size();
}
inline ::clarifai::api::ConceptRelation* PostConceptRelationsRequest::mutable_concept_relations(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptRelationsRequest.concept_relations)
  return concept_relations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >*
PostConceptRelationsRequest::mutable_concept_relations() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostConceptRelationsRequest.concept_relations)
  return &concept_relations_;
}
inline const ::clarifai::api::ConceptRelation& PostConceptRelationsRequest::_internal_concept_relations(int index) const {
  return concept_relations_.Get(index);
}
inline const ::clarifai::api::ConceptRelation& PostConceptRelationsRequest::concept_relations(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptRelationsRequest.concept_relations)
  return _internal_concept_relations(index);
}
inline ::clarifai::api::ConceptRelation* PostConceptRelationsRequest::_internal_add_concept_relations() {
  return concept_relations_.Add();
}
inline ::clarifai::api::ConceptRelation* PostConceptRelationsRequest::add_concept_relations() {
  ::clarifai::api::ConceptRelation* _add = _internal_add_concept_relations();
  // @@protoc_insertion_point(field_add:clarifai.api.PostConceptRelationsRequest.concept_relations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >&
PostConceptRelationsRequest::concept_relations() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostConceptRelationsRequest.concept_relations)
  return concept_relations_;
}

// -------------------------------------------------------------------

// DeleteConceptRelationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteConceptRelationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteConceptRelationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteConceptRelationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteConceptRelationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteConceptRelationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteConceptRelationsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteConceptRelationsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteConceptRelationsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteConceptRelationsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteConceptRelationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteConceptRelationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteConceptRelationsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteConceptRelationsRequest.user_app_id)
  return _msg;
}
inline void DeleteConceptRelationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteConceptRelationsRequest.user_app_id)
}

// string concept_id = 2;
inline void DeleteConceptRelationsRequest::clear_concept_id() {
  concept_id_.ClearToEmpty();
}
inline const std::string& DeleteConceptRelationsRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteConceptRelationsRequest.concept_id)
  return _internal_concept_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteConceptRelationsRequest::set_concept_id(ArgT0&& arg0, ArgT... args) {
 
 concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteConceptRelationsRequest.concept_id)
}
inline std::string* DeleteConceptRelationsRequest::mutable_concept_id() {
  std::string* _s = _internal_mutable_concept_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteConceptRelationsRequest.concept_id)
  return _s;
}
inline const std::string& DeleteConceptRelationsRequest::_internal_concept_id() const {
  return concept_id_.Get();
}
inline void DeleteConceptRelationsRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteConceptRelationsRequest::_internal_mutable_concept_id() {
  
  return concept_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteConceptRelationsRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteConceptRelationsRequest.concept_id)
  return concept_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteConceptRelationsRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (concept_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteConceptRelationsRequest.concept_id)
}

// repeated string ids = 3;
inline int DeleteConceptRelationsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteConceptRelationsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteConceptRelationsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteConceptRelationsRequest::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteConceptRelationsRequest.ids)
  return _s;
}
inline const std::string& DeleteConceptRelationsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteConceptRelationsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteConceptRelationsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteConceptRelationsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteConceptRelationsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteConceptRelationsRequest::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline void DeleteConceptRelationsRequest::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline void DeleteConceptRelationsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline void DeleteConceptRelationsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline std::string* DeleteConceptRelationsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteConceptRelationsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline void DeleteConceptRelationsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline void DeleteConceptRelationsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline void DeleteConceptRelationsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteConceptRelationsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteConceptRelationsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteConceptRelationsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteConceptRelationsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteConceptRelationsRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// ListKnowledgeGraphsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListKnowledgeGraphsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListKnowledgeGraphsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListKnowledgeGraphsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListKnowledgeGraphsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListKnowledgeGraphsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListKnowledgeGraphsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListKnowledgeGraphsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListKnowledgeGraphsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListKnowledgeGraphsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListKnowledgeGraphsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListKnowledgeGraphsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListKnowledgeGraphsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListKnowledgeGraphsRequest.user_app_id)
  return _msg;
}
inline void ListKnowledgeGraphsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListKnowledgeGraphsRequest.user_app_id)
}

// -------------------------------------------------------------------

// PostKnowledgeGraphsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostKnowledgeGraphsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostKnowledgeGraphsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostKnowledgeGraphsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostKnowledgeGraphsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostKnowledgeGraphsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostKnowledgeGraphsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostKnowledgeGraphsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostKnowledgeGraphsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostKnowledgeGraphsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostKnowledgeGraphsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostKnowledgeGraphsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKnowledgeGraphsRequest.user_app_id)
  return _msg;
}
inline void PostKnowledgeGraphsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostKnowledgeGraphsRequest.user_app_id)
}

// repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
inline int PostKnowledgeGraphsRequest::_internal_knowledge_graphs_size() const {
  return knowledge_graphs_.size();
}
inline int PostKnowledgeGraphsRequest::knowledge_graphs_size() const {
  return _internal_knowledge_graphs_size();
}
inline ::clarifai::api::KnowledgeGraph* PostKnowledgeGraphsRequest::mutable_knowledge_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKnowledgeGraphsRequest.knowledge_graphs)
  return knowledge_graphs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >*
PostKnowledgeGraphsRequest::mutable_knowledge_graphs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostKnowledgeGraphsRequest.knowledge_graphs)
  return &knowledge_graphs_;
}
inline const ::clarifai::api::KnowledgeGraph& PostKnowledgeGraphsRequest::_internal_knowledge_graphs(int index) const {
  return knowledge_graphs_.Get(index);
}
inline const ::clarifai::api::KnowledgeGraph& PostKnowledgeGraphsRequest::knowledge_graphs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKnowledgeGraphsRequest.knowledge_graphs)
  return _internal_knowledge_graphs(index);
}
inline ::clarifai::api::KnowledgeGraph* PostKnowledgeGraphsRequest::_internal_add_knowledge_graphs() {
  return knowledge_graphs_.Add();
}
inline ::clarifai::api::KnowledgeGraph* PostKnowledgeGraphsRequest::add_knowledge_graphs() {
  ::clarifai::api::KnowledgeGraph* _add = _internal_add_knowledge_graphs();
  // @@protoc_insertion_point(field_add:clarifai.api.PostKnowledgeGraphsRequest.knowledge_graphs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >&
PostKnowledgeGraphsRequest::knowledge_graphs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostKnowledgeGraphsRequest.knowledge_graphs)
  return knowledge_graphs_;
}

// -------------------------------------------------------------------

// PostConceptMappingJobsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostConceptMappingJobsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostConceptMappingJobsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostConceptMappingJobsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostConceptMappingJobsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptMappingJobsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostConceptMappingJobsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostConceptMappingJobsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostConceptMappingJobsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptMappingJobsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptMappingJobsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptMappingJobsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostConceptMappingJobsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptMappingJobsRequest.user_app_id)
  return _msg;
}
inline void PostConceptMappingJobsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptMappingJobsRequest.user_app_id)
}

// repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
inline int PostConceptMappingJobsRequest::_internal_concept_mapping_jobs_size() const {
  return concept_mapping_jobs_.size();
}
inline int PostConceptMappingJobsRequest::concept_mapping_jobs_size() const {
  return _internal_concept_mapping_jobs_size();
}
inline ::clarifai::api::ConceptMappingJob* PostConceptMappingJobsRequest::mutable_concept_mapping_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptMappingJobsRequest.concept_mapping_jobs)
  return concept_mapping_jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMappingJob >*
PostConceptMappingJobsRequest::mutable_concept_mapping_jobs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostConceptMappingJobsRequest.concept_mapping_jobs)
  return &concept_mapping_jobs_;
}
inline const ::clarifai::api::ConceptMappingJob& PostConceptMappingJobsRequest::_internal_concept_mapping_jobs(int index) const {
  return concept_mapping_jobs_.Get(index);
}
inline const ::clarifai::api::ConceptMappingJob& PostConceptMappingJobsRequest::concept_mapping_jobs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptMappingJobsRequest.concept_mapping_jobs)
  return _internal_concept_mapping_jobs(index);
}
inline ::clarifai::api::ConceptMappingJob* PostConceptMappingJobsRequest::_internal_add_concept_mapping_jobs() {
  return concept_mapping_jobs_.Add();
}
inline ::clarifai::api::ConceptMappingJob* PostConceptMappingJobsRequest::add_concept_mapping_jobs() {
  ::clarifai::api::ConceptMappingJob* _add = _internal_add_concept_mapping_jobs();
  // @@protoc_insertion_point(field_add:clarifai.api.PostConceptMappingJobsRequest.concept_mapping_jobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptMappingJob >&
PostConceptMappingJobsRequest::concept_mapping_jobs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostConceptMappingJobsRequest.concept_mapping_jobs)
  return concept_mapping_jobs_;
}

// -------------------------------------------------------------------

// MultiConceptRelationResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiConceptRelationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiConceptRelationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiConceptRelationResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiConceptRelationResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptRelationResponse.status)
  return _internal_status();
}
inline void MultiConceptRelationResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiConceptRelationResponse.status)
}
inline ::clarifai::api::status::Status* MultiConceptRelationResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptRelationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiConceptRelationResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptRelationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiConceptRelationResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptRelationResponse.status)
  return _msg;
}
inline void MultiConceptRelationResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiConceptRelationResponse.status)
}

// repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiConceptRelationResponse::_internal_concept_relations_size() const {
  return concept_relations_.size();
}
inline int MultiConceptRelationResponse::concept_relations_size() const {
  return _internal_concept_relations_size();
}
inline ::clarifai::api::ConceptRelation* MultiConceptRelationResponse::mutable_concept_relations(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptRelationResponse.concept_relations)
  return concept_relations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >*
MultiConceptRelationResponse::mutable_concept_relations() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiConceptRelationResponse.concept_relations)
  return &concept_relations_;
}
inline const ::clarifai::api::ConceptRelation& MultiConceptRelationResponse::_internal_concept_relations(int index) const {
  return concept_relations_.Get(index);
}
inline const ::clarifai::api::ConceptRelation& MultiConceptRelationResponse::concept_relations(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptRelationResponse.concept_relations)
  return _internal_concept_relations(index);
}
inline ::clarifai::api::ConceptRelation* MultiConceptRelationResponse::_internal_add_concept_relations() {
  return concept_relations_.Add();
}
inline ::clarifai::api::ConceptRelation* MultiConceptRelationResponse::add_concept_relations() {
  ::clarifai::api::ConceptRelation* _add = _internal_add_concept_relations();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptRelationResponse.concept_relations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptRelation >&
MultiConceptRelationResponse::concept_relations() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiConceptRelationResponse.concept_relations)
  return concept_relations_;
}

// -------------------------------------------------------------------

// MultiKnowledgeGraphResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiKnowledgeGraphResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiKnowledgeGraphResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiKnowledgeGraphResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiKnowledgeGraphResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiKnowledgeGraphResponse.status)
  return _internal_status();
}
inline void MultiKnowledgeGraphResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiKnowledgeGraphResponse.status)
}
inline ::clarifai::api::status::Status* MultiKnowledgeGraphResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiKnowledgeGraphResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiKnowledgeGraphResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiKnowledgeGraphResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiKnowledgeGraphResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiKnowledgeGraphResponse.status)
  return _msg;
}
inline void MultiKnowledgeGraphResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiKnowledgeGraphResponse.status)
}

// repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiKnowledgeGraphResponse::_internal_knowledge_graphs_size() const {
  return knowledge_graphs_.size();
}
inline int MultiKnowledgeGraphResponse::knowledge_graphs_size() const {
  return _internal_knowledge_graphs_size();
}
inline ::clarifai::api::KnowledgeGraph* MultiKnowledgeGraphResponse::mutable_knowledge_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiKnowledgeGraphResponse.knowledge_graphs)
  return knowledge_graphs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >*
MultiKnowledgeGraphResponse::mutable_knowledge_graphs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiKnowledgeGraphResponse.knowledge_graphs)
  return &knowledge_graphs_;
}
inline const ::clarifai::api::KnowledgeGraph& MultiKnowledgeGraphResponse::_internal_knowledge_graphs(int index) const {
  return knowledge_graphs_.Get(index);
}
inline const ::clarifai::api::KnowledgeGraph& MultiKnowledgeGraphResponse::knowledge_graphs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiKnowledgeGraphResponse.knowledge_graphs)
  return _internal_knowledge_graphs(index);
}
inline ::clarifai::api::KnowledgeGraph* MultiKnowledgeGraphResponse::_internal_add_knowledge_graphs() {
  return knowledge_graphs_.Add();
}
inline ::clarifai::api::KnowledgeGraph* MultiKnowledgeGraphResponse::add_knowledge_graphs() {
  ::clarifai::api::KnowledgeGraph* _add = _internal_add_knowledge_graphs();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiKnowledgeGraphResponse.knowledge_graphs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::KnowledgeGraph >&
MultiKnowledgeGraphResponse::knowledge_graphs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiKnowledgeGraphResponse.knowledge_graphs)
  return knowledge_graphs_;
}

// -------------------------------------------------------------------

// MultiConceptMappingJobResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiConceptMappingJobResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiConceptMappingJobResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiConceptMappingJobResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiConceptMappingJobResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptMappingJobResponse.status)
  return _internal_status();
}
inline void MultiConceptMappingJobResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiConceptMappingJobResponse.status)
}
inline ::clarifai::api::status::Status* MultiConceptMappingJobResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptMappingJobResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiConceptMappingJobResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptMappingJobResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiConceptMappingJobResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptMappingJobResponse.status)
  return _msg;
}
inline void MultiConceptMappingJobResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiConceptMappingJobResponse.status)
}

// repeated string ids = 2;
inline int MultiConceptMappingJobResponse::_internal_ids_size() const {
  return ids_.size();
}
inline int MultiConceptMappingJobResponse::ids_size() const {
  return _internal_ids_size();
}
inline void MultiConceptMappingJobResponse::clear_ids() {
  ids_.Clear();
}
inline std::string* MultiConceptMappingJobResponse::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiConceptMappingJobResponse.ids)
  return _s;
}
inline const std::string& MultiConceptMappingJobResponse::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& MultiConceptMappingJobResponse::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptMappingJobResponse.ids)
  return _internal_ids(index);
}
inline std::string* MultiConceptMappingJobResponse::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptMappingJobResponse.ids)
  return ids_.Mutable(index);
}
inline void MultiConceptMappingJobResponse::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline void MultiConceptMappingJobResponse::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline void MultiConceptMappingJobResponse::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline void MultiConceptMappingJobResponse::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline std::string* MultiConceptMappingJobResponse::_internal_add_ids() {
  return ids_.Add();
}
inline void MultiConceptMappingJobResponse::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline void MultiConceptMappingJobResponse::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline void MultiConceptMappingJobResponse::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline void MultiConceptMappingJobResponse::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiConceptMappingJobResponse.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiConceptMappingJobResponse::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiConceptMappingJobResponse.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiConceptMappingJobResponse::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiConceptMappingJobResponse.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// GetConceptLanguageRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetConceptLanguageRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetConceptLanguageRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetConceptLanguageRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetConceptLanguageRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptLanguageRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetConceptLanguageRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetConceptLanguageRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetConceptLanguageRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetConceptLanguageRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetConceptLanguageRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetConceptLanguageRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetConceptLanguageRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetConceptLanguageRequest.user_app_id)
  return _msg;
}
inline void GetConceptLanguageRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetConceptLanguageRequest.user_app_id)
}

// string concept_id = 2;
inline void GetConceptLanguageRequest::clear_concept_id() {
  concept_id_.ClearToEmpty();
}
inline const std::string& GetConceptLanguageRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptLanguageRequest.concept_id)
  return _internal_concept_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConceptLanguageRequest::set_concept_id(ArgT0&& arg0, ArgT... args) {
 
 concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetConceptLanguageRequest.concept_id)
}
inline std::string* GetConceptLanguageRequest::mutable_concept_id() {
  std::string* _s = _internal_mutable_concept_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetConceptLanguageRequest.concept_id)
  return _s;
}
inline const std::string& GetConceptLanguageRequest::_internal_concept_id() const {
  return concept_id_.Get();
}
inline void GetConceptLanguageRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetConceptLanguageRequest::_internal_mutable_concept_id() {
  
  return concept_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetConceptLanguageRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetConceptLanguageRequest.concept_id)
  return concept_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetConceptLanguageRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (concept_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetConceptLanguageRequest.concept_id)
}

// string language = 3;
inline void GetConceptLanguageRequest::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& GetConceptLanguageRequest::language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetConceptLanguageRequest.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConceptLanguageRequest::set_language(ArgT0&& arg0, ArgT... args) {
 
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetConceptLanguageRequest.language)
}
inline std::string* GetConceptLanguageRequest::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetConceptLanguageRequest.language)
  return _s;
}
inline const std::string& GetConceptLanguageRequest::_internal_language() const {
  return language_.Get();
}
inline void GetConceptLanguageRequest::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetConceptLanguageRequest::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetConceptLanguageRequest::release_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetConceptLanguageRequest.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetConceptLanguageRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetConceptLanguageRequest.language)
}

// -------------------------------------------------------------------

// ListConceptLanguagesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListConceptLanguagesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListConceptLanguagesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListConceptLanguagesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListConceptLanguagesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptLanguagesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListConceptLanguagesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListConceptLanguagesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListConceptLanguagesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListConceptLanguagesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptLanguagesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListConceptLanguagesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListConceptLanguagesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptLanguagesRequest.user_app_id)
  return _msg;
}
inline void ListConceptLanguagesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptLanguagesRequest.user_app_id)
}

// string concept_id = 2;
inline void ListConceptLanguagesRequest::clear_concept_id() {
  concept_id_.ClearToEmpty();
}
inline const std::string& ListConceptLanguagesRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptLanguagesRequest.concept_id)
  return _internal_concept_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConceptLanguagesRequest::set_concept_id(ArgT0&& arg0, ArgT... args) {
 
 concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptLanguagesRequest.concept_id)
}
inline std::string* ListConceptLanguagesRequest::mutable_concept_id() {
  std::string* _s = _internal_mutable_concept_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListConceptLanguagesRequest.concept_id)
  return _s;
}
inline const std::string& ListConceptLanguagesRequest::_internal_concept_id() const {
  return concept_id_.Get();
}
inline void ListConceptLanguagesRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConceptLanguagesRequest::_internal_mutable_concept_id() {
  
  return concept_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConceptLanguagesRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListConceptLanguagesRequest.concept_id)
  return concept_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConceptLanguagesRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (concept_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListConceptLanguagesRequest.concept_id)
}

// uint32 page = 3;
inline void ListConceptLanguagesRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListConceptLanguagesRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListConceptLanguagesRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptLanguagesRequest.page)
  return _internal_page();
}
inline void ListConceptLanguagesRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListConceptLanguagesRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptLanguagesRequest.page)
}

// uint32 per_page = 4;
inline void ListConceptLanguagesRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListConceptLanguagesRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListConceptLanguagesRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListConceptLanguagesRequest.per_page)
  return _internal_per_page();
}
inline void ListConceptLanguagesRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListConceptLanguagesRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListConceptLanguagesRequest.per_page)
}

// -------------------------------------------------------------------

// PatchConceptLanguagesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchConceptLanguagesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchConceptLanguagesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchConceptLanguagesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchConceptLanguagesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptLanguagesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchConceptLanguagesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchConceptLanguagesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchConceptLanguagesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchConceptLanguagesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchConceptLanguagesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchConceptLanguagesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchConceptLanguagesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptLanguagesRequest.user_app_id)
  return _msg;
}
inline void PatchConceptLanguagesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchConceptLanguagesRequest.user_app_id)
}

// string concept_id = 2;
inline void PatchConceptLanguagesRequest::clear_concept_id() {
  concept_id_.ClearToEmpty();
}
inline const std::string& PatchConceptLanguagesRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptLanguagesRequest.concept_id)
  return _internal_concept_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchConceptLanguagesRequest::set_concept_id(ArgT0&& arg0, ArgT... args) {
 
 concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchConceptLanguagesRequest.concept_id)
}
inline std::string* PatchConceptLanguagesRequest::mutable_concept_id() {
  std::string* _s = _internal_mutable_concept_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptLanguagesRequest.concept_id)
  return _s;
}
inline const std::string& PatchConceptLanguagesRequest::_internal_concept_id() const {
  return concept_id_.Get();
}
inline void PatchConceptLanguagesRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchConceptLanguagesRequest::_internal_mutable_concept_id() {
  
  return concept_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchConceptLanguagesRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchConceptLanguagesRequest.concept_id)
  return concept_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchConceptLanguagesRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (concept_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchConceptLanguagesRequest.concept_id)
}

// repeated .clarifai.api.ConceptLanguage concept_languages = 3;
inline int PatchConceptLanguagesRequest::_internal_concept_languages_size() const {
  return concept_languages_.size();
}
inline int PatchConceptLanguagesRequest::concept_languages_size() const {
  return _internal_concept_languages_size();
}
inline ::clarifai::api::ConceptLanguage* PatchConceptLanguagesRequest::mutable_concept_languages(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptLanguagesRequest.concept_languages)
  return concept_languages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >*
PatchConceptLanguagesRequest::mutable_concept_languages() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchConceptLanguagesRequest.concept_languages)
  return &concept_languages_;
}
inline const ::clarifai::api::ConceptLanguage& PatchConceptLanguagesRequest::_internal_concept_languages(int index) const {
  return concept_languages_.Get(index);
}
inline const ::clarifai::api::ConceptLanguage& PatchConceptLanguagesRequest::concept_languages(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptLanguagesRequest.concept_languages)
  return _internal_concept_languages(index);
}
inline ::clarifai::api::ConceptLanguage* PatchConceptLanguagesRequest::_internal_add_concept_languages() {
  return concept_languages_.Add();
}
inline ::clarifai::api::ConceptLanguage* PatchConceptLanguagesRequest::add_concept_languages() {
  ::clarifai::api::ConceptLanguage* _add = _internal_add_concept_languages();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchConceptLanguagesRequest.concept_languages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >&
PatchConceptLanguagesRequest::concept_languages() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchConceptLanguagesRequest.concept_languages)
  return concept_languages_;
}

// string action = 4;
inline void PatchConceptLanguagesRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchConceptLanguagesRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchConceptLanguagesRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchConceptLanguagesRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchConceptLanguagesRequest.action)
}
inline std::string* PatchConceptLanguagesRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchConceptLanguagesRequest.action)
  return _s;
}
inline const std::string& PatchConceptLanguagesRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchConceptLanguagesRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchConceptLanguagesRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchConceptLanguagesRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchConceptLanguagesRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchConceptLanguagesRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchConceptLanguagesRequest.action)
}

// -------------------------------------------------------------------

// PostConceptLanguagesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostConceptLanguagesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostConceptLanguagesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostConceptLanguagesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostConceptLanguagesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptLanguagesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostConceptLanguagesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostConceptLanguagesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostConceptLanguagesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptLanguagesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptLanguagesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostConceptLanguagesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostConceptLanguagesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptLanguagesRequest.user_app_id)
  return _msg;
}
inline void PostConceptLanguagesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptLanguagesRequest.user_app_id)
}

// string concept_id = 2;
inline void PostConceptLanguagesRequest::clear_concept_id() {
  concept_id_.ClearToEmpty();
}
inline const std::string& PostConceptLanguagesRequest::concept_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptLanguagesRequest.concept_id)
  return _internal_concept_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostConceptLanguagesRequest::set_concept_id(ArgT0&& arg0, ArgT... args) {
 
 concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostConceptLanguagesRequest.concept_id)
}
inline std::string* PostConceptLanguagesRequest::mutable_concept_id() {
  std::string* _s = _internal_mutable_concept_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptLanguagesRequest.concept_id)
  return _s;
}
inline const std::string& PostConceptLanguagesRequest::_internal_concept_id() const {
  return concept_id_.Get();
}
inline void PostConceptLanguagesRequest::_internal_set_concept_id(const std::string& value) {
  
  concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostConceptLanguagesRequest::_internal_mutable_concept_id() {
  
  return concept_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostConceptLanguagesRequest::release_concept_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostConceptLanguagesRequest.concept_id)
  return concept_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostConceptLanguagesRequest::set_allocated_concept_id(std::string* concept_id) {
  if (concept_id != nullptr) {
    
  } else {
    
  }
  concept_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (concept_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostConceptLanguagesRequest.concept_id)
}

// repeated .clarifai.api.ConceptLanguage concept_languages = 3;
inline int PostConceptLanguagesRequest::_internal_concept_languages_size() const {
  return concept_languages_.size();
}
inline int PostConceptLanguagesRequest::concept_languages_size() const {
  return _internal_concept_languages_size();
}
inline ::clarifai::api::ConceptLanguage* PostConceptLanguagesRequest::mutable_concept_languages(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostConceptLanguagesRequest.concept_languages)
  return concept_languages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >*
PostConceptLanguagesRequest::mutable_concept_languages() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostConceptLanguagesRequest.concept_languages)
  return &concept_languages_;
}
inline const ::clarifai::api::ConceptLanguage& PostConceptLanguagesRequest::_internal_concept_languages(int index) const {
  return concept_languages_.Get(index);
}
inline const ::clarifai::api::ConceptLanguage& PostConceptLanguagesRequest::concept_languages(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostConceptLanguagesRequest.concept_languages)
  return _internal_concept_languages(index);
}
inline ::clarifai::api::ConceptLanguage* PostConceptLanguagesRequest::_internal_add_concept_languages() {
  return concept_languages_.Add();
}
inline ::clarifai::api::ConceptLanguage* PostConceptLanguagesRequest::add_concept_languages() {
  ::clarifai::api::ConceptLanguage* _add = _internal_add_concept_languages();
  // @@protoc_insertion_point(field_add:clarifai.api.PostConceptLanguagesRequest.concept_languages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >&
PostConceptLanguagesRequest::concept_languages() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostConceptLanguagesRequest.concept_languages)
  return concept_languages_;
}

// -------------------------------------------------------------------

// SingleConceptLanguageResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleConceptLanguageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleConceptLanguageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleConceptLanguageResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleConceptLanguageResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptLanguageResponse.status)
  return _internal_status();
}
inline void SingleConceptLanguageResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleConceptLanguageResponse.status)
}
inline ::clarifai::api::status::Status* SingleConceptLanguageResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleConceptLanguageResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptLanguageResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleConceptLanguageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleConceptLanguageResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptLanguageResponse.status)
  return _msg;
}
inline void SingleConceptLanguageResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptLanguageResponse.status)
}

// .clarifai.api.ConceptLanguage concept_language = 2;
inline bool SingleConceptLanguageResponse::_internal_has_concept_language() const {
  return this != internal_default_instance() && concept_language_ != nullptr;
}
inline bool SingleConceptLanguageResponse::has_concept_language() const {
  return _internal_has_concept_language();
}
inline const ::clarifai::api::ConceptLanguage& SingleConceptLanguageResponse::_internal_concept_language() const {
  const ::clarifai::api::ConceptLanguage* p = concept_language_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::ConceptLanguage&>(
      ::clarifai::api::_ConceptLanguage_default_instance_);
}
inline const ::clarifai::api::ConceptLanguage& SingleConceptLanguageResponse::concept_language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleConceptLanguageResponse.concept_language)
  return _internal_concept_language();
}
inline void SingleConceptLanguageResponse::unsafe_arena_set_allocated_concept_language(
    ::clarifai::api::ConceptLanguage* concept_language) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_language_);
  }
  concept_language_ = concept_language;
  if (concept_language) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleConceptLanguageResponse.concept_language)
}
inline ::clarifai::api::ConceptLanguage* SingleConceptLanguageResponse::release_concept_language() {
  
  ::clarifai::api::ConceptLanguage* temp = concept_language_;
  concept_language_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::ConceptLanguage* SingleConceptLanguageResponse::unsafe_arena_release_concept_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleConceptLanguageResponse.concept_language)
  
  ::clarifai::api::ConceptLanguage* temp = concept_language_;
  concept_language_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptLanguage* SingleConceptLanguageResponse::_internal_mutable_concept_language() {
  
  if (concept_language_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptLanguage>(GetArenaForAllocation());
    concept_language_ = p;
  }
  return concept_language_;
}
inline ::clarifai::api::ConceptLanguage* SingleConceptLanguageResponse::mutable_concept_language() {
  ::clarifai::api::ConceptLanguage* _msg = _internal_mutable_concept_language();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleConceptLanguageResponse.concept_language)
  return _msg;
}
inline void SingleConceptLanguageResponse::set_allocated_concept_language(::clarifai::api::ConceptLanguage* concept_language) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_language_);
  }
  if (concept_language) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concept_language));
    if (message_arena != submessage_arena) {
      concept_language = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept_language, submessage_arena);
    }
    
  } else {
    
  }
  concept_language_ = concept_language;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleConceptLanguageResponse.concept_language)
}

// -------------------------------------------------------------------

// MultiConceptLanguageResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiConceptLanguageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiConceptLanguageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiConceptLanguageResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiConceptLanguageResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptLanguageResponse.status)
  return _internal_status();
}
inline void MultiConceptLanguageResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiConceptLanguageResponse.status)
}
inline ::clarifai::api::status::Status* MultiConceptLanguageResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptLanguageResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiConceptLanguageResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiConceptLanguageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiConceptLanguageResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptLanguageResponse.status)
  return _msg;
}
inline void MultiConceptLanguageResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiConceptLanguageResponse.status)
}

// repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiConceptLanguageResponse::_internal_concept_languages_size() const {
  return concept_languages_.size();
}
inline int MultiConceptLanguageResponse::concept_languages_size() const {
  return _internal_concept_languages_size();
}
inline ::clarifai::api::ConceptLanguage* MultiConceptLanguageResponse::mutable_concept_languages(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiConceptLanguageResponse.concept_languages)
  return concept_languages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >*
MultiConceptLanguageResponse::mutable_concept_languages() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiConceptLanguageResponse.concept_languages)
  return &concept_languages_;
}
inline const ::clarifai::api::ConceptLanguage& MultiConceptLanguageResponse::_internal_concept_languages(int index) const {
  return concept_languages_.Get(index);
}
inline const ::clarifai::api::ConceptLanguage& MultiConceptLanguageResponse::concept_languages(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiConceptLanguageResponse.concept_languages)
  return _internal_concept_languages(index);
}
inline ::clarifai::api::ConceptLanguage* MultiConceptLanguageResponse::_internal_add_concept_languages() {
  return concept_languages_.Add();
}
inline ::clarifai::api::ConceptLanguage* MultiConceptLanguageResponse::add_concept_languages() {
  ::clarifai::api::ConceptLanguage* _add = _internal_add_concept_languages();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiConceptLanguageResponse.concept_languages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConceptLanguage >&
MultiConceptLanguageResponse::concept_languages() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiConceptLanguageResponse.concept_languages)
  return concept_languages_;
}

// -------------------------------------------------------------------

// GetInputRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetInputRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetInputRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetInputRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetInputRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetInputRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetInputRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetInputRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetInputRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetInputRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetInputRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetInputRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetInputRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetInputRequest.user_app_id)
  return _msg;
}
inline void GetInputRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetInputRequest.user_app_id)
}

// string input_id = 2;
inline void GetInputRequest::clear_input_id() {
  input_id_.ClearToEmpty();
}
inline const std::string& GetInputRequest::input_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetInputRequest.input_id)
  return _internal_input_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInputRequest::set_input_id(ArgT0&& arg0, ArgT... args) {
 
 input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetInputRequest.input_id)
}
inline std::string* GetInputRequest::mutable_input_id() {
  std::string* _s = _internal_mutable_input_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetInputRequest.input_id)
  return _s;
}
inline const std::string& GetInputRequest::_internal_input_id() const {
  return input_id_.Get();
}
inline void GetInputRequest::_internal_set_input_id(const std::string& value) {
  
  input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInputRequest::_internal_mutable_input_id() {
  
  return input_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInputRequest::release_input_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetInputRequest.input_id)
  return input_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetInputRequest::set_allocated_input_id(std::string* input_id) {
  if (input_id != nullptr) {
    
  } else {
    
  }
  input_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetInputRequest.input_id)
}

// -------------------------------------------------------------------

// GetInputSamplesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetInputSamplesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetInputSamplesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetInputSamplesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetInputSamplesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetInputSamplesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetInputSamplesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetInputSamplesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetInputSamplesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetInputSamplesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetInputSamplesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetInputSamplesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetInputSamplesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetInputSamplesRequest.user_app_id)
  return _msg;
}
inline void GetInputSamplesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetInputSamplesRequest.user_app_id)
}

// string task_id = 2;
inline void GetInputSamplesRequest::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& GetInputSamplesRequest::task_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetInputSamplesRequest.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInputSamplesRequest::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetInputSamplesRequest.task_id)
}
inline std::string* GetInputSamplesRequest::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetInputSamplesRequest.task_id)
  return _s;
}
inline const std::string& GetInputSamplesRequest::_internal_task_id() const {
  return task_id_.Get();
}
inline void GetInputSamplesRequest::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInputSamplesRequest::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInputSamplesRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetInputSamplesRequest.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetInputSamplesRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetInputSamplesRequest.task_id)
}

// repeated string user_ids = 3;
inline int GetInputSamplesRequest::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int GetInputSamplesRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void GetInputSamplesRequest::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* GetInputSamplesRequest::add_user_ids() {
  std::string* _s = _internal_add_user_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.GetInputSamplesRequest.user_ids)
  return _s;
}
inline const std::string& GetInputSamplesRequest::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& GetInputSamplesRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetInputSamplesRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* GetInputSamplesRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetInputSamplesRequest.user_ids)
  return user_ids_.Mutable(index);
}
inline void GetInputSamplesRequest::set_user_ids(int index, const std::string& value) {
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetInputSamplesRequest.user_ids)
}
inline void GetInputSamplesRequest::set_user_ids(int index, std::string&& value) {
  user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.GetInputSamplesRequest.user_ids)
}
inline void GetInputSamplesRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetInputSamplesRequest.user_ids)
}
inline void GetInputSamplesRequest::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetInputSamplesRequest.user_ids)
}
inline std::string* GetInputSamplesRequest::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void GetInputSamplesRequest::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.GetInputSamplesRequest.user_ids)
}
inline void GetInputSamplesRequest::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.GetInputSamplesRequest.user_ids)
}
inline void GetInputSamplesRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.GetInputSamplesRequest.user_ids)
}
inline void GetInputSamplesRequest::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.GetInputSamplesRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetInputSamplesRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.GetInputSamplesRequest.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetInputSamplesRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.GetInputSamplesRequest.user_ids)
  return &user_ids_;
}

// -------------------------------------------------------------------

// ListInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListInputsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListInputsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListInputsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListInputsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListInputsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListInputsRequest.user_app_id)
  return _msg;
}
inline void ListInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListInputsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListInputsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListInputsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListInputsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListInputsRequest.page)
  return _internal_page();
}
inline void ListInputsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListInputsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListInputsRequest.page)
}

// uint32 per_page = 3;
inline void ListInputsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListInputsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListInputsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListInputsRequest.per_page)
  return _internal_per_page();
}
inline void ListInputsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListInputsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListInputsRequest.per_page)
}

// .clarifai.api.status.Status status = 5;
inline bool ListInputsRequest::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListInputsRequest::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& ListInputsRequest::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& ListInputsRequest::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListInputsRequest.status)
  return _internal_status();
}
inline void ListInputsRequest::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListInputsRequest.status)
}
inline ::clarifai::api::status::Status* ListInputsRequest::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* ListInputsRequest::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListInputsRequest.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* ListInputsRequest::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* ListInputsRequest::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListInputsRequest.status)
  return _msg;
}
inline void ListInputsRequest::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListInputsRequest.status)
}

// repeated string ids = 4;
inline int ListInputsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int ListInputsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void ListInputsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* ListInputsRequest::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListInputsRequest.ids)
  return _s;
}
inline const std::string& ListInputsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& ListInputsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListInputsRequest.ids)
  return _internal_ids(index);
}
inline std::string* ListInputsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListInputsRequest.ids)
  return ids_.Mutable(index);
}
inline void ListInputsRequest::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListInputsRequest.ids)
}
inline void ListInputsRequest::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListInputsRequest.ids)
}
inline void ListInputsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListInputsRequest.ids)
}
inline void ListInputsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListInputsRequest.ids)
}
inline std::string* ListInputsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void ListInputsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListInputsRequest.ids)
}
inline void ListInputsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListInputsRequest.ids)
}
inline void ListInputsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListInputsRequest.ids)
}
inline void ListInputsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListInputsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListInputsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListInputsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListInputsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListInputsRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// StreamInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool StreamInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool StreamInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& StreamInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& StreamInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StreamInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void StreamInputsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.StreamInputsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* StreamInputsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* StreamInputsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.StreamInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* StreamInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* StreamInputsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.StreamInputsRequest.user_app_id)
  return _msg;
}
inline void StreamInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.StreamInputsRequest.user_app_id)
}

// uint32 per_page = 2;
inline void StreamInputsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t StreamInputsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t StreamInputsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StreamInputsRequest.per_page)
  return _internal_per_page();
}
inline void StreamInputsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void StreamInputsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.StreamInputsRequest.per_page)
}

// string last_id = 3;
inline void StreamInputsRequest::clear_last_id() {
  last_id_.ClearToEmpty();
}
inline const std::string& StreamInputsRequest::last_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StreamInputsRequest.last_id)
  return _internal_last_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamInputsRequest::set_last_id(ArgT0&& arg0, ArgT... args) {
 
 last_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.StreamInputsRequest.last_id)
}
inline std::string* StreamInputsRequest::mutable_last_id() {
  std::string* _s = _internal_mutable_last_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.StreamInputsRequest.last_id)
  return _s;
}
inline const std::string& StreamInputsRequest::_internal_last_id() const {
  return last_id_.Get();
}
inline void StreamInputsRequest::_internal_set_last_id(const std::string& value) {
  
  last_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamInputsRequest::_internal_mutable_last_id() {
  
  return last_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamInputsRequest::release_last_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.StreamInputsRequest.last_id)
  return last_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamInputsRequest::set_allocated_last_id(std::string* last_id) {
  if (last_id != nullptr) {
    
  } else {
    
  }
  last_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.StreamInputsRequest.last_id)
}

// bool descending = 4;
inline void StreamInputsRequest::clear_descending() {
  descending_ = false;
}
inline bool StreamInputsRequest::_internal_descending() const {
  return descending_;
}
inline bool StreamInputsRequest::descending() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StreamInputsRequest.descending)
  return _internal_descending();
}
inline void StreamInputsRequest::_internal_set_descending(bool value) {
  
  descending_ = value;
}
inline void StreamInputsRequest::set_descending(bool value) {
  _internal_set_descending(value);
  // @@protoc_insertion_point(field_set:clarifai.api.StreamInputsRequest.descending)
}

// -------------------------------------------------------------------

// PostInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostInputsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostInputsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostInputsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostInputsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostInputsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsRequest.user_app_id)
  return _msg;
}
inline void PostInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsRequest.user_app_id)
}

// repeated .clarifai.api.Input inputs = 2;
inline int PostInputsRequest::_internal_inputs_size() const {
  return inputs_.size();
}
inline int PostInputsRequest::inputs_size() const {
  return _internal_inputs_size();
}
inline ::clarifai::api::Input* PostInputsRequest::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsRequest.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
PostInputsRequest::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostInputsRequest.inputs)
  return &inputs_;
}
inline const ::clarifai::api::Input& PostInputsRequest::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::clarifai::api::Input& PostInputsRequest::inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsRequest.inputs)
  return _internal_inputs(index);
}
inline ::clarifai::api::Input* PostInputsRequest::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::clarifai::api::Input* PostInputsRequest::add_inputs() {
  ::clarifai::api::Input* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:clarifai.api.PostInputsRequest.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
PostInputsRequest::inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostInputsRequest.inputs)
  return inputs_;
}

// -------------------------------------------------------------------

// PatchInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchInputsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchInputsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchInputsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchInputsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchInputsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchInputsRequest.user_app_id)
  return _msg;
}
inline void PatchInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchInputsRequest.user_app_id)
}

// repeated .clarifai.api.Input inputs = 2;
inline int PatchInputsRequest::_internal_inputs_size() const {
  return inputs_.size();
}
inline int PatchInputsRequest::inputs_size() const {
  return _internal_inputs_size();
}
inline ::clarifai::api::Input* PatchInputsRequest::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchInputsRequest.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
PatchInputsRequest::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchInputsRequest.inputs)
  return &inputs_;
}
inline const ::clarifai::api::Input& PatchInputsRequest::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::clarifai::api::Input& PatchInputsRequest::inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchInputsRequest.inputs)
  return _internal_inputs(index);
}
inline ::clarifai::api::Input* PatchInputsRequest::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::clarifai::api::Input* PatchInputsRequest::add_inputs() {
  ::clarifai::api::Input* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchInputsRequest.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
PatchInputsRequest::inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchInputsRequest.inputs)
  return inputs_;
}

// string action = 3;
inline void PatchInputsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchInputsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchInputsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchInputsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchInputsRequest.action)
}
inline std::string* PatchInputsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchInputsRequest.action)
  return _s;
}
inline const std::string& PatchInputsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchInputsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchInputsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchInputsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchInputsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchInputsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchInputsRequest.action)
}

// -------------------------------------------------------------------

// DeleteInputRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteInputRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteInputRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteInputRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteInputRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteInputRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteInputRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteInputRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteInputRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteInputRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteInputRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteInputRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteInputRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteInputRequest.user_app_id)
  return _msg;
}
inline void DeleteInputRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteInputRequest.user_app_id)
}

// string input_id = 2;
inline void DeleteInputRequest::clear_input_id() {
  input_id_.ClearToEmpty();
}
inline const std::string& DeleteInputRequest::input_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteInputRequest.input_id)
  return _internal_input_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteInputRequest::set_input_id(ArgT0&& arg0, ArgT... args) {
 
 input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteInputRequest.input_id)
}
inline std::string* DeleteInputRequest::mutable_input_id() {
  std::string* _s = _internal_mutable_input_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteInputRequest.input_id)
  return _s;
}
inline const std::string& DeleteInputRequest::_internal_input_id() const {
  return input_id_.Get();
}
inline void DeleteInputRequest::_internal_set_input_id(const std::string& value) {
  
  input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteInputRequest::_internal_mutable_input_id() {
  
  return input_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteInputRequest::release_input_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteInputRequest.input_id)
  return input_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteInputRequest::set_allocated_input_id(std::string* input_id) {
  if (input_id != nullptr) {
    
  } else {
    
  }
  input_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteInputRequest.input_id)
}

// -------------------------------------------------------------------

// DeleteInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteInputsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteInputsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteInputsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteInputsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteInputsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteInputsRequest.user_app_id)
  return _msg;
}
inline void DeleteInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteInputsRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteInputsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteInputsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteInputsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteInputsRequest::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteInputsRequest.ids)
  return _s;
}
inline const std::string& DeleteInputsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteInputsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteInputsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteInputsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteInputsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteInputsRequest::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteInputsRequest.ids)
}
inline void DeleteInputsRequest::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteInputsRequest.ids)
}
inline void DeleteInputsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteInputsRequest.ids)
}
inline void DeleteInputsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteInputsRequest.ids)
}
inline std::string* DeleteInputsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteInputsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteInputsRequest.ids)
}
inline void DeleteInputsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteInputsRequest.ids)
}
inline void DeleteInputsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteInputsRequest.ids)
}
inline void DeleteInputsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteInputsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteInputsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteInputsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteInputsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteInputsRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// SingleInputResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleInputResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleInputResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleInputResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleInputResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleInputResponse.status)
  return _internal_status();
}
inline void SingleInputResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleInputResponse.status)
}
inline ::clarifai::api::status::Status* SingleInputResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleInputResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleInputResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleInputResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleInputResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleInputResponse.status)
  return _msg;
}
inline void SingleInputResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleInputResponse.status)
}

// .clarifai.api.Input input = 2;
inline bool SingleInputResponse::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool SingleInputResponse::has_input() const {
  return _internal_has_input();
}
inline const ::clarifai::api::Input& SingleInputResponse::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Input&>(
      ::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& SingleInputResponse::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleInputResponse.input)
  return _internal_input();
}
inline void SingleInputResponse::unsafe_arena_set_allocated_input(
    ::clarifai::api::Input* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleInputResponse.input)
}
inline ::clarifai::api::Input* SingleInputResponse::release_input() {
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Input* SingleInputResponse::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleInputResponse.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* SingleInputResponse::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* SingleInputResponse::mutable_input() {
  ::clarifai::api::Input* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleInputResponse.input)
  return _msg;
}
inline void SingleInputResponse::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input));
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleInputResponse.input)
}

// -------------------------------------------------------------------

// MultiInputResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiInputResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiInputResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiInputResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiInputResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiInputResponse.status)
  return _internal_status();
}
inline void MultiInputResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiInputResponse.status)
}
inline ::clarifai::api::status::Status* MultiInputResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiInputResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiInputResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiInputResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiInputResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiInputResponse.status)
  return _msg;
}
inline void MultiInputResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiInputResponse.status)
}

// repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiInputResponse::_internal_inputs_size() const {
  return inputs_.size();
}
inline int MultiInputResponse::inputs_size() const {
  return _internal_inputs_size();
}
inline ::clarifai::api::Input* MultiInputResponse::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiInputResponse.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
MultiInputResponse::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiInputResponse.inputs)
  return &inputs_;
}
inline const ::clarifai::api::Input& MultiInputResponse::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::clarifai::api::Input& MultiInputResponse::inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiInputResponse.inputs)
  return _internal_inputs(index);
}
inline ::clarifai::api::Input* MultiInputResponse::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::clarifai::api::Input* MultiInputResponse::add_inputs() {
  ::clarifai::api::Input* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiInputResponse.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
MultiInputResponse::inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiInputResponse.inputs)
  return inputs_;
}

// -------------------------------------------------------------------

// MultiInputAnnotationResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiInputAnnotationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiInputAnnotationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiInputAnnotationResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiInputAnnotationResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiInputAnnotationResponse.status)
  return _internal_status();
}
inline void MultiInputAnnotationResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiInputAnnotationResponse.status)
}
inline ::clarifai::api::status::Status* MultiInputAnnotationResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiInputAnnotationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiInputAnnotationResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiInputAnnotationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiInputAnnotationResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiInputAnnotationResponse.status)
  return _msg;
}
inline void MultiInputAnnotationResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiInputAnnotationResponse.status)
}

// repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiInputAnnotationResponse::_internal_hits_size() const {
  return hits_.size();
}
inline int MultiInputAnnotationResponse::hits_size() const {
  return _internal_hits_size();
}
inline ::clarifai::api::Hit* MultiInputAnnotationResponse::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiInputAnnotationResponse.hits)
  return hits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >*
MultiInputAnnotationResponse::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiInputAnnotationResponse.hits)
  return &hits_;
}
inline const ::clarifai::api::Hit& MultiInputAnnotationResponse::_internal_hits(int index) const {
  return hits_.Get(index);
}
inline const ::clarifai::api::Hit& MultiInputAnnotationResponse::hits(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiInputAnnotationResponse.hits)
  return _internal_hits(index);
}
inline ::clarifai::api::Hit* MultiInputAnnotationResponse::_internal_add_hits() {
  return hits_.Add();
}
inline ::clarifai::api::Hit* MultiInputAnnotationResponse::add_hits() {
  ::clarifai::api::Hit* _add = _internal_add_hits();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiInputAnnotationResponse.hits)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >&
MultiInputAnnotationResponse::hits() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiInputAnnotationResponse.hits)
  return hits_;
}

// -------------------------------------------------------------------

// SingleInputCountResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleInputCountResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleInputCountResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleInputCountResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleInputCountResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleInputCountResponse.status)
  return _internal_status();
}
inline void SingleInputCountResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleInputCountResponse.status)
}
inline ::clarifai::api::status::Status* SingleInputCountResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleInputCountResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleInputCountResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleInputCountResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleInputCountResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleInputCountResponse.status)
  return _msg;
}
inline void SingleInputCountResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleInputCountResponse.status)
}

// .clarifai.api.InputCount counts = 2;
inline bool SingleInputCountResponse::_internal_has_counts() const {
  return this != internal_default_instance() && counts_ != nullptr;
}
inline bool SingleInputCountResponse::has_counts() const {
  return _internal_has_counts();
}
inline const ::clarifai::api::InputCount& SingleInputCountResponse::_internal_counts() const {
  const ::clarifai::api::InputCount* p = counts_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::InputCount&>(
      ::clarifai::api::_InputCount_default_instance_);
}
inline const ::clarifai::api::InputCount& SingleInputCountResponse::counts() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleInputCountResponse.counts)
  return _internal_counts();
}
inline void SingleInputCountResponse::unsafe_arena_set_allocated_counts(
    ::clarifai::api::InputCount* counts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counts_);
  }
  counts_ = counts;
  if (counts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleInputCountResponse.counts)
}
inline ::clarifai::api::InputCount* SingleInputCountResponse::release_counts() {
  
  ::clarifai::api::InputCount* temp = counts_;
  counts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::InputCount* SingleInputCountResponse::unsafe_arena_release_counts() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleInputCountResponse.counts)
  
  ::clarifai::api::InputCount* temp = counts_;
  counts_ = nullptr;
  return temp;
}
inline ::clarifai::api::InputCount* SingleInputCountResponse::_internal_mutable_counts() {
  
  if (counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::InputCount>(GetArenaForAllocation());
    counts_ = p;
  }
  return counts_;
}
inline ::clarifai::api::InputCount* SingleInputCountResponse::mutable_counts() {
  ::clarifai::api::InputCount* _msg = _internal_mutable_counts();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleInputCountResponse.counts)
  return _msg;
}
inline void SingleInputCountResponse::set_allocated_counts(::clarifai::api::InputCount* counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(counts_);
  }
  if (counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counts));
    if (message_arena != submessage_arena) {
      counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counts, submessage_arena);
    }
    
  } else {
    
  }
  counts_ = counts;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleInputCountResponse.counts)
}

// -------------------------------------------------------------------

// GetInputCountRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetInputCountRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetInputCountRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetInputCountRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetInputCountRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetInputCountRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetInputCountRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetInputCountRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetInputCountRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetInputCountRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetInputCountRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetInputCountRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetInputCountRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetInputCountRequest.user_app_id)
  return _msg;
}
inline void GetInputCountRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetInputCountRequest.user_app_id)
}

// -------------------------------------------------------------------

// ListDatasetsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListDatasetsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListDatasetsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListDatasetsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListDatasetsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListDatasetsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListDatasetsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListDatasetsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListDatasetsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListDatasetsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListDatasetsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListDatasetsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListDatasetsRequest.user_app_id)
  return _msg;
}
inline void ListDatasetsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListDatasetsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListDatasetsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListDatasetsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListDatasetsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetsRequest.page)
  return _internal_page();
}
inline void ListDatasetsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListDatasetsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetsRequest.page)
}

// uint32 per_page = 3;
inline void ListDatasetsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListDatasetsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListDatasetsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetsRequest.per_page)
  return _internal_per_page();
}
inline void ListDatasetsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListDatasetsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetsRequest.per_page)
}

// -------------------------------------------------------------------

// GetDatasetRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetDatasetRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetDatasetRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetDatasetRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetDatasetRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetDatasetRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetDatasetRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetDatasetRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetDatasetRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetDatasetRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetDatasetRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetDatasetRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetDatasetRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetDatasetRequest.user_app_id)
  return _msg;
}
inline void GetDatasetRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetDatasetRequest.user_app_id)
}

// string dataset_id = 2;
inline void GetDatasetRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty();
}
inline const std::string& GetDatasetRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetDatasetRequest.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDatasetRequest::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetDatasetRequest.dataset_id)
}
inline std::string* GetDatasetRequest::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetDatasetRequest.dataset_id)
  return _s;
}
inline const std::string& GetDatasetRequest::_internal_dataset_id() const {
  return dataset_id_.Get();
}
inline void GetDatasetRequest::_internal_set_dataset_id(const std::string& value) {
  
  dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDatasetRequest::_internal_mutable_dataset_id() {
  
  return dataset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDatasetRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetDatasetRequest.dataset_id)
  return dataset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDatasetRequest::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetDatasetRequest.dataset_id)
}

// -------------------------------------------------------------------

// PostDatasetsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostDatasetsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostDatasetsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostDatasetsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostDatasetsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostDatasetsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostDatasetsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostDatasetsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostDatasetsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostDatasetsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostDatasetsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostDatasetsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostDatasetsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostDatasetsRequest.user_app_id)
  return _msg;
}
inline void PostDatasetsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostDatasetsRequest.user_app_id)
}

// repeated .clarifai.api.Dataset datasets = 2;
inline int PostDatasetsRequest::_internal_datasets_size() const {
  return datasets_.size();
}
inline int PostDatasetsRequest::datasets_size() const {
  return _internal_datasets_size();
}
inline ::clarifai::api::Dataset* PostDatasetsRequest::mutable_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostDatasetsRequest.datasets)
  return datasets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset >*
PostDatasetsRequest::mutable_datasets() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostDatasetsRequest.datasets)
  return &datasets_;
}
inline const ::clarifai::api::Dataset& PostDatasetsRequest::_internal_datasets(int index) const {
  return datasets_.Get(index);
}
inline const ::clarifai::api::Dataset& PostDatasetsRequest::datasets(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostDatasetsRequest.datasets)
  return _internal_datasets(index);
}
inline ::clarifai::api::Dataset* PostDatasetsRequest::_internal_add_datasets() {
  return datasets_.Add();
}
inline ::clarifai::api::Dataset* PostDatasetsRequest::add_datasets() {
  ::clarifai::api::Dataset* _add = _internal_add_datasets();
  // @@protoc_insertion_point(field_add:clarifai.api.PostDatasetsRequest.datasets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset >&
PostDatasetsRequest::datasets() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostDatasetsRequest.datasets)
  return datasets_;
}

// -------------------------------------------------------------------

// PatchDatasetsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchDatasetsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchDatasetsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchDatasetsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchDatasetsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchDatasetsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchDatasetsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchDatasetsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchDatasetsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchDatasetsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchDatasetsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchDatasetsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchDatasetsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchDatasetsRequest.user_app_id)
  return _msg;
}
inline void PatchDatasetsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchDatasetsRequest.user_app_id)
}

// repeated .clarifai.api.Dataset datasets = 2;
inline int PatchDatasetsRequest::_internal_datasets_size() const {
  return datasets_.size();
}
inline int PatchDatasetsRequest::datasets_size() const {
  return _internal_datasets_size();
}
inline ::clarifai::api::Dataset* PatchDatasetsRequest::mutable_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchDatasetsRequest.datasets)
  return datasets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset >*
PatchDatasetsRequest::mutable_datasets() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchDatasetsRequest.datasets)
  return &datasets_;
}
inline const ::clarifai::api::Dataset& PatchDatasetsRequest::_internal_datasets(int index) const {
  return datasets_.Get(index);
}
inline const ::clarifai::api::Dataset& PatchDatasetsRequest::datasets(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchDatasetsRequest.datasets)
  return _internal_datasets(index);
}
inline ::clarifai::api::Dataset* PatchDatasetsRequest::_internal_add_datasets() {
  return datasets_.Add();
}
inline ::clarifai::api::Dataset* PatchDatasetsRequest::add_datasets() {
  ::clarifai::api::Dataset* _add = _internal_add_datasets();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchDatasetsRequest.datasets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset >&
PatchDatasetsRequest::datasets() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchDatasetsRequest.datasets)
  return datasets_;
}

// string action = 3;
inline void PatchDatasetsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchDatasetsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchDatasetsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchDatasetsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchDatasetsRequest.action)
}
inline std::string* PatchDatasetsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchDatasetsRequest.action)
  return _s;
}
inline const std::string& PatchDatasetsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchDatasetsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchDatasetsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchDatasetsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchDatasetsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchDatasetsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchDatasetsRequest.action)
}

// -------------------------------------------------------------------

// DeleteDatasetsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteDatasetsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteDatasetsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteDatasetsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteDatasetsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteDatasetsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteDatasetsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteDatasetsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteDatasetsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteDatasetsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteDatasetsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteDatasetsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteDatasetsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteDatasetsRequest.user_app_id)
  return _msg;
}
inline void DeleteDatasetsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteDatasetsRequest.user_app_id)
}

// repeated string dataset_ids = 2;
inline int DeleteDatasetsRequest::_internal_dataset_ids_size() const {
  return dataset_ids_.size();
}
inline int DeleteDatasetsRequest::dataset_ids_size() const {
  return _internal_dataset_ids_size();
}
inline void DeleteDatasetsRequest::clear_dataset_ids() {
  dataset_ids_.Clear();
}
inline std::string* DeleteDatasetsRequest::add_dataset_ids() {
  std::string* _s = _internal_add_dataset_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteDatasetsRequest.dataset_ids)
  return _s;
}
inline const std::string& DeleteDatasetsRequest::_internal_dataset_ids(int index) const {
  return dataset_ids_.Get(index);
}
inline const std::string& DeleteDatasetsRequest::dataset_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteDatasetsRequest.dataset_ids)
  return _internal_dataset_ids(index);
}
inline std::string* DeleteDatasetsRequest::mutable_dataset_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteDatasetsRequest.dataset_ids)
  return dataset_ids_.Mutable(index);
}
inline void DeleteDatasetsRequest::set_dataset_ids(int index, const std::string& value) {
  dataset_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteDatasetsRequest.dataset_ids)
}
inline void DeleteDatasetsRequest::set_dataset_ids(int index, std::string&& value) {
  dataset_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteDatasetsRequest.dataset_ids)
}
inline void DeleteDatasetsRequest::set_dataset_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dataset_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteDatasetsRequest.dataset_ids)
}
inline void DeleteDatasetsRequest::set_dataset_ids(int index, const char* value, size_t size) {
  dataset_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteDatasetsRequest.dataset_ids)
}
inline std::string* DeleteDatasetsRequest::_internal_add_dataset_ids() {
  return dataset_ids_.Add();
}
inline void DeleteDatasetsRequest::add_dataset_ids(const std::string& value) {
  dataset_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteDatasetsRequest.dataset_ids)
}
inline void DeleteDatasetsRequest::add_dataset_ids(std::string&& value) {
  dataset_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteDatasetsRequest.dataset_ids)
}
inline void DeleteDatasetsRequest::add_dataset_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dataset_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteDatasetsRequest.dataset_ids)
}
inline void DeleteDatasetsRequest::add_dataset_ids(const char* value, size_t size) {
  dataset_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteDatasetsRequest.dataset_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteDatasetsRequest::dataset_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteDatasetsRequest.dataset_ids)
  return dataset_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteDatasetsRequest::mutable_dataset_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteDatasetsRequest.dataset_ids)
  return &dataset_ids_;
}

// -------------------------------------------------------------------

// MultiDatasetResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiDatasetResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiDatasetResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiDatasetResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiDatasetResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiDatasetResponse.status)
  return _internal_status();
}
inline void MultiDatasetResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiDatasetResponse.status)
}
inline ::clarifai::api::status::Status* MultiDatasetResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiDatasetResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiDatasetResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiDatasetResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiDatasetResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiDatasetResponse.status)
  return _msg;
}
inline void MultiDatasetResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiDatasetResponse.status)
}

// repeated .clarifai.api.Dataset datasets = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiDatasetResponse::_internal_datasets_size() const {
  return datasets_.size();
}
inline int MultiDatasetResponse::datasets_size() const {
  return _internal_datasets_size();
}
inline ::clarifai::api::Dataset* MultiDatasetResponse::mutable_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiDatasetResponse.datasets)
  return datasets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset >*
MultiDatasetResponse::mutable_datasets() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiDatasetResponse.datasets)
  return &datasets_;
}
inline const ::clarifai::api::Dataset& MultiDatasetResponse::_internal_datasets(int index) const {
  return datasets_.Get(index);
}
inline const ::clarifai::api::Dataset& MultiDatasetResponse::datasets(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiDatasetResponse.datasets)
  return _internal_datasets(index);
}
inline ::clarifai::api::Dataset* MultiDatasetResponse::_internal_add_datasets() {
  return datasets_.Add();
}
inline ::clarifai::api::Dataset* MultiDatasetResponse::add_datasets() {
  ::clarifai::api::Dataset* _add = _internal_add_datasets();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiDatasetResponse.datasets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Dataset >&
MultiDatasetResponse::datasets() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiDatasetResponse.datasets)
  return datasets_;
}

// -------------------------------------------------------------------

// SingleDatasetResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleDatasetResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleDatasetResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleDatasetResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleDatasetResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleDatasetResponse.status)
  return _internal_status();
}
inline void SingleDatasetResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleDatasetResponse.status)
}
inline ::clarifai::api::status::Status* SingleDatasetResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleDatasetResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleDatasetResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleDatasetResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleDatasetResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleDatasetResponse.status)
  return _msg;
}
inline void SingleDatasetResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleDatasetResponse.status)
}

// .clarifai.api.Dataset dataset = 2;
inline bool SingleDatasetResponse::_internal_has_dataset() const {
  return this != internal_default_instance() && dataset_ != nullptr;
}
inline bool SingleDatasetResponse::has_dataset() const {
  return _internal_has_dataset();
}
inline const ::clarifai::api::Dataset& SingleDatasetResponse::_internal_dataset() const {
  const ::clarifai::api::Dataset* p = dataset_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Dataset&>(
      ::clarifai::api::_Dataset_default_instance_);
}
inline const ::clarifai::api::Dataset& SingleDatasetResponse::dataset() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleDatasetResponse.dataset)
  return _internal_dataset();
}
inline void SingleDatasetResponse::unsafe_arena_set_allocated_dataset(
    ::clarifai::api::Dataset* dataset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_);
  }
  dataset_ = dataset;
  if (dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleDatasetResponse.dataset)
}
inline ::clarifai::api::Dataset* SingleDatasetResponse::release_dataset() {
  
  ::clarifai::api::Dataset* temp = dataset_;
  dataset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Dataset* SingleDatasetResponse::unsafe_arena_release_dataset() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleDatasetResponse.dataset)
  
  ::clarifai::api::Dataset* temp = dataset_;
  dataset_ = nullptr;
  return temp;
}
inline ::clarifai::api::Dataset* SingleDatasetResponse::_internal_mutable_dataset() {
  
  if (dataset_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Dataset>(GetArenaForAllocation());
    dataset_ = p;
  }
  return dataset_;
}
inline ::clarifai::api::Dataset* SingleDatasetResponse::mutable_dataset() {
  ::clarifai::api::Dataset* _msg = _internal_mutable_dataset();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleDatasetResponse.dataset)
  return _msg;
}
inline void SingleDatasetResponse::set_allocated_dataset(::clarifai::api::Dataset* dataset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_);
  }
  if (dataset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset));
    if (message_arena != submessage_arena) {
      dataset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataset, submessage_arena);
    }
    
  } else {
    
  }
  dataset_ = dataset;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleDatasetResponse.dataset)
}

// -------------------------------------------------------------------

// ListDatasetInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListDatasetInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListDatasetInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListDatasetInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListDatasetInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListDatasetInputsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListDatasetInputsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListDatasetInputsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListDatasetInputsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListDatasetInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListDatasetInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListDatasetInputsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListDatasetInputsRequest.user_app_id)
  return _msg;
}
inline void ListDatasetInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListDatasetInputsRequest.user_app_id)
}

// string dataset_id = 2;
inline void ListDatasetInputsRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty();
}
inline const std::string& ListDatasetInputsRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetInputsRequest.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDatasetInputsRequest::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetInputsRequest.dataset_id)
}
inline std::string* ListDatasetInputsRequest::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListDatasetInputsRequest.dataset_id)
  return _s;
}
inline const std::string& ListDatasetInputsRequest::_internal_dataset_id() const {
  return dataset_id_.Get();
}
inline void ListDatasetInputsRequest::_internal_set_dataset_id(const std::string& value) {
  
  dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListDatasetInputsRequest::_internal_mutable_dataset_id() {
  
  return dataset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListDatasetInputsRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListDatasetInputsRequest.dataset_id)
  return dataset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListDatasetInputsRequest::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListDatasetInputsRequest.dataset_id)
}

// uint32 page = 3;
inline void ListDatasetInputsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListDatasetInputsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListDatasetInputsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetInputsRequest.page)
  return _internal_page();
}
inline void ListDatasetInputsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListDatasetInputsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetInputsRequest.page)
}

// uint32 per_page = 4;
inline void ListDatasetInputsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListDatasetInputsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListDatasetInputsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetInputsRequest.per_page)
  return _internal_per_page();
}
inline void ListDatasetInputsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListDatasetInputsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetInputsRequest.per_page)
}

// -------------------------------------------------------------------

// GetDatasetInputRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetDatasetInputRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetDatasetInputRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetDatasetInputRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetDatasetInputRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetDatasetInputRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetDatasetInputRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetDatasetInputRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetDatasetInputRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetDatasetInputRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetDatasetInputRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetDatasetInputRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetDatasetInputRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetDatasetInputRequest.user_app_id)
  return _msg;
}
inline void GetDatasetInputRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetDatasetInputRequest.user_app_id)
}

// string dataset_id = 2;
inline void GetDatasetInputRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty();
}
inline const std::string& GetDatasetInputRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetDatasetInputRequest.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDatasetInputRequest::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetDatasetInputRequest.dataset_id)
}
inline std::string* GetDatasetInputRequest::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetDatasetInputRequest.dataset_id)
  return _s;
}
inline const std::string& GetDatasetInputRequest::_internal_dataset_id() const {
  return dataset_id_.Get();
}
inline void GetDatasetInputRequest::_internal_set_dataset_id(const std::string& value) {
  
  dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDatasetInputRequest::_internal_mutable_dataset_id() {
  
  return dataset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDatasetInputRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetDatasetInputRequest.dataset_id)
  return dataset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDatasetInputRequest::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetDatasetInputRequest.dataset_id)
}

// string input_id = 3;
inline void GetDatasetInputRequest::clear_input_id() {
  input_id_.ClearToEmpty();
}
inline const std::string& GetDatasetInputRequest::input_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetDatasetInputRequest.input_id)
  return _internal_input_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDatasetInputRequest::set_input_id(ArgT0&& arg0, ArgT... args) {
 
 input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetDatasetInputRequest.input_id)
}
inline std::string* GetDatasetInputRequest::mutable_input_id() {
  std::string* _s = _internal_mutable_input_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetDatasetInputRequest.input_id)
  return _s;
}
inline const std::string& GetDatasetInputRequest::_internal_input_id() const {
  return input_id_.Get();
}
inline void GetDatasetInputRequest::_internal_set_input_id(const std::string& value) {
  
  input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDatasetInputRequest::_internal_mutable_input_id() {
  
  return input_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDatasetInputRequest::release_input_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetDatasetInputRequest.input_id)
  return input_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDatasetInputRequest::set_allocated_input_id(std::string* input_id) {
  if (input_id != nullptr) {
    
  } else {
    
  }
  input_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetDatasetInputRequest.input_id)
}

// -------------------------------------------------------------------

// PostDatasetInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostDatasetInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostDatasetInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostDatasetInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostDatasetInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostDatasetInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostDatasetInputsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostDatasetInputsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostDatasetInputsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostDatasetInputsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostDatasetInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostDatasetInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostDatasetInputsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostDatasetInputsRequest.user_app_id)
  return _msg;
}
inline void PostDatasetInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostDatasetInputsRequest.user_app_id)
}

// string dataset_id = 2;
inline void PostDatasetInputsRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty();
}
inline const std::string& PostDatasetInputsRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostDatasetInputsRequest.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostDatasetInputsRequest::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostDatasetInputsRequest.dataset_id)
}
inline std::string* PostDatasetInputsRequest::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostDatasetInputsRequest.dataset_id)
  return _s;
}
inline const std::string& PostDatasetInputsRequest::_internal_dataset_id() const {
  return dataset_id_.Get();
}
inline void PostDatasetInputsRequest::_internal_set_dataset_id(const std::string& value) {
  
  dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostDatasetInputsRequest::_internal_mutable_dataset_id() {
  
  return dataset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostDatasetInputsRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostDatasetInputsRequest.dataset_id)
  return dataset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostDatasetInputsRequest::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostDatasetInputsRequest.dataset_id)
}

// repeated .clarifai.api.DatasetInput dataset_inputs = 3;
inline int PostDatasetInputsRequest::_internal_dataset_inputs_size() const {
  return dataset_inputs_.size();
}
inline int PostDatasetInputsRequest::dataset_inputs_size() const {
  return _internal_dataset_inputs_size();
}
inline ::clarifai::api::DatasetInput* PostDatasetInputsRequest::mutable_dataset_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostDatasetInputsRequest.dataset_inputs)
  return dataset_inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetInput >*
PostDatasetInputsRequest::mutable_dataset_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostDatasetInputsRequest.dataset_inputs)
  return &dataset_inputs_;
}
inline const ::clarifai::api::DatasetInput& PostDatasetInputsRequest::_internal_dataset_inputs(int index) const {
  return dataset_inputs_.Get(index);
}
inline const ::clarifai::api::DatasetInput& PostDatasetInputsRequest::dataset_inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostDatasetInputsRequest.dataset_inputs)
  return _internal_dataset_inputs(index);
}
inline ::clarifai::api::DatasetInput* PostDatasetInputsRequest::_internal_add_dataset_inputs() {
  return dataset_inputs_.Add();
}
inline ::clarifai::api::DatasetInput* PostDatasetInputsRequest::add_dataset_inputs() {
  ::clarifai::api::DatasetInput* _add = _internal_add_dataset_inputs();
  // @@protoc_insertion_point(field_add:clarifai.api.PostDatasetInputsRequest.dataset_inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetInput >&
PostDatasetInputsRequest::dataset_inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostDatasetInputsRequest.dataset_inputs)
  return dataset_inputs_;
}

// -------------------------------------------------------------------

// DeleteDatasetInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteDatasetInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteDatasetInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteDatasetInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteDatasetInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteDatasetInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteDatasetInputsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteDatasetInputsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteDatasetInputsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteDatasetInputsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteDatasetInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteDatasetInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteDatasetInputsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteDatasetInputsRequest.user_app_id)
  return _msg;
}
inline void DeleteDatasetInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteDatasetInputsRequest.user_app_id)
}

// string dataset_id = 2;
inline void DeleteDatasetInputsRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty();
}
inline const std::string& DeleteDatasetInputsRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteDatasetInputsRequest.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDatasetInputsRequest::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteDatasetInputsRequest.dataset_id)
}
inline std::string* DeleteDatasetInputsRequest::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteDatasetInputsRequest.dataset_id)
  return _s;
}
inline const std::string& DeleteDatasetInputsRequest::_internal_dataset_id() const {
  return dataset_id_.Get();
}
inline void DeleteDatasetInputsRequest::_internal_set_dataset_id(const std::string& value) {
  
  dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteDatasetInputsRequest::_internal_mutable_dataset_id() {
  
  return dataset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteDatasetInputsRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteDatasetInputsRequest.dataset_id)
  return dataset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteDatasetInputsRequest::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteDatasetInputsRequest.dataset_id)
}

// repeated string input_ids = 3;
inline int DeleteDatasetInputsRequest::_internal_input_ids_size() const {
  return input_ids_.size();
}
inline int DeleteDatasetInputsRequest::input_ids_size() const {
  return _internal_input_ids_size();
}
inline void DeleteDatasetInputsRequest::clear_input_ids() {
  input_ids_.Clear();
}
inline std::string* DeleteDatasetInputsRequest::add_input_ids() {
  std::string* _s = _internal_add_input_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteDatasetInputsRequest.input_ids)
  return _s;
}
inline const std::string& DeleteDatasetInputsRequest::_internal_input_ids(int index) const {
  return input_ids_.Get(index);
}
inline const std::string& DeleteDatasetInputsRequest::input_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteDatasetInputsRequest.input_ids)
  return _internal_input_ids(index);
}
inline std::string* DeleteDatasetInputsRequest::mutable_input_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteDatasetInputsRequest.input_ids)
  return input_ids_.Mutable(index);
}
inline void DeleteDatasetInputsRequest::set_input_ids(int index, const std::string& value) {
  input_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteDatasetInputsRequest.input_ids)
}
inline void DeleteDatasetInputsRequest::set_input_ids(int index, std::string&& value) {
  input_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteDatasetInputsRequest.input_ids)
}
inline void DeleteDatasetInputsRequest::set_input_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteDatasetInputsRequest.input_ids)
}
inline void DeleteDatasetInputsRequest::set_input_ids(int index, const char* value, size_t size) {
  input_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteDatasetInputsRequest.input_ids)
}
inline std::string* DeleteDatasetInputsRequest::_internal_add_input_ids() {
  return input_ids_.Add();
}
inline void DeleteDatasetInputsRequest::add_input_ids(const std::string& value) {
  input_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteDatasetInputsRequest.input_ids)
}
inline void DeleteDatasetInputsRequest::add_input_ids(std::string&& value) {
  input_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteDatasetInputsRequest.input_ids)
}
inline void DeleteDatasetInputsRequest::add_input_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteDatasetInputsRequest.input_ids)
}
inline void DeleteDatasetInputsRequest::add_input_ids(const char* value, size_t size) {
  input_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteDatasetInputsRequest.input_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteDatasetInputsRequest::input_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteDatasetInputsRequest.input_ids)
  return input_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteDatasetInputsRequest::mutable_input_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteDatasetInputsRequest.input_ids)
  return &input_ids_;
}

// -------------------------------------------------------------------

// MultiDatasetInputResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiDatasetInputResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiDatasetInputResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiDatasetInputResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiDatasetInputResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiDatasetInputResponse.status)
  return _internal_status();
}
inline void MultiDatasetInputResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiDatasetInputResponse.status)
}
inline ::clarifai::api::status::Status* MultiDatasetInputResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiDatasetInputResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiDatasetInputResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiDatasetInputResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiDatasetInputResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiDatasetInputResponse.status)
  return _msg;
}
inline void MultiDatasetInputResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiDatasetInputResponse.status)
}

// repeated .clarifai.api.DatasetInput dataset_inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiDatasetInputResponse::_internal_dataset_inputs_size() const {
  return dataset_inputs_.size();
}
inline int MultiDatasetInputResponse::dataset_inputs_size() const {
  return _internal_dataset_inputs_size();
}
inline ::clarifai::api::DatasetInput* MultiDatasetInputResponse::mutable_dataset_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiDatasetInputResponse.dataset_inputs)
  return dataset_inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetInput >*
MultiDatasetInputResponse::mutable_dataset_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiDatasetInputResponse.dataset_inputs)
  return &dataset_inputs_;
}
inline const ::clarifai::api::DatasetInput& MultiDatasetInputResponse::_internal_dataset_inputs(int index) const {
  return dataset_inputs_.Get(index);
}
inline const ::clarifai::api::DatasetInput& MultiDatasetInputResponse::dataset_inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiDatasetInputResponse.dataset_inputs)
  return _internal_dataset_inputs(index);
}
inline ::clarifai::api::DatasetInput* MultiDatasetInputResponse::_internal_add_dataset_inputs() {
  return dataset_inputs_.Add();
}
inline ::clarifai::api::DatasetInput* MultiDatasetInputResponse::add_dataset_inputs() {
  ::clarifai::api::DatasetInput* _add = _internal_add_dataset_inputs();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiDatasetInputResponse.dataset_inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetInput >&
MultiDatasetInputResponse::dataset_inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiDatasetInputResponse.dataset_inputs)
  return dataset_inputs_;
}

// -------------------------------------------------------------------

// SingleDatasetInputResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleDatasetInputResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleDatasetInputResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleDatasetInputResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleDatasetInputResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleDatasetInputResponse.status)
  return _internal_status();
}
inline void SingleDatasetInputResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleDatasetInputResponse.status)
}
inline ::clarifai::api::status::Status* SingleDatasetInputResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleDatasetInputResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleDatasetInputResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleDatasetInputResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleDatasetInputResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleDatasetInputResponse.status)
  return _msg;
}
inline void SingleDatasetInputResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleDatasetInputResponse.status)
}

// .clarifai.api.DatasetInput dataset_input = 2;
inline bool SingleDatasetInputResponse::_internal_has_dataset_input() const {
  return this != internal_default_instance() && dataset_input_ != nullptr;
}
inline bool SingleDatasetInputResponse::has_dataset_input() const {
  return _internal_has_dataset_input();
}
inline const ::clarifai::api::DatasetInput& SingleDatasetInputResponse::_internal_dataset_input() const {
  const ::clarifai::api::DatasetInput* p = dataset_input_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::DatasetInput&>(
      ::clarifai::api::_DatasetInput_default_instance_);
}
inline const ::clarifai::api::DatasetInput& SingleDatasetInputResponse::dataset_input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleDatasetInputResponse.dataset_input)
  return _internal_dataset_input();
}
inline void SingleDatasetInputResponse::unsafe_arena_set_allocated_dataset_input(
    ::clarifai::api::DatasetInput* dataset_input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_input_);
  }
  dataset_input_ = dataset_input;
  if (dataset_input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleDatasetInputResponse.dataset_input)
}
inline ::clarifai::api::DatasetInput* SingleDatasetInputResponse::release_dataset_input() {
  
  ::clarifai::api::DatasetInput* temp = dataset_input_;
  dataset_input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::DatasetInput* SingleDatasetInputResponse::unsafe_arena_release_dataset_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleDatasetInputResponse.dataset_input)
  
  ::clarifai::api::DatasetInput* temp = dataset_input_;
  dataset_input_ = nullptr;
  return temp;
}
inline ::clarifai::api::DatasetInput* SingleDatasetInputResponse::_internal_mutable_dataset_input() {
  
  if (dataset_input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::DatasetInput>(GetArenaForAllocation());
    dataset_input_ = p;
  }
  return dataset_input_;
}
inline ::clarifai::api::DatasetInput* SingleDatasetInputResponse::mutable_dataset_input() {
  ::clarifai::api::DatasetInput* _msg = _internal_mutable_dataset_input();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleDatasetInputResponse.dataset_input)
  return _msg;
}
inline void SingleDatasetInputResponse::set_allocated_dataset_input(::clarifai::api::DatasetInput* dataset_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_input_);
  }
  if (dataset_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_input));
    if (message_arena != submessage_arena) {
      dataset_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataset_input, submessage_arena);
    }
    
  } else {
    
  }
  dataset_input_ = dataset_input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleDatasetInputResponse.dataset_input)
}

// -------------------------------------------------------------------

// ListDatasetVersionsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListDatasetVersionsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListDatasetVersionsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListDatasetVersionsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListDatasetVersionsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetVersionsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListDatasetVersionsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListDatasetVersionsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListDatasetVersionsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListDatasetVersionsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListDatasetVersionsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListDatasetVersionsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListDatasetVersionsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListDatasetVersionsRequest.user_app_id)
  return _msg;
}
inline void ListDatasetVersionsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListDatasetVersionsRequest.user_app_id)
}

// string dataset_id = 2;
inline void ListDatasetVersionsRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty();
}
inline const std::string& ListDatasetVersionsRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetVersionsRequest.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDatasetVersionsRequest::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetVersionsRequest.dataset_id)
}
inline std::string* ListDatasetVersionsRequest::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListDatasetVersionsRequest.dataset_id)
  return _s;
}
inline const std::string& ListDatasetVersionsRequest::_internal_dataset_id() const {
  return dataset_id_.Get();
}
inline void ListDatasetVersionsRequest::_internal_set_dataset_id(const std::string& value) {
  
  dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListDatasetVersionsRequest::_internal_mutable_dataset_id() {
  
  return dataset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListDatasetVersionsRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListDatasetVersionsRequest.dataset_id)
  return dataset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListDatasetVersionsRequest::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListDatasetVersionsRequest.dataset_id)
}

// uint32 page = 3;
inline void ListDatasetVersionsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListDatasetVersionsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListDatasetVersionsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetVersionsRequest.page)
  return _internal_page();
}
inline void ListDatasetVersionsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListDatasetVersionsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetVersionsRequest.page)
}

// uint32 per_page = 4;
inline void ListDatasetVersionsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListDatasetVersionsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListDatasetVersionsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetVersionsRequest.per_page)
  return _internal_per_page();
}
inline void ListDatasetVersionsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListDatasetVersionsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetVersionsRequest.per_page)
}

// -------------------------------------------------------------------

// GetDatasetVersionRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetDatasetVersionRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetDatasetVersionRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetDatasetVersionRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetDatasetVersionRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetDatasetVersionRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetDatasetVersionRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetDatasetVersionRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetDatasetVersionRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetDatasetVersionRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetDatasetVersionRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetDatasetVersionRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetDatasetVersionRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetDatasetVersionRequest.user_app_id)
  return _msg;
}
inline void GetDatasetVersionRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetDatasetVersionRequest.user_app_id)
}

// string dataset_id = 2;
inline void GetDatasetVersionRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty();
}
inline const std::string& GetDatasetVersionRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetDatasetVersionRequest.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDatasetVersionRequest::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetDatasetVersionRequest.dataset_id)
}
inline std::string* GetDatasetVersionRequest::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetDatasetVersionRequest.dataset_id)
  return _s;
}
inline const std::string& GetDatasetVersionRequest::_internal_dataset_id() const {
  return dataset_id_.Get();
}
inline void GetDatasetVersionRequest::_internal_set_dataset_id(const std::string& value) {
  
  dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDatasetVersionRequest::_internal_mutable_dataset_id() {
  
  return dataset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDatasetVersionRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetDatasetVersionRequest.dataset_id)
  return dataset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDatasetVersionRequest::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetDatasetVersionRequest.dataset_id)
}

// string dataset_version_id = 3;
inline void GetDatasetVersionRequest::clear_dataset_version_id() {
  dataset_version_id_.ClearToEmpty();
}
inline const std::string& GetDatasetVersionRequest::dataset_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetDatasetVersionRequest.dataset_version_id)
  return _internal_dataset_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDatasetVersionRequest::set_dataset_version_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetDatasetVersionRequest.dataset_version_id)
}
inline std::string* GetDatasetVersionRequest::mutable_dataset_version_id() {
  std::string* _s = _internal_mutable_dataset_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetDatasetVersionRequest.dataset_version_id)
  return _s;
}
inline const std::string& GetDatasetVersionRequest::_internal_dataset_version_id() const {
  return dataset_version_id_.Get();
}
inline void GetDatasetVersionRequest::_internal_set_dataset_version_id(const std::string& value) {
  
  dataset_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDatasetVersionRequest::_internal_mutable_dataset_version_id() {
  
  return dataset_version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDatasetVersionRequest::release_dataset_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetDatasetVersionRequest.dataset_version_id)
  return dataset_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDatasetVersionRequest::set_allocated_dataset_version_id(std::string* dataset_version_id) {
  if (dataset_version_id != nullptr) {
    
  } else {
    
  }
  dataset_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetDatasetVersionRequest.dataset_version_id)
}

// -------------------------------------------------------------------

// ListDatasetVersionMetricsGroupsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListDatasetVersionMetricsGroupsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListDatasetVersionMetricsGroupsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListDatasetVersionMetricsGroupsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListDatasetVersionMetricsGroupsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetVersionMetricsGroupsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListDatasetVersionMetricsGroupsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListDatasetVersionMetricsGroupsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListDatasetVersionMetricsGroupsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListDatasetVersionMetricsGroupsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListDatasetVersionMetricsGroupsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListDatasetVersionMetricsGroupsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListDatasetVersionMetricsGroupsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListDatasetVersionMetricsGroupsRequest.user_app_id)
  return _msg;
}
inline void ListDatasetVersionMetricsGroupsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListDatasetVersionMetricsGroupsRequest.user_app_id)
}

// string dataset_id = 2;
inline void ListDatasetVersionMetricsGroupsRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty();
}
inline const std::string& ListDatasetVersionMetricsGroupsRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDatasetVersionMetricsGroupsRequest::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_id)
}
inline std::string* ListDatasetVersionMetricsGroupsRequest::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_id)
  return _s;
}
inline const std::string& ListDatasetVersionMetricsGroupsRequest::_internal_dataset_id() const {
  return dataset_id_.Get();
}
inline void ListDatasetVersionMetricsGroupsRequest::_internal_set_dataset_id(const std::string& value) {
  
  dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListDatasetVersionMetricsGroupsRequest::_internal_mutable_dataset_id() {
  
  return dataset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListDatasetVersionMetricsGroupsRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_id)
  return dataset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListDatasetVersionMetricsGroupsRequest::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_id)
}

// string dataset_version_id = 3;
inline void ListDatasetVersionMetricsGroupsRequest::clear_dataset_version_id() {
  dataset_version_id_.ClearToEmpty();
}
inline const std::string& ListDatasetVersionMetricsGroupsRequest::dataset_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_version_id)
  return _internal_dataset_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDatasetVersionMetricsGroupsRequest::set_dataset_version_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_version_id)
}
inline std::string* ListDatasetVersionMetricsGroupsRequest::mutable_dataset_version_id() {
  std::string* _s = _internal_mutable_dataset_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_version_id)
  return _s;
}
inline const std::string& ListDatasetVersionMetricsGroupsRequest::_internal_dataset_version_id() const {
  return dataset_version_id_.Get();
}
inline void ListDatasetVersionMetricsGroupsRequest::_internal_set_dataset_version_id(const std::string& value) {
  
  dataset_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListDatasetVersionMetricsGroupsRequest::_internal_mutable_dataset_version_id() {
  
  return dataset_version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListDatasetVersionMetricsGroupsRequest::release_dataset_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_version_id)
  return dataset_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListDatasetVersionMetricsGroupsRequest::set_allocated_dataset_version_id(std::string* dataset_version_id) {
  if (dataset_version_id != nullptr) {
    
  } else {
    
  }
  dataset_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_version_id)
}

// uint32 page = 4;
inline void ListDatasetVersionMetricsGroupsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListDatasetVersionMetricsGroupsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListDatasetVersionMetricsGroupsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetVersionMetricsGroupsRequest.page)
  return _internal_page();
}
inline void ListDatasetVersionMetricsGroupsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListDatasetVersionMetricsGroupsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetVersionMetricsGroupsRequest.page)
}

// uint32 per_page = 5;
inline void ListDatasetVersionMetricsGroupsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListDatasetVersionMetricsGroupsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListDatasetVersionMetricsGroupsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetVersionMetricsGroupsRequest.per_page)
  return _internal_per_page();
}
inline void ListDatasetVersionMetricsGroupsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListDatasetVersionMetricsGroupsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetVersionMetricsGroupsRequest.per_page)
}

// repeated string parent_paths = 6;
inline int ListDatasetVersionMetricsGroupsRequest::_internal_parent_paths_size() const {
  return parent_paths_.size();
}
inline int ListDatasetVersionMetricsGroupsRequest::parent_paths_size() const {
  return _internal_parent_paths_size();
}
inline void ListDatasetVersionMetricsGroupsRequest::clear_parent_paths() {
  parent_paths_.Clear();
}
inline std::string* ListDatasetVersionMetricsGroupsRequest::add_parent_paths() {
  std::string* _s = _internal_add_parent_paths();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
  return _s;
}
inline const std::string& ListDatasetVersionMetricsGroupsRequest::_internal_parent_paths(int index) const {
  return parent_paths_.Get(index);
}
inline const std::string& ListDatasetVersionMetricsGroupsRequest::parent_paths(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
  return _internal_parent_paths(index);
}
inline std::string* ListDatasetVersionMetricsGroupsRequest::mutable_parent_paths(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
  return parent_paths_.Mutable(index);
}
inline void ListDatasetVersionMetricsGroupsRequest::set_parent_paths(int index, const std::string& value) {
  parent_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
}
inline void ListDatasetVersionMetricsGroupsRequest::set_parent_paths(int index, std::string&& value) {
  parent_paths_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
}
inline void ListDatasetVersionMetricsGroupsRequest::set_parent_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parent_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
}
inline void ListDatasetVersionMetricsGroupsRequest::set_parent_paths(int index, const char* value, size_t size) {
  parent_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
}
inline std::string* ListDatasetVersionMetricsGroupsRequest::_internal_add_parent_paths() {
  return parent_paths_.Add();
}
inline void ListDatasetVersionMetricsGroupsRequest::add_parent_paths(const std::string& value) {
  parent_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
}
inline void ListDatasetVersionMetricsGroupsRequest::add_parent_paths(std::string&& value) {
  parent_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
}
inline void ListDatasetVersionMetricsGroupsRequest::add_parent_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parent_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
}
inline void ListDatasetVersionMetricsGroupsRequest::add_parent_paths(const char* value, size_t size) {
  parent_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListDatasetVersionMetricsGroupsRequest::parent_paths() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
  return parent_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListDatasetVersionMetricsGroupsRequest::mutable_parent_paths() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths)
  return &parent_paths_;
}

// repeated .clarifai.api.DatasetVersionMetricsGroupType types = 7;
inline int ListDatasetVersionMetricsGroupsRequest::_internal_types_size() const {
  return types_.size();
}
inline int ListDatasetVersionMetricsGroupsRequest::types_size() const {
  return _internal_types_size();
}
inline void ListDatasetVersionMetricsGroupsRequest::clear_types() {
  types_.Clear();
}
inline ::clarifai::api::DatasetVersionMetricsGroupType ListDatasetVersionMetricsGroupsRequest::_internal_types(int index) const {
  return static_cast< ::clarifai::api::DatasetVersionMetricsGroupType >(types_.Get(index));
}
inline ::clarifai::api::DatasetVersionMetricsGroupType ListDatasetVersionMetricsGroupsRequest::types(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetVersionMetricsGroupsRequest.types)
  return _internal_types(index);
}
inline void ListDatasetVersionMetricsGroupsRequest::set_types(int index, ::clarifai::api::DatasetVersionMetricsGroupType value) {
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListDatasetVersionMetricsGroupsRequest.types)
}
inline void ListDatasetVersionMetricsGroupsRequest::_internal_add_types(::clarifai::api::DatasetVersionMetricsGroupType value) {
  types_.Add(value);
}
inline void ListDatasetVersionMetricsGroupsRequest::add_types(::clarifai::api::DatasetVersionMetricsGroupType value) {
  _internal_add_types(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListDatasetVersionMetricsGroupsRequest.types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ListDatasetVersionMetricsGroupsRequest::types() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListDatasetVersionMetricsGroupsRequest.types)
  return types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListDatasetVersionMetricsGroupsRequest::_internal_mutable_types() {
  return &types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListDatasetVersionMetricsGroupsRequest::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListDatasetVersionMetricsGroupsRequest.types)
  return _internal_mutable_types();
}

// repeated .google.protobuf.Value values = 8;
inline int ListDatasetVersionMetricsGroupsRequest::_internal_values_size() const {
  return values_.size();
}
inline int ListDatasetVersionMetricsGroupsRequest::values_size() const {
  return _internal_values_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Value* ListDatasetVersionMetricsGroupsRequest::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListDatasetVersionMetricsGroupsRequest.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Value >*
ListDatasetVersionMetricsGroupsRequest::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListDatasetVersionMetricsGroupsRequest.values)
  return &values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& ListDatasetVersionMetricsGroupsRequest::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& ListDatasetVersionMetricsGroupsRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListDatasetVersionMetricsGroupsRequest.values)
  return _internal_values(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Value* ListDatasetVersionMetricsGroupsRequest::_internal_add_values() {
  return values_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Value* ListDatasetVersionMetricsGroupsRequest::add_values() {
  ::PROTOBUF_NAMESPACE_ID::Value* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:clarifai.api.ListDatasetVersionMetricsGroupsRequest.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Value >&
ListDatasetVersionMetricsGroupsRequest::values() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListDatasetVersionMetricsGroupsRequest.values)
  return values_;
}

// -------------------------------------------------------------------

// PostDatasetVersionsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostDatasetVersionsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostDatasetVersionsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostDatasetVersionsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostDatasetVersionsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostDatasetVersionsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostDatasetVersionsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostDatasetVersionsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostDatasetVersionsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostDatasetVersionsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostDatasetVersionsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostDatasetVersionsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostDatasetVersionsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostDatasetVersionsRequest.user_app_id)
  return _msg;
}
inline void PostDatasetVersionsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostDatasetVersionsRequest.user_app_id)
}

// string dataset_id = 2;
inline void PostDatasetVersionsRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty();
}
inline const std::string& PostDatasetVersionsRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostDatasetVersionsRequest.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostDatasetVersionsRequest::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostDatasetVersionsRequest.dataset_id)
}
inline std::string* PostDatasetVersionsRequest::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostDatasetVersionsRequest.dataset_id)
  return _s;
}
inline const std::string& PostDatasetVersionsRequest::_internal_dataset_id() const {
  return dataset_id_.Get();
}
inline void PostDatasetVersionsRequest::_internal_set_dataset_id(const std::string& value) {
  
  dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostDatasetVersionsRequest::_internal_mutable_dataset_id() {
  
  return dataset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostDatasetVersionsRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostDatasetVersionsRequest.dataset_id)
  return dataset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostDatasetVersionsRequest::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostDatasetVersionsRequest.dataset_id)
}

// repeated .clarifai.api.DatasetVersion dataset_versions = 3;
inline int PostDatasetVersionsRequest::_internal_dataset_versions_size() const {
  return dataset_versions_.size();
}
inline int PostDatasetVersionsRequest::dataset_versions_size() const {
  return _internal_dataset_versions_size();
}
inline ::clarifai::api::DatasetVersion* PostDatasetVersionsRequest::mutable_dataset_versions(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostDatasetVersionsRequest.dataset_versions)
  return dataset_versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion >*
PostDatasetVersionsRequest::mutable_dataset_versions() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostDatasetVersionsRequest.dataset_versions)
  return &dataset_versions_;
}
inline const ::clarifai::api::DatasetVersion& PostDatasetVersionsRequest::_internal_dataset_versions(int index) const {
  return dataset_versions_.Get(index);
}
inline const ::clarifai::api::DatasetVersion& PostDatasetVersionsRequest::dataset_versions(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostDatasetVersionsRequest.dataset_versions)
  return _internal_dataset_versions(index);
}
inline ::clarifai::api::DatasetVersion* PostDatasetVersionsRequest::_internal_add_dataset_versions() {
  return dataset_versions_.Add();
}
inline ::clarifai::api::DatasetVersion* PostDatasetVersionsRequest::add_dataset_versions() {
  ::clarifai::api::DatasetVersion* _add = _internal_add_dataset_versions();
  // @@protoc_insertion_point(field_add:clarifai.api.PostDatasetVersionsRequest.dataset_versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion >&
PostDatasetVersionsRequest::dataset_versions() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostDatasetVersionsRequest.dataset_versions)
  return dataset_versions_;
}

// -------------------------------------------------------------------

// PatchDatasetVersionsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchDatasetVersionsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchDatasetVersionsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchDatasetVersionsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchDatasetVersionsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchDatasetVersionsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchDatasetVersionsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchDatasetVersionsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchDatasetVersionsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchDatasetVersionsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchDatasetVersionsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchDatasetVersionsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchDatasetVersionsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchDatasetVersionsRequest.user_app_id)
  return _msg;
}
inline void PatchDatasetVersionsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchDatasetVersionsRequest.user_app_id)
}

// string dataset_id = 2;
inline void PatchDatasetVersionsRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty();
}
inline const std::string& PatchDatasetVersionsRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchDatasetVersionsRequest.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchDatasetVersionsRequest::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchDatasetVersionsRequest.dataset_id)
}
inline std::string* PatchDatasetVersionsRequest::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchDatasetVersionsRequest.dataset_id)
  return _s;
}
inline const std::string& PatchDatasetVersionsRequest::_internal_dataset_id() const {
  return dataset_id_.Get();
}
inline void PatchDatasetVersionsRequest::_internal_set_dataset_id(const std::string& value) {
  
  dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchDatasetVersionsRequest::_internal_mutable_dataset_id() {
  
  return dataset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchDatasetVersionsRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchDatasetVersionsRequest.dataset_id)
  return dataset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchDatasetVersionsRequest::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchDatasetVersionsRequest.dataset_id)
}

// repeated .clarifai.api.DatasetVersion dataset_versions = 3;
inline int PatchDatasetVersionsRequest::_internal_dataset_versions_size() const {
  return dataset_versions_.size();
}
inline int PatchDatasetVersionsRequest::dataset_versions_size() const {
  return _internal_dataset_versions_size();
}
inline ::clarifai::api::DatasetVersion* PatchDatasetVersionsRequest::mutable_dataset_versions(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchDatasetVersionsRequest.dataset_versions)
  return dataset_versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion >*
PatchDatasetVersionsRequest::mutable_dataset_versions() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchDatasetVersionsRequest.dataset_versions)
  return &dataset_versions_;
}
inline const ::clarifai::api::DatasetVersion& PatchDatasetVersionsRequest::_internal_dataset_versions(int index) const {
  return dataset_versions_.Get(index);
}
inline const ::clarifai::api::DatasetVersion& PatchDatasetVersionsRequest::dataset_versions(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchDatasetVersionsRequest.dataset_versions)
  return _internal_dataset_versions(index);
}
inline ::clarifai::api::DatasetVersion* PatchDatasetVersionsRequest::_internal_add_dataset_versions() {
  return dataset_versions_.Add();
}
inline ::clarifai::api::DatasetVersion* PatchDatasetVersionsRequest::add_dataset_versions() {
  ::clarifai::api::DatasetVersion* _add = _internal_add_dataset_versions();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchDatasetVersionsRequest.dataset_versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion >&
PatchDatasetVersionsRequest::dataset_versions() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchDatasetVersionsRequest.dataset_versions)
  return dataset_versions_;
}

// string action = 4;
inline void PatchDatasetVersionsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchDatasetVersionsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchDatasetVersionsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchDatasetVersionsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchDatasetVersionsRequest.action)
}
inline std::string* PatchDatasetVersionsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchDatasetVersionsRequest.action)
  return _s;
}
inline const std::string& PatchDatasetVersionsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchDatasetVersionsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchDatasetVersionsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchDatasetVersionsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchDatasetVersionsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchDatasetVersionsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchDatasetVersionsRequest.action)
}

// -------------------------------------------------------------------

// DeleteDatasetVersionsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteDatasetVersionsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteDatasetVersionsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteDatasetVersionsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteDatasetVersionsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteDatasetVersionsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteDatasetVersionsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteDatasetVersionsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteDatasetVersionsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteDatasetVersionsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteDatasetVersionsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteDatasetVersionsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteDatasetVersionsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteDatasetVersionsRequest.user_app_id)
  return _msg;
}
inline void DeleteDatasetVersionsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteDatasetVersionsRequest.user_app_id)
}

// string dataset_id = 2;
inline void DeleteDatasetVersionsRequest::clear_dataset_id() {
  dataset_id_.ClearToEmpty();
}
inline const std::string& DeleteDatasetVersionsRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteDatasetVersionsRequest.dataset_id)
  return _internal_dataset_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDatasetVersionsRequest::set_dataset_id(ArgT0&& arg0, ArgT... args) {
 
 dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteDatasetVersionsRequest.dataset_id)
}
inline std::string* DeleteDatasetVersionsRequest::mutable_dataset_id() {
  std::string* _s = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteDatasetVersionsRequest.dataset_id)
  return _s;
}
inline const std::string& DeleteDatasetVersionsRequest::_internal_dataset_id() const {
  return dataset_id_.Get();
}
inline void DeleteDatasetVersionsRequest::_internal_set_dataset_id(const std::string& value) {
  
  dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteDatasetVersionsRequest::_internal_mutable_dataset_id() {
  
  return dataset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteDatasetVersionsRequest::release_dataset_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteDatasetVersionsRequest.dataset_id)
  return dataset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteDatasetVersionsRequest::set_allocated_dataset_id(std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  dataset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dataset_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteDatasetVersionsRequest.dataset_id)
}

// repeated string dataset_version_ids = 3;
inline int DeleteDatasetVersionsRequest::_internal_dataset_version_ids_size() const {
  return dataset_version_ids_.size();
}
inline int DeleteDatasetVersionsRequest::dataset_version_ids_size() const {
  return _internal_dataset_version_ids_size();
}
inline void DeleteDatasetVersionsRequest::clear_dataset_version_ids() {
  dataset_version_ids_.Clear();
}
inline std::string* DeleteDatasetVersionsRequest::add_dataset_version_ids() {
  std::string* _s = _internal_add_dataset_version_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
  return _s;
}
inline const std::string& DeleteDatasetVersionsRequest::_internal_dataset_version_ids(int index) const {
  return dataset_version_ids_.Get(index);
}
inline const std::string& DeleteDatasetVersionsRequest::dataset_version_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
  return _internal_dataset_version_ids(index);
}
inline std::string* DeleteDatasetVersionsRequest::mutable_dataset_version_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
  return dataset_version_ids_.Mutable(index);
}
inline void DeleteDatasetVersionsRequest::set_dataset_version_ids(int index, const std::string& value) {
  dataset_version_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
}
inline void DeleteDatasetVersionsRequest::set_dataset_version_ids(int index, std::string&& value) {
  dataset_version_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
}
inline void DeleteDatasetVersionsRequest::set_dataset_version_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dataset_version_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
}
inline void DeleteDatasetVersionsRequest::set_dataset_version_ids(int index, const char* value, size_t size) {
  dataset_version_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
}
inline std::string* DeleteDatasetVersionsRequest::_internal_add_dataset_version_ids() {
  return dataset_version_ids_.Add();
}
inline void DeleteDatasetVersionsRequest::add_dataset_version_ids(const std::string& value) {
  dataset_version_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
}
inline void DeleteDatasetVersionsRequest::add_dataset_version_ids(std::string&& value) {
  dataset_version_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
}
inline void DeleteDatasetVersionsRequest::add_dataset_version_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dataset_version_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
}
inline void DeleteDatasetVersionsRequest::add_dataset_version_ids(const char* value, size_t size) {
  dataset_version_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteDatasetVersionsRequest::dataset_version_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
  return dataset_version_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteDatasetVersionsRequest::mutable_dataset_version_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids)
  return &dataset_version_ids_;
}

// -------------------------------------------------------------------

// MultiDatasetVersionResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiDatasetVersionResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiDatasetVersionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiDatasetVersionResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiDatasetVersionResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiDatasetVersionResponse.status)
  return _internal_status();
}
inline void MultiDatasetVersionResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiDatasetVersionResponse.status)
}
inline ::clarifai::api::status::Status* MultiDatasetVersionResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiDatasetVersionResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiDatasetVersionResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiDatasetVersionResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiDatasetVersionResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiDatasetVersionResponse.status)
  return _msg;
}
inline void MultiDatasetVersionResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiDatasetVersionResponse.status)
}

// repeated .clarifai.api.DatasetVersion dataset_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiDatasetVersionResponse::_internal_dataset_versions_size() const {
  return dataset_versions_.size();
}
inline int MultiDatasetVersionResponse::dataset_versions_size() const {
  return _internal_dataset_versions_size();
}
inline ::clarifai::api::DatasetVersion* MultiDatasetVersionResponse::mutable_dataset_versions(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiDatasetVersionResponse.dataset_versions)
  return dataset_versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion >*
MultiDatasetVersionResponse::mutable_dataset_versions() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiDatasetVersionResponse.dataset_versions)
  return &dataset_versions_;
}
inline const ::clarifai::api::DatasetVersion& MultiDatasetVersionResponse::_internal_dataset_versions(int index) const {
  return dataset_versions_.Get(index);
}
inline const ::clarifai::api::DatasetVersion& MultiDatasetVersionResponse::dataset_versions(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiDatasetVersionResponse.dataset_versions)
  return _internal_dataset_versions(index);
}
inline ::clarifai::api::DatasetVersion* MultiDatasetVersionResponse::_internal_add_dataset_versions() {
  return dataset_versions_.Add();
}
inline ::clarifai::api::DatasetVersion* MultiDatasetVersionResponse::add_dataset_versions() {
  ::clarifai::api::DatasetVersion* _add = _internal_add_dataset_versions();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiDatasetVersionResponse.dataset_versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersion >&
MultiDatasetVersionResponse::dataset_versions() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiDatasetVersionResponse.dataset_versions)
  return dataset_versions_;
}

// -------------------------------------------------------------------

// MultiDatasetVersionMetricsGroupResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiDatasetVersionMetricsGroupResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiDatasetVersionMetricsGroupResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiDatasetVersionMetricsGroupResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiDatasetVersionMetricsGroupResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiDatasetVersionMetricsGroupResponse.status)
  return _internal_status();
}
inline void MultiDatasetVersionMetricsGroupResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiDatasetVersionMetricsGroupResponse.status)
}
inline ::clarifai::api::status::Status* MultiDatasetVersionMetricsGroupResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiDatasetVersionMetricsGroupResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiDatasetVersionMetricsGroupResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiDatasetVersionMetricsGroupResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiDatasetVersionMetricsGroupResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiDatasetVersionMetricsGroupResponse.status)
  return _msg;
}
inline void MultiDatasetVersionMetricsGroupResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiDatasetVersionMetricsGroupResponse.status)
}

// repeated .clarifai.api.DatasetVersionMetricsGroup dataset_version_metrics_groups = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiDatasetVersionMetricsGroupResponse::_internal_dataset_version_metrics_groups_size() const {
  return dataset_version_metrics_groups_.size();
}
inline int MultiDatasetVersionMetricsGroupResponse::dataset_version_metrics_groups_size() const {
  return _internal_dataset_version_metrics_groups_size();
}
inline ::clarifai::api::DatasetVersionMetricsGroup* MultiDatasetVersionMetricsGroupResponse::mutable_dataset_version_metrics_groups(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiDatasetVersionMetricsGroupResponse.dataset_version_metrics_groups)
  return dataset_version_metrics_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersionMetricsGroup >*
MultiDatasetVersionMetricsGroupResponse::mutable_dataset_version_metrics_groups() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiDatasetVersionMetricsGroupResponse.dataset_version_metrics_groups)
  return &dataset_version_metrics_groups_;
}
inline const ::clarifai::api::DatasetVersionMetricsGroup& MultiDatasetVersionMetricsGroupResponse::_internal_dataset_version_metrics_groups(int index) const {
  return dataset_version_metrics_groups_.Get(index);
}
inline const ::clarifai::api::DatasetVersionMetricsGroup& MultiDatasetVersionMetricsGroupResponse::dataset_version_metrics_groups(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiDatasetVersionMetricsGroupResponse.dataset_version_metrics_groups)
  return _internal_dataset_version_metrics_groups(index);
}
inline ::clarifai::api::DatasetVersionMetricsGroup* MultiDatasetVersionMetricsGroupResponse::_internal_add_dataset_version_metrics_groups() {
  return dataset_version_metrics_groups_.Add();
}
inline ::clarifai::api::DatasetVersionMetricsGroup* MultiDatasetVersionMetricsGroupResponse::add_dataset_version_metrics_groups() {
  ::clarifai::api::DatasetVersionMetricsGroup* _add = _internal_add_dataset_version_metrics_groups();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiDatasetVersionMetricsGroupResponse.dataset_version_metrics_groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::DatasetVersionMetricsGroup >&
MultiDatasetVersionMetricsGroupResponse::dataset_version_metrics_groups() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiDatasetVersionMetricsGroupResponse.dataset_version_metrics_groups)
  return dataset_version_metrics_groups_;
}

// -------------------------------------------------------------------

// SingleDatasetVersionResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleDatasetVersionResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleDatasetVersionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleDatasetVersionResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleDatasetVersionResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleDatasetVersionResponse.status)
  return _internal_status();
}
inline void SingleDatasetVersionResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleDatasetVersionResponse.status)
}
inline ::clarifai::api::status::Status* SingleDatasetVersionResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleDatasetVersionResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleDatasetVersionResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleDatasetVersionResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleDatasetVersionResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleDatasetVersionResponse.status)
  return _msg;
}
inline void SingleDatasetVersionResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleDatasetVersionResponse.status)
}

// .clarifai.api.DatasetVersion dataset_version = 2;
inline bool SingleDatasetVersionResponse::_internal_has_dataset_version() const {
  return this != internal_default_instance() && dataset_version_ != nullptr;
}
inline bool SingleDatasetVersionResponse::has_dataset_version() const {
  return _internal_has_dataset_version();
}
inline const ::clarifai::api::DatasetVersion& SingleDatasetVersionResponse::_internal_dataset_version() const {
  const ::clarifai::api::DatasetVersion* p = dataset_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::DatasetVersion&>(
      ::clarifai::api::_DatasetVersion_default_instance_);
}
inline const ::clarifai::api::DatasetVersion& SingleDatasetVersionResponse::dataset_version() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleDatasetVersionResponse.dataset_version)
  return _internal_dataset_version();
}
inline void SingleDatasetVersionResponse::unsafe_arena_set_allocated_dataset_version(
    ::clarifai::api::DatasetVersion* dataset_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_version_);
  }
  dataset_version_ = dataset_version;
  if (dataset_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleDatasetVersionResponse.dataset_version)
}
inline ::clarifai::api::DatasetVersion* SingleDatasetVersionResponse::release_dataset_version() {
  
  ::clarifai::api::DatasetVersion* temp = dataset_version_;
  dataset_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::DatasetVersion* SingleDatasetVersionResponse::unsafe_arena_release_dataset_version() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleDatasetVersionResponse.dataset_version)
  
  ::clarifai::api::DatasetVersion* temp = dataset_version_;
  dataset_version_ = nullptr;
  return temp;
}
inline ::clarifai::api::DatasetVersion* SingleDatasetVersionResponse::_internal_mutable_dataset_version() {
  
  if (dataset_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::DatasetVersion>(GetArenaForAllocation());
    dataset_version_ = p;
  }
  return dataset_version_;
}
inline ::clarifai::api::DatasetVersion* SingleDatasetVersionResponse::mutable_dataset_version() {
  ::clarifai::api::DatasetVersion* _msg = _internal_mutable_dataset_version();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleDatasetVersionResponse.dataset_version)
  return _msg;
}
inline void SingleDatasetVersionResponse::set_allocated_dataset_version(::clarifai::api::DatasetVersion* dataset_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_version_);
  }
  if (dataset_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_version));
    if (message_arena != submessage_arena) {
      dataset_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataset_version, submessage_arena);
    }
    
  } else {
    
  }
  dataset_version_ = dataset_version;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleDatasetVersionResponse.dataset_version)
}

// -------------------------------------------------------------------

// PostModelOutputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelOutputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelOutputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelOutputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelOutputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelOutputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostModelOutputsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelOutputsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostModelOutputsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelOutputsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelOutputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelOutputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelOutputsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelOutputsRequest.user_app_id)
  return _msg;
}
inline void PostModelOutputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelOutputsRequest.user_app_id)
}

// string model_id = 2;
inline void PostModelOutputsRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& PostModelOutputsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelOutputsRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostModelOutputsRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelOutputsRequest.model_id)
}
inline std::string* PostModelOutputsRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelOutputsRequest.model_id)
  return _s;
}
inline const std::string& PostModelOutputsRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void PostModelOutputsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostModelOutputsRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostModelOutputsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelOutputsRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostModelOutputsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelOutputsRequest.model_id)
}

// string version_id = 3;
inline void PostModelOutputsRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& PostModelOutputsRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelOutputsRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostModelOutputsRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelOutputsRequest.version_id)
}
inline std::string* PostModelOutputsRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelOutputsRequest.version_id)
  return _s;
}
inline const std::string& PostModelOutputsRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void PostModelOutputsRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostModelOutputsRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostModelOutputsRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelOutputsRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostModelOutputsRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelOutputsRequest.version_id)
}

// repeated .clarifai.api.Input inputs = 4;
inline int PostModelOutputsRequest::_internal_inputs_size() const {
  return inputs_.size();
}
inline int PostModelOutputsRequest::inputs_size() const {
  return _internal_inputs_size();
}
inline ::clarifai::api::Input* PostModelOutputsRequest::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelOutputsRequest.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
PostModelOutputsRequest::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostModelOutputsRequest.inputs)
  return &inputs_;
}
inline const ::clarifai::api::Input& PostModelOutputsRequest::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::clarifai::api::Input& PostModelOutputsRequest::inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelOutputsRequest.inputs)
  return _internal_inputs(index);
}
inline ::clarifai::api::Input* PostModelOutputsRequest::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::clarifai::api::Input* PostModelOutputsRequest::add_inputs() {
  ::clarifai::api::Input* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:clarifai.api.PostModelOutputsRequest.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
PostModelOutputsRequest::inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostModelOutputsRequest.inputs)
  return inputs_;
}

// .clarifai.api.Model model = 5;
inline bool PostModelOutputsRequest::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool PostModelOutputsRequest::has_model() const {
  return _internal_has_model();
}
inline const ::clarifai::api::Model& PostModelOutputsRequest::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Model&>(
      ::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& PostModelOutputsRequest::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelOutputsRequest.model)
  return _internal_model();
}
inline void PostModelOutputsRequest::unsafe_arena_set_allocated_model(
    ::clarifai::api::Model* model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelOutputsRequest.model)
}
inline ::clarifai::api::Model* PostModelOutputsRequest::release_model() {
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Model* PostModelOutputsRequest::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelOutputsRequest.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* PostModelOutputsRequest::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArenaForAllocation());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* PostModelOutputsRequest::mutable_model() {
  ::clarifai::api::Model* _msg = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelOutputsRequest.model)
  return _msg;
}
inline void PostModelOutputsRequest::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model));
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelOutputsRequest.model)
}

// -------------------------------------------------------------------

// ListModelInputsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListModelInputsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListModelInputsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListModelInputsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListModelInputsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelInputsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListModelInputsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListModelInputsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListModelInputsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelInputsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelInputsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelInputsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListModelInputsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelInputsRequest.user_app_id)
  return _msg;
}
inline void ListModelInputsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelInputsRequest.user_app_id)
}

// string model_id = 2;
inline void ListModelInputsRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& ListModelInputsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelInputsRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListModelInputsRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelInputsRequest.model_id)
}
inline std::string* ListModelInputsRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelInputsRequest.model_id)
  return _s;
}
inline const std::string& ListModelInputsRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void ListModelInputsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListModelInputsRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListModelInputsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelInputsRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListModelInputsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelInputsRequest.model_id)
}

// string version_id = 3;
inline void ListModelInputsRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& ListModelInputsRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelInputsRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListModelInputsRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelInputsRequest.version_id)
}
inline std::string* ListModelInputsRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelInputsRequest.version_id)
  return _s;
}
inline const std::string& ListModelInputsRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void ListModelInputsRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListModelInputsRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListModelInputsRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelInputsRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListModelInputsRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelInputsRequest.version_id)
}

// uint32 page = 4;
inline void ListModelInputsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListModelInputsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListModelInputsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelInputsRequest.page)
  return _internal_page();
}
inline void ListModelInputsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListModelInputsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelInputsRequest.page)
}

// uint32 per_page = 5;
inline void ListModelInputsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListModelInputsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListModelInputsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelInputsRequest.per_page)
  return _internal_per_page();
}
inline void ListModelInputsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListModelInputsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelInputsRequest.per_page)
}

// -------------------------------------------------------------------

// GetKeyRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetKeyRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetKeyRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetKeyRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetKeyRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetKeyRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetKeyRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetKeyRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetKeyRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetKeyRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetKeyRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetKeyRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetKeyRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetKeyRequest.user_app_id)
  return _msg;
}
inline void GetKeyRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetKeyRequest.user_app_id)
}

// string key_id = 2;
inline void GetKeyRequest::clear_key_id() {
  key_id_.ClearToEmpty();
}
inline const std::string& GetKeyRequest::key_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetKeyRequest.key_id)
  return _internal_key_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetKeyRequest::set_key_id(ArgT0&& arg0, ArgT... args) {
 
 key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetKeyRequest.key_id)
}
inline std::string* GetKeyRequest::mutable_key_id() {
  std::string* _s = _internal_mutable_key_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetKeyRequest.key_id)
  return _s;
}
inline const std::string& GetKeyRequest::_internal_key_id() const {
  return key_id_.Get();
}
inline void GetKeyRequest::_internal_set_key_id(const std::string& value) {
  
  key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetKeyRequest::_internal_mutable_key_id() {
  
  return key_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetKeyRequest::release_key_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetKeyRequest.key_id)
  return key_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetKeyRequest::set_allocated_key_id(std::string* key_id) {
  if (key_id != nullptr) {
    
  } else {
    
  }
  key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetKeyRequest.key_id)
}

// -------------------------------------------------------------------

// ListKeysRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListKeysRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListKeysRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListKeysRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListKeysRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListKeysRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListKeysRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListKeysRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListKeysRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListKeysRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListKeysRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListKeysRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListKeysRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListKeysRequest.user_app_id)
  return _msg;
}
inline void ListKeysRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListKeysRequest.user_app_id)
}

// uint32 page = 2;
inline void ListKeysRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListKeysRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListKeysRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListKeysRequest.page)
  return _internal_page();
}
inline void ListKeysRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListKeysRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListKeysRequest.page)
}

// uint32 per_page = 3;
inline void ListKeysRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListKeysRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListKeysRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListKeysRequest.per_page)
  return _internal_per_page();
}
inline void ListKeysRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListKeysRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListKeysRequest.per_page)
}

// -------------------------------------------------------------------

// ListAppKeysRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListAppKeysRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListAppKeysRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListAppKeysRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListAppKeysRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppKeysRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListAppKeysRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListAppKeysRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListAppKeysRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAppKeysRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAppKeysRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAppKeysRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListAppKeysRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAppKeysRequest.user_app_id)
  return _msg;
}
inline void ListAppKeysRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAppKeysRequest.user_app_id)
}

// uint32 page = 2;
inline void ListAppKeysRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListAppKeysRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListAppKeysRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppKeysRequest.page)
  return _internal_page();
}
inline void ListAppKeysRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListAppKeysRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppKeysRequest.page)
}

// uint32 per_page = 3;
inline void ListAppKeysRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListAppKeysRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListAppKeysRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppKeysRequest.per_page)
  return _internal_per_page();
}
inline void ListAppKeysRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListAppKeysRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppKeysRequest.per_page)
}

// -------------------------------------------------------------------

// PostKeysRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostKeysRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostKeysRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostKeysRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostKeysRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKeysRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostKeysRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostKeysRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostKeysRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostKeysRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostKeysRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostKeysRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostKeysRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKeysRequest.user_app_id)
  return _msg;
}
inline void PostKeysRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostKeysRequest.user_app_id)
}

// repeated .clarifai.api.Key keys = 2;
inline int PostKeysRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int PostKeysRequest::keys_size() const {
  return _internal_keys_size();
}
inline ::clarifai::api::Key* PostKeysRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostKeysRequest.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >*
PostKeysRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostKeysRequest.keys)
  return &keys_;
}
inline const ::clarifai::api::Key& PostKeysRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::clarifai::api::Key& PostKeysRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostKeysRequest.keys)
  return _internal_keys(index);
}
inline ::clarifai::api::Key* PostKeysRequest::_internal_add_keys() {
  return keys_.Add();
}
inline ::clarifai::api::Key* PostKeysRequest::add_keys() {
  ::clarifai::api::Key* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:clarifai.api.PostKeysRequest.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >&
PostKeysRequest::keys() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostKeysRequest.keys)
  return keys_;
}

// -------------------------------------------------------------------

// DeleteKeyRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteKeyRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteKeyRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteKeyRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteKeyRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteKeyRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteKeyRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteKeyRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteKeyRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteKeyRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteKeyRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteKeyRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteKeyRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteKeyRequest.user_app_id)
  return _msg;
}
inline void DeleteKeyRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteKeyRequest.user_app_id)
}

// string key_id = 2;
inline void DeleteKeyRequest::clear_key_id() {
  key_id_.ClearToEmpty();
}
inline const std::string& DeleteKeyRequest::key_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteKeyRequest.key_id)
  return _internal_key_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteKeyRequest::set_key_id(ArgT0&& arg0, ArgT... args) {
 
 key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteKeyRequest.key_id)
}
inline std::string* DeleteKeyRequest::mutable_key_id() {
  std::string* _s = _internal_mutable_key_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteKeyRequest.key_id)
  return _s;
}
inline const std::string& DeleteKeyRequest::_internal_key_id() const {
  return key_id_.Get();
}
inline void DeleteKeyRequest::_internal_set_key_id(const std::string& value) {
  
  key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteKeyRequest::_internal_mutable_key_id() {
  
  return key_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteKeyRequest::release_key_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteKeyRequest.key_id)
  return key_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteKeyRequest::set_allocated_key_id(std::string* key_id) {
  if (key_id != nullptr) {
    
  } else {
    
  }
  key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteKeyRequest.key_id)
}

// -------------------------------------------------------------------

// PatchKeysRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchKeysRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchKeysRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchKeysRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchKeysRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchKeysRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchKeysRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchKeysRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchKeysRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchKeysRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchKeysRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchKeysRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchKeysRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchKeysRequest.user_app_id)
  return _msg;
}
inline void PatchKeysRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchKeysRequest.user_app_id)
}

// repeated .clarifai.api.Key keys = 2;
inline int PatchKeysRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int PatchKeysRequest::keys_size() const {
  return _internal_keys_size();
}
inline ::clarifai::api::Key* PatchKeysRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchKeysRequest.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >*
PatchKeysRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchKeysRequest.keys)
  return &keys_;
}
inline const ::clarifai::api::Key& PatchKeysRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::clarifai::api::Key& PatchKeysRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchKeysRequest.keys)
  return _internal_keys(index);
}
inline ::clarifai::api::Key* PatchKeysRequest::_internal_add_keys() {
  return keys_.Add();
}
inline ::clarifai::api::Key* PatchKeysRequest::add_keys() {
  ::clarifai::api::Key* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchKeysRequest.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >&
PatchKeysRequest::keys() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchKeysRequest.keys)
  return keys_;
}

// string action = 3;
inline void PatchKeysRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchKeysRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchKeysRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchKeysRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchKeysRequest.action)
}
inline std::string* PatchKeysRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchKeysRequest.action)
  return _s;
}
inline const std::string& PatchKeysRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchKeysRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchKeysRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchKeysRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchKeysRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchKeysRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchKeysRequest.action)
}

// -------------------------------------------------------------------

// SingleKeyResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleKeyResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleKeyResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleKeyResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleKeyResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleKeyResponse.status)
  return _internal_status();
}
inline void SingleKeyResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleKeyResponse.status)
}
inline ::clarifai::api::status::Status* SingleKeyResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleKeyResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleKeyResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleKeyResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleKeyResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleKeyResponse.status)
  return _msg;
}
inline void SingleKeyResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleKeyResponse.status)
}

// .clarifai.api.Key key = 2;
inline bool SingleKeyResponse::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SingleKeyResponse::has_key() const {
  return _internal_has_key();
}
inline const ::clarifai::api::Key& SingleKeyResponse::_internal_key() const {
  const ::clarifai::api::Key* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Key&>(
      ::clarifai::api::_Key_default_instance_);
}
inline const ::clarifai::api::Key& SingleKeyResponse::key() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleKeyResponse.key)
  return _internal_key();
}
inline void SingleKeyResponse::unsafe_arena_set_allocated_key(
    ::clarifai::api::Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleKeyResponse.key)
}
inline ::clarifai::api::Key* SingleKeyResponse::release_key() {
  
  ::clarifai::api::Key* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Key* SingleKeyResponse::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleKeyResponse.key)
  
  ::clarifai::api::Key* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::clarifai::api::Key* SingleKeyResponse::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Key>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::clarifai::api::Key* SingleKeyResponse::mutable_key() {
  ::clarifai::api::Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleKeyResponse.key)
  return _msg;
}
inline void SingleKeyResponse::set_allocated_key(::clarifai::api::Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleKeyResponse.key)
}

// -------------------------------------------------------------------

// MultiKeyResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiKeyResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiKeyResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiKeyResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiKeyResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiKeyResponse.status)
  return _internal_status();
}
inline void MultiKeyResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiKeyResponse.status)
}
inline ::clarifai::api::status::Status* MultiKeyResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiKeyResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiKeyResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiKeyResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiKeyResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiKeyResponse.status)
  return _msg;
}
inline void MultiKeyResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiKeyResponse.status)
}

// repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiKeyResponse::_internal_keys_size() const {
  return keys_.size();
}
inline int MultiKeyResponse::keys_size() const {
  return _internal_keys_size();
}
inline ::clarifai::api::Key* MultiKeyResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiKeyResponse.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >*
MultiKeyResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiKeyResponse.keys)
  return &keys_;
}
inline const ::clarifai::api::Key& MultiKeyResponse::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::clarifai::api::Key& MultiKeyResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiKeyResponse.keys)
  return _internal_keys(index);
}
inline ::clarifai::api::Key* MultiKeyResponse::_internal_add_keys() {
  return keys_.Add();
}
inline ::clarifai::api::Key* MultiKeyResponse::add_keys() {
  ::clarifai::api::Key* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiKeyResponse.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Key >&
MultiKeyResponse::keys() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiKeyResponse.keys)
  return keys_;
}

// -------------------------------------------------------------------

// GetModelRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetModelRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetModelRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetModelRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetModelRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetModelRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetModelRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetModelRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetModelRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelRequest.user_app_id)
  return _msg;
}
inline void GetModelRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelRequest.user_app_id)
}

// string model_id = 2;
inline void GetModelRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& GetModelRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelRequest.model_id)
}
inline std::string* GetModelRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelRequest.model_id)
  return _s;
}
inline const std::string& GetModelRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void GetModelRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetModelRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetModelRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetModelRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelRequest.model_id)
}

// string version_id = 3;
inline void GetModelRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& GetModelRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelRequest.version_id)
}
inline std::string* GetModelRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelRequest.version_id)
  return _s;
}
inline const std::string& GetModelRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void GetModelRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetModelRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetModelRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetModelRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelRequest.version_id)
}

// string language = 4;
inline void GetModelRequest::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& GetModelRequest::language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelRequest.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelRequest::set_language(ArgT0&& arg0, ArgT... args) {
 
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelRequest.language)
}
inline std::string* GetModelRequest::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelRequest.language)
  return _s;
}
inline const std::string& GetModelRequest::_internal_language() const {
  return language_.Get();
}
inline void GetModelRequest::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetModelRequest::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetModelRequest::release_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelRequest.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetModelRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelRequest.language)
}

// bool trained_before = 5;
inline void GetModelRequest::clear_trained_before() {
  trained_before_ = false;
}
inline bool GetModelRequest::_internal_trained_before() const {
  return trained_before_;
}
inline bool GetModelRequest::trained_before() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelRequest.trained_before)
  return _internal_trained_before();
}
inline void GetModelRequest::_internal_set_trained_before(bool value) {
  
  trained_before_ = value;
}
inline void GetModelRequest::set_trained_before(bool value) {
  _internal_set_trained_before(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelRequest.trained_before)
}

// repeated string additional_fields = 19;
inline int GetModelRequest::_internal_additional_fields_size() const {
  return additional_fields_.size();
}
inline int GetModelRequest::additional_fields_size() const {
  return _internal_additional_fields_size();
}
inline void GetModelRequest::clear_additional_fields() {
  additional_fields_.Clear();
}
inline std::string* GetModelRequest::add_additional_fields() {
  std::string* _s = _internal_add_additional_fields();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.GetModelRequest.additional_fields)
  return _s;
}
inline const std::string& GetModelRequest::_internal_additional_fields(int index) const {
  return additional_fields_.Get(index);
}
inline const std::string& GetModelRequest::additional_fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelRequest.additional_fields)
  return _internal_additional_fields(index);
}
inline std::string* GetModelRequest::mutable_additional_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelRequest.additional_fields)
  return additional_fields_.Mutable(index);
}
inline void GetModelRequest::set_additional_fields(int index, const std::string& value) {
  additional_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelRequest.additional_fields)
}
inline void GetModelRequest::set_additional_fields(int index, std::string&& value) {
  additional_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelRequest.additional_fields)
}
inline void GetModelRequest::set_additional_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetModelRequest.additional_fields)
}
inline void GetModelRequest::set_additional_fields(int index, const char* value, size_t size) {
  additional_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetModelRequest.additional_fields)
}
inline std::string* GetModelRequest::_internal_add_additional_fields() {
  return additional_fields_.Add();
}
inline void GetModelRequest::add_additional_fields(const std::string& value) {
  additional_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.GetModelRequest.additional_fields)
}
inline void GetModelRequest::add_additional_fields(std::string&& value) {
  additional_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.GetModelRequest.additional_fields)
}
inline void GetModelRequest::add_additional_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.GetModelRequest.additional_fields)
}
inline void GetModelRequest::add_additional_fields(const char* value, size_t size) {
  additional_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.GetModelRequest.additional_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetModelRequest::additional_fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.GetModelRequest.additional_fields)
  return additional_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetModelRequest::mutable_additional_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.GetModelRequest.additional_fields)
  return &additional_fields_;
}

// -------------------------------------------------------------------

// ListModelsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListModelsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListModelsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListModelsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListModelsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListModelsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListModelsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListModelsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListModelsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.user_app_id)
  return _msg;
}
inline void ListModelsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListModelsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListModelsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListModelsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.page)
  return _internal_page();
}
inline void ListModelsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListModelsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.page)
}

// uint32 per_page = 3;
inline void ListModelsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListModelsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListModelsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.per_page)
  return _internal_per_page();
}
inline void ListModelsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListModelsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.per_page)
}

// bool sort_ascending = 10;
inline void ListModelsRequest::clear_sort_ascending() {
  sort_ascending_ = false;
}
inline bool ListModelsRequest::_internal_sort_ascending() const {
  return sort_ascending_;
}
inline bool ListModelsRequest::sort_ascending() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.sort_ascending)
  return _internal_sort_ascending();
}
inline void ListModelsRequest::_internal_set_sort_ascending(bool value) {
  
  sort_ascending_ = value;
}
inline void ListModelsRequest::set_sort_ascending(bool value) {
  _internal_set_sort_ascending(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.sort_ascending)
}

// bool sort_by_name = 11;
inline bool ListModelsRequest::_internal_has_sort_by_name() const {
  return sort_by_case() == kSortByName;
}
inline bool ListModelsRequest::has_sort_by_name() const {
  return _internal_has_sort_by_name();
}
inline void ListModelsRequest::set_has_sort_by_name() {
  _oneof_case_[0] = kSortByName;
}
inline void ListModelsRequest::clear_sort_by_name() {
  if (_internal_has_sort_by_name()) {
    sort_by_.sort_by_name_ = false;
    clear_has_sort_by();
  }
}
inline bool ListModelsRequest::_internal_sort_by_name() const {
  if (_internal_has_sort_by_name()) {
    return sort_by_.sort_by_name_;
  }
  return false;
}
inline void ListModelsRequest::_internal_set_sort_by_name(bool value) {
  if (!_internal_has_sort_by_name()) {
    clear_sort_by();
    set_has_sort_by_name();
  }
  sort_by_.sort_by_name_ = value;
}
inline bool ListModelsRequest::sort_by_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.sort_by_name)
  return _internal_sort_by_name();
}
inline void ListModelsRequest::set_sort_by_name(bool value) {
  _internal_set_sort_by_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.sort_by_name)
}

// bool sort_by_num_inputs = 12;
inline bool ListModelsRequest::_internal_has_sort_by_num_inputs() const {
  return sort_by_case() == kSortByNumInputs;
}
inline bool ListModelsRequest::has_sort_by_num_inputs() const {
  return _internal_has_sort_by_num_inputs();
}
inline void ListModelsRequest::set_has_sort_by_num_inputs() {
  _oneof_case_[0] = kSortByNumInputs;
}
inline void ListModelsRequest::clear_sort_by_num_inputs() {
  if (_internal_has_sort_by_num_inputs()) {
    sort_by_.sort_by_num_inputs_ = false;
    clear_has_sort_by();
  }
}
inline bool ListModelsRequest::_internal_sort_by_num_inputs() const {
  if (_internal_has_sort_by_num_inputs()) {
    return sort_by_.sort_by_num_inputs_;
  }
  return false;
}
inline void ListModelsRequest::_internal_set_sort_by_num_inputs(bool value) {
  if (!_internal_has_sort_by_num_inputs()) {
    clear_sort_by();
    set_has_sort_by_num_inputs();
  }
  sort_by_.sort_by_num_inputs_ = value;
}
inline bool ListModelsRequest::sort_by_num_inputs() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.sort_by_num_inputs)
  return _internal_sort_by_num_inputs();
}
inline void ListModelsRequest::set_sort_by_num_inputs(bool value) {
  _internal_set_sort_by_num_inputs(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.sort_by_num_inputs)
}

// bool sort_by_modified_at = 13;
inline bool ListModelsRequest::_internal_has_sort_by_modified_at() const {
  return sort_by_case() == kSortByModifiedAt;
}
inline bool ListModelsRequest::has_sort_by_modified_at() const {
  return _internal_has_sort_by_modified_at();
}
inline void ListModelsRequest::set_has_sort_by_modified_at() {
  _oneof_case_[0] = kSortByModifiedAt;
}
inline void ListModelsRequest::clear_sort_by_modified_at() {
  if (_internal_has_sort_by_modified_at()) {
    sort_by_.sort_by_modified_at_ = false;
    clear_has_sort_by();
  }
}
inline bool ListModelsRequest::_internal_sort_by_modified_at() const {
  if (_internal_has_sort_by_modified_at()) {
    return sort_by_.sort_by_modified_at_;
  }
  return false;
}
inline void ListModelsRequest::_internal_set_sort_by_modified_at(bool value) {
  if (!_internal_has_sort_by_modified_at()) {
    clear_sort_by();
    set_has_sort_by_modified_at();
  }
  sort_by_.sort_by_modified_at_ = value;
}
inline bool ListModelsRequest::sort_by_modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.sort_by_modified_at)
  return _internal_sort_by_modified_at();
}
inline void ListModelsRequest::set_sort_by_modified_at(bool value) {
  _internal_set_sort_by_modified_at(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.sort_by_modified_at)
}

// string query = 14;
inline void ListModelsRequest::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& ListModelsRequest::query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListModelsRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.query)
}
inline std::string* ListModelsRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.query)
  return _s;
}
inline const std::string& ListModelsRequest::_internal_query() const {
  return query_.Get();
}
inline void ListModelsRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListModelsRequest::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListModelsRequest::release_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelsRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListModelsRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (query_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelsRequest.query)
}

// string name = 5;
inline void ListModelsRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListModelsRequest::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListModelsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.name)
}
inline std::string* ListModelsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.name)
  return _s;
}
inline const std::string& ListModelsRequest::_internal_name() const {
  return name_.Get();
}
inline void ListModelsRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListModelsRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListModelsRequest::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelsRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListModelsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelsRequest.name)
}

// bool filter_by_user_id = 22;
inline void ListModelsRequest::clear_filter_by_user_id() {
  filter_by_user_id_ = false;
}
inline bool ListModelsRequest::_internal_filter_by_user_id() const {
  return filter_by_user_id_;
}
inline bool ListModelsRequest::filter_by_user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.filter_by_user_id)
  return _internal_filter_by_user_id();
}
inline void ListModelsRequest::_internal_set_filter_by_user_id(bool value) {
  
  filter_by_user_id_ = value;
}
inline void ListModelsRequest::set_filter_by_user_id(bool value) {
  _internal_set_filter_by_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.filter_by_user_id)
}

// string model_type_id = 6;
inline void ListModelsRequest::clear_model_type_id() {
  model_type_id_.ClearToEmpty();
}
inline const std::string& ListModelsRequest::model_type_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.model_type_id)
  return _internal_model_type_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListModelsRequest::set_model_type_id(ArgT0&& arg0, ArgT... args) {
 
 model_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.model_type_id)
}
inline std::string* ListModelsRequest::mutable_model_type_id() {
  std::string* _s = _internal_mutable_model_type_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.model_type_id)
  return _s;
}
inline const std::string& ListModelsRequest::_internal_model_type_id() const {
  return model_type_id_.Get();
}
inline void ListModelsRequest::_internal_set_model_type_id(const std::string& value) {
  
  model_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListModelsRequest::_internal_mutable_model_type_id() {
  
  return model_type_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListModelsRequest::release_model_type_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelsRequest.model_type_id)
  return model_type_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListModelsRequest::set_allocated_model_type_id(std::string* model_type_id) {
  if (model_type_id != nullptr) {
    
  } else {
    
  }
  model_type_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_type_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_type_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelsRequest.model_type_id)
}

// bool trained_only = 7;
inline void ListModelsRequest::clear_trained_only() {
  trained_only_ = false;
}
inline bool ListModelsRequest::_internal_trained_only() const {
  return trained_only_;
}
inline bool ListModelsRequest::trained_only() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.trained_only)
  return _internal_trained_only();
}
inline void ListModelsRequest::_internal_set_trained_only(bool value) {
  
  trained_only_ = value;
}
inline void ListModelsRequest::set_trained_only(bool value) {
  _internal_set_trained_only(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.trained_only)
}

// repeated string input_fields = 8;
inline int ListModelsRequest::_internal_input_fields_size() const {
  return input_fields_.size();
}
inline int ListModelsRequest::input_fields_size() const {
  return _internal_input_fields_size();
}
inline void ListModelsRequest::clear_input_fields() {
  input_fields_.Clear();
}
inline std::string* ListModelsRequest::add_input_fields() {
  std::string* _s = _internal_add_input_fields();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListModelsRequest.input_fields)
  return _s;
}
inline const std::string& ListModelsRequest::_internal_input_fields(int index) const {
  return input_fields_.Get(index);
}
inline const std::string& ListModelsRequest::input_fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.input_fields)
  return _internal_input_fields(index);
}
inline std::string* ListModelsRequest::mutable_input_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.input_fields)
  return input_fields_.Mutable(index);
}
inline void ListModelsRequest::set_input_fields(int index, const std::string& value) {
  input_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.input_fields)
}
inline void ListModelsRequest::set_input_fields(int index, std::string&& value) {
  input_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.input_fields)
}
inline void ListModelsRequest::set_input_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListModelsRequest.input_fields)
}
inline void ListModelsRequest::set_input_fields(int index, const char* value, size_t size) {
  input_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListModelsRequest.input_fields)
}
inline std::string* ListModelsRequest::_internal_add_input_fields() {
  return input_fields_.Add();
}
inline void ListModelsRequest::add_input_fields(const std::string& value) {
  input_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.input_fields)
}
inline void ListModelsRequest::add_input_fields(std::string&& value) {
  input_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.input_fields)
}
inline void ListModelsRequest::add_input_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListModelsRequest.input_fields)
}
inline void ListModelsRequest::add_input_fields(const char* value, size_t size) {
  input_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListModelsRequest.input_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListModelsRequest::input_fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListModelsRequest.input_fields)
  return input_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListModelsRequest::mutable_input_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListModelsRequest.input_fields)
  return &input_fields_;
}

// repeated string output_fields = 9;
inline int ListModelsRequest::_internal_output_fields_size() const {
  return output_fields_.size();
}
inline int ListModelsRequest::output_fields_size() const {
  return _internal_output_fields_size();
}
inline void ListModelsRequest::clear_output_fields() {
  output_fields_.Clear();
}
inline std::string* ListModelsRequest::add_output_fields() {
  std::string* _s = _internal_add_output_fields();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListModelsRequest.output_fields)
  return _s;
}
inline const std::string& ListModelsRequest::_internal_output_fields(int index) const {
  return output_fields_.Get(index);
}
inline const std::string& ListModelsRequest::output_fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.output_fields)
  return _internal_output_fields(index);
}
inline std::string* ListModelsRequest::mutable_output_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.output_fields)
  return output_fields_.Mutable(index);
}
inline void ListModelsRequest::set_output_fields(int index, const std::string& value) {
  output_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.output_fields)
}
inline void ListModelsRequest::set_output_fields(int index, std::string&& value) {
  output_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.output_fields)
}
inline void ListModelsRequest::set_output_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListModelsRequest.output_fields)
}
inline void ListModelsRequest::set_output_fields(int index, const char* value, size_t size) {
  output_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListModelsRequest.output_fields)
}
inline std::string* ListModelsRequest::_internal_add_output_fields() {
  return output_fields_.Add();
}
inline void ListModelsRequest::add_output_fields(const std::string& value) {
  output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.output_fields)
}
inline void ListModelsRequest::add_output_fields(std::string&& value) {
  output_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.output_fields)
}
inline void ListModelsRequest::add_output_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListModelsRequest.output_fields)
}
inline void ListModelsRequest::add_output_fields(const char* value, size_t size) {
  output_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListModelsRequest.output_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListModelsRequest::output_fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListModelsRequest.output_fields)
  return output_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListModelsRequest::mutable_output_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListModelsRequest.output_fields)
  return &output_fields_;
}

// string license = 15;
inline void ListModelsRequest::clear_license() {
  license_.ClearToEmpty();
}
inline const std::string& ListModelsRequest::license() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.license)
  return _internal_license();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListModelsRequest::set_license(ArgT0&& arg0, ArgT... args) {
 
 license_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.license)
}
inline std::string* ListModelsRequest::mutable_license() {
  std::string* _s = _internal_mutable_license();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.license)
  return _s;
}
inline const std::string& ListModelsRequest::_internal_license() const {
  return license_.Get();
}
inline void ListModelsRequest::_internal_set_license(const std::string& value) {
  
  license_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListModelsRequest::_internal_mutable_license() {
  
  return license_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListModelsRequest::release_license() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelsRequest.license)
  return license_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListModelsRequest::set_allocated_license(std::string* license) {
  if (license != nullptr) {
    
  } else {
    
  }
  license_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), license,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (license_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    license_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelsRequest.license)
}

// bool featured_only = 16;
inline void ListModelsRequest::clear_featured_only() {
  featured_only_ = false;
}
inline bool ListModelsRequest::_internal_featured_only() const {
  return featured_only_;
}
inline bool ListModelsRequest::featured_only() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.featured_only)
  return _internal_featured_only();
}
inline void ListModelsRequest::_internal_set_featured_only(bool value) {
  
  featured_only_ = value;
}
inline void ListModelsRequest::set_featured_only(bool value) {
  _internal_set_featured_only(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.featured_only)
}

// bool starred_only = 20;
inline void ListModelsRequest::clear_starred_only() {
  starred_only_ = false;
}
inline bool ListModelsRequest::_internal_starred_only() const {
  return starred_only_;
}
inline bool ListModelsRequest::starred_only() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.starred_only)
  return _internal_starred_only();
}
inline void ListModelsRequest::_internal_set_starred_only(bool value) {
  
  starred_only_ = value;
}
inline void ListModelsRequest::set_starred_only(bool value) {
  _internal_set_starred_only(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.starred_only)
}

// repeated string toolkits = 17;
inline int ListModelsRequest::_internal_toolkits_size() const {
  return toolkits_.size();
}
inline int ListModelsRequest::toolkits_size() const {
  return _internal_toolkits_size();
}
inline void ListModelsRequest::clear_toolkits() {
  toolkits_.Clear();
}
inline std::string* ListModelsRequest::add_toolkits() {
  std::string* _s = _internal_add_toolkits();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListModelsRequest.toolkits)
  return _s;
}
inline const std::string& ListModelsRequest::_internal_toolkits(int index) const {
  return toolkits_.Get(index);
}
inline const std::string& ListModelsRequest::toolkits(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.toolkits)
  return _internal_toolkits(index);
}
inline std::string* ListModelsRequest::mutable_toolkits(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.toolkits)
  return toolkits_.Mutable(index);
}
inline void ListModelsRequest::set_toolkits(int index, const std::string& value) {
  toolkits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.toolkits)
}
inline void ListModelsRequest::set_toolkits(int index, std::string&& value) {
  toolkits_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.toolkits)
}
inline void ListModelsRequest::set_toolkits(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  toolkits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListModelsRequest.toolkits)
}
inline void ListModelsRequest::set_toolkits(int index, const char* value, size_t size) {
  toolkits_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListModelsRequest.toolkits)
}
inline std::string* ListModelsRequest::_internal_add_toolkits() {
  return toolkits_.Add();
}
inline void ListModelsRequest::add_toolkits(const std::string& value) {
  toolkits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.toolkits)
}
inline void ListModelsRequest::add_toolkits(std::string&& value) {
  toolkits_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.toolkits)
}
inline void ListModelsRequest::add_toolkits(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  toolkits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListModelsRequest.toolkits)
}
inline void ListModelsRequest::add_toolkits(const char* value, size_t size) {
  toolkits_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListModelsRequest.toolkits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListModelsRequest::toolkits() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListModelsRequest.toolkits)
  return toolkits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListModelsRequest::mutable_toolkits() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListModelsRequest.toolkits)
  return &toolkits_;
}

// repeated string use_cases = 18;
inline int ListModelsRequest::_internal_use_cases_size() const {
  return use_cases_.size();
}
inline int ListModelsRequest::use_cases_size() const {
  return _internal_use_cases_size();
}
inline void ListModelsRequest::clear_use_cases() {
  use_cases_.Clear();
}
inline std::string* ListModelsRequest::add_use_cases() {
  std::string* _s = _internal_add_use_cases();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListModelsRequest.use_cases)
  return _s;
}
inline const std::string& ListModelsRequest::_internal_use_cases(int index) const {
  return use_cases_.Get(index);
}
inline const std::string& ListModelsRequest::use_cases(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.use_cases)
  return _internal_use_cases(index);
}
inline std::string* ListModelsRequest::mutable_use_cases(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.use_cases)
  return use_cases_.Mutable(index);
}
inline void ListModelsRequest::set_use_cases(int index, const std::string& value) {
  use_cases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.use_cases)
}
inline void ListModelsRequest::set_use_cases(int index, std::string&& value) {
  use_cases_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.use_cases)
}
inline void ListModelsRequest::set_use_cases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  use_cases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListModelsRequest.use_cases)
}
inline void ListModelsRequest::set_use_cases(int index, const char* value, size_t size) {
  use_cases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListModelsRequest.use_cases)
}
inline std::string* ListModelsRequest::_internal_add_use_cases() {
  return use_cases_.Add();
}
inline void ListModelsRequest::add_use_cases(const std::string& value) {
  use_cases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.use_cases)
}
inline void ListModelsRequest::add_use_cases(std::string&& value) {
  use_cases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.use_cases)
}
inline void ListModelsRequest::add_use_cases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  use_cases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListModelsRequest.use_cases)
}
inline void ListModelsRequest::add_use_cases(const char* value, size_t size) {
  use_cases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListModelsRequest.use_cases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListModelsRequest::use_cases() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListModelsRequest.use_cases)
  return use_cases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListModelsRequest::mutable_use_cases() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListModelsRequest.use_cases)
  return &use_cases_;
}

// repeated string languages = 21;
inline int ListModelsRequest::_internal_languages_size() const {
  return languages_.size();
}
inline int ListModelsRequest::languages_size() const {
  return _internal_languages_size();
}
inline void ListModelsRequest::clear_languages() {
  languages_.Clear();
}
inline std::string* ListModelsRequest::add_languages() {
  std::string* _s = _internal_add_languages();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListModelsRequest.languages)
  return _s;
}
inline const std::string& ListModelsRequest::_internal_languages(int index) const {
  return languages_.Get(index);
}
inline const std::string& ListModelsRequest::languages(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.languages)
  return _internal_languages(index);
}
inline std::string* ListModelsRequest::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.languages)
  return languages_.Mutable(index);
}
inline void ListModelsRequest::set_languages(int index, const std::string& value) {
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.languages)
}
inline void ListModelsRequest::set_languages(int index, std::string&& value) {
  languages_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.languages)
}
inline void ListModelsRequest::set_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListModelsRequest.languages)
}
inline void ListModelsRequest::set_languages(int index, const char* value, size_t size) {
  languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListModelsRequest.languages)
}
inline std::string* ListModelsRequest::_internal_add_languages() {
  return languages_.Add();
}
inline void ListModelsRequest::add_languages(const std::string& value) {
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.languages)
}
inline void ListModelsRequest::add_languages(std::string&& value) {
  languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.languages)
}
inline void ListModelsRequest::add_languages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListModelsRequest.languages)
}
inline void ListModelsRequest::add_languages(const char* value, size_t size) {
  languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListModelsRequest.languages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListModelsRequest::languages() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListModelsRequest.languages)
  return languages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListModelsRequest::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListModelsRequest.languages)
  return &languages_;
}

// repeated string additional_fields = 19;
inline int ListModelsRequest::_internal_additional_fields_size() const {
  return additional_fields_.size();
}
inline int ListModelsRequest::additional_fields_size() const {
  return _internal_additional_fields_size();
}
inline void ListModelsRequest::clear_additional_fields() {
  additional_fields_.Clear();
}
inline std::string* ListModelsRequest::add_additional_fields() {
  std::string* _s = _internal_add_additional_fields();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListModelsRequest.additional_fields)
  return _s;
}
inline const std::string& ListModelsRequest::_internal_additional_fields(int index) const {
  return additional_fields_.Get(index);
}
inline const std::string& ListModelsRequest::additional_fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelsRequest.additional_fields)
  return _internal_additional_fields(index);
}
inline std::string* ListModelsRequest::mutable_additional_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelsRequest.additional_fields)
  return additional_fields_.Mutable(index);
}
inline void ListModelsRequest::set_additional_fields(int index, const std::string& value) {
  additional_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.additional_fields)
}
inline void ListModelsRequest::set_additional_fields(int index, std::string&& value) {
  additional_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelsRequest.additional_fields)
}
inline void ListModelsRequest::set_additional_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListModelsRequest.additional_fields)
}
inline void ListModelsRequest::set_additional_fields(int index, const char* value, size_t size) {
  additional_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListModelsRequest.additional_fields)
}
inline std::string* ListModelsRequest::_internal_add_additional_fields() {
  return additional_fields_.Add();
}
inline void ListModelsRequest::add_additional_fields(const std::string& value) {
  additional_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.additional_fields)
}
inline void ListModelsRequest::add_additional_fields(std::string&& value) {
  additional_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelsRequest.additional_fields)
}
inline void ListModelsRequest::add_additional_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListModelsRequest.additional_fields)
}
inline void ListModelsRequest::add_additional_fields(const char* value, size_t size) {
  additional_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListModelsRequest.additional_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListModelsRequest::additional_fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListModelsRequest.additional_fields)
  return additional_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListModelsRequest::mutable_additional_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListModelsRequest.additional_fields)
  return &additional_fields_;
}

inline bool ListModelsRequest::has_sort_by() const {
  return sort_by_case() != SORT_BY_NOT_SET;
}
inline void ListModelsRequest::clear_has_sort_by() {
  _oneof_case_[0] = SORT_BY_NOT_SET;
}
inline ListModelsRequest::SortByCase ListModelsRequest::sort_by_case() const {
  return ListModelsRequest::SortByCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PatchModelToolkitsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchModelToolkitsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchModelToolkitsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchModelToolkitsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchModelToolkitsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelToolkitsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchModelToolkitsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchModelToolkitsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchModelToolkitsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelToolkitsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelToolkitsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelToolkitsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchModelToolkitsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelToolkitsRequest.user_app_id)
  return _msg;
}
inline void PatchModelToolkitsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelToolkitsRequest.user_app_id)
}

// string model_id = 2;
inline void PatchModelToolkitsRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& PatchModelToolkitsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelToolkitsRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchModelToolkitsRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelToolkitsRequest.model_id)
}
inline std::string* PatchModelToolkitsRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelToolkitsRequest.model_id)
  return _s;
}
inline const std::string& PatchModelToolkitsRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void PatchModelToolkitsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchModelToolkitsRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchModelToolkitsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelToolkitsRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchModelToolkitsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelToolkitsRequest.model_id)
}

// repeated string toolkits = 3;
inline int PatchModelToolkitsRequest::_internal_toolkits_size() const {
  return toolkits_.size();
}
inline int PatchModelToolkitsRequest::toolkits_size() const {
  return _internal_toolkits_size();
}
inline void PatchModelToolkitsRequest::clear_toolkits() {
  toolkits_.Clear();
}
inline std::string* PatchModelToolkitsRequest::add_toolkits() {
  std::string* _s = _internal_add_toolkits();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.PatchModelToolkitsRequest.toolkits)
  return _s;
}
inline const std::string& PatchModelToolkitsRequest::_internal_toolkits(int index) const {
  return toolkits_.Get(index);
}
inline const std::string& PatchModelToolkitsRequest::toolkits(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelToolkitsRequest.toolkits)
  return _internal_toolkits(index);
}
inline std::string* PatchModelToolkitsRequest::mutable_toolkits(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelToolkitsRequest.toolkits)
  return toolkits_.Mutable(index);
}
inline void PatchModelToolkitsRequest::set_toolkits(int index, const std::string& value) {
  toolkits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelToolkitsRequest.toolkits)
}
inline void PatchModelToolkitsRequest::set_toolkits(int index, std::string&& value) {
  toolkits_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelToolkitsRequest.toolkits)
}
inline void PatchModelToolkitsRequest::set_toolkits(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  toolkits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchModelToolkitsRequest.toolkits)
}
inline void PatchModelToolkitsRequest::set_toolkits(int index, const char* value, size_t size) {
  toolkits_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchModelToolkitsRequest.toolkits)
}
inline std::string* PatchModelToolkitsRequest::_internal_add_toolkits() {
  return toolkits_.Add();
}
inline void PatchModelToolkitsRequest::add_toolkits(const std::string& value) {
  toolkits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PatchModelToolkitsRequest.toolkits)
}
inline void PatchModelToolkitsRequest::add_toolkits(std::string&& value) {
  toolkits_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.PatchModelToolkitsRequest.toolkits)
}
inline void PatchModelToolkitsRequest::add_toolkits(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  toolkits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.PatchModelToolkitsRequest.toolkits)
}
inline void PatchModelToolkitsRequest::add_toolkits(const char* value, size_t size) {
  toolkits_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.PatchModelToolkitsRequest.toolkits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PatchModelToolkitsRequest::toolkits() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchModelToolkitsRequest.toolkits)
  return toolkits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PatchModelToolkitsRequest::mutable_toolkits() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchModelToolkitsRequest.toolkits)
  return &toolkits_;
}

// string action = 4;
inline void PatchModelToolkitsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchModelToolkitsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelToolkitsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchModelToolkitsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelToolkitsRequest.action)
}
inline std::string* PatchModelToolkitsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelToolkitsRequest.action)
  return _s;
}
inline const std::string& PatchModelToolkitsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchModelToolkitsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchModelToolkitsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchModelToolkitsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelToolkitsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchModelToolkitsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelToolkitsRequest.action)
}

// -------------------------------------------------------------------

// PatchModelUseCasesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchModelUseCasesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchModelUseCasesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchModelUseCasesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchModelUseCasesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelUseCasesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchModelUseCasesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchModelUseCasesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchModelUseCasesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelUseCasesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelUseCasesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelUseCasesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchModelUseCasesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelUseCasesRequest.user_app_id)
  return _msg;
}
inline void PatchModelUseCasesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelUseCasesRequest.user_app_id)
}

// string model_id = 2;
inline void PatchModelUseCasesRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& PatchModelUseCasesRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelUseCasesRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchModelUseCasesRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelUseCasesRequest.model_id)
}
inline std::string* PatchModelUseCasesRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelUseCasesRequest.model_id)
  return _s;
}
inline const std::string& PatchModelUseCasesRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void PatchModelUseCasesRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchModelUseCasesRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchModelUseCasesRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelUseCasesRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchModelUseCasesRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelUseCasesRequest.model_id)
}

// repeated string usecases = 3;
inline int PatchModelUseCasesRequest::_internal_usecases_size() const {
  return usecases_.size();
}
inline int PatchModelUseCasesRequest::usecases_size() const {
  return _internal_usecases_size();
}
inline void PatchModelUseCasesRequest::clear_usecases() {
  usecases_.Clear();
}
inline std::string* PatchModelUseCasesRequest::add_usecases() {
  std::string* _s = _internal_add_usecases();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.PatchModelUseCasesRequest.usecases)
  return _s;
}
inline const std::string& PatchModelUseCasesRequest::_internal_usecases(int index) const {
  return usecases_.Get(index);
}
inline const std::string& PatchModelUseCasesRequest::usecases(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelUseCasesRequest.usecases)
  return _internal_usecases(index);
}
inline std::string* PatchModelUseCasesRequest::mutable_usecases(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelUseCasesRequest.usecases)
  return usecases_.Mutable(index);
}
inline void PatchModelUseCasesRequest::set_usecases(int index, const std::string& value) {
  usecases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelUseCasesRequest.usecases)
}
inline void PatchModelUseCasesRequest::set_usecases(int index, std::string&& value) {
  usecases_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelUseCasesRequest.usecases)
}
inline void PatchModelUseCasesRequest::set_usecases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usecases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchModelUseCasesRequest.usecases)
}
inline void PatchModelUseCasesRequest::set_usecases(int index, const char* value, size_t size) {
  usecases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchModelUseCasesRequest.usecases)
}
inline std::string* PatchModelUseCasesRequest::_internal_add_usecases() {
  return usecases_.Add();
}
inline void PatchModelUseCasesRequest::add_usecases(const std::string& value) {
  usecases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PatchModelUseCasesRequest.usecases)
}
inline void PatchModelUseCasesRequest::add_usecases(std::string&& value) {
  usecases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.PatchModelUseCasesRequest.usecases)
}
inline void PatchModelUseCasesRequest::add_usecases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usecases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.PatchModelUseCasesRequest.usecases)
}
inline void PatchModelUseCasesRequest::add_usecases(const char* value, size_t size) {
  usecases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.PatchModelUseCasesRequest.usecases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PatchModelUseCasesRequest::usecases() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchModelUseCasesRequest.usecases)
  return usecases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PatchModelUseCasesRequest::mutable_usecases() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchModelUseCasesRequest.usecases)
  return &usecases_;
}

// string action = 4;
inline void PatchModelUseCasesRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchModelUseCasesRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelUseCasesRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchModelUseCasesRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelUseCasesRequest.action)
}
inline std::string* PatchModelUseCasesRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelUseCasesRequest.action)
  return _s;
}
inline const std::string& PatchModelUseCasesRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchModelUseCasesRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchModelUseCasesRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchModelUseCasesRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelUseCasesRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchModelUseCasesRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelUseCasesRequest.action)
}

// -------------------------------------------------------------------

// PatchModelLanguagesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchModelLanguagesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchModelLanguagesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchModelLanguagesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchModelLanguagesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelLanguagesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchModelLanguagesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchModelLanguagesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchModelLanguagesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelLanguagesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelLanguagesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelLanguagesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchModelLanguagesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelLanguagesRequest.user_app_id)
  return _msg;
}
inline void PatchModelLanguagesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelLanguagesRequest.user_app_id)
}

// string model_id = 2;
inline void PatchModelLanguagesRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& PatchModelLanguagesRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelLanguagesRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchModelLanguagesRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelLanguagesRequest.model_id)
}
inline std::string* PatchModelLanguagesRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelLanguagesRequest.model_id)
  return _s;
}
inline const std::string& PatchModelLanguagesRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void PatchModelLanguagesRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchModelLanguagesRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchModelLanguagesRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelLanguagesRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchModelLanguagesRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelLanguagesRequest.model_id)
}

// repeated string languages = 3;
inline int PatchModelLanguagesRequest::_internal_languages_size() const {
  return languages_.size();
}
inline int PatchModelLanguagesRequest::languages_size() const {
  return _internal_languages_size();
}
inline void PatchModelLanguagesRequest::clear_languages() {
  languages_.Clear();
}
inline std::string* PatchModelLanguagesRequest::add_languages() {
  std::string* _s = _internal_add_languages();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.PatchModelLanguagesRequest.languages)
  return _s;
}
inline const std::string& PatchModelLanguagesRequest::_internal_languages(int index) const {
  return languages_.Get(index);
}
inline const std::string& PatchModelLanguagesRequest::languages(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelLanguagesRequest.languages)
  return _internal_languages(index);
}
inline std::string* PatchModelLanguagesRequest::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelLanguagesRequest.languages)
  return languages_.Mutable(index);
}
inline void PatchModelLanguagesRequest::set_languages(int index, const std::string& value) {
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelLanguagesRequest.languages)
}
inline void PatchModelLanguagesRequest::set_languages(int index, std::string&& value) {
  languages_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelLanguagesRequest.languages)
}
inline void PatchModelLanguagesRequest::set_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchModelLanguagesRequest.languages)
}
inline void PatchModelLanguagesRequest::set_languages(int index, const char* value, size_t size) {
  languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchModelLanguagesRequest.languages)
}
inline std::string* PatchModelLanguagesRequest::_internal_add_languages() {
  return languages_.Add();
}
inline void PatchModelLanguagesRequest::add_languages(const std::string& value) {
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PatchModelLanguagesRequest.languages)
}
inline void PatchModelLanguagesRequest::add_languages(std::string&& value) {
  languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.PatchModelLanguagesRequest.languages)
}
inline void PatchModelLanguagesRequest::add_languages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.PatchModelLanguagesRequest.languages)
}
inline void PatchModelLanguagesRequest::add_languages(const char* value, size_t size) {
  languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.PatchModelLanguagesRequest.languages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PatchModelLanguagesRequest::languages() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchModelLanguagesRequest.languages)
  return languages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PatchModelLanguagesRequest::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchModelLanguagesRequest.languages)
  return &languages_;
}

// string action = 4;
inline void PatchModelLanguagesRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchModelLanguagesRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelLanguagesRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchModelLanguagesRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelLanguagesRequest.action)
}
inline std::string* PatchModelLanguagesRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelLanguagesRequest.action)
  return _s;
}
inline const std::string& PatchModelLanguagesRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchModelLanguagesRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchModelLanguagesRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchModelLanguagesRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelLanguagesRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchModelLanguagesRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelLanguagesRequest.action)
}

// -------------------------------------------------------------------

// MultiModelToolkitResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiModelToolkitResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiModelToolkitResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiModelToolkitResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiModelToolkitResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelToolkitResponse.status)
  return _internal_status();
}
inline void MultiModelToolkitResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiModelToolkitResponse.status)
}
inline ::clarifai::api::status::Status* MultiModelToolkitResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelToolkitResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiModelToolkitResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelToolkitResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiModelToolkitResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelToolkitResponse.status)
  return _msg;
}
inline void MultiModelToolkitResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiModelToolkitResponse.status)
}

// repeated string toolkits = 2;
inline int MultiModelToolkitResponse::_internal_toolkits_size() const {
  return toolkits_.size();
}
inline int MultiModelToolkitResponse::toolkits_size() const {
  return _internal_toolkits_size();
}
inline void MultiModelToolkitResponse::clear_toolkits() {
  toolkits_.Clear();
}
inline std::string* MultiModelToolkitResponse::add_toolkits() {
  std::string* _s = _internal_add_toolkits();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiModelToolkitResponse.toolkits)
  return _s;
}
inline const std::string& MultiModelToolkitResponse::_internal_toolkits(int index) const {
  return toolkits_.Get(index);
}
inline const std::string& MultiModelToolkitResponse::toolkits(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelToolkitResponse.toolkits)
  return _internal_toolkits(index);
}
inline std::string* MultiModelToolkitResponse::mutable_toolkits(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelToolkitResponse.toolkits)
  return toolkits_.Mutable(index);
}
inline void MultiModelToolkitResponse::set_toolkits(int index, const std::string& value) {
  toolkits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MultiModelToolkitResponse.toolkits)
}
inline void MultiModelToolkitResponse::set_toolkits(int index, std::string&& value) {
  toolkits_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.MultiModelToolkitResponse.toolkits)
}
inline void MultiModelToolkitResponse::set_toolkits(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  toolkits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiModelToolkitResponse.toolkits)
}
inline void MultiModelToolkitResponse::set_toolkits(int index, const char* value, size_t size) {
  toolkits_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiModelToolkitResponse.toolkits)
}
inline std::string* MultiModelToolkitResponse::_internal_add_toolkits() {
  return toolkits_.Add();
}
inline void MultiModelToolkitResponse::add_toolkits(const std::string& value) {
  toolkits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelToolkitResponse.toolkits)
}
inline void MultiModelToolkitResponse::add_toolkits(std::string&& value) {
  toolkits_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelToolkitResponse.toolkits)
}
inline void MultiModelToolkitResponse::add_toolkits(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  toolkits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiModelToolkitResponse.toolkits)
}
inline void MultiModelToolkitResponse::add_toolkits(const char* value, size_t size) {
  toolkits_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiModelToolkitResponse.toolkits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiModelToolkitResponse::toolkits() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiModelToolkitResponse.toolkits)
  return toolkits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiModelToolkitResponse::mutable_toolkits() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiModelToolkitResponse.toolkits)
  return &toolkits_;
}

// -------------------------------------------------------------------

// MultiModelUseCaseResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiModelUseCaseResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiModelUseCaseResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiModelUseCaseResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiModelUseCaseResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelUseCaseResponse.status)
  return _internal_status();
}
inline void MultiModelUseCaseResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiModelUseCaseResponse.status)
}
inline ::clarifai::api::status::Status* MultiModelUseCaseResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelUseCaseResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiModelUseCaseResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelUseCaseResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiModelUseCaseResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelUseCaseResponse.status)
  return _msg;
}
inline void MultiModelUseCaseResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiModelUseCaseResponse.status)
}

// repeated string usecases = 2;
inline int MultiModelUseCaseResponse::_internal_usecases_size() const {
  return usecases_.size();
}
inline int MultiModelUseCaseResponse::usecases_size() const {
  return _internal_usecases_size();
}
inline void MultiModelUseCaseResponse::clear_usecases() {
  usecases_.Clear();
}
inline std::string* MultiModelUseCaseResponse::add_usecases() {
  std::string* _s = _internal_add_usecases();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiModelUseCaseResponse.usecases)
  return _s;
}
inline const std::string& MultiModelUseCaseResponse::_internal_usecases(int index) const {
  return usecases_.Get(index);
}
inline const std::string& MultiModelUseCaseResponse::usecases(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelUseCaseResponse.usecases)
  return _internal_usecases(index);
}
inline std::string* MultiModelUseCaseResponse::mutable_usecases(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelUseCaseResponse.usecases)
  return usecases_.Mutable(index);
}
inline void MultiModelUseCaseResponse::set_usecases(int index, const std::string& value) {
  usecases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MultiModelUseCaseResponse.usecases)
}
inline void MultiModelUseCaseResponse::set_usecases(int index, std::string&& value) {
  usecases_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.MultiModelUseCaseResponse.usecases)
}
inline void MultiModelUseCaseResponse::set_usecases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usecases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiModelUseCaseResponse.usecases)
}
inline void MultiModelUseCaseResponse::set_usecases(int index, const char* value, size_t size) {
  usecases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiModelUseCaseResponse.usecases)
}
inline std::string* MultiModelUseCaseResponse::_internal_add_usecases() {
  return usecases_.Add();
}
inline void MultiModelUseCaseResponse::add_usecases(const std::string& value) {
  usecases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelUseCaseResponse.usecases)
}
inline void MultiModelUseCaseResponse::add_usecases(std::string&& value) {
  usecases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelUseCaseResponse.usecases)
}
inline void MultiModelUseCaseResponse::add_usecases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usecases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiModelUseCaseResponse.usecases)
}
inline void MultiModelUseCaseResponse::add_usecases(const char* value, size_t size) {
  usecases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiModelUseCaseResponse.usecases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiModelUseCaseResponse::usecases() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiModelUseCaseResponse.usecases)
  return usecases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiModelUseCaseResponse::mutable_usecases() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiModelUseCaseResponse.usecases)
  return &usecases_;
}

// -------------------------------------------------------------------

// MultiModelLanguageResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiModelLanguageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiModelLanguageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiModelLanguageResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiModelLanguageResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelLanguageResponse.status)
  return _internal_status();
}
inline void MultiModelLanguageResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiModelLanguageResponse.status)
}
inline ::clarifai::api::status::Status* MultiModelLanguageResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelLanguageResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiModelLanguageResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelLanguageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiModelLanguageResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelLanguageResponse.status)
  return _msg;
}
inline void MultiModelLanguageResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiModelLanguageResponse.status)
}

// repeated string languages = 2;
inline int MultiModelLanguageResponse::_internal_languages_size() const {
  return languages_.size();
}
inline int MultiModelLanguageResponse::languages_size() const {
  return _internal_languages_size();
}
inline void MultiModelLanguageResponse::clear_languages() {
  languages_.Clear();
}
inline std::string* MultiModelLanguageResponse::add_languages() {
  std::string* _s = _internal_add_languages();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiModelLanguageResponse.languages)
  return _s;
}
inline const std::string& MultiModelLanguageResponse::_internal_languages(int index) const {
  return languages_.Get(index);
}
inline const std::string& MultiModelLanguageResponse::languages(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelLanguageResponse.languages)
  return _internal_languages(index);
}
inline std::string* MultiModelLanguageResponse::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelLanguageResponse.languages)
  return languages_.Mutable(index);
}
inline void MultiModelLanguageResponse::set_languages(int index, const std::string& value) {
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MultiModelLanguageResponse.languages)
}
inline void MultiModelLanguageResponse::set_languages(int index, std::string&& value) {
  languages_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.MultiModelLanguageResponse.languages)
}
inline void MultiModelLanguageResponse::set_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiModelLanguageResponse.languages)
}
inline void MultiModelLanguageResponse::set_languages(int index, const char* value, size_t size) {
  languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiModelLanguageResponse.languages)
}
inline std::string* MultiModelLanguageResponse::_internal_add_languages() {
  return languages_.Add();
}
inline void MultiModelLanguageResponse::add_languages(const std::string& value) {
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelLanguageResponse.languages)
}
inline void MultiModelLanguageResponse::add_languages(std::string&& value) {
  languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelLanguageResponse.languages)
}
inline void MultiModelLanguageResponse::add_languages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiModelLanguageResponse.languages)
}
inline void MultiModelLanguageResponse::add_languages(const char* value, size_t size) {
  languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiModelLanguageResponse.languages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiModelLanguageResponse::languages() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiModelLanguageResponse.languages)
  return languages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiModelLanguageResponse::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiModelLanguageResponse.languages)
  return &languages_;
}

// -------------------------------------------------------------------

// PostModelsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostModelsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostModelsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelsRequest.user_app_id)
  return _msg;
}
inline void PostModelsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelsRequest.user_app_id)
}

// .clarifai.api.Model model = 2 [deprecated = true];
inline bool PostModelsRequest::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool PostModelsRequest::has_model() const {
  return _internal_has_model();
}
inline const ::clarifai::api::Model& PostModelsRequest::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Model&>(
      ::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& PostModelsRequest::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelsRequest.model)
  return _internal_model();
}
inline void PostModelsRequest::unsafe_arena_set_allocated_model(
    ::clarifai::api::Model* model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelsRequest.model)
}
inline ::clarifai::api::Model* PostModelsRequest::release_model() {
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Model* PostModelsRequest::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelsRequest.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* PostModelsRequest::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArenaForAllocation());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* PostModelsRequest::mutable_model() {
  ::clarifai::api::Model* _msg = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelsRequest.model)
  return _msg;
}
inline void PostModelsRequest::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model));
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelsRequest.model)
}

// repeated .clarifai.api.Model models = 3;
inline int PostModelsRequest::_internal_models_size() const {
  return models_.size();
}
inline int PostModelsRequest::models_size() const {
  return _internal_models_size();
}
inline ::clarifai::api::Model* PostModelsRequest::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelsRequest.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >*
PostModelsRequest::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostModelsRequest.models)
  return &models_;
}
inline const ::clarifai::api::Model& PostModelsRequest::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::clarifai::api::Model& PostModelsRequest::models(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelsRequest.models)
  return _internal_models(index);
}
inline ::clarifai::api::Model* PostModelsRequest::_internal_add_models() {
  return models_.Add();
}
inline ::clarifai::api::Model* PostModelsRequest::add_models() {
  ::clarifai::api::Model* _add = _internal_add_models();
  // @@protoc_insertion_point(field_add:clarifai.api.PostModelsRequest.models)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >&
PostModelsRequest::models() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostModelsRequest.models)
  return models_;
}

// -------------------------------------------------------------------

// PatchModelsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchModelsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchModelsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchModelsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchModelsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchModelsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchModelsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchModelsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchModelsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelsRequest.user_app_id)
  return _msg;
}
inline void PatchModelsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelsRequest.user_app_id)
}

// repeated .clarifai.api.Model models = 2;
inline int PatchModelsRequest::_internal_models_size() const {
  return models_.size();
}
inline int PatchModelsRequest::models_size() const {
  return _internal_models_size();
}
inline ::clarifai::api::Model* PatchModelsRequest::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelsRequest.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >*
PatchModelsRequest::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchModelsRequest.models)
  return &models_;
}
inline const ::clarifai::api::Model& PatchModelsRequest::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::clarifai::api::Model& PatchModelsRequest::models(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelsRequest.models)
  return _internal_models(index);
}
inline ::clarifai::api::Model* PatchModelsRequest::_internal_add_models() {
  return models_.Add();
}
inline ::clarifai::api::Model* PatchModelsRequest::add_models() {
  ::clarifai::api::Model* _add = _internal_add_models();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchModelsRequest.models)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >&
PatchModelsRequest::models() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchModelsRequest.models)
  return models_;
}

// string action = 3;
inline void PatchModelsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchModelsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchModelsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelsRequest.action)
}
inline std::string* PatchModelsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelsRequest.action)
  return _s;
}
inline const std::string& PatchModelsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchModelsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchModelsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchModelsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchModelsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelsRequest.action)
}

// -------------------------------------------------------------------

// IdUpdateSource

// string id = 1;
inline void IdUpdateSource::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& IdUpdateSource::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.IdUpdateSource.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IdUpdateSource::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.IdUpdateSource.id)
}
inline std::string* IdUpdateSource::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.IdUpdateSource.id)
  return _s;
}
inline const std::string& IdUpdateSource::_internal_id() const {
  return id_.Get();
}
inline void IdUpdateSource::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IdUpdateSource::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IdUpdateSource::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.IdUpdateSource.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IdUpdateSource::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.IdUpdateSource.id)
}

// string new_id = 2;
inline void IdUpdateSource::clear_new_id() {
  new_id_.ClearToEmpty();
}
inline const std::string& IdUpdateSource::new_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.IdUpdateSource.new_id)
  return _internal_new_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IdUpdateSource::set_new_id(ArgT0&& arg0, ArgT... args) {
 
 new_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.IdUpdateSource.new_id)
}
inline std::string* IdUpdateSource::mutable_new_id() {
  std::string* _s = _internal_mutable_new_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.IdUpdateSource.new_id)
  return _s;
}
inline const std::string& IdUpdateSource::_internal_new_id() const {
  return new_id_.Get();
}
inline void IdUpdateSource::_internal_set_new_id(const std::string& value) {
  
  new_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IdUpdateSource::_internal_mutable_new_id() {
  
  return new_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IdUpdateSource::release_new_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.IdUpdateSource.new_id)
  return new_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IdUpdateSource::set_allocated_new_id(std::string* new_id) {
  if (new_id != nullptr) {
    
  } else {
    
  }
  new_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (new_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    new_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.IdUpdateSource.new_id)
}

// -------------------------------------------------------------------

// PatchModelIdsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchModelIdsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchModelIdsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchModelIdsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchModelIdsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelIdsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchModelIdsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchModelIdsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchModelIdsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelIdsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelIdsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelIdsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchModelIdsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelIdsRequest.user_app_id)
  return _msg;
}
inline void PatchModelIdsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelIdsRequest.user_app_id)
}

// repeated .clarifai.api.IdUpdateSource ids = 3;
inline int PatchModelIdsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int PatchModelIdsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void PatchModelIdsRequest::clear_ids() {
  ids_.Clear();
}
inline ::clarifai::api::IdUpdateSource* PatchModelIdsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelIdsRequest.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::IdUpdateSource >*
PatchModelIdsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchModelIdsRequest.ids)
  return &ids_;
}
inline const ::clarifai::api::IdUpdateSource& PatchModelIdsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const ::clarifai::api::IdUpdateSource& PatchModelIdsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelIdsRequest.ids)
  return _internal_ids(index);
}
inline ::clarifai::api::IdUpdateSource* PatchModelIdsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline ::clarifai::api::IdUpdateSource* PatchModelIdsRequest::add_ids() {
  ::clarifai::api::IdUpdateSource* _add = _internal_add_ids();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchModelIdsRequest.ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::IdUpdateSource >&
PatchModelIdsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchModelIdsRequest.ids)
  return ids_;
}

// string action = 4;
inline void PatchModelIdsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchModelIdsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelIdsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchModelIdsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelIdsRequest.action)
}
inline std::string* PatchModelIdsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelIdsRequest.action)
  return _s;
}
inline const std::string& PatchModelIdsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchModelIdsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchModelIdsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchModelIdsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelIdsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchModelIdsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelIdsRequest.action)
}

// -------------------------------------------------------------------

// DeleteModelRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteModelRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteModelRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteModelRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteModelRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteModelRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelRequest.user_app_id)
  return _msg;
}
inline void DeleteModelRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelRequest.user_app_id)
}

// string model_id = 2;
inline void DeleteModelRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& DeleteModelRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteModelRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelRequest.model_id)
}
inline std::string* DeleteModelRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelRequest.model_id)
  return _s;
}
inline const std::string& DeleteModelRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void DeleteModelRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteModelRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteModelRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteModelRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelRequest.model_id)
}

// -------------------------------------------------------------------

// DeleteModelsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteModelsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteModelsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteModelsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteModelsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteModelsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelsRequest.user_app_id)
  return _msg;
}
inline void DeleteModelsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelsRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteModelsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteModelsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteModelsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteModelsRequest::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteModelsRequest.ids)
  return _s;
}
inline const std::string& DeleteModelsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteModelsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteModelsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteModelsRequest::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelsRequest.ids)
}
inline void DeleteModelsRequest::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelsRequest.ids)
}
inline void DeleteModelsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteModelsRequest.ids)
}
inline void DeleteModelsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteModelsRequest.ids)
}
inline std::string* DeleteModelsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteModelsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteModelsRequest.ids)
}
inline void DeleteModelsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteModelsRequest.ids)
}
inline void DeleteModelsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteModelsRequest.ids)
}
inline void DeleteModelsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteModelsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteModelsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteModelsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteModelsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteModelsRequest.ids)
  return &ids_;
}

// bool delete_all = 3;
inline void DeleteModelsRequest::clear_delete_all() {
  delete_all_ = false;
}
inline bool DeleteModelsRequest::_internal_delete_all() const {
  return delete_all_;
}
inline bool DeleteModelsRequest::delete_all() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelsRequest.delete_all)
  return _internal_delete_all();
}
inline void DeleteModelsRequest::_internal_set_delete_all(bool value) {
  
  delete_all_ = value;
}
inline void DeleteModelsRequest::set_delete_all(bool value) {
  _internal_set_delete_all(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelsRequest.delete_all)
}

// -------------------------------------------------------------------

// PostModelsSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelsSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelsSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelsSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelsSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelsSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostModelsSearchesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelsSearchesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostModelsSearchesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelsSearchesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelsSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelsSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelsSearchesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelsSearchesRequest.user_app_id)
  return _msg;
}
inline void PostModelsSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelsSearchesRequest.user_app_id)
}

// .clarifai.api.ModelQuery model_query = 2;
inline bool PostModelsSearchesRequest::_internal_has_model_query() const {
  return this != internal_default_instance() && model_query_ != nullptr;
}
inline bool PostModelsSearchesRequest::has_model_query() const {
  return _internal_has_model_query();
}
inline const ::clarifai::api::ModelQuery& PostModelsSearchesRequest::_internal_model_query() const {
  const ::clarifai::api::ModelQuery* p = model_query_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::ModelQuery&>(
      ::clarifai::api::_ModelQuery_default_instance_);
}
inline const ::clarifai::api::ModelQuery& PostModelsSearchesRequest::model_query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelsSearchesRequest.model_query)
  return _internal_model_query();
}
inline void PostModelsSearchesRequest::unsafe_arena_set_allocated_model_query(
    ::clarifai::api::ModelQuery* model_query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_query_);
  }
  model_query_ = model_query;
  if (model_query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelsSearchesRequest.model_query)
}
inline ::clarifai::api::ModelQuery* PostModelsSearchesRequest::release_model_query() {
  
  ::clarifai::api::ModelQuery* temp = model_query_;
  model_query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::ModelQuery* PostModelsSearchesRequest::unsafe_arena_release_model_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelsSearchesRequest.model_query)
  
  ::clarifai::api::ModelQuery* temp = model_query_;
  model_query_ = nullptr;
  return temp;
}
inline ::clarifai::api::ModelQuery* PostModelsSearchesRequest::_internal_mutable_model_query() {
  
  if (model_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ModelQuery>(GetArenaForAllocation());
    model_query_ = p;
  }
  return model_query_;
}
inline ::clarifai::api::ModelQuery* PostModelsSearchesRequest::mutable_model_query() {
  ::clarifai::api::ModelQuery* _msg = _internal_mutable_model_query();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelsSearchesRequest.model_query)
  return _msg;
}
inline void PostModelsSearchesRequest::set_allocated_model_query(::clarifai::api::ModelQuery* model_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_query_);
  }
  if (model_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_query));
    if (message_arena != submessage_arena) {
      model_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_query, submessage_arena);
    }
    
  } else {
    
  }
  model_query_ = model_query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelsSearchesRequest.model_query)
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostModelsSearchesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostModelsSearchesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostModelsSearchesRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostModelsSearchesRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Pagination&>(
      ::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostModelsSearchesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelsSearchesRequest.pagination)
  return _internal_pagination();
}
inline void PostModelsSearchesRequest::unsafe_arena_set_allocated_pagination(
    ::clarifai::api::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelsSearchesRequest.pagination)
}
inline ::clarifai::api::Pagination* PostModelsSearchesRequest::release_pagination() {
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Pagination* PostModelsSearchesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelsSearchesRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostModelsSearchesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaForAllocation());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostModelsSearchesRequest::mutable_pagination() {
  ::clarifai::api::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelsSearchesRequest.pagination)
  return _msg;
}
inline void PostModelsSearchesRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::clarifai::api::Pagination>::GetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelsSearchesRequest.pagination)
}

// -------------------------------------------------------------------

// SingleModelResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleModelResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleModelResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleModelResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleModelResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleModelResponse.status)
  return _internal_status();
}
inline void SingleModelResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleModelResponse.status)
}
inline ::clarifai::api::status::Status* SingleModelResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleModelResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleModelResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleModelResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleModelResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleModelResponse.status)
  return _msg;
}
inline void SingleModelResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleModelResponse.status)
}

// .clarifai.api.Model model = 2;
inline bool SingleModelResponse::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool SingleModelResponse::has_model() const {
  return _internal_has_model();
}
inline const ::clarifai::api::Model& SingleModelResponse::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Model&>(
      ::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& SingleModelResponse::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleModelResponse.model)
  return _internal_model();
}
inline void SingleModelResponse::unsafe_arena_set_allocated_model(
    ::clarifai::api::Model* model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleModelResponse.model)
}
inline ::clarifai::api::Model* SingleModelResponse::release_model() {
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Model* SingleModelResponse::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleModelResponse.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* SingleModelResponse::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArenaForAllocation());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* SingleModelResponse::mutable_model() {
  ::clarifai::api::Model* _msg = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleModelResponse.model)
  return _msg;
}
inline void SingleModelResponse::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model));
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleModelResponse.model)
}

// -------------------------------------------------------------------

// MultiModelResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiModelResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiModelResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiModelResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiModelResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelResponse.status)
  return _internal_status();
}
inline void MultiModelResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiModelResponse.status)
}
inline ::clarifai::api::status::Status* MultiModelResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiModelResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiModelResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelResponse.status)
  return _msg;
}
inline void MultiModelResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiModelResponse.status)
}

// repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiModelResponse::_internal_models_size() const {
  return models_.size();
}
inline int MultiModelResponse::models_size() const {
  return _internal_models_size();
}
inline ::clarifai::api::Model* MultiModelResponse::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelResponse.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >*
MultiModelResponse::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiModelResponse.models)
  return &models_;
}
inline const ::clarifai::api::Model& MultiModelResponse::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::clarifai::api::Model& MultiModelResponse::models(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelResponse.models)
  return _internal_models(index);
}
inline ::clarifai::api::Model* MultiModelResponse::_internal_add_models() {
  return models_.Add();
}
inline ::clarifai::api::Model* MultiModelResponse::add_models() {
  ::clarifai::api::Model* _add = _internal_add_models();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelResponse.models)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Model >&
MultiModelResponse::models() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiModelResponse.models)
  return models_;
}

// -------------------------------------------------------------------

// PatchModelVersionsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchModelVersionsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchModelVersionsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchModelVersionsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchModelVersionsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelVersionsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchModelVersionsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchModelVersionsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchModelVersionsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelVersionsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelVersionsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchModelVersionsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchModelVersionsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelVersionsRequest.user_app_id)
  return _msg;
}
inline void PatchModelVersionsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelVersionsRequest.user_app_id)
}

// string model_id = 2;
inline void PatchModelVersionsRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& PatchModelVersionsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelVersionsRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchModelVersionsRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelVersionsRequest.model_id)
}
inline std::string* PatchModelVersionsRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelVersionsRequest.model_id)
  return _s;
}
inline const std::string& PatchModelVersionsRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void PatchModelVersionsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchModelVersionsRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchModelVersionsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelVersionsRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchModelVersionsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelVersionsRequest.model_id)
}

// repeated .clarifai.api.ModelVersion model_versions = 3;
inline int PatchModelVersionsRequest::_internal_model_versions_size() const {
  return model_versions_.size();
}
inline int PatchModelVersionsRequest::model_versions_size() const {
  return _internal_model_versions_size();
}
inline ::clarifai::api::ModelVersion* PatchModelVersionsRequest::mutable_model_versions(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelVersionsRequest.model_versions)
  return model_versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >*
PatchModelVersionsRequest::mutable_model_versions() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchModelVersionsRequest.model_versions)
  return &model_versions_;
}
inline const ::clarifai::api::ModelVersion& PatchModelVersionsRequest::_internal_model_versions(int index) const {
  return model_versions_.Get(index);
}
inline const ::clarifai::api::ModelVersion& PatchModelVersionsRequest::model_versions(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelVersionsRequest.model_versions)
  return _internal_model_versions(index);
}
inline ::clarifai::api::ModelVersion* PatchModelVersionsRequest::_internal_add_model_versions() {
  return model_versions_.Add();
}
inline ::clarifai::api::ModelVersion* PatchModelVersionsRequest::add_model_versions() {
  ::clarifai::api::ModelVersion* _add = _internal_add_model_versions();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchModelVersionsRequest.model_versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >&
PatchModelVersionsRequest::model_versions() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchModelVersionsRequest.model_versions)
  return model_versions_;
}

// string action = 4;
inline void PatchModelVersionsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchModelVersionsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchModelVersionsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchModelVersionsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchModelVersionsRequest.action)
}
inline std::string* PatchModelVersionsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchModelVersionsRequest.action)
  return _s;
}
inline const std::string& PatchModelVersionsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchModelVersionsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchModelVersionsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchModelVersionsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchModelVersionsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchModelVersionsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchModelVersionsRequest.action)
}

// -------------------------------------------------------------------

// GetModelVersionRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetModelVersionRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetModelVersionRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetModelVersionRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetModelVersionRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetModelVersionRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetModelVersionRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionRequest.user_app_id)
  return _msg;
}
inline void GetModelVersionRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionRequest.user_app_id)
}

// string model_id = 2;
inline void GetModelVersionRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& GetModelVersionRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelVersionRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelVersionRequest.model_id)
}
inline std::string* GetModelVersionRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionRequest.model_id)
  return _s;
}
inline const std::string& GetModelVersionRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void GetModelVersionRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetModelVersionRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetModelVersionRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetModelVersionRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionRequest.model_id)
}

// string version_id = 3;
inline void GetModelVersionRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& GetModelVersionRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelVersionRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelVersionRequest.version_id)
}
inline std::string* GetModelVersionRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionRequest.version_id)
  return _s;
}
inline const std::string& GetModelVersionRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void GetModelVersionRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetModelVersionRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetModelVersionRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetModelVersionRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionRequest.version_id)
}

// -------------------------------------------------------------------

// ListModelVersionsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListModelVersionsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListModelVersionsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListModelVersionsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListModelVersionsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListModelVersionsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListModelVersionsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListModelVersionsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelVersionsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelVersionsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelVersionsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListModelVersionsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelVersionsRequest.user_app_id)
  return _msg;
}
inline void ListModelVersionsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelVersionsRequest.user_app_id)
}

// string model_id = 2;
inline void ListModelVersionsRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& ListModelVersionsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionsRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListModelVersionsRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionsRequest.model_id)
}
inline std::string* ListModelVersionsRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelVersionsRequest.model_id)
  return _s;
}
inline const std::string& ListModelVersionsRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void ListModelVersionsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListModelVersionsRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListModelVersionsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelVersionsRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListModelVersionsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelVersionsRequest.model_id)
}

// uint32 page = 3;
inline void ListModelVersionsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListModelVersionsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListModelVersionsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionsRequest.page)
  return _internal_page();
}
inline void ListModelVersionsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListModelVersionsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionsRequest.page)
}

// uint32 per_page = 4;
inline void ListModelVersionsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListModelVersionsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListModelVersionsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionsRequest.per_page)
  return _internal_per_page();
}
inline void ListModelVersionsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListModelVersionsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionsRequest.per_page)
}

// repeated string concept_ids = 5;
inline int ListModelVersionsRequest::_internal_concept_ids_size() const {
  return concept_ids_.size();
}
inline int ListModelVersionsRequest::concept_ids_size() const {
  return _internal_concept_ids_size();
}
inline void ListModelVersionsRequest::clear_concept_ids() {
  concept_ids_.Clear();
}
inline std::string* ListModelVersionsRequest::add_concept_ids() {
  std::string* _s = _internal_add_concept_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListModelVersionsRequest.concept_ids)
  return _s;
}
inline const std::string& ListModelVersionsRequest::_internal_concept_ids(int index) const {
  return concept_ids_.Get(index);
}
inline const std::string& ListModelVersionsRequest::concept_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionsRequest.concept_ids)
  return _internal_concept_ids(index);
}
inline std::string* ListModelVersionsRequest::mutable_concept_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelVersionsRequest.concept_ids)
  return concept_ids_.Mutable(index);
}
inline void ListModelVersionsRequest::set_concept_ids(int index, const std::string& value) {
  concept_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline void ListModelVersionsRequest::set_concept_ids(int index, std::string&& value) {
  concept_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline void ListModelVersionsRequest::set_concept_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline void ListModelVersionsRequest::set_concept_ids(int index, const char* value, size_t size) {
  concept_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline std::string* ListModelVersionsRequest::_internal_add_concept_ids() {
  return concept_ids_.Add();
}
inline void ListModelVersionsRequest::add_concept_ids(const std::string& value) {
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline void ListModelVersionsRequest::add_concept_ids(std::string&& value) {
  concept_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline void ListModelVersionsRequest::add_concept_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline void ListModelVersionsRequest::add_concept_ids(const char* value, size_t size) {
  concept_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListModelVersionsRequest.concept_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListModelVersionsRequest::concept_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListModelVersionsRequest.concept_ids)
  return concept_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListModelVersionsRequest::mutable_concept_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListModelVersionsRequest.concept_ids)
  return &concept_ids_;
}

// -------------------------------------------------------------------

// DeleteModelVersionRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteModelVersionRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteModelVersionRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelVersionRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteModelVersionRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelVersionRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteModelVersionRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteModelVersionRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteModelVersionRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelVersionRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelVersionRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelVersionRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteModelVersionRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelVersionRequest.user_app_id)
  return _msg;
}
inline void DeleteModelVersionRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelVersionRequest.user_app_id)
}

// string model_id = 3;
inline void DeleteModelVersionRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& DeleteModelVersionRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelVersionRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteModelVersionRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelVersionRequest.model_id)
}
inline std::string* DeleteModelVersionRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelVersionRequest.model_id)
  return _s;
}
inline const std::string& DeleteModelVersionRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void DeleteModelVersionRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteModelVersionRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteModelVersionRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelVersionRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteModelVersionRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelVersionRequest.model_id)
}

// string version_id = 4;
inline void DeleteModelVersionRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& DeleteModelVersionRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteModelVersionRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteModelVersionRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteModelVersionRequest.version_id)
}
inline std::string* DeleteModelVersionRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteModelVersionRequest.version_id)
  return _s;
}
inline const std::string& DeleteModelVersionRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void DeleteModelVersionRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteModelVersionRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteModelVersionRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteModelVersionRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteModelVersionRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteModelVersionRequest.version_id)
}

// -------------------------------------------------------------------

// SingleModelVersionResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleModelVersionResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleModelVersionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleModelVersionResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleModelVersionResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleModelVersionResponse.status)
  return _internal_status();
}
inline void SingleModelVersionResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleModelVersionResponse.status)
}
inline ::clarifai::api::status::Status* SingleModelVersionResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleModelVersionResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleModelVersionResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleModelVersionResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleModelVersionResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleModelVersionResponse.status)
  return _msg;
}
inline void SingleModelVersionResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleModelVersionResponse.status)
}

// .clarifai.api.ModelVersion model_version = 2;
inline bool SingleModelVersionResponse::_internal_has_model_version() const {
  return this != internal_default_instance() && model_version_ != nullptr;
}
inline bool SingleModelVersionResponse::has_model_version() const {
  return _internal_has_model_version();
}
inline const ::clarifai::api::ModelVersion& SingleModelVersionResponse::_internal_model_version() const {
  const ::clarifai::api::ModelVersion* p = model_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::ModelVersion&>(
      ::clarifai::api::_ModelVersion_default_instance_);
}
inline const ::clarifai::api::ModelVersion& SingleModelVersionResponse::model_version() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleModelVersionResponse.model_version)
  return _internal_model_version();
}
inline void SingleModelVersionResponse::unsafe_arena_set_allocated_model_version(
    ::clarifai::api::ModelVersion* model_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_version_);
  }
  model_version_ = model_version;
  if (model_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleModelVersionResponse.model_version)
}
inline ::clarifai::api::ModelVersion* SingleModelVersionResponse::release_model_version() {
  
  ::clarifai::api::ModelVersion* temp = model_version_;
  model_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::ModelVersion* SingleModelVersionResponse::unsafe_arena_release_model_version() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleModelVersionResponse.model_version)
  
  ::clarifai::api::ModelVersion* temp = model_version_;
  model_version_ = nullptr;
  return temp;
}
inline ::clarifai::api::ModelVersion* SingleModelVersionResponse::_internal_mutable_model_version() {
  
  if (model_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ModelVersion>(GetArenaForAllocation());
    model_version_ = p;
  }
  return model_version_;
}
inline ::clarifai::api::ModelVersion* SingleModelVersionResponse::mutable_model_version() {
  ::clarifai::api::ModelVersion* _msg = _internal_mutable_model_version();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleModelVersionResponse.model_version)
  return _msg;
}
inline void SingleModelVersionResponse::set_allocated_model_version(::clarifai::api::ModelVersion* model_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_version_);
  }
  if (model_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_version));
    if (message_arena != submessage_arena) {
      model_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_version, submessage_arena);
    }
    
  } else {
    
  }
  model_version_ = model_version;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleModelVersionResponse.model_version)
}

// -------------------------------------------------------------------

// MultiModelVersionResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiModelVersionResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiModelVersionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiModelVersionResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiModelVersionResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelVersionResponse.status)
  return _internal_status();
}
inline void MultiModelVersionResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiModelVersionResponse.status)
}
inline ::clarifai::api::status::Status* MultiModelVersionResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelVersionResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiModelVersionResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelVersionResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiModelVersionResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelVersionResponse.status)
  return _msg;
}
inline void MultiModelVersionResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiModelVersionResponse.status)
}

// repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiModelVersionResponse::_internal_model_versions_size() const {
  return model_versions_.size();
}
inline int MultiModelVersionResponse::model_versions_size() const {
  return _internal_model_versions_size();
}
inline ::clarifai::api::ModelVersion* MultiModelVersionResponse::mutable_model_versions(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelVersionResponse.model_versions)
  return model_versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >*
MultiModelVersionResponse::mutable_model_versions() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiModelVersionResponse.model_versions)
  return &model_versions_;
}
inline const ::clarifai::api::ModelVersion& MultiModelVersionResponse::_internal_model_versions(int index) const {
  return model_versions_.Get(index);
}
inline const ::clarifai::api::ModelVersion& MultiModelVersionResponse::model_versions(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelVersionResponse.model_versions)
  return _internal_model_versions(index);
}
inline ::clarifai::api::ModelVersion* MultiModelVersionResponse::_internal_add_model_versions() {
  return model_versions_.Add();
}
inline ::clarifai::api::ModelVersion* MultiModelVersionResponse::add_model_versions() {
  ::clarifai::api::ModelVersion* _add = _internal_add_model_versions();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelVersionResponse.model_versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >&
MultiModelVersionResponse::model_versions() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiModelVersionResponse.model_versions)
  return model_versions_;
}

// -------------------------------------------------------------------

// PostModelVersionsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelVersionsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelVersionsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostModelVersionsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelVersionsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.user_app_id)
  return _msg;
}
inline void PostModelVersionsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsRequest.user_app_id)
}

// string model_id = 2;
inline void PostModelVersionsRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& PostModelVersionsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostModelVersionsRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionsRequest.model_id)
}
inline std::string* PostModelVersionsRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.model_id)
  return _s;
}
inline const std::string& PostModelVersionsRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void PostModelVersionsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostModelVersionsRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostModelVersionsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostModelVersionsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsRequest.model_id)
}

// repeated .clarifai.api.ModelVersion model_versions = 3;
inline int PostModelVersionsRequest::_internal_model_versions_size() const {
  return model_versions_.size();
}
inline int PostModelVersionsRequest::model_versions_size() const {
  return _internal_model_versions_size();
}
inline ::clarifai::api::ModelVersion* PostModelVersionsRequest::mutable_model_versions(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.model_versions)
  return model_versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >*
PostModelVersionsRequest::mutable_model_versions() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostModelVersionsRequest.model_versions)
  return &model_versions_;
}
inline const ::clarifai::api::ModelVersion& PostModelVersionsRequest::_internal_model_versions(int index) const {
  return model_versions_.Get(index);
}
inline const ::clarifai::api::ModelVersion& PostModelVersionsRequest::model_versions(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.model_versions)
  return _internal_model_versions(index);
}
inline ::clarifai::api::ModelVersion* PostModelVersionsRequest::_internal_add_model_versions() {
  return model_versions_.Add();
}
inline ::clarifai::api::ModelVersion* PostModelVersionsRequest::add_model_versions() {
  ::clarifai::api::ModelVersion* _add = _internal_add_model_versions();
  // @@protoc_insertion_point(field_add:clarifai.api.PostModelVersionsRequest.model_versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersion >&
PostModelVersionsRequest::model_versions() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostModelVersionsRequest.model_versions)
  return model_versions_;
}

// .clarifai.api.Search search = 4 [deprecated = true];
inline bool PostModelVersionsRequest::_internal_has_search() const {
  return this != internal_default_instance() && search_ != nullptr;
}
inline bool PostModelVersionsRequest::has_search() const {
  return _internal_has_search();
}
inline const ::clarifai::api::Search& PostModelVersionsRequest::_internal_search() const {
  const ::clarifai::api::Search* p = search_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Search&>(
      ::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostModelVersionsRequest::search() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.search)
  return _internal_search();
}
inline void PostModelVersionsRequest::unsafe_arena_set_allocated_search(
    ::clarifai::api::Search* search) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_);
  }
  search_ = search;
  if (search) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelVersionsRequest.search)
}
inline ::clarifai::api::Search* PostModelVersionsRequest::release_search() {
  
  ::clarifai::api::Search* temp = search_;
  search_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::unsafe_arena_release_search() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsRequest.search)
  
  ::clarifai::api::Search* temp = search_;
  search_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::_internal_mutable_search() {
  
  if (search_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaForAllocation());
    search_ = p;
  }
  return search_;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::mutable_search() {
  ::clarifai::api::Search* _msg = _internal_mutable_search();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.search)
  return _msg;
}
inline void PostModelVersionsRequest::set_allocated_search(::clarifai::api::Search* search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_);
  }
  if (search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search));
    if (message_arena != submessage_arena) {
      search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search, submessage_arena);
    }
    
  } else {
    
  }
  search_ = search;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsRequest.search)
}

// .clarifai.api.Search train_search = 5;
inline bool PostModelVersionsRequest::_internal_has_train_search() const {
  return this != internal_default_instance() && train_search_ != nullptr;
}
inline bool PostModelVersionsRequest::has_train_search() const {
  return _internal_has_train_search();
}
inline const ::clarifai::api::Search& PostModelVersionsRequest::_internal_train_search() const {
  const ::clarifai::api::Search* p = train_search_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Search&>(
      ::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostModelVersionsRequest::train_search() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.train_search)
  return _internal_train_search();
}
inline void PostModelVersionsRequest::unsafe_arena_set_allocated_train_search(
    ::clarifai::api::Search* train_search) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(train_search_);
  }
  train_search_ = train_search;
  if (train_search) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelVersionsRequest.train_search)
}
inline ::clarifai::api::Search* PostModelVersionsRequest::release_train_search() {
  
  ::clarifai::api::Search* temp = train_search_;
  train_search_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::unsafe_arena_release_train_search() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsRequest.train_search)
  
  ::clarifai::api::Search* temp = train_search_;
  train_search_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::_internal_mutable_train_search() {
  
  if (train_search_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaForAllocation());
    train_search_ = p;
  }
  return train_search_;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::mutable_train_search() {
  ::clarifai::api::Search* _msg = _internal_mutable_train_search();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.train_search)
  return _msg;
}
inline void PostModelVersionsRequest::set_allocated_train_search(::clarifai::api::Search* train_search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(train_search_);
  }
  if (train_search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(train_search));
    if (message_arena != submessage_arena) {
      train_search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, train_search, submessage_arena);
    }
    
  } else {
    
  }
  train_search_ = train_search;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsRequest.train_search)
}

// .clarifai.api.Search test_search = 6;
inline bool PostModelVersionsRequest::_internal_has_test_search() const {
  return this != internal_default_instance() && test_search_ != nullptr;
}
inline bool PostModelVersionsRequest::has_test_search() const {
  return _internal_has_test_search();
}
inline const ::clarifai::api::Search& PostModelVersionsRequest::_internal_test_search() const {
  const ::clarifai::api::Search* p = test_search_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Search&>(
      ::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostModelVersionsRequest::test_search() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.test_search)
  return _internal_test_search();
}
inline void PostModelVersionsRequest::unsafe_arena_set_allocated_test_search(
    ::clarifai::api::Search* test_search) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_search_);
  }
  test_search_ = test_search;
  if (test_search) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelVersionsRequest.test_search)
}
inline ::clarifai::api::Search* PostModelVersionsRequest::release_test_search() {
  
  ::clarifai::api::Search* temp = test_search_;
  test_search_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::unsafe_arena_release_test_search() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsRequest.test_search)
  
  ::clarifai::api::Search* temp = test_search_;
  test_search_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::_internal_mutable_test_search() {
  
  if (test_search_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaForAllocation());
    test_search_ = p;
  }
  return test_search_;
}
inline ::clarifai::api::Search* PostModelVersionsRequest::mutable_test_search() {
  ::clarifai::api::Search* _msg = _internal_mutable_test_search();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.test_search)
  return _msg;
}
inline void PostModelVersionsRequest::set_allocated_test_search(::clarifai::api::Search* test_search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_search_);
  }
  if (test_search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_search));
    if (message_arena != submessage_arena) {
      test_search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_search, submessage_arena);
    }
    
  } else {
    
  }
  test_search_ = test_search;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsRequest.test_search)
}

// bool evaluate_after_training = 7;
inline void PostModelVersionsRequest::clear_evaluate_after_training() {
  evaluate_after_training_ = false;
}
inline bool PostModelVersionsRequest::_internal_evaluate_after_training() const {
  return evaluate_after_training_;
}
inline bool PostModelVersionsRequest::evaluate_after_training() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.evaluate_after_training)
  return _internal_evaluate_after_training();
}
inline void PostModelVersionsRequest::_internal_set_evaluate_after_training(bool value) {
  
  evaluate_after_training_ = value;
}
inline void PostModelVersionsRequest::set_evaluate_after_training(bool value) {
  _internal_set_evaluate_after_training(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionsRequest.evaluate_after_training)
}

// string description = 8;
inline void PostModelVersionsRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& PostModelVersionsRequest::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostModelVersionsRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionsRequest.description)
}
inline std::string* PostModelVersionsRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.description)
  return _s;
}
inline const std::string& PostModelVersionsRequest::_internal_description() const {
  return description_.Get();
}
inline void PostModelVersionsRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostModelVersionsRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostModelVersionsRequest::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostModelVersionsRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsRequest.description)
}

// .clarifai.api.DatasetVersion dataset_version = 9;
inline bool PostModelVersionsRequest::_internal_has_dataset_version() const {
  return this != internal_default_instance() && dataset_version_ != nullptr;
}
inline bool PostModelVersionsRequest::has_dataset_version() const {
  return _internal_has_dataset_version();
}
inline const ::clarifai::api::DatasetVersion& PostModelVersionsRequest::_internal_dataset_version() const {
  const ::clarifai::api::DatasetVersion* p = dataset_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::DatasetVersion&>(
      ::clarifai::api::_DatasetVersion_default_instance_);
}
inline const ::clarifai::api::DatasetVersion& PostModelVersionsRequest::dataset_version() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsRequest.dataset_version)
  return _internal_dataset_version();
}
inline void PostModelVersionsRequest::unsafe_arena_set_allocated_dataset_version(
    ::clarifai::api::DatasetVersion* dataset_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_version_);
  }
  dataset_version_ = dataset_version;
  if (dataset_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelVersionsRequest.dataset_version)
}
inline ::clarifai::api::DatasetVersion* PostModelVersionsRequest::release_dataset_version() {
  
  ::clarifai::api::DatasetVersion* temp = dataset_version_;
  dataset_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::DatasetVersion* PostModelVersionsRequest::unsafe_arena_release_dataset_version() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsRequest.dataset_version)
  
  ::clarifai::api::DatasetVersion* temp = dataset_version_;
  dataset_version_ = nullptr;
  return temp;
}
inline ::clarifai::api::DatasetVersion* PostModelVersionsRequest::_internal_mutable_dataset_version() {
  
  if (dataset_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::DatasetVersion>(GetArenaForAllocation());
    dataset_version_ = p;
  }
  return dataset_version_;
}
inline ::clarifai::api::DatasetVersion* PostModelVersionsRequest::mutable_dataset_version() {
  ::clarifai::api::DatasetVersion* _msg = _internal_mutable_dataset_version();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsRequest.dataset_version)
  return _msg;
}
inline void PostModelVersionsRequest::set_allocated_dataset_version(::clarifai::api::DatasetVersion* dataset_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_version_);
  }
  if (dataset_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_version));
    if (message_arena != submessage_arena) {
      dataset_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataset_version, submessage_arena);
    }
    
  } else {
    
  }
  dataset_version_ = dataset_version;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsRequest.dataset_version)
}

// -------------------------------------------------------------------

// PostWorkflowVersionsUnPublishRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostWorkflowVersionsUnPublishRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostWorkflowVersionsUnPublishRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowVersionsUnPublishRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowVersionsUnPublishRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowVersionsUnPublishRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostWorkflowVersionsUnPublishRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostWorkflowVersionsUnPublishRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowVersionsUnPublishRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowVersionsUnPublishRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowVersionsUnPublishRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowVersionsUnPublishRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowVersionsUnPublishRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowVersionsUnPublishRequest.user_app_id)
  return _msg;
}
inline void PostWorkflowVersionsUnPublishRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowVersionsUnPublishRequest.user_app_id)
}

// string workflow_id = 2;
inline void PostWorkflowVersionsUnPublishRequest::clear_workflow_id() {
  workflow_id_.ClearToEmpty();
}
inline const std::string& PostWorkflowVersionsUnPublishRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowVersionsUnPublishRequest.workflow_id)
  return _internal_workflow_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostWorkflowVersionsUnPublishRequest::set_workflow_id(ArgT0&& arg0, ArgT... args) {
 
 workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowVersionsUnPublishRequest.workflow_id)
}
inline std::string* PostWorkflowVersionsUnPublishRequest::mutable_workflow_id() {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowVersionsUnPublishRequest.workflow_id)
  return _s;
}
inline const std::string& PostWorkflowVersionsUnPublishRequest::_internal_workflow_id() const {
  return workflow_id_.Get();
}
inline void PostWorkflowVersionsUnPublishRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostWorkflowVersionsUnPublishRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostWorkflowVersionsUnPublishRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowVersionsUnPublishRequest.workflow_id)
  return workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostWorkflowVersionsUnPublishRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowVersionsUnPublishRequest.workflow_id)
}

// repeated .clarifai.api.WorkflowVersionUnPublishRequest publications = 3;
inline int PostWorkflowVersionsUnPublishRequest::_internal_publications_size() const {
  return publications_.size();
}
inline int PostWorkflowVersionsUnPublishRequest::publications_size() const {
  return _internal_publications_size();
}
inline void PostWorkflowVersionsUnPublishRequest::clear_publications() {
  publications_.Clear();
}
inline ::clarifai::api::WorkflowVersionUnPublishRequest* PostWorkflowVersionsUnPublishRequest::mutable_publications(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowVersionsUnPublishRequest.publications)
  return publications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersionUnPublishRequest >*
PostWorkflowVersionsUnPublishRequest::mutable_publications() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowVersionsUnPublishRequest.publications)
  return &publications_;
}
inline const ::clarifai::api::WorkflowVersionUnPublishRequest& PostWorkflowVersionsUnPublishRequest::_internal_publications(int index) const {
  return publications_.Get(index);
}
inline const ::clarifai::api::WorkflowVersionUnPublishRequest& PostWorkflowVersionsUnPublishRequest::publications(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowVersionsUnPublishRequest.publications)
  return _internal_publications(index);
}
inline ::clarifai::api::WorkflowVersionUnPublishRequest* PostWorkflowVersionsUnPublishRequest::_internal_add_publications() {
  return publications_.Add();
}
inline ::clarifai::api::WorkflowVersionUnPublishRequest* PostWorkflowVersionsUnPublishRequest::add_publications() {
  ::clarifai::api::WorkflowVersionUnPublishRequest* _add = _internal_add_publications();
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowVersionsUnPublishRequest.publications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersionUnPublishRequest >&
PostWorkflowVersionsUnPublishRequest::publications() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowVersionsUnPublishRequest.publications)
  return publications_;
}

// -------------------------------------------------------------------

// PostWorkflowVersionsPublishRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostWorkflowVersionsPublishRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostWorkflowVersionsPublishRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowVersionsPublishRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowVersionsPublishRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowVersionsPublishRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostWorkflowVersionsPublishRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostWorkflowVersionsPublishRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowVersionsPublishRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowVersionsPublishRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowVersionsPublishRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowVersionsPublishRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowVersionsPublishRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowVersionsPublishRequest.user_app_id)
  return _msg;
}
inline void PostWorkflowVersionsPublishRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowVersionsPublishRequest.user_app_id)
}

// string workflow_id = 2;
inline void PostWorkflowVersionsPublishRequest::clear_workflow_id() {
  workflow_id_.ClearToEmpty();
}
inline const std::string& PostWorkflowVersionsPublishRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowVersionsPublishRequest.workflow_id)
  return _internal_workflow_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostWorkflowVersionsPublishRequest::set_workflow_id(ArgT0&& arg0, ArgT... args) {
 
 workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowVersionsPublishRequest.workflow_id)
}
inline std::string* PostWorkflowVersionsPublishRequest::mutable_workflow_id() {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowVersionsPublishRequest.workflow_id)
  return _s;
}
inline const std::string& PostWorkflowVersionsPublishRequest::_internal_workflow_id() const {
  return workflow_id_.Get();
}
inline void PostWorkflowVersionsPublishRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostWorkflowVersionsPublishRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostWorkflowVersionsPublishRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowVersionsPublishRequest.workflow_id)
  return workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostWorkflowVersionsPublishRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowVersionsPublishRequest.workflow_id)
}

// repeated .clarifai.api.WorkflowVersionPublishRequest publications = 3;
inline int PostWorkflowVersionsPublishRequest::_internal_publications_size() const {
  return publications_.size();
}
inline int PostWorkflowVersionsPublishRequest::publications_size() const {
  return _internal_publications_size();
}
inline void PostWorkflowVersionsPublishRequest::clear_publications() {
  publications_.Clear();
}
inline ::clarifai::api::WorkflowVersionPublishRequest* PostWorkflowVersionsPublishRequest::mutable_publications(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowVersionsPublishRequest.publications)
  return publications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersionPublishRequest >*
PostWorkflowVersionsPublishRequest::mutable_publications() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowVersionsPublishRequest.publications)
  return &publications_;
}
inline const ::clarifai::api::WorkflowVersionPublishRequest& PostWorkflowVersionsPublishRequest::_internal_publications(int index) const {
  return publications_.Get(index);
}
inline const ::clarifai::api::WorkflowVersionPublishRequest& PostWorkflowVersionsPublishRequest::publications(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowVersionsPublishRequest.publications)
  return _internal_publications(index);
}
inline ::clarifai::api::WorkflowVersionPublishRequest* PostWorkflowVersionsPublishRequest::_internal_add_publications() {
  return publications_.Add();
}
inline ::clarifai::api::WorkflowVersionPublishRequest* PostWorkflowVersionsPublishRequest::add_publications() {
  ::clarifai::api::WorkflowVersionPublishRequest* _add = _internal_add_publications();
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowVersionsPublishRequest.publications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersionPublishRequest >&
PostWorkflowVersionsPublishRequest::publications() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowVersionsPublishRequest.publications)
  return publications_;
}

// -------------------------------------------------------------------

// WorkflowVersionPublishRequest

// string version_id = 1;
inline void WorkflowVersionPublishRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& WorkflowVersionPublishRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowVersionPublishRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowVersionPublishRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowVersionPublishRequest.version_id)
}
inline std::string* WorkflowVersionPublishRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowVersionPublishRequest.version_id)
  return _s;
}
inline const std::string& WorkflowVersionPublishRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void WorkflowVersionPublishRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowVersionPublishRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowVersionPublishRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowVersionPublishRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowVersionPublishRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowVersionPublishRequest.version_id)
}

// -------------------------------------------------------------------

// WorkflowVersionUnPublishRequest

// string version_id = 1;
inline void WorkflowVersionUnPublishRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& WorkflowVersionUnPublishRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowVersionUnPublishRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowVersionUnPublishRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowVersionUnPublishRequest.version_id)
}
inline std::string* WorkflowVersionUnPublishRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowVersionUnPublishRequest.version_id)
  return _s;
}
inline const std::string& WorkflowVersionUnPublishRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void WorkflowVersionUnPublishRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowVersionUnPublishRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowVersionUnPublishRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowVersionUnPublishRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowVersionUnPublishRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowVersionUnPublishRequest.version_id)
}

// -------------------------------------------------------------------

// ModelVersionPublishRequest

// string version_id = 1;
inline void ModelVersionPublishRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& ModelVersionPublishRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersionPublishRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelVersionPublishRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersionPublishRequest.version_id)
}
inline std::string* ModelVersionPublishRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersionPublishRequest.version_id)
  return _s;
}
inline const std::string& ModelVersionPublishRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void ModelVersionPublishRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelVersionPublishRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelVersionPublishRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersionPublishRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelVersionPublishRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersionPublishRequest.version_id)
}

// -------------------------------------------------------------------

// PostModelVersionsPublishRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelVersionsPublishRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelVersionsPublishRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionsPublishRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionsPublishRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsPublishRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostModelVersionsPublishRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelVersionsPublishRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsPublishRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsPublishRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsPublishRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsPublishRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsPublishRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsPublishRequest.user_app_id)
  return _msg;
}
inline void PostModelVersionsPublishRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsPublishRequest.user_app_id)
}

// string model_id = 2;
inline void PostModelVersionsPublishRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& PostModelVersionsPublishRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsPublishRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostModelVersionsPublishRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionsPublishRequest.model_id)
}
inline std::string* PostModelVersionsPublishRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsPublishRequest.model_id)
  return _s;
}
inline const std::string& PostModelVersionsPublishRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void PostModelVersionsPublishRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostModelVersionsPublishRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostModelVersionsPublishRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsPublishRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostModelVersionsPublishRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsPublishRequest.model_id)
}

// repeated .clarifai.api.ModelVersionPublishRequest publications = 3;
inline int PostModelVersionsPublishRequest::_internal_publications_size() const {
  return publications_.size();
}
inline int PostModelVersionsPublishRequest::publications_size() const {
  return _internal_publications_size();
}
inline void PostModelVersionsPublishRequest::clear_publications() {
  publications_.Clear();
}
inline ::clarifai::api::ModelVersionPublishRequest* PostModelVersionsPublishRequest::mutable_publications(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsPublishRequest.publications)
  return publications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionPublishRequest >*
PostModelVersionsPublishRequest::mutable_publications() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostModelVersionsPublishRequest.publications)
  return &publications_;
}
inline const ::clarifai::api::ModelVersionPublishRequest& PostModelVersionsPublishRequest::_internal_publications(int index) const {
  return publications_.Get(index);
}
inline const ::clarifai::api::ModelVersionPublishRequest& PostModelVersionsPublishRequest::publications(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsPublishRequest.publications)
  return _internal_publications(index);
}
inline ::clarifai::api::ModelVersionPublishRequest* PostModelVersionsPublishRequest::_internal_add_publications() {
  return publications_.Add();
}
inline ::clarifai::api::ModelVersionPublishRequest* PostModelVersionsPublishRequest::add_publications() {
  ::clarifai::api::ModelVersionPublishRequest* _add = _internal_add_publications();
  // @@protoc_insertion_point(field_add:clarifai.api.PostModelVersionsPublishRequest.publications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionPublishRequest >&
PostModelVersionsPublishRequest::publications() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostModelVersionsPublishRequest.publications)
  return publications_;
}

// -------------------------------------------------------------------

// ModelVersionUnpublishRequest

// string version_id = 1;
inline void ModelVersionUnpublishRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& ModelVersionUnpublishRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersionUnpublishRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelVersionUnpublishRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersionUnpublishRequest.version_id)
}
inline std::string* ModelVersionUnpublishRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersionUnpublishRequest.version_id)
  return _s;
}
inline const std::string& ModelVersionUnpublishRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void ModelVersionUnpublishRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelVersionUnpublishRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelVersionUnpublishRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersionUnpublishRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelVersionUnpublishRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersionUnpublishRequest.version_id)
}

// -------------------------------------------------------------------

// PostModelVersionsUnPublishRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelVersionsUnPublishRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelVersionsUnPublishRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionsUnPublishRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionsUnPublishRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsUnPublishRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostModelVersionsUnPublishRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelVersionsUnPublishRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsUnPublishRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsUnPublishRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsUnPublishRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsUnPublishRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionsUnPublishRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsUnPublishRequest.user_app_id)
  return _msg;
}
inline void PostModelVersionsUnPublishRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsUnPublishRequest.user_app_id)
}

// string model_id = 2;
inline void PostModelVersionsUnPublishRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& PostModelVersionsUnPublishRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsUnPublishRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostModelVersionsUnPublishRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionsUnPublishRequest.model_id)
}
inline std::string* PostModelVersionsUnPublishRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsUnPublishRequest.model_id)
  return _s;
}
inline const std::string& PostModelVersionsUnPublishRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void PostModelVersionsUnPublishRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostModelVersionsUnPublishRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostModelVersionsUnPublishRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionsUnPublishRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostModelVersionsUnPublishRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionsUnPublishRequest.model_id)
}

// repeated .clarifai.api.ModelVersionUnpublishRequest publications = 3;
inline int PostModelVersionsUnPublishRequest::_internal_publications_size() const {
  return publications_.size();
}
inline int PostModelVersionsUnPublishRequest::publications_size() const {
  return _internal_publications_size();
}
inline void PostModelVersionsUnPublishRequest::clear_publications() {
  publications_.Clear();
}
inline ::clarifai::api::ModelVersionUnpublishRequest* PostModelVersionsUnPublishRequest::mutable_publications(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionsUnPublishRequest.publications)
  return publications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionUnpublishRequest >*
PostModelVersionsUnPublishRequest::mutable_publications() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostModelVersionsUnPublishRequest.publications)
  return &publications_;
}
inline const ::clarifai::api::ModelVersionUnpublishRequest& PostModelVersionsUnPublishRequest::_internal_publications(int index) const {
  return publications_.Get(index);
}
inline const ::clarifai::api::ModelVersionUnpublishRequest& PostModelVersionsUnPublishRequest::publications(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionsUnPublishRequest.publications)
  return _internal_publications(index);
}
inline ::clarifai::api::ModelVersionUnpublishRequest* PostModelVersionsUnPublishRequest::_internal_add_publications() {
  return publications_.Add();
}
inline ::clarifai::api::ModelVersionUnpublishRequest* PostModelVersionsUnPublishRequest::add_publications() {
  ::clarifai::api::ModelVersionUnpublishRequest* _add = _internal_add_publications();
  // @@protoc_insertion_point(field_add:clarifai.api.PostModelVersionsUnPublishRequest.publications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionUnpublishRequest >&
PostModelVersionsUnPublishRequest::publications() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostModelVersionsUnPublishRequest.publications)
  return publications_;
}

// -------------------------------------------------------------------

// PostModelVersionMetricsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostModelVersionMetricsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostModelVersionMetricsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionMetricsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostModelVersionMetricsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionMetricsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostModelVersionMetricsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelVersionMetricsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionMetricsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionMetricsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionMetricsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionMetricsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostModelVersionMetricsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionMetricsRequest.user_app_id)
  return _msg;
}
inline void PostModelVersionMetricsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionMetricsRequest.user_app_id)
}

// string model_id = 2;
inline void PostModelVersionMetricsRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& PostModelVersionMetricsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionMetricsRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostModelVersionMetricsRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionMetricsRequest.model_id)
}
inline std::string* PostModelVersionMetricsRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionMetricsRequest.model_id)
  return _s;
}
inline const std::string& PostModelVersionMetricsRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void PostModelVersionMetricsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostModelVersionMetricsRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostModelVersionMetricsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionMetricsRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostModelVersionMetricsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionMetricsRequest.model_id)
}

// string version_id = 3;
inline void PostModelVersionMetricsRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& PostModelVersionMetricsRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionMetricsRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostModelVersionMetricsRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionMetricsRequest.version_id)
}
inline std::string* PostModelVersionMetricsRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionMetricsRequest.version_id)
  return _s;
}
inline const std::string& PostModelVersionMetricsRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void PostModelVersionMetricsRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostModelVersionMetricsRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostModelVersionMetricsRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionMetricsRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostModelVersionMetricsRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionMetricsRequest.version_id)
}

// uint32 max_examples = 4;
inline void PostModelVersionMetricsRequest::clear_max_examples() {
  max_examples_ = 0u;
}
inline uint32_t PostModelVersionMetricsRequest::_internal_max_examples() const {
  return max_examples_;
}
inline uint32_t PostModelVersionMetricsRequest::max_examples() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionMetricsRequest.max_examples)
  return _internal_max_examples();
}
inline void PostModelVersionMetricsRequest::_internal_set_max_examples(uint32_t value) {
  
  max_examples_ = value;
}
inline void PostModelVersionMetricsRequest::set_max_examples(uint32_t value) {
  _internal_set_max_examples(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostModelVersionMetricsRequest.max_examples)
}

// .clarifai.api.Search test_search = 5;
inline bool PostModelVersionMetricsRequest::_internal_has_test_search() const {
  return this != internal_default_instance() && test_search_ != nullptr;
}
inline bool PostModelVersionMetricsRequest::has_test_search() const {
  return _internal_has_test_search();
}
inline const ::clarifai::api::Search& PostModelVersionMetricsRequest::_internal_test_search() const {
  const ::clarifai::api::Search* p = test_search_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Search&>(
      ::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostModelVersionMetricsRequest::test_search() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostModelVersionMetricsRequest.test_search)
  return _internal_test_search();
}
inline void PostModelVersionMetricsRequest::unsafe_arena_set_allocated_test_search(
    ::clarifai::api::Search* test_search) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_search_);
  }
  test_search_ = test_search;
  if (test_search) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostModelVersionMetricsRequest.test_search)
}
inline ::clarifai::api::Search* PostModelVersionMetricsRequest::release_test_search() {
  
  ::clarifai::api::Search* temp = test_search_;
  test_search_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Search* PostModelVersionMetricsRequest::unsafe_arena_release_test_search() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostModelVersionMetricsRequest.test_search)
  
  ::clarifai::api::Search* temp = test_search_;
  test_search_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostModelVersionMetricsRequest::_internal_mutable_test_search() {
  
  if (test_search_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaForAllocation());
    test_search_ = p;
  }
  return test_search_;
}
inline ::clarifai::api::Search* PostModelVersionMetricsRequest::mutable_test_search() {
  ::clarifai::api::Search* _msg = _internal_mutable_test_search();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostModelVersionMetricsRequest.test_search)
  return _msg;
}
inline void PostModelVersionMetricsRequest::set_allocated_test_search(::clarifai::api::Search* test_search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_search_);
  }
  if (test_search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_search));
    if (message_arena != submessage_arena) {
      test_search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_search, submessage_arena);
    }
    
  } else {
    
  }
  test_search_ = test_search;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostModelVersionMetricsRequest.test_search)
}

// -------------------------------------------------------------------

// GetModelVersionMetricsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetModelVersionMetricsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetModelVersionMetricsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetModelVersionMetricsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetModelVersionMetricsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionMetricsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetModelVersionMetricsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetModelVersionMetricsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionMetricsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionMetricsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionMetricsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionMetricsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionMetricsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionMetricsRequest.user_app_id)
  return _msg;
}
inline void GetModelVersionMetricsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionMetricsRequest.user_app_id)
}

// string model_id = 2;
inline void GetModelVersionMetricsRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& GetModelVersionMetricsRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionMetricsRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelVersionMetricsRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelVersionMetricsRequest.model_id)
}
inline std::string* GetModelVersionMetricsRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionMetricsRequest.model_id)
  return _s;
}
inline const std::string& GetModelVersionMetricsRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void GetModelVersionMetricsRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetModelVersionMetricsRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetModelVersionMetricsRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionMetricsRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetModelVersionMetricsRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionMetricsRequest.model_id)
}

// string version_id = 3;
inline void GetModelVersionMetricsRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& GetModelVersionMetricsRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionMetricsRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelVersionMetricsRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelVersionMetricsRequest.version_id)
}
inline std::string* GetModelVersionMetricsRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionMetricsRequest.version_id)
  return _s;
}
inline const std::string& GetModelVersionMetricsRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void GetModelVersionMetricsRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetModelVersionMetricsRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetModelVersionMetricsRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionMetricsRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetModelVersionMetricsRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionMetricsRequest.version_id)
}

// .clarifai.api.FieldsValue fields = 4;
inline bool GetModelVersionMetricsRequest::_internal_has_fields() const {
  return this != internal_default_instance() && fields_ != nullptr;
}
inline bool GetModelVersionMetricsRequest::has_fields() const {
  return _internal_has_fields();
}
inline const ::clarifai::api::FieldsValue& GetModelVersionMetricsRequest::_internal_fields() const {
  const ::clarifai::api::FieldsValue* p = fields_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::FieldsValue&>(
      ::clarifai::api::_FieldsValue_default_instance_);
}
inline const ::clarifai::api::FieldsValue& GetModelVersionMetricsRequest::fields() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionMetricsRequest.fields)
  return _internal_fields();
}
inline void GetModelVersionMetricsRequest::unsafe_arena_set_allocated_fields(
    ::clarifai::api::FieldsValue* fields) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fields_);
  }
  fields_ = fields;
  if (fields) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetModelVersionMetricsRequest.fields)
}
inline ::clarifai::api::FieldsValue* GetModelVersionMetricsRequest::release_fields() {
  
  ::clarifai::api::FieldsValue* temp = fields_;
  fields_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::FieldsValue* GetModelVersionMetricsRequest::unsafe_arena_release_fields() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionMetricsRequest.fields)
  
  ::clarifai::api::FieldsValue* temp = fields_;
  fields_ = nullptr;
  return temp;
}
inline ::clarifai::api::FieldsValue* GetModelVersionMetricsRequest::_internal_mutable_fields() {
  
  if (fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::FieldsValue>(GetArenaForAllocation());
    fields_ = p;
  }
  return fields_;
}
inline ::clarifai::api::FieldsValue* GetModelVersionMetricsRequest::mutable_fields() {
  ::clarifai::api::FieldsValue* _msg = _internal_mutable_fields();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionMetricsRequest.fields)
  return _msg;
}
inline void GetModelVersionMetricsRequest::set_allocated_fields(::clarifai::api::FieldsValue* fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fields_);
  }
  if (fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fields));
    if (message_arena != submessage_arena) {
      fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fields, submessage_arena);
    }
    
  } else {
    
  }
  fields_ = fields;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionMetricsRequest.fields)
}

// -------------------------------------------------------------------

// GetModelTypeRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetModelTypeRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetModelTypeRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetModelTypeRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetModelTypeRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelTypeRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetModelTypeRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetModelTypeRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetModelTypeRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelTypeRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelTypeRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelTypeRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetModelTypeRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelTypeRequest.user_app_id)
  return _msg;
}
inline void GetModelTypeRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelTypeRequest.user_app_id)
}

// string model_type_id = 2;
inline void GetModelTypeRequest::clear_model_type_id() {
  model_type_id_.ClearToEmpty();
}
inline const std::string& GetModelTypeRequest::model_type_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelTypeRequest.model_type_id)
  return _internal_model_type_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelTypeRequest::set_model_type_id(ArgT0&& arg0, ArgT... args) {
 
 model_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelTypeRequest.model_type_id)
}
inline std::string* GetModelTypeRequest::mutable_model_type_id() {
  std::string* _s = _internal_mutable_model_type_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelTypeRequest.model_type_id)
  return _s;
}
inline const std::string& GetModelTypeRequest::_internal_model_type_id() const {
  return model_type_id_.Get();
}
inline void GetModelTypeRequest::_internal_set_model_type_id(const std::string& value) {
  
  model_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetModelTypeRequest::_internal_mutable_model_type_id() {
  
  return model_type_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetModelTypeRequest::release_model_type_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelTypeRequest.model_type_id)
  return model_type_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetModelTypeRequest::set_allocated_model_type_id(std::string* model_type_id) {
  if (model_type_id != nullptr) {
    
  } else {
    
  }
  model_type_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_type_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_type_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelTypeRequest.model_type_id)
}

// -------------------------------------------------------------------

// ListModelTypesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListModelTypesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListModelTypesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListModelTypesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListModelTypesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelTypesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListModelTypesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListModelTypesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListModelTypesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelTypesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelTypesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelTypesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListModelTypesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelTypesRequest.user_app_id)
  return _msg;
}
inline void ListModelTypesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelTypesRequest.user_app_id)
}

// uint32 page = 2;
inline void ListModelTypesRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListModelTypesRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListModelTypesRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelTypesRequest.page)
  return _internal_page();
}
inline void ListModelTypesRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListModelTypesRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelTypesRequest.page)
}

// uint32 per_page = 3;
inline void ListModelTypesRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListModelTypesRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListModelTypesRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelTypesRequest.per_page)
  return _internal_per_page();
}
inline void ListModelTypesRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListModelTypesRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelTypesRequest.per_page)
}

// -------------------------------------------------------------------

// ListOpenSourceLicensesRequest

// -------------------------------------------------------------------

// ListOpenSourceLicensesResponse

// .clarifai.api.status.Status status = 1;
inline bool ListOpenSourceLicensesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListOpenSourceLicensesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& ListOpenSourceLicensesResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& ListOpenSourceLicensesResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListOpenSourceLicensesResponse.status)
  return _internal_status();
}
inline void ListOpenSourceLicensesResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListOpenSourceLicensesResponse.status)
}
inline ::clarifai::api::status::Status* ListOpenSourceLicensesResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* ListOpenSourceLicensesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListOpenSourceLicensesResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* ListOpenSourceLicensesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* ListOpenSourceLicensesResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListOpenSourceLicensesResponse.status)
  return _msg;
}
inline void ListOpenSourceLicensesResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListOpenSourceLicensesResponse.status)
}

// repeated string licenses = 2;
inline int ListOpenSourceLicensesResponse::_internal_licenses_size() const {
  return licenses_.size();
}
inline int ListOpenSourceLicensesResponse::licenses_size() const {
  return _internal_licenses_size();
}
inline void ListOpenSourceLicensesResponse::clear_licenses() {
  licenses_.Clear();
}
inline std::string* ListOpenSourceLicensesResponse::add_licenses() {
  std::string* _s = _internal_add_licenses();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListOpenSourceLicensesResponse.licenses)
  return _s;
}
inline const std::string& ListOpenSourceLicensesResponse::_internal_licenses(int index) const {
  return licenses_.Get(index);
}
inline const std::string& ListOpenSourceLicensesResponse::licenses(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListOpenSourceLicensesResponse.licenses)
  return _internal_licenses(index);
}
inline std::string* ListOpenSourceLicensesResponse::mutable_licenses(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListOpenSourceLicensesResponse.licenses)
  return licenses_.Mutable(index);
}
inline void ListOpenSourceLicensesResponse::set_licenses(int index, const std::string& value) {
  licenses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListOpenSourceLicensesResponse.licenses)
}
inline void ListOpenSourceLicensesResponse::set_licenses(int index, std::string&& value) {
  licenses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListOpenSourceLicensesResponse.licenses)
}
inline void ListOpenSourceLicensesResponse::set_licenses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  licenses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListOpenSourceLicensesResponse.licenses)
}
inline void ListOpenSourceLicensesResponse::set_licenses(int index, const char* value, size_t size) {
  licenses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListOpenSourceLicensesResponse.licenses)
}
inline std::string* ListOpenSourceLicensesResponse::_internal_add_licenses() {
  return licenses_.Add();
}
inline void ListOpenSourceLicensesResponse::add_licenses(const std::string& value) {
  licenses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListOpenSourceLicensesResponse.licenses)
}
inline void ListOpenSourceLicensesResponse::add_licenses(std::string&& value) {
  licenses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListOpenSourceLicensesResponse.licenses)
}
inline void ListOpenSourceLicensesResponse::add_licenses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  licenses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListOpenSourceLicensesResponse.licenses)
}
inline void ListOpenSourceLicensesResponse::add_licenses(const char* value, size_t size) {
  licenses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListOpenSourceLicensesResponse.licenses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListOpenSourceLicensesResponse::licenses() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListOpenSourceLicensesResponse.licenses)
  return licenses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListOpenSourceLicensesResponse::mutable_licenses() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListOpenSourceLicensesResponse.licenses)
  return &licenses_;
}

// -------------------------------------------------------------------

// SingleModelTypeResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleModelTypeResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleModelTypeResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleModelTypeResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleModelTypeResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleModelTypeResponse.status)
  return _internal_status();
}
inline void SingleModelTypeResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleModelTypeResponse.status)
}
inline ::clarifai::api::status::Status* SingleModelTypeResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleModelTypeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleModelTypeResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleModelTypeResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleModelTypeResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleModelTypeResponse.status)
  return _msg;
}
inline void SingleModelTypeResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleModelTypeResponse.status)
}

// .clarifai.api.ModelType model_type = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline bool SingleModelTypeResponse::_internal_has_model_type() const {
  return this != internal_default_instance() && model_type_ != nullptr;
}
inline bool SingleModelTypeResponse::has_model_type() const {
  return _internal_has_model_type();
}
inline const ::clarifai::api::ModelType& SingleModelTypeResponse::_internal_model_type() const {
  const ::clarifai::api::ModelType* p = model_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::ModelType&>(
      ::clarifai::api::_ModelType_default_instance_);
}
inline const ::clarifai::api::ModelType& SingleModelTypeResponse::model_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleModelTypeResponse.model_type)
  return _internal_model_type();
}
inline void SingleModelTypeResponse::unsafe_arena_set_allocated_model_type(
    ::clarifai::api::ModelType* model_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_type_);
  }
  model_type_ = model_type;
  if (model_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleModelTypeResponse.model_type)
}
inline ::clarifai::api::ModelType* SingleModelTypeResponse::release_model_type() {
  
  ::clarifai::api::ModelType* temp = model_type_;
  model_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::ModelType* SingleModelTypeResponse::unsafe_arena_release_model_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleModelTypeResponse.model_type)
  
  ::clarifai::api::ModelType* temp = model_type_;
  model_type_ = nullptr;
  return temp;
}
inline ::clarifai::api::ModelType* SingleModelTypeResponse::_internal_mutable_model_type() {
  
  if (model_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ModelType>(GetArenaForAllocation());
    model_type_ = p;
  }
  return model_type_;
}
inline ::clarifai::api::ModelType* SingleModelTypeResponse::mutable_model_type() {
  ::clarifai::api::ModelType* _msg = _internal_mutable_model_type();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleModelTypeResponse.model_type)
  return _msg;
}
inline void SingleModelTypeResponse::set_allocated_model_type(::clarifai::api::ModelType* model_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_type_);
  }
  if (model_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_type));
    if (message_arena != submessage_arena) {
      model_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_type, submessage_arena);
    }
    
  } else {
    
  }
  model_type_ = model_type;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleModelTypeResponse.model_type)
}

// -------------------------------------------------------------------

// MultiModelTypeResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiModelTypeResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiModelTypeResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiModelTypeResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiModelTypeResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelTypeResponse.status)
  return _internal_status();
}
inline void MultiModelTypeResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiModelTypeResponse.status)
}
inline ::clarifai::api::status::Status* MultiModelTypeResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelTypeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiModelTypeResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelTypeResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiModelTypeResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelTypeResponse.status)
  return _msg;
}
inline void MultiModelTypeResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiModelTypeResponse.status)
}

// repeated .clarifai.api.ModelType model_types = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiModelTypeResponse::_internal_model_types_size() const {
  return model_types_.size();
}
inline int MultiModelTypeResponse::model_types_size() const {
  return _internal_model_types_size();
}
inline ::clarifai::api::ModelType* MultiModelTypeResponse::mutable_model_types(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelTypeResponse.model_types)
  return model_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelType >*
MultiModelTypeResponse::mutable_model_types() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiModelTypeResponse.model_types)
  return &model_types_;
}
inline const ::clarifai::api::ModelType& MultiModelTypeResponse::_internal_model_types(int index) const {
  return model_types_.Get(index);
}
inline const ::clarifai::api::ModelType& MultiModelTypeResponse::model_types(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelTypeResponse.model_types)
  return _internal_model_types(index);
}
inline ::clarifai::api::ModelType* MultiModelTypeResponse::_internal_add_model_types() {
  return model_types_.Add();
}
inline ::clarifai::api::ModelType* MultiModelTypeResponse::add_model_types() {
  ::clarifai::api::ModelType* _add = _internal_add_model_types();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelTypeResponse.model_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelType >&
MultiModelTypeResponse::model_types() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiModelTypeResponse.model_types)
  return model_types_;
}

// .clarifai.api.ModelTypeField model_importers = 3;
inline bool MultiModelTypeResponse::_internal_has_model_importers() const {
  return this != internal_default_instance() && model_importers_ != nullptr;
}
inline bool MultiModelTypeResponse::has_model_importers() const {
  return _internal_has_model_importers();
}
inline const ::clarifai::api::ModelTypeField& MultiModelTypeResponse::_internal_model_importers() const {
  const ::clarifai::api::ModelTypeField* p = model_importers_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::ModelTypeField&>(
      ::clarifai::api::_ModelTypeField_default_instance_);
}
inline const ::clarifai::api::ModelTypeField& MultiModelTypeResponse::model_importers() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelTypeResponse.model_importers)
  return _internal_model_importers();
}
inline void MultiModelTypeResponse::unsafe_arena_set_allocated_model_importers(
    ::clarifai::api::ModelTypeField* model_importers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_importers_);
  }
  model_importers_ = model_importers;
  if (model_importers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiModelTypeResponse.model_importers)
}
inline ::clarifai::api::ModelTypeField* MultiModelTypeResponse::release_model_importers() {
  
  ::clarifai::api::ModelTypeField* temp = model_importers_;
  model_importers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::ModelTypeField* MultiModelTypeResponse::unsafe_arena_release_model_importers() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiModelTypeResponse.model_importers)
  
  ::clarifai::api::ModelTypeField* temp = model_importers_;
  model_importers_ = nullptr;
  return temp;
}
inline ::clarifai::api::ModelTypeField* MultiModelTypeResponse::_internal_mutable_model_importers() {
  
  if (model_importers_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ModelTypeField>(GetArenaForAllocation());
    model_importers_ = p;
  }
  return model_importers_;
}
inline ::clarifai::api::ModelTypeField* MultiModelTypeResponse::mutable_model_importers() {
  ::clarifai::api::ModelTypeField* _msg = _internal_mutable_model_importers();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelTypeResponse.model_importers)
  return _msg;
}
inline void MultiModelTypeResponse::set_allocated_model_importers(::clarifai::api::ModelTypeField* model_importers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_importers_);
  }
  if (model_importers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_importers));
    if (message_arena != submessage_arena) {
      model_importers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_importers, submessage_arena);
    }
    
  } else {
    
  }
  model_importers_ = model_importers;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiModelTypeResponse.model_importers)
}

// -------------------------------------------------------------------

// GetModelVersionInputExampleRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetModelVersionInputExampleRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetModelVersionInputExampleRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetModelVersionInputExampleRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetModelVersionInputExampleRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionInputExampleRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetModelVersionInputExampleRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetModelVersionInputExampleRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionInputExampleRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionInputExampleRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionInputExampleRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionInputExampleRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetModelVersionInputExampleRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionInputExampleRequest.user_app_id)
  return _msg;
}
inline void GetModelVersionInputExampleRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionInputExampleRequest.user_app_id)
}

// string model_id = 2;
inline void GetModelVersionInputExampleRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& GetModelVersionInputExampleRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionInputExampleRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelVersionInputExampleRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelVersionInputExampleRequest.model_id)
}
inline std::string* GetModelVersionInputExampleRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionInputExampleRequest.model_id)
  return _s;
}
inline const std::string& GetModelVersionInputExampleRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void GetModelVersionInputExampleRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetModelVersionInputExampleRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetModelVersionInputExampleRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionInputExampleRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetModelVersionInputExampleRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionInputExampleRequest.model_id)
}

// string model_version_id = 3;
inline void GetModelVersionInputExampleRequest::clear_model_version_id() {
  model_version_id_.ClearToEmpty();
}
inline const std::string& GetModelVersionInputExampleRequest::model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionInputExampleRequest.model_version_id)
  return _internal_model_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelVersionInputExampleRequest::set_model_version_id(ArgT0&& arg0, ArgT... args) {
 
 model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelVersionInputExampleRequest.model_version_id)
}
inline std::string* GetModelVersionInputExampleRequest::mutable_model_version_id() {
  std::string* _s = _internal_mutable_model_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionInputExampleRequest.model_version_id)
  return _s;
}
inline const std::string& GetModelVersionInputExampleRequest::_internal_model_version_id() const {
  return model_version_id_.Get();
}
inline void GetModelVersionInputExampleRequest::_internal_set_model_version_id(const std::string& value) {
  
  model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetModelVersionInputExampleRequest::_internal_mutable_model_version_id() {
  
  return model_version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetModelVersionInputExampleRequest::release_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionInputExampleRequest.model_version_id)
  return model_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetModelVersionInputExampleRequest::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionInputExampleRequest.model_version_id)
}

// string example_id = 4;
inline void GetModelVersionInputExampleRequest::clear_example_id() {
  example_id_.ClearToEmpty();
}
inline const std::string& GetModelVersionInputExampleRequest::example_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetModelVersionInputExampleRequest.example_id)
  return _internal_example_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetModelVersionInputExampleRequest::set_example_id(ArgT0&& arg0, ArgT... args) {
 
 example_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetModelVersionInputExampleRequest.example_id)
}
inline std::string* GetModelVersionInputExampleRequest::mutable_example_id() {
  std::string* _s = _internal_mutable_example_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetModelVersionInputExampleRequest.example_id)
  return _s;
}
inline const std::string& GetModelVersionInputExampleRequest::_internal_example_id() const {
  return example_id_.Get();
}
inline void GetModelVersionInputExampleRequest::_internal_set_example_id(const std::string& value) {
  
  example_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetModelVersionInputExampleRequest::_internal_mutable_example_id() {
  
  return example_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetModelVersionInputExampleRequest::release_example_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetModelVersionInputExampleRequest.example_id)
  return example_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetModelVersionInputExampleRequest::set_allocated_example_id(std::string* example_id) {
  if (example_id != nullptr) {
    
  } else {
    
  }
  example_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), example_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (example_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    example_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetModelVersionInputExampleRequest.example_id)
}

// -------------------------------------------------------------------

// ListModelVersionInputExamplesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListModelVersionInputExamplesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListModelVersionInputExamplesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListModelVersionInputExamplesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListModelVersionInputExamplesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionInputExamplesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListModelVersionInputExamplesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListModelVersionInputExamplesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListModelVersionInputExamplesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelVersionInputExamplesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelVersionInputExamplesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelVersionInputExamplesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListModelVersionInputExamplesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelVersionInputExamplesRequest.user_app_id)
  return _msg;
}
inline void ListModelVersionInputExamplesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelVersionInputExamplesRequest.user_app_id)
}

// string model_id = 2;
inline void ListModelVersionInputExamplesRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& ListModelVersionInputExamplesRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionInputExamplesRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListModelVersionInputExamplesRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionInputExamplesRequest.model_id)
}
inline std::string* ListModelVersionInputExamplesRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelVersionInputExamplesRequest.model_id)
  return _s;
}
inline const std::string& ListModelVersionInputExamplesRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void ListModelVersionInputExamplesRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListModelVersionInputExamplesRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListModelVersionInputExamplesRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelVersionInputExamplesRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListModelVersionInputExamplesRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelVersionInputExamplesRequest.model_id)
}

// string model_version_id = 3;
inline void ListModelVersionInputExamplesRequest::clear_model_version_id() {
  model_version_id_.ClearToEmpty();
}
inline const std::string& ListModelVersionInputExamplesRequest::model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionInputExamplesRequest.model_version_id)
  return _internal_model_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListModelVersionInputExamplesRequest::set_model_version_id(ArgT0&& arg0, ArgT... args) {
 
 model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionInputExamplesRequest.model_version_id)
}
inline std::string* ListModelVersionInputExamplesRequest::mutable_model_version_id() {
  std::string* _s = _internal_mutable_model_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelVersionInputExamplesRequest.model_version_id)
  return _s;
}
inline const std::string& ListModelVersionInputExamplesRequest::_internal_model_version_id() const {
  return model_version_id_.Get();
}
inline void ListModelVersionInputExamplesRequest::_internal_set_model_version_id(const std::string& value) {
  
  model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListModelVersionInputExamplesRequest::_internal_mutable_model_version_id() {
  
  return model_version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListModelVersionInputExamplesRequest::release_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelVersionInputExamplesRequest.model_version_id)
  return model_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListModelVersionInputExamplesRequest::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelVersionInputExamplesRequest.model_version_id)
}

// uint32 page = 4;
inline void ListModelVersionInputExamplesRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListModelVersionInputExamplesRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListModelVersionInputExamplesRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionInputExamplesRequest.page)
  return _internal_page();
}
inline void ListModelVersionInputExamplesRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListModelVersionInputExamplesRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionInputExamplesRequest.page)
}

// uint32 per_page = 5;
inline void ListModelVersionInputExamplesRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListModelVersionInputExamplesRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListModelVersionInputExamplesRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelVersionInputExamplesRequest.per_page)
  return _internal_per_page();
}
inline void ListModelVersionInputExamplesRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListModelVersionInputExamplesRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelVersionInputExamplesRequest.per_page)
}

// -------------------------------------------------------------------

// SingleModelVersionInputExampleResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleModelVersionInputExampleResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleModelVersionInputExampleResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleModelVersionInputExampleResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleModelVersionInputExampleResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleModelVersionInputExampleResponse.status)
  return _internal_status();
}
inline void SingleModelVersionInputExampleResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleModelVersionInputExampleResponse.status)
}
inline ::clarifai::api::status::Status* SingleModelVersionInputExampleResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleModelVersionInputExampleResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleModelVersionInputExampleResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleModelVersionInputExampleResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleModelVersionInputExampleResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleModelVersionInputExampleResponse.status)
  return _msg;
}
inline void SingleModelVersionInputExampleResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleModelVersionInputExampleResponse.status)
}

// .clarifai.api.ModelVersionInputExample model_version_input_example = 2;
inline bool SingleModelVersionInputExampleResponse::_internal_has_model_version_input_example() const {
  return this != internal_default_instance() && model_version_input_example_ != nullptr;
}
inline bool SingleModelVersionInputExampleResponse::has_model_version_input_example() const {
  return _internal_has_model_version_input_example();
}
inline const ::clarifai::api::ModelVersionInputExample& SingleModelVersionInputExampleResponse::_internal_model_version_input_example() const {
  const ::clarifai::api::ModelVersionInputExample* p = model_version_input_example_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::ModelVersionInputExample&>(
      ::clarifai::api::_ModelVersionInputExample_default_instance_);
}
inline const ::clarifai::api::ModelVersionInputExample& SingleModelVersionInputExampleResponse::model_version_input_example() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleModelVersionInputExampleResponse.model_version_input_example)
  return _internal_model_version_input_example();
}
inline void SingleModelVersionInputExampleResponse::unsafe_arena_set_allocated_model_version_input_example(
    ::clarifai::api::ModelVersionInputExample* model_version_input_example) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_version_input_example_);
  }
  model_version_input_example_ = model_version_input_example;
  if (model_version_input_example) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleModelVersionInputExampleResponse.model_version_input_example)
}
inline ::clarifai::api::ModelVersionInputExample* SingleModelVersionInputExampleResponse::release_model_version_input_example() {
  
  ::clarifai::api::ModelVersionInputExample* temp = model_version_input_example_;
  model_version_input_example_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::ModelVersionInputExample* SingleModelVersionInputExampleResponse::unsafe_arena_release_model_version_input_example() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleModelVersionInputExampleResponse.model_version_input_example)
  
  ::clarifai::api::ModelVersionInputExample* temp = model_version_input_example_;
  model_version_input_example_ = nullptr;
  return temp;
}
inline ::clarifai::api::ModelVersionInputExample* SingleModelVersionInputExampleResponse::_internal_mutable_model_version_input_example() {
  
  if (model_version_input_example_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ModelVersionInputExample>(GetArenaForAllocation());
    model_version_input_example_ = p;
  }
  return model_version_input_example_;
}
inline ::clarifai::api::ModelVersionInputExample* SingleModelVersionInputExampleResponse::mutable_model_version_input_example() {
  ::clarifai::api::ModelVersionInputExample* _msg = _internal_mutable_model_version_input_example();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleModelVersionInputExampleResponse.model_version_input_example)
  return _msg;
}
inline void SingleModelVersionInputExampleResponse::set_allocated_model_version_input_example(::clarifai::api::ModelVersionInputExample* model_version_input_example) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_version_input_example_);
  }
  if (model_version_input_example) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_version_input_example));
    if (message_arena != submessage_arena) {
      model_version_input_example = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_version_input_example, submessage_arena);
    }
    
  } else {
    
  }
  model_version_input_example_ = model_version_input_example;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleModelVersionInputExampleResponse.model_version_input_example)
}

// -------------------------------------------------------------------

// MultiModelVersionInputExampleResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiModelVersionInputExampleResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiModelVersionInputExampleResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiModelVersionInputExampleResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiModelVersionInputExampleResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelVersionInputExampleResponse.status)
  return _internal_status();
}
inline void MultiModelVersionInputExampleResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiModelVersionInputExampleResponse.status)
}
inline ::clarifai::api::status::Status* MultiModelVersionInputExampleResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelVersionInputExampleResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiModelVersionInputExampleResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelVersionInputExampleResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiModelVersionInputExampleResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelVersionInputExampleResponse.status)
  return _msg;
}
inline void MultiModelVersionInputExampleResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiModelVersionInputExampleResponse.status)
}

// repeated .clarifai.api.ModelVersionInputExample model_version_input_examples = 2;
inline int MultiModelVersionInputExampleResponse::_internal_model_version_input_examples_size() const {
  return model_version_input_examples_.size();
}
inline int MultiModelVersionInputExampleResponse::model_version_input_examples_size() const {
  return _internal_model_version_input_examples_size();
}
inline ::clarifai::api::ModelVersionInputExample* MultiModelVersionInputExampleResponse::mutable_model_version_input_examples(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelVersionInputExampleResponse.model_version_input_examples)
  return model_version_input_examples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionInputExample >*
MultiModelVersionInputExampleResponse::mutable_model_version_input_examples() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiModelVersionInputExampleResponse.model_version_input_examples)
  return &model_version_input_examples_;
}
inline const ::clarifai::api::ModelVersionInputExample& MultiModelVersionInputExampleResponse::_internal_model_version_input_examples(int index) const {
  return model_version_input_examples_.Get(index);
}
inline const ::clarifai::api::ModelVersionInputExample& MultiModelVersionInputExampleResponse::model_version_input_examples(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelVersionInputExampleResponse.model_version_input_examples)
  return _internal_model_version_input_examples(index);
}
inline ::clarifai::api::ModelVersionInputExample* MultiModelVersionInputExampleResponse::_internal_add_model_version_input_examples() {
  return model_version_input_examples_.Add();
}
inline ::clarifai::api::ModelVersionInputExample* MultiModelVersionInputExampleResponse::add_model_version_input_examples() {
  ::clarifai::api::ModelVersionInputExample* _add = _internal_add_model_version_input_examples();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelVersionInputExampleResponse.model_version_input_examples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelVersionInputExample >&
MultiModelVersionInputExampleResponse::model_version_input_examples() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiModelVersionInputExampleResponse.model_version_input_examples)
  return model_version_input_examples_;
}

// -------------------------------------------------------------------

// ListModelReferencesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListModelReferencesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListModelReferencesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListModelReferencesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListModelReferencesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelReferencesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListModelReferencesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListModelReferencesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListModelReferencesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelReferencesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelReferencesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListModelReferencesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListModelReferencesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelReferencesRequest.user_app_id)
  return _msg;
}
inline void ListModelReferencesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelReferencesRequest.user_app_id)
}

// string model_id = 2;
inline void ListModelReferencesRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& ListModelReferencesRequest::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelReferencesRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListModelReferencesRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelReferencesRequest.model_id)
}
inline std::string* ListModelReferencesRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListModelReferencesRequest.model_id)
  return _s;
}
inline const std::string& ListModelReferencesRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void ListModelReferencesRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListModelReferencesRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListModelReferencesRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListModelReferencesRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListModelReferencesRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListModelReferencesRequest.model_id)
}

// uint32 page = 3;
inline void ListModelReferencesRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListModelReferencesRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListModelReferencesRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelReferencesRequest.page)
  return _internal_page();
}
inline void ListModelReferencesRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListModelReferencesRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelReferencesRequest.page)
}

// uint32 per_page = 4;
inline void ListModelReferencesRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListModelReferencesRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListModelReferencesRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListModelReferencesRequest.per_page)
  return _internal_per_page();
}
inline void ListModelReferencesRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListModelReferencesRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListModelReferencesRequest.per_page)
}

// -------------------------------------------------------------------

// MultiModelReferenceResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiModelReferenceResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiModelReferenceResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiModelReferenceResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiModelReferenceResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelReferenceResponse.status)
  return _internal_status();
}
inline void MultiModelReferenceResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiModelReferenceResponse.status)
}
inline ::clarifai::api::status::Status* MultiModelReferenceResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelReferenceResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiModelReferenceResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiModelReferenceResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiModelReferenceResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelReferenceResponse.status)
  return _msg;
}
inline void MultiModelReferenceResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiModelReferenceResponse.status)
}

// repeated .clarifai.api.ModelReference model_references = 2;
inline int MultiModelReferenceResponse::_internal_model_references_size() const {
  return model_references_.size();
}
inline int MultiModelReferenceResponse::model_references_size() const {
  return _internal_model_references_size();
}
inline ::clarifai::api::ModelReference* MultiModelReferenceResponse::mutable_model_references(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiModelReferenceResponse.model_references)
  return model_references_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelReference >*
MultiModelReferenceResponse::mutable_model_references() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiModelReferenceResponse.model_references)
  return &model_references_;
}
inline const ::clarifai::api::ModelReference& MultiModelReferenceResponse::_internal_model_references(int index) const {
  return model_references_.Get(index);
}
inline const ::clarifai::api::ModelReference& MultiModelReferenceResponse::model_references(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiModelReferenceResponse.model_references)
  return _internal_model_references(index);
}
inline ::clarifai::api::ModelReference* MultiModelReferenceResponse::_internal_add_model_references() {
  return model_references_.Add();
}
inline ::clarifai::api::ModelReference* MultiModelReferenceResponse::add_model_references() {
  ::clarifai::api::ModelReference* _add = _internal_add_model_references();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiModelReferenceResponse.model_references)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelReference >&
MultiModelReferenceResponse::model_references() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiModelReferenceResponse.model_references)
  return model_references_;
}

// -------------------------------------------------------------------

// MultiOutputResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiOutputResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiOutputResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiOutputResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiOutputResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiOutputResponse.status)
  return _internal_status();
}
inline void MultiOutputResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiOutputResponse.status)
}
inline ::clarifai::api::status::Status* MultiOutputResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiOutputResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiOutputResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiOutputResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiOutputResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiOutputResponse.status)
  return _msg;
}
inline void MultiOutputResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiOutputResponse.status)
}

// repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiOutputResponse::_internal_outputs_size() const {
  return outputs_.size();
}
inline int MultiOutputResponse::outputs_size() const {
  return _internal_outputs_size();
}
inline ::clarifai::api::Output* MultiOutputResponse::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiOutputResponse.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >*
MultiOutputResponse::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiOutputResponse.outputs)
  return &outputs_;
}
inline const ::clarifai::api::Output& MultiOutputResponse::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::clarifai::api::Output& MultiOutputResponse::outputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiOutputResponse.outputs)
  return _internal_outputs(index);
}
inline ::clarifai::api::Output* MultiOutputResponse::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::clarifai::api::Output* MultiOutputResponse::add_outputs() {
  ::clarifai::api::Output* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiOutputResponse.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >&
MultiOutputResponse::outputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiOutputResponse.outputs)
  return outputs_;
}

// -------------------------------------------------------------------

// ListScopesRequest

// string key_type = 1;
inline void ListScopesRequest::clear_key_type() {
  key_type_.ClearToEmpty();
}
inline const std::string& ListScopesRequest::key_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListScopesRequest.key_type)
  return _internal_key_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListScopesRequest::set_key_type(ArgT0&& arg0, ArgT... args) {
 
 key_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListScopesRequest.key_type)
}
inline std::string* ListScopesRequest::mutable_key_type() {
  std::string* _s = _internal_mutable_key_type();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListScopesRequest.key_type)
  return _s;
}
inline const std::string& ListScopesRequest::_internal_key_type() const {
  return key_type_.Get();
}
inline void ListScopesRequest::_internal_set_key_type(const std::string& value) {
  
  key_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListScopesRequest::_internal_mutable_key_type() {
  
  return key_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListScopesRequest::release_key_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListScopesRequest.key_type)
  return key_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListScopesRequest::set_allocated_key_type(std::string* key_type) {
  if (key_type != nullptr) {
    
  } else {
    
  }
  key_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListScopesRequest.key_type)
}

// .clarifai.api.UserAppIDSet user_app_id = 2;
inline bool ListScopesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListScopesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListScopesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListScopesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListScopesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListScopesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListScopesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListScopesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListScopesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListScopesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListScopesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListScopesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListScopesRequest.user_app_id)
  return _msg;
}
inline void ListScopesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListScopesRequest.user_app_id)
}

// -------------------------------------------------------------------

// MyScopesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool MyScopesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool MyScopesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& MyScopesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& MyScopesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MyScopesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void MyScopesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MyScopesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* MyScopesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* MyScopesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.MyScopesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* MyScopesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* MyScopesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MyScopesRequest.user_app_id)
  return _msg;
}
inline void MyScopesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MyScopesRequest.user_app_id)
}

// -------------------------------------------------------------------

// MyScopesUserRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool MyScopesUserRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool MyScopesUserRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& MyScopesUserRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& MyScopesUserRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MyScopesUserRequest.user_app_id)
  return _internal_user_app_id();
}
inline void MyScopesUserRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MyScopesUserRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* MyScopesUserRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* MyScopesUserRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.MyScopesUserRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* MyScopesUserRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* MyScopesUserRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MyScopesUserRequest.user_app_id)
  return _msg;
}
inline void MyScopesUserRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MyScopesUserRequest.user_app_id)
}

// -------------------------------------------------------------------

// MyScopesRootRequest

// -------------------------------------------------------------------

// MultiScopeDepsResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiScopeDepsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiScopeDepsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiScopeDepsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiScopeDepsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeDepsResponse.status)
  return _internal_status();
}
inline void MultiScopeDepsResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiScopeDepsResponse.status)
}
inline ::clarifai::api::status::Status* MultiScopeDepsResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiScopeDepsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiScopeDepsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiScopeDepsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiScopeDepsResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeDepsResponse.status)
  return _msg;
}
inline void MultiScopeDepsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiScopeDepsResponse.status)
}

// repeated .clarifai.api.ScopeDeps scope_deps = 2;
inline int MultiScopeDepsResponse::_internal_scope_deps_size() const {
  return scope_deps_.size();
}
inline int MultiScopeDepsResponse::scope_deps_size() const {
  return _internal_scope_deps_size();
}
inline ::clarifai::api::ScopeDeps* MultiScopeDepsResponse::mutable_scope_deps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeDepsResponse.scope_deps)
  return scope_deps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ScopeDeps >*
MultiScopeDepsResponse::mutable_scope_deps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiScopeDepsResponse.scope_deps)
  return &scope_deps_;
}
inline const ::clarifai::api::ScopeDeps& MultiScopeDepsResponse::_internal_scope_deps(int index) const {
  return scope_deps_.Get(index);
}
inline const ::clarifai::api::ScopeDeps& MultiScopeDepsResponse::scope_deps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeDepsResponse.scope_deps)
  return _internal_scope_deps(index);
}
inline ::clarifai::api::ScopeDeps* MultiScopeDepsResponse::_internal_add_scope_deps() {
  return scope_deps_.Add();
}
inline ::clarifai::api::ScopeDeps* MultiScopeDepsResponse::add_scope_deps() {
  ::clarifai::api::ScopeDeps* _add = _internal_add_scope_deps();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeDepsResponse.scope_deps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ScopeDeps >&
MultiScopeDepsResponse::scope_deps() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiScopeDepsResponse.scope_deps)
  return scope_deps_;
}

// repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
inline int MultiScopeDepsResponse::_internal_endpoint_deps_size() const {
  return endpoint_deps_.size();
}
inline int MultiScopeDepsResponse::endpoint_deps_size() const {
  return _internal_endpoint_deps_size();
}
inline ::clarifai::api::EndpointDeps* MultiScopeDepsResponse::mutable_endpoint_deps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeDepsResponse.endpoint_deps)
  return endpoint_deps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EndpointDeps >*
MultiScopeDepsResponse::mutable_endpoint_deps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiScopeDepsResponse.endpoint_deps)
  return &endpoint_deps_;
}
inline const ::clarifai::api::EndpointDeps& MultiScopeDepsResponse::_internal_endpoint_deps(int index) const {
  return endpoint_deps_.Get(index);
}
inline const ::clarifai::api::EndpointDeps& MultiScopeDepsResponse::endpoint_deps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeDepsResponse.endpoint_deps)
  return _internal_endpoint_deps(index);
}
inline ::clarifai::api::EndpointDeps* MultiScopeDepsResponse::_internal_add_endpoint_deps() {
  return endpoint_deps_.Add();
}
inline ::clarifai::api::EndpointDeps* MultiScopeDepsResponse::add_endpoint_deps() {
  ::clarifai::api::EndpointDeps* _add = _internal_add_endpoint_deps();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeDepsResponse.endpoint_deps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EndpointDeps >&
MultiScopeDepsResponse::endpoint_deps() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiScopeDepsResponse.endpoint_deps)
  return endpoint_deps_;
}

// -------------------------------------------------------------------

// MultiScopeResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiScopeResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiScopeResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiScopeResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiScopeResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeResponse.status)
  return _internal_status();
}
inline void MultiScopeResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiScopeResponse.status)
}
inline ::clarifai::api::status::Status* MultiScopeResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiScopeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiScopeResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiScopeResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiScopeResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeResponse.status)
  return _msg;
}
inline void MultiScopeResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiScopeResponse.status)
}

// repeated string scopes = 2;
inline int MultiScopeResponse::_internal_scopes_size() const {
  return scopes_.size();
}
inline int MultiScopeResponse::scopes_size() const {
  return _internal_scopes_size();
}
inline void MultiScopeResponse::clear_scopes() {
  scopes_.Clear();
}
inline std::string* MultiScopeResponse::add_scopes() {
  std::string* _s = _internal_add_scopes();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiScopeResponse.scopes)
  return _s;
}
inline const std::string& MultiScopeResponse::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& MultiScopeResponse::scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeResponse.scopes)
  return _internal_scopes(index);
}
inline std::string* MultiScopeResponse::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeResponse.scopes)
  return scopes_.Mutable(index);
}
inline void MultiScopeResponse::set_scopes(int index, const std::string& value) {
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeResponse.scopes)
}
inline void MultiScopeResponse::set_scopes(int index, std::string&& value) {
  scopes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeResponse.scopes)
}
inline void MultiScopeResponse::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiScopeResponse.scopes)
}
inline void MultiScopeResponse::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiScopeResponse.scopes)
}
inline std::string* MultiScopeResponse::_internal_add_scopes() {
  return scopes_.Add();
}
inline void MultiScopeResponse::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeResponse.scopes)
}
inline void MultiScopeResponse::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeResponse.scopes)
}
inline void MultiScopeResponse::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiScopeResponse.scopes)
}
inline void MultiScopeResponse::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiScopeResponse.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiScopeResponse::scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiScopeResponse.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiScopeResponse::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiScopeResponse.scopes)
  return &scopes_;
}

// .clarifai.api.App app = 3;
inline bool MultiScopeResponse::_internal_has_app() const {
  return this != internal_default_instance() && app_ != nullptr;
}
inline bool MultiScopeResponse::has_app() const {
  return _internal_has_app();
}
inline const ::clarifai::api::App& MultiScopeResponse::_internal_app() const {
  const ::clarifai::api::App* p = app_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::App&>(
      ::clarifai::api::_App_default_instance_);
}
inline const ::clarifai::api::App& MultiScopeResponse::app() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeResponse.app)
  return _internal_app();
}
inline void MultiScopeResponse::unsafe_arena_set_allocated_app(
    ::clarifai::api::App* app) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_);
  }
  app_ = app;
  if (app) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiScopeResponse.app)
}
inline ::clarifai::api::App* MultiScopeResponse::release_app() {
  
  ::clarifai::api::App* temp = app_;
  app_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::App* MultiScopeResponse::unsafe_arena_release_app() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiScopeResponse.app)
  
  ::clarifai::api::App* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::clarifai::api::App* MultiScopeResponse::_internal_mutable_app() {
  
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::App>(GetArenaForAllocation());
    app_ = p;
  }
  return app_;
}
inline ::clarifai::api::App* MultiScopeResponse::mutable_app() {
  ::clarifai::api::App* _msg = _internal_mutable_app();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeResponse.app)
  return _msg;
}
inline void MultiScopeResponse::set_allocated_app(::clarifai::api::App* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_);
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app));
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiScopeResponse.app)
}

// repeated string endpoints = 4;
inline int MultiScopeResponse::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int MultiScopeResponse::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void MultiScopeResponse::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* MultiScopeResponse::add_endpoints() {
  std::string* _s = _internal_add_endpoints();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiScopeResponse.endpoints)
  return _s;
}
inline const std::string& MultiScopeResponse::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& MultiScopeResponse::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeResponse.endpoints)
  return _internal_endpoints(index);
}
inline std::string* MultiScopeResponse::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeResponse.endpoints)
  return endpoints_.Mutable(index);
}
inline void MultiScopeResponse::set_endpoints(int index, const std::string& value) {
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeResponse.endpoints)
}
inline void MultiScopeResponse::set_endpoints(int index, std::string&& value) {
  endpoints_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeResponse.endpoints)
}
inline void MultiScopeResponse::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiScopeResponse.endpoints)
}
inline void MultiScopeResponse::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiScopeResponse.endpoints)
}
inline std::string* MultiScopeResponse::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void MultiScopeResponse::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeResponse.endpoints)
}
inline void MultiScopeResponse::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeResponse.endpoints)
}
inline void MultiScopeResponse::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiScopeResponse.endpoints)
}
inline void MultiScopeResponse::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiScopeResponse.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiScopeResponse::endpoints() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiScopeResponse.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiScopeResponse::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiScopeResponse.endpoints)
  return &endpoints_;
}

// -------------------------------------------------------------------

// MultiScopeUserResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiScopeUserResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiScopeUserResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiScopeUserResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiScopeUserResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeUserResponse.status)
  return _internal_status();
}
inline void MultiScopeUserResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiScopeUserResponse.status)
}
inline ::clarifai::api::status::Status* MultiScopeUserResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiScopeUserResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiScopeUserResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiScopeUserResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiScopeUserResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeUserResponse.status)
  return _msg;
}
inline void MultiScopeUserResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiScopeUserResponse.status)
}

// repeated string scopes = 2;
inline int MultiScopeUserResponse::_internal_scopes_size() const {
  return scopes_.size();
}
inline int MultiScopeUserResponse::scopes_size() const {
  return _internal_scopes_size();
}
inline void MultiScopeUserResponse::clear_scopes() {
  scopes_.Clear();
}
inline std::string* MultiScopeUserResponse::add_scopes() {
  std::string* _s = _internal_add_scopes();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiScopeUserResponse.scopes)
  return _s;
}
inline const std::string& MultiScopeUserResponse::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& MultiScopeUserResponse::scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeUserResponse.scopes)
  return _internal_scopes(index);
}
inline std::string* MultiScopeUserResponse::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeUserResponse.scopes)
  return scopes_.Mutable(index);
}
inline void MultiScopeUserResponse::set_scopes(int index, const std::string& value) {
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeUserResponse.scopes)
}
inline void MultiScopeUserResponse::set_scopes(int index, std::string&& value) {
  scopes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeUserResponse.scopes)
}
inline void MultiScopeUserResponse::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiScopeUserResponse.scopes)
}
inline void MultiScopeUserResponse::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiScopeUserResponse.scopes)
}
inline std::string* MultiScopeUserResponse::_internal_add_scopes() {
  return scopes_.Add();
}
inline void MultiScopeUserResponse::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeUserResponse.scopes)
}
inline void MultiScopeUserResponse::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeUserResponse.scopes)
}
inline void MultiScopeUserResponse::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiScopeUserResponse.scopes)
}
inline void MultiScopeUserResponse::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiScopeUserResponse.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiScopeUserResponse::scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiScopeUserResponse.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiScopeUserResponse::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiScopeUserResponse.scopes)
  return &scopes_;
}

// repeated string endpoints = 4;
inline int MultiScopeUserResponse::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int MultiScopeUserResponse::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void MultiScopeUserResponse::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* MultiScopeUserResponse::add_endpoints() {
  std::string* _s = _internal_add_endpoints();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiScopeUserResponse.endpoints)
  return _s;
}
inline const std::string& MultiScopeUserResponse::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& MultiScopeUserResponse::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeUserResponse.endpoints)
  return _internal_endpoints(index);
}
inline std::string* MultiScopeUserResponse::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeUserResponse.endpoints)
  return endpoints_.Mutable(index);
}
inline void MultiScopeUserResponse::set_endpoints(int index, const std::string& value) {
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeUserResponse.endpoints)
}
inline void MultiScopeUserResponse::set_endpoints(int index, std::string&& value) {
  endpoints_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeUserResponse.endpoints)
}
inline void MultiScopeUserResponse::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiScopeUserResponse.endpoints)
}
inline void MultiScopeUserResponse::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiScopeUserResponse.endpoints)
}
inline std::string* MultiScopeUserResponse::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void MultiScopeUserResponse::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeUserResponse.endpoints)
}
inline void MultiScopeUserResponse::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeUserResponse.endpoints)
}
inline void MultiScopeUserResponse::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiScopeUserResponse.endpoints)
}
inline void MultiScopeUserResponse::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiScopeUserResponse.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiScopeUserResponse::endpoints() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiScopeUserResponse.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiScopeUserResponse::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiScopeUserResponse.endpoints)
  return &endpoints_;
}

// -------------------------------------------------------------------

// MultiScopeRootResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiScopeRootResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiScopeRootResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiScopeRootResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiScopeRootResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeRootResponse.status)
  return _internal_status();
}
inline void MultiScopeRootResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiScopeRootResponse.status)
}
inline ::clarifai::api::status::Status* MultiScopeRootResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiScopeRootResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiScopeRootResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiScopeRootResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiScopeRootResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeRootResponse.status)
  return _msg;
}
inline void MultiScopeRootResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiScopeRootResponse.status)
}

// repeated string scopes = 2;
inline int MultiScopeRootResponse::_internal_scopes_size() const {
  return scopes_.size();
}
inline int MultiScopeRootResponse::scopes_size() const {
  return _internal_scopes_size();
}
inline void MultiScopeRootResponse::clear_scopes() {
  scopes_.Clear();
}
inline std::string* MultiScopeRootResponse::add_scopes() {
  std::string* _s = _internal_add_scopes();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiScopeRootResponse.scopes)
  return _s;
}
inline const std::string& MultiScopeRootResponse::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& MultiScopeRootResponse::scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeRootResponse.scopes)
  return _internal_scopes(index);
}
inline std::string* MultiScopeRootResponse::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeRootResponse.scopes)
  return scopes_.Mutable(index);
}
inline void MultiScopeRootResponse::set_scopes(int index, const std::string& value) {
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeRootResponse.scopes)
}
inline void MultiScopeRootResponse::set_scopes(int index, std::string&& value) {
  scopes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeRootResponse.scopes)
}
inline void MultiScopeRootResponse::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiScopeRootResponse.scopes)
}
inline void MultiScopeRootResponse::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiScopeRootResponse.scopes)
}
inline std::string* MultiScopeRootResponse::_internal_add_scopes() {
  return scopes_.Add();
}
inline void MultiScopeRootResponse::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeRootResponse.scopes)
}
inline void MultiScopeRootResponse::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeRootResponse.scopes)
}
inline void MultiScopeRootResponse::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiScopeRootResponse.scopes)
}
inline void MultiScopeRootResponse::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiScopeRootResponse.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiScopeRootResponse::scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiScopeRootResponse.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiScopeRootResponse::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiScopeRootResponse.scopes)
  return &scopes_;
}

// repeated string endpoints = 4;
inline int MultiScopeRootResponse::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int MultiScopeRootResponse::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void MultiScopeRootResponse::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* MultiScopeRootResponse::add_endpoints() {
  std::string* _s = _internal_add_endpoints();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.MultiScopeRootResponse.endpoints)
  return _s;
}
inline const std::string& MultiScopeRootResponse::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& MultiScopeRootResponse::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiScopeRootResponse.endpoints)
  return _internal_endpoints(index);
}
inline std::string* MultiScopeRootResponse::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiScopeRootResponse.endpoints)
  return endpoints_.Mutable(index);
}
inline void MultiScopeRootResponse::set_endpoints(int index, const std::string& value) {
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeRootResponse.endpoints)
}
inline void MultiScopeRootResponse::set_endpoints(int index, std::string&& value) {
  endpoints_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.MultiScopeRootResponse.endpoints)
}
inline void MultiScopeRootResponse::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.MultiScopeRootResponse.endpoints)
}
inline void MultiScopeRootResponse::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.MultiScopeRootResponse.endpoints)
}
inline std::string* MultiScopeRootResponse::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void MultiScopeRootResponse::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeRootResponse.endpoints)
}
inline void MultiScopeRootResponse::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.MultiScopeRootResponse.endpoints)
}
inline void MultiScopeRootResponse::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.MultiScopeRootResponse.endpoints)
}
inline void MultiScopeRootResponse::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.MultiScopeRootResponse.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiScopeRootResponse::endpoints() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiScopeRootResponse.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiScopeRootResponse::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiScopeRootResponse.endpoints)
  return &endpoints_;
}

// -------------------------------------------------------------------

// GetSearchRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetSearchRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetSearchRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetSearchRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetSearchRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetSearchRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetSearchRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetSearchRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetSearchRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetSearchRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetSearchRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetSearchRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetSearchRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetSearchRequest.user_app_id)
  return _msg;
}
inline void GetSearchRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetSearchRequest.user_app_id)
}

// string id = 2;
inline void GetSearchRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetSearchRequest::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetSearchRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSearchRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetSearchRequest.id)
}
inline std::string* GetSearchRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetSearchRequest.id)
  return _s;
}
inline const std::string& GetSearchRequest::_internal_id() const {
  return id_.Get();
}
inline void GetSearchRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetSearchRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetSearchRequest::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetSearchRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetSearchRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetSearchRequest.id)
}

// -------------------------------------------------------------------

// ListSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListSearchesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListSearchesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListSearchesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListSearchesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListSearchesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListSearchesRequest.user_app_id)
  return _msg;
}
inline void ListSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListSearchesRequest.user_app_id)
}

// uint32 page = 2;
inline void ListSearchesRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListSearchesRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListSearchesRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListSearchesRequest.page)
  return _internal_page();
}
inline void ListSearchesRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListSearchesRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListSearchesRequest.page)
}

// uint32 per_page = 3;
inline void ListSearchesRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListSearchesRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListSearchesRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListSearchesRequest.per_page)
  return _internal_per_page();
}
inline void ListSearchesRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListSearchesRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListSearchesRequest.per_page)
}

// -------------------------------------------------------------------

// PostSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostSearchesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostSearchesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostSearchesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostSearchesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostSearchesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesRequest.user_app_id)
  return _msg;
}
inline void PostSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSearchesRequest.user_app_id)
}

// .clarifai.api.Query query = 2 [deprecated = true];
inline bool PostSearchesRequest::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool PostSearchesRequest::has_query() const {
  return _internal_has_query();
}
inline const ::clarifai::api::Query& PostSearchesRequest::_internal_query() const {
  const ::clarifai::api::Query* p = query_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Query&>(
      ::clarifai::api::_Query_default_instance_);
}
inline const ::clarifai::api::Query& PostSearchesRequest::query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesRequest.query)
  return _internal_query();
}
inline void PostSearchesRequest::unsafe_arena_set_allocated_query(
    ::clarifai::api::Query* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostSearchesRequest.query)
}
inline ::clarifai::api::Query* PostSearchesRequest::release_query() {
  
  ::clarifai::api::Query* temp = query_;
  query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Query* PostSearchesRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSearchesRequest.query)
  
  ::clarifai::api::Query* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::clarifai::api::Query* PostSearchesRequest::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Query>(GetArenaForAllocation());
    query_ = p;
  }
  return query_;
}
inline ::clarifai::api::Query* PostSearchesRequest::mutable_query() {
  ::clarifai::api::Query* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesRequest.query)
  return _msg;
}
inline void PostSearchesRequest::set_allocated_query(::clarifai::api::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query));
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSearchesRequest.query)
}

// repeated .clarifai.api.Search searches = 3;
inline int PostSearchesRequest::_internal_searches_size() const {
  return searches_.size();
}
inline int PostSearchesRequest::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* PostSearchesRequest::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesRequest.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
PostSearchesRequest::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostSearchesRequest.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& PostSearchesRequest::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& PostSearchesRequest::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesRequest.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* PostSearchesRequest::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* PostSearchesRequest::add_searches() {
  ::clarifai::api::Search* _add = _internal_add_searches();
  // @@protoc_insertion_point(field_add:clarifai.api.PostSearchesRequest.searches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
PostSearchesRequest::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostSearchesRequest.searches)
  return searches_;
}

// .clarifai.api.Pagination pagination = 4;
inline bool PostSearchesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostSearchesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostSearchesRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostSearchesRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Pagination&>(
      ::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostSearchesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesRequest.pagination)
  return _internal_pagination();
}
inline void PostSearchesRequest::unsafe_arena_set_allocated_pagination(
    ::clarifai::api::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostSearchesRequest.pagination)
}
inline ::clarifai::api::Pagination* PostSearchesRequest::release_pagination() {
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Pagination* PostSearchesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSearchesRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostSearchesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaForAllocation());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostSearchesRequest::mutable_pagination() {
  ::clarifai::api::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesRequest.pagination)
  return _msg;
}
inline void PostSearchesRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::clarifai::api::Pagination>::GetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSearchesRequest.pagination)
}

// -------------------------------------------------------------------

// PatchInputsSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchInputsSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchInputsSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchInputsSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchInputsSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchInputsSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchInputsSearchesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchInputsSearchesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchInputsSearchesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchInputsSearchesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchInputsSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchInputsSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchInputsSearchesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchInputsSearchesRequest.user_app_id)
  return _msg;
}
inline void PatchInputsSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchInputsSearchesRequest.user_app_id)
}

// repeated .clarifai.api.Search searches = 2;
inline int PatchInputsSearchesRequest::_internal_searches_size() const {
  return searches_.size();
}
inline int PatchInputsSearchesRequest::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* PatchInputsSearchesRequest::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchInputsSearchesRequest.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
PatchInputsSearchesRequest::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchInputsSearchesRequest.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& PatchInputsSearchesRequest::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& PatchInputsSearchesRequest::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchInputsSearchesRequest.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* PatchInputsSearchesRequest::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* PatchInputsSearchesRequest::add_searches() {
  ::clarifai::api::Search* _add = _internal_add_searches();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchInputsSearchesRequest.searches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
PatchInputsSearchesRequest::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchInputsSearchesRequest.searches)
  return searches_;
}

// string action = 3;
inline void PatchInputsSearchesRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchInputsSearchesRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchInputsSearchesRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchInputsSearchesRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchInputsSearchesRequest.action)
}
inline std::string* PatchInputsSearchesRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchInputsSearchesRequest.action)
  return _s;
}
inline const std::string& PatchInputsSearchesRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchInputsSearchesRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchInputsSearchesRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchInputsSearchesRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchInputsSearchesRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchInputsSearchesRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchInputsSearchesRequest.action)
}

// -------------------------------------------------------------------

// PatchAnnotationsSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchAnnotationsSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchAnnotationsSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchAnnotationsSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchAnnotationsSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchAnnotationsSearchesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchAnnotationsSearchesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsSearchesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsSearchesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAnnotationsSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationsSearchesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsSearchesRequest.user_app_id)
  return _msg;
}
inline void PatchAnnotationsSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAnnotationsSearchesRequest.user_app_id)
}

// repeated .clarifai.api.Search searches = 2;
inline int PatchAnnotationsSearchesRequest::_internal_searches_size() const {
  return searches_.size();
}
inline int PatchAnnotationsSearchesRequest::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* PatchAnnotationsSearchesRequest::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsSearchesRequest.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
PatchAnnotationsSearchesRequest::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchAnnotationsSearchesRequest.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& PatchAnnotationsSearchesRequest::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& PatchAnnotationsSearchesRequest::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsSearchesRequest.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* PatchAnnotationsSearchesRequest::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* PatchAnnotationsSearchesRequest::add_searches() {
  ::clarifai::api::Search* _add = _internal_add_searches();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchAnnotationsSearchesRequest.searches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
PatchAnnotationsSearchesRequest::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchAnnotationsSearchesRequest.searches)
  return searches_;
}

// string action = 3;
inline void PatchAnnotationsSearchesRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchAnnotationsSearchesRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationsSearchesRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchAnnotationsSearchesRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAnnotationsSearchesRequest.action)
}
inline std::string* PatchAnnotationsSearchesRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationsSearchesRequest.action)
  return _s;
}
inline const std::string& PatchAnnotationsSearchesRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchAnnotationsSearchesRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchAnnotationsSearchesRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchAnnotationsSearchesRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAnnotationsSearchesRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchAnnotationsSearchesRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAnnotationsSearchesRequest.action)
}

// -------------------------------------------------------------------

// PatchSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchSearchesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchSearchesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchSearchesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchSearchesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchSearchesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchSearchesRequest.user_app_id)
  return _msg;
}
inline void PatchSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchSearchesRequest.user_app_id)
}

// repeated .clarifai.api.Search searches = 2;
inline int PatchSearchesRequest::_internal_searches_size() const {
  return searches_.size();
}
inline int PatchSearchesRequest::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* PatchSearchesRequest::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchSearchesRequest.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
PatchSearchesRequest::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchSearchesRequest.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& PatchSearchesRequest::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& PatchSearchesRequest::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchSearchesRequest.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* PatchSearchesRequest::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* PatchSearchesRequest::add_searches() {
  ::clarifai::api::Search* _add = _internal_add_searches();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchSearchesRequest.searches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
PatchSearchesRequest::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchSearchesRequest.searches)
  return searches_;
}

// string action = 3;
inline void PatchSearchesRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchSearchesRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchSearchesRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchSearchesRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchSearchesRequest.action)
}
inline std::string* PatchSearchesRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchSearchesRequest.action)
  return _s;
}
inline const std::string& PatchSearchesRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchSearchesRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchSearchesRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchSearchesRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchSearchesRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchSearchesRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchSearchesRequest.action)
}

// -------------------------------------------------------------------

// PostSearchesByIDRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostSearchesByIDRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostSearchesByIDRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostSearchesByIDRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostSearchesByIDRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesByIDRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostSearchesByIDRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostSearchesByIDRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostSearchesByIDRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostSearchesByIDRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSearchesByIDRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostSearchesByIDRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostSearchesByIDRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesByIDRequest.user_app_id)
  return _msg;
}
inline void PostSearchesByIDRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSearchesByIDRequest.user_app_id)
}

// string id = 2;
inline void PostSearchesByIDRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& PostSearchesByIDRequest::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesByIDRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostSearchesByIDRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostSearchesByIDRequest.id)
}
inline std::string* PostSearchesByIDRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesByIDRequest.id)
  return _s;
}
inline const std::string& PostSearchesByIDRequest::_internal_id() const {
  return id_.Get();
}
inline void PostSearchesByIDRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostSearchesByIDRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostSearchesByIDRequest::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSearchesByIDRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostSearchesByIDRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSearchesByIDRequest.id)
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostSearchesByIDRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostSearchesByIDRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostSearchesByIDRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostSearchesByIDRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Pagination&>(
      ::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostSearchesByIDRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostSearchesByIDRequest.pagination)
  return _internal_pagination();
}
inline void PostSearchesByIDRequest::unsafe_arena_set_allocated_pagination(
    ::clarifai::api::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostSearchesByIDRequest.pagination)
}
inline ::clarifai::api::Pagination* PostSearchesByIDRequest::release_pagination() {
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Pagination* PostSearchesByIDRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostSearchesByIDRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostSearchesByIDRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaForAllocation());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostSearchesByIDRequest::mutable_pagination() {
  ::clarifai::api::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostSearchesByIDRequest.pagination)
  return _msg;
}
inline void PostSearchesByIDRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::clarifai::api::Pagination>::GetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostSearchesByIDRequest.pagination)
}

// -------------------------------------------------------------------

// DeleteSearchRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteSearchRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteSearchRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteSearchRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteSearchRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteSearchRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteSearchRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteSearchRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteSearchRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteSearchRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteSearchRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteSearchRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteSearchRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteSearchRequest.user_app_id)
  return _msg;
}
inline void DeleteSearchRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteSearchRequest.user_app_id)
}

// string id = 2;
inline void DeleteSearchRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteSearchRequest::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteSearchRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSearchRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteSearchRequest.id)
}
inline std::string* DeleteSearchRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteSearchRequest.id)
  return _s;
}
inline const std::string& DeleteSearchRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteSearchRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteSearchRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteSearchRequest::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteSearchRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteSearchRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteSearchRequest.id)
}

// -------------------------------------------------------------------

// PostAnnotationsSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAnnotationsSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAnnotationsSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationsSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationsSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationsSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostAnnotationsSearchesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAnnotationsSearchesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsSearchesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsSearchesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationsSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationsSearchesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationsSearchesRequest.user_app_id)
  return _msg;
}
inline void PostAnnotationsSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationsSearchesRequest.user_app_id)
}

// repeated .clarifai.api.Search searches = 2;
inline int PostAnnotationsSearchesRequest::_internal_searches_size() const {
  return searches_.size();
}
inline int PostAnnotationsSearchesRequest::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* PostAnnotationsSearchesRequest::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationsSearchesRequest.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
PostAnnotationsSearchesRequest::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostAnnotationsSearchesRequest.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& PostAnnotationsSearchesRequest::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& PostAnnotationsSearchesRequest::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationsSearchesRequest.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* PostAnnotationsSearchesRequest::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* PostAnnotationsSearchesRequest::add_searches() {
  ::clarifai::api::Search* _add = _internal_add_searches();
  // @@protoc_insertion_point(field_add:clarifai.api.PostAnnotationsSearchesRequest.searches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
PostAnnotationsSearchesRequest::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostAnnotationsSearchesRequest.searches)
  return searches_;
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostAnnotationsSearchesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostAnnotationsSearchesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostAnnotationsSearchesRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostAnnotationsSearchesRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Pagination&>(
      ::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostAnnotationsSearchesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationsSearchesRequest.pagination)
  return _internal_pagination();
}
inline void PostAnnotationsSearchesRequest::unsafe_arena_set_allocated_pagination(
    ::clarifai::api::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAnnotationsSearchesRequest.pagination)
}
inline ::clarifai::api::Pagination* PostAnnotationsSearchesRequest::release_pagination() {
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Pagination* PostAnnotationsSearchesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationsSearchesRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostAnnotationsSearchesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaForAllocation());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostAnnotationsSearchesRequest::mutable_pagination() {
  ::clarifai::api::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationsSearchesRequest.pagination)
  return _msg;
}
inline void PostAnnotationsSearchesRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::clarifai::api::Pagination>::GetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationsSearchesRequest.pagination)
}

// -------------------------------------------------------------------

// DeleteAnnotationSearchMetricsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteAnnotationSearchMetricsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteAnnotationSearchMetricsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteAnnotationSearchMetricsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteAnnotationSearchMetricsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationSearchMetricsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteAnnotationSearchMetricsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteAnnotationSearchMetricsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationSearchMetricsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationSearchMetricsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAnnotationSearchMetricsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationSearchMetricsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationSearchMetricsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationSearchMetricsRequest.user_app_id)
  return _msg;
}
inline void DeleteAnnotationSearchMetricsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAnnotationSearchMetricsRequest.user_app_id)
}

// string id = 2;
inline void DeleteAnnotationSearchMetricsRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteAnnotationSearchMetricsRequest::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationSearchMetricsRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteAnnotationSearchMetricsRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationSearchMetricsRequest.id)
}
inline std::string* DeleteAnnotationSearchMetricsRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationSearchMetricsRequest.id)
  return _s;
}
inline const std::string& DeleteAnnotationSearchMetricsRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteAnnotationSearchMetricsRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteAnnotationSearchMetricsRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteAnnotationSearchMetricsRequest::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAnnotationSearchMetricsRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteAnnotationSearchMetricsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAnnotationSearchMetricsRequest.id)
}

// -------------------------------------------------------------------

// PostInputsSearchesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostInputsSearchesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostInputsSearchesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostInputsSearchesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostInputsSearchesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsSearchesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostInputsSearchesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostInputsSearchesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostInputsSearchesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostInputsSearchesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsSearchesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostInputsSearchesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostInputsSearchesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsSearchesRequest.user_app_id)
  return _msg;
}
inline void PostInputsSearchesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsSearchesRequest.user_app_id)
}

// repeated .clarifai.api.Search searches = 2;
inline int PostInputsSearchesRequest::_internal_searches_size() const {
  return searches_.size();
}
inline int PostInputsSearchesRequest::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* PostInputsSearchesRequest::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsSearchesRequest.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
PostInputsSearchesRequest::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostInputsSearchesRequest.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& PostInputsSearchesRequest::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& PostInputsSearchesRequest::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsSearchesRequest.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* PostInputsSearchesRequest::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* PostInputsSearchesRequest::add_searches() {
  ::clarifai::api::Search* _add = _internal_add_searches();
  // @@protoc_insertion_point(field_add:clarifai.api.PostInputsSearchesRequest.searches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
PostInputsSearchesRequest::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostInputsSearchesRequest.searches)
  return searches_;
}

// .clarifai.api.Pagination pagination = 3;
inline bool PostInputsSearchesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool PostInputsSearchesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void PostInputsSearchesRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::clarifai::api::Pagination& PostInputsSearchesRequest::_internal_pagination() const {
  const ::clarifai::api::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Pagination&>(
      ::clarifai::api::_Pagination_default_instance_);
}
inline const ::clarifai::api::Pagination& PostInputsSearchesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostInputsSearchesRequest.pagination)
  return _internal_pagination();
}
inline void PostInputsSearchesRequest::unsafe_arena_set_allocated_pagination(
    ::clarifai::api::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostInputsSearchesRequest.pagination)
}
inline ::clarifai::api::Pagination* PostInputsSearchesRequest::release_pagination() {
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Pagination* PostInputsSearchesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostInputsSearchesRequest.pagination)
  
  ::clarifai::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::clarifai::api::Pagination* PostInputsSearchesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Pagination>(GetArenaForAllocation());
    pagination_ = p;
  }
  return pagination_;
}
inline ::clarifai::api::Pagination* PostInputsSearchesRequest::mutable_pagination() {
  ::clarifai::api::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostInputsSearchesRequest.pagination)
  return _msg;
}
inline void PostInputsSearchesRequest::set_allocated_pagination(::clarifai::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::clarifai::api::Pagination>::GetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostInputsSearchesRequest.pagination)
}

// -------------------------------------------------------------------

// SingleSearchResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleSearchResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleSearchResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleSearchResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleSearchResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleSearchResponse.status)
  return _internal_status();
}
inline void SingleSearchResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleSearchResponse.status)
}
inline ::clarifai::api::status::Status* SingleSearchResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleSearchResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleSearchResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleSearchResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleSearchResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleSearchResponse.status)
  return _msg;
}
inline void SingleSearchResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleSearchResponse.status)
}

// .clarifai.api.Search search = 5;
inline bool SingleSearchResponse::_internal_has_search() const {
  return this != internal_default_instance() && search_ != nullptr;
}
inline bool SingleSearchResponse::has_search() const {
  return _internal_has_search();
}
inline const ::clarifai::api::Search& SingleSearchResponse::_internal_search() const {
  const ::clarifai::api::Search* p = search_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Search&>(
      ::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& SingleSearchResponse::search() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleSearchResponse.search)
  return _internal_search();
}
inline void SingleSearchResponse::unsafe_arena_set_allocated_search(
    ::clarifai::api::Search* search) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_);
  }
  search_ = search;
  if (search) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleSearchResponse.search)
}
inline ::clarifai::api::Search* SingleSearchResponse::release_search() {
  
  ::clarifai::api::Search* temp = search_;
  search_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Search* SingleSearchResponse::unsafe_arena_release_search() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleSearchResponse.search)
  
  ::clarifai::api::Search* temp = search_;
  search_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* SingleSearchResponse::_internal_mutable_search() {
  
  if (search_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaForAllocation());
    search_ = p;
  }
  return search_;
}
inline ::clarifai::api::Search* SingleSearchResponse::mutable_search() {
  ::clarifai::api::Search* _msg = _internal_mutable_search();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleSearchResponse.search)
  return _msg;
}
inline void SingleSearchResponse::set_allocated_search(::clarifai::api::Search* search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_);
  }
  if (search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search));
    if (message_arena != submessage_arena) {
      search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search, submessage_arena);
    }
    
  } else {
    
  }
  search_ = search;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleSearchResponse.search)
}

// -------------------------------------------------------------------

// MultiSearchResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiSearchResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiSearchResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiSearchResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiSearchResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiSearchResponse.status)
  return _internal_status();
}
inline void MultiSearchResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiSearchResponse.status)
}
inline ::clarifai::api::status::Status* MultiSearchResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiSearchResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiSearchResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiSearchResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiSearchResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiSearchResponse.status)
  return _msg;
}
inline void MultiSearchResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiSearchResponse.status)
}

// string id = 2;
inline void MultiSearchResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& MultiSearchResponse::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiSearchResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MultiSearchResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.MultiSearchResponse.id)
}
inline std::string* MultiSearchResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiSearchResponse.id)
  return _s;
}
inline const std::string& MultiSearchResponse::_internal_id() const {
  return id_.Get();
}
inline void MultiSearchResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MultiSearchResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MultiSearchResponse::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiSearchResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MultiSearchResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiSearchResponse.id)
}

// repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiSearchResponse::_internal_hits_size() const {
  return hits_.size();
}
inline int MultiSearchResponse::hits_size() const {
  return _internal_hits_size();
}
inline ::clarifai::api::Hit* MultiSearchResponse::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiSearchResponse.hits)
  return hits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >*
MultiSearchResponse::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiSearchResponse.hits)
  return &hits_;
}
inline const ::clarifai::api::Hit& MultiSearchResponse::_internal_hits(int index) const {
  return hits_.Get(index);
}
inline const ::clarifai::api::Hit& MultiSearchResponse::hits(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiSearchResponse.hits)
  return _internal_hits(index);
}
inline ::clarifai::api::Hit* MultiSearchResponse::_internal_add_hits() {
  return hits_.Add();
}
inline ::clarifai::api::Hit* MultiSearchResponse::add_hits() {
  ::clarifai::api::Hit* _add = _internal_add_hits();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiSearchResponse.hits)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >&
MultiSearchResponse::hits() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiSearchResponse.hits)
  return hits_;
}

// .clarifai.api.Query query = 4;
inline bool MultiSearchResponse::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool MultiSearchResponse::has_query() const {
  return _internal_has_query();
}
inline const ::clarifai::api::Query& MultiSearchResponse::_internal_query() const {
  const ::clarifai::api::Query* p = query_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Query&>(
      ::clarifai::api::_Query_default_instance_);
}
inline const ::clarifai::api::Query& MultiSearchResponse::query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiSearchResponse.query)
  return _internal_query();
}
inline void MultiSearchResponse::unsafe_arena_set_allocated_query(
    ::clarifai::api::Query* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiSearchResponse.query)
}
inline ::clarifai::api::Query* MultiSearchResponse::release_query() {
  
  ::clarifai::api::Query* temp = query_;
  query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Query* MultiSearchResponse::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiSearchResponse.query)
  
  ::clarifai::api::Query* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::clarifai::api::Query* MultiSearchResponse::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Query>(GetArenaForAllocation());
    query_ = p;
  }
  return query_;
}
inline ::clarifai::api::Query* MultiSearchResponse::mutable_query() {
  ::clarifai::api::Query* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiSearchResponse.query)
  return _msg;
}
inline void MultiSearchResponse::set_allocated_query(::clarifai::api::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query));
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiSearchResponse.query)
}

// repeated .clarifai.api.Search searches = 5;
inline int MultiSearchResponse::_internal_searches_size() const {
  return searches_.size();
}
inline int MultiSearchResponse::searches_size() const {
  return _internal_searches_size();
}
inline ::clarifai::api::Search* MultiSearchResponse::mutable_searches(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiSearchResponse.searches)
  return searches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >*
MultiSearchResponse::mutable_searches() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiSearchResponse.searches)
  return &searches_;
}
inline const ::clarifai::api::Search& MultiSearchResponse::_internal_searches(int index) const {
  return searches_.Get(index);
}
inline const ::clarifai::api::Search& MultiSearchResponse::searches(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiSearchResponse.searches)
  return _internal_searches(index);
}
inline ::clarifai::api::Search* MultiSearchResponse::_internal_add_searches() {
  return searches_.Add();
}
inline ::clarifai::api::Search* MultiSearchResponse::add_searches() {
  ::clarifai::api::Search* _add = _internal_add_searches();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiSearchResponse.searches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Search >&
MultiSearchResponse::searches() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiSearchResponse.searches)
  return searches_;
}

// -------------------------------------------------------------------

// PostAnnotationSearchMetricsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAnnotationSearchMetricsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAnnotationSearchMetricsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationSearchMetricsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationSearchMetricsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationSearchMetricsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostAnnotationSearchMetricsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationSearchMetricsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationSearchMetricsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationSearchMetricsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationSearchMetricsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationSearchMetricsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationSearchMetricsRequest.user_app_id)
  return _msg;
}
inline void PostAnnotationSearchMetricsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.user_app_id)
}

// string id = 2;
inline void PostAnnotationSearchMetricsRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& PostAnnotationSearchMetricsRequest::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationSearchMetricsRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostAnnotationSearchMetricsRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostAnnotationSearchMetricsRequest.id)
}
inline std::string* PostAnnotationSearchMetricsRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationSearchMetricsRequest.id)
  return _s;
}
inline const std::string& PostAnnotationSearchMetricsRequest::_internal_id() const {
  return id_.Get();
}
inline void PostAnnotationSearchMetricsRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostAnnotationSearchMetricsRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostAnnotationSearchMetricsRequest::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationSearchMetricsRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostAnnotationSearchMetricsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.id)
}

// .clarifai.api.Search ground_truth = 3;
inline bool PostAnnotationSearchMetricsRequest::_internal_has_ground_truth() const {
  return this != internal_default_instance() && ground_truth_ != nullptr;
}
inline bool PostAnnotationSearchMetricsRequest::has_ground_truth() const {
  return _internal_has_ground_truth();
}
inline const ::clarifai::api::Search& PostAnnotationSearchMetricsRequest::_internal_ground_truth() const {
  const ::clarifai::api::Search* p = ground_truth_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Search&>(
      ::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostAnnotationSearchMetricsRequest::ground_truth() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationSearchMetricsRequest.ground_truth)
  return _internal_ground_truth();
}
inline void PostAnnotationSearchMetricsRequest::unsafe_arena_set_allocated_ground_truth(
    ::clarifai::api::Search* ground_truth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_truth_);
  }
  ground_truth_ = ground_truth;
  if (ground_truth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.ground_truth)
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::release_ground_truth() {
  
  ::clarifai::api::Search* temp = ground_truth_;
  ground_truth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::unsafe_arena_release_ground_truth() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationSearchMetricsRequest.ground_truth)
  
  ::clarifai::api::Search* temp = ground_truth_;
  ground_truth_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::_internal_mutable_ground_truth() {
  
  if (ground_truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaForAllocation());
    ground_truth_ = p;
  }
  return ground_truth_;
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::mutable_ground_truth() {
  ::clarifai::api::Search* _msg = _internal_mutable_ground_truth();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationSearchMetricsRequest.ground_truth)
  return _msg;
}
inline void PostAnnotationSearchMetricsRequest::set_allocated_ground_truth(::clarifai::api::Search* ground_truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_truth_);
  }
  if (ground_truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_truth));
    if (message_arena != submessage_arena) {
      ground_truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_truth, submessage_arena);
    }
    
  } else {
    
  }
  ground_truth_ = ground_truth;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.ground_truth)
}

// .clarifai.api.Search search_to_eval = 4;
inline bool PostAnnotationSearchMetricsRequest::_internal_has_search_to_eval() const {
  return this != internal_default_instance() && search_to_eval_ != nullptr;
}
inline bool PostAnnotationSearchMetricsRequest::has_search_to_eval() const {
  return _internal_has_search_to_eval();
}
inline const ::clarifai::api::Search& PostAnnotationSearchMetricsRequest::_internal_search_to_eval() const {
  const ::clarifai::api::Search* p = search_to_eval_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Search&>(
      ::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& PostAnnotationSearchMetricsRequest::search_to_eval() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationSearchMetricsRequest.search_to_eval)
  return _internal_search_to_eval();
}
inline void PostAnnotationSearchMetricsRequest::unsafe_arena_set_allocated_search_to_eval(
    ::clarifai::api::Search* search_to_eval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_to_eval_);
  }
  search_to_eval_ = search_to_eval;
  if (search_to_eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.search_to_eval)
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::release_search_to_eval() {
  
  ::clarifai::api::Search* temp = search_to_eval_;
  search_to_eval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::unsafe_arena_release_search_to_eval() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationSearchMetricsRequest.search_to_eval)
  
  ::clarifai::api::Search* temp = search_to_eval_;
  search_to_eval_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::_internal_mutable_search_to_eval() {
  
  if (search_to_eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaForAllocation());
    search_to_eval_ = p;
  }
  return search_to_eval_;
}
inline ::clarifai::api::Search* PostAnnotationSearchMetricsRequest::mutable_search_to_eval() {
  ::clarifai::api::Search* _msg = _internal_mutable_search_to_eval();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationSearchMetricsRequest.search_to_eval)
  return _msg;
}
inline void PostAnnotationSearchMetricsRequest::set_allocated_search_to_eval(::clarifai::api::Search* search_to_eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_to_eval_);
  }
  if (search_to_eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_to_eval));
    if (message_arena != submessage_arena) {
      search_to_eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_to_eval, submessage_arena);
    }
    
  } else {
    
  }
  search_to_eval_ = search_to_eval;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.search_to_eval)
}

// .clarifai.api.Data data = 5;
inline bool PostAnnotationSearchMetricsRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool PostAnnotationSearchMetricsRequest::has_data() const {
  return _internal_has_data();
}
inline const ::clarifai::api::Data& PostAnnotationSearchMetricsRequest::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Data&>(
      ::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& PostAnnotationSearchMetricsRequest::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationSearchMetricsRequest.data)
  return _internal_data();
}
inline void PostAnnotationSearchMetricsRequest::unsafe_arena_set_allocated_data(
    ::clarifai::api::Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.data)
}
inline ::clarifai::api::Data* PostAnnotationSearchMetricsRequest::release_data() {
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Data* PostAnnotationSearchMetricsRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationSearchMetricsRequest.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* PostAnnotationSearchMetricsRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* PostAnnotationSearchMetricsRequest::mutable_data() {
  ::clarifai::api::Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationSearchMetricsRequest.data)
  return _msg;
}
inline void PostAnnotationSearchMetricsRequest::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationSearchMetricsRequest.data)
}

// .clarifai.api.EvaluationType evaluation_type = 6;
inline void PostAnnotationSearchMetricsRequest::clear_evaluation_type() {
  evaluation_type_ = 0;
}
inline ::clarifai::api::EvaluationType PostAnnotationSearchMetricsRequest::_internal_evaluation_type() const {
  return static_cast< ::clarifai::api::EvaluationType >(evaluation_type_);
}
inline ::clarifai::api::EvaluationType PostAnnotationSearchMetricsRequest::evaluation_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationSearchMetricsRequest.evaluation_type)
  return _internal_evaluation_type();
}
inline void PostAnnotationSearchMetricsRequest::_internal_set_evaluation_type(::clarifai::api::EvaluationType value) {
  
  evaluation_type_ = value;
}
inline void PostAnnotationSearchMetricsRequest::set_evaluation_type(::clarifai::api::EvaluationType value) {
  _internal_set_evaluation_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostAnnotationSearchMetricsRequest.evaluation_type)
}

// -------------------------------------------------------------------

// GetAnnotationSearchMetricsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetAnnotationSearchMetricsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetAnnotationSearchMetricsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetAnnotationSearchMetricsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetAnnotationSearchMetricsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAnnotationSearchMetricsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetAnnotationSearchMetricsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetAnnotationSearchMetricsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationSearchMetricsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationSearchMetricsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAnnotationSearchMetricsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationSearchMetricsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationSearchMetricsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAnnotationSearchMetricsRequest.user_app_id)
  return _msg;
}
inline void GetAnnotationSearchMetricsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAnnotationSearchMetricsRequest.user_app_id)
}

// string id = 2;
inline void GetAnnotationSearchMetricsRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetAnnotationSearchMetricsRequest::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAnnotationSearchMetricsRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAnnotationSearchMetricsRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetAnnotationSearchMetricsRequest.id)
}
inline std::string* GetAnnotationSearchMetricsRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAnnotationSearchMetricsRequest.id)
  return _s;
}
inline const std::string& GetAnnotationSearchMetricsRequest::_internal_id() const {
  return id_.Get();
}
inline void GetAnnotationSearchMetricsRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetAnnotationSearchMetricsRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetAnnotationSearchMetricsRequest::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAnnotationSearchMetricsRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetAnnotationSearchMetricsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAnnotationSearchMetricsRequest.id)
}

// -------------------------------------------------------------------

// ListAnnotationSearchMetricsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListAnnotationSearchMetricsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListAnnotationSearchMetricsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListAnnotationSearchMetricsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListAnnotationSearchMetricsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationSearchMetricsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListAnnotationSearchMetricsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListAnnotationSearchMetricsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationSearchMetricsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationSearchMetricsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAnnotationSearchMetricsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationSearchMetricsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationSearchMetricsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationSearchMetricsRequest.user_app_id)
  return _msg;
}
inline void ListAnnotationSearchMetricsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAnnotationSearchMetricsRequest.user_app_id)
}

// -------------------------------------------------------------------

// MultiAnnotationSearchMetricsResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiAnnotationSearchMetricsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiAnnotationSearchMetricsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiAnnotationSearchMetricsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiAnnotationSearchMetricsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAnnotationSearchMetricsResponse.status)
  return _internal_status();
}
inline void MultiAnnotationSearchMetricsResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiAnnotationSearchMetricsResponse.status)
}
inline ::clarifai::api::status::Status* MultiAnnotationSearchMetricsResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiAnnotationSearchMetricsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiAnnotationSearchMetricsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiAnnotationSearchMetricsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiAnnotationSearchMetricsResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAnnotationSearchMetricsResponse.status)
  return _msg;
}
inline void MultiAnnotationSearchMetricsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiAnnotationSearchMetricsResponse.status)
}

// repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
inline int MultiAnnotationSearchMetricsResponse::_internal_annotation_search_metrics_size() const {
  return annotation_search_metrics_.size();
}
inline int MultiAnnotationSearchMetricsResponse::annotation_search_metrics_size() const {
  return _internal_annotation_search_metrics_size();
}
inline ::clarifai::api::AnnotationSearchMetrics* MultiAnnotationSearchMetricsResponse::mutable_annotation_search_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAnnotationSearchMetricsResponse.annotation_search_metrics)
  return annotation_search_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationSearchMetrics >*
MultiAnnotationSearchMetricsResponse::mutable_annotation_search_metrics() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiAnnotationSearchMetricsResponse.annotation_search_metrics)
  return &annotation_search_metrics_;
}
inline const ::clarifai::api::AnnotationSearchMetrics& MultiAnnotationSearchMetricsResponse::_internal_annotation_search_metrics(int index) const {
  return annotation_search_metrics_.Get(index);
}
inline const ::clarifai::api::AnnotationSearchMetrics& MultiAnnotationSearchMetricsResponse::annotation_search_metrics(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAnnotationSearchMetricsResponse.annotation_search_metrics)
  return _internal_annotation_search_metrics(index);
}
inline ::clarifai::api::AnnotationSearchMetrics* MultiAnnotationSearchMetricsResponse::_internal_add_annotation_search_metrics() {
  return annotation_search_metrics_.Add();
}
inline ::clarifai::api::AnnotationSearchMetrics* MultiAnnotationSearchMetricsResponse::add_annotation_search_metrics() {
  ::clarifai::api::AnnotationSearchMetrics* _add = _internal_add_annotation_search_metrics();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiAnnotationSearchMetricsResponse.annotation_search_metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationSearchMetrics >&
MultiAnnotationSearchMetricsResponse::annotation_search_metrics() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiAnnotationSearchMetricsResponse.annotation_search_metrics)
  return annotation_search_metrics_;
}

// -------------------------------------------------------------------

// ListAnnotationFiltersRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListAnnotationFiltersRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListAnnotationFiltersRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListAnnotationFiltersRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListAnnotationFiltersRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationFiltersRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListAnnotationFiltersRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListAnnotationFiltersRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationFiltersRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationFiltersRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAnnotationFiltersRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationFiltersRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListAnnotationFiltersRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAnnotationFiltersRequest.user_app_id)
  return _msg;
}
inline void ListAnnotationFiltersRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAnnotationFiltersRequest.user_app_id)
}

// uint32 page = 2;
inline void ListAnnotationFiltersRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListAnnotationFiltersRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListAnnotationFiltersRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationFiltersRequest.page)
  return _internal_page();
}
inline void ListAnnotationFiltersRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListAnnotationFiltersRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationFiltersRequest.page)
}

// uint32 per_page = 3;
inline void ListAnnotationFiltersRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListAnnotationFiltersRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListAnnotationFiltersRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAnnotationFiltersRequest.per_page)
  return _internal_per_page();
}
inline void ListAnnotationFiltersRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListAnnotationFiltersRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAnnotationFiltersRequest.per_page)
}

// -------------------------------------------------------------------

// GetAnnotationFilterRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetAnnotationFilterRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetAnnotationFilterRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetAnnotationFilterRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetAnnotationFilterRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAnnotationFilterRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetAnnotationFilterRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetAnnotationFilterRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationFilterRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationFilterRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAnnotationFilterRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationFilterRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetAnnotationFilterRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAnnotationFilterRequest.user_app_id)
  return _msg;
}
inline void GetAnnotationFilterRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAnnotationFilterRequest.user_app_id)
}

// string annotation_filter_id = 2;
inline void GetAnnotationFilterRequest::clear_annotation_filter_id() {
  annotation_filter_id_.ClearToEmpty();
}
inline const std::string& GetAnnotationFilterRequest::annotation_filter_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAnnotationFilterRequest.annotation_filter_id)
  return _internal_annotation_filter_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAnnotationFilterRequest::set_annotation_filter_id(ArgT0&& arg0, ArgT... args) {
 
 annotation_filter_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetAnnotationFilterRequest.annotation_filter_id)
}
inline std::string* GetAnnotationFilterRequest::mutable_annotation_filter_id() {
  std::string* _s = _internal_mutable_annotation_filter_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAnnotationFilterRequest.annotation_filter_id)
  return _s;
}
inline const std::string& GetAnnotationFilterRequest::_internal_annotation_filter_id() const {
  return annotation_filter_id_.Get();
}
inline void GetAnnotationFilterRequest::_internal_set_annotation_filter_id(const std::string& value) {
  
  annotation_filter_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetAnnotationFilterRequest::_internal_mutable_annotation_filter_id() {
  
  return annotation_filter_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetAnnotationFilterRequest::release_annotation_filter_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAnnotationFilterRequest.annotation_filter_id)
  return annotation_filter_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetAnnotationFilterRequest::set_allocated_annotation_filter_id(std::string* annotation_filter_id) {
  if (annotation_filter_id != nullptr) {
    
  } else {
    
  }
  annotation_filter_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), annotation_filter_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (annotation_filter_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    annotation_filter_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAnnotationFilterRequest.annotation_filter_id)
}

// -------------------------------------------------------------------

// PostAnnotationFiltersRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAnnotationFiltersRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAnnotationFiltersRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationFiltersRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAnnotationFiltersRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationFiltersRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostAnnotationFiltersRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAnnotationFiltersRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationFiltersRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationFiltersRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAnnotationFiltersRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationFiltersRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAnnotationFiltersRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationFiltersRequest.user_app_id)
  return _msg;
}
inline void PostAnnotationFiltersRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAnnotationFiltersRequest.user_app_id)
}

// repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
inline int PostAnnotationFiltersRequest::_internal_annotation_filters_size() const {
  return annotation_filters_.size();
}
inline int PostAnnotationFiltersRequest::annotation_filters_size() const {
  return _internal_annotation_filters_size();
}
inline ::clarifai::api::AnnotationFilter* PostAnnotationFiltersRequest::mutable_annotation_filters(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAnnotationFiltersRequest.annotation_filters)
  return annotation_filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter >*
PostAnnotationFiltersRequest::mutable_annotation_filters() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostAnnotationFiltersRequest.annotation_filters)
  return &annotation_filters_;
}
inline const ::clarifai::api::AnnotationFilter& PostAnnotationFiltersRequest::_internal_annotation_filters(int index) const {
  return annotation_filters_.Get(index);
}
inline const ::clarifai::api::AnnotationFilter& PostAnnotationFiltersRequest::annotation_filters(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAnnotationFiltersRequest.annotation_filters)
  return _internal_annotation_filters(index);
}
inline ::clarifai::api::AnnotationFilter* PostAnnotationFiltersRequest::_internal_add_annotation_filters() {
  return annotation_filters_.Add();
}
inline ::clarifai::api::AnnotationFilter* PostAnnotationFiltersRequest::add_annotation_filters() {
  ::clarifai::api::AnnotationFilter* _add = _internal_add_annotation_filters();
  // @@protoc_insertion_point(field_add:clarifai.api.PostAnnotationFiltersRequest.annotation_filters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter >&
PostAnnotationFiltersRequest::annotation_filters() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostAnnotationFiltersRequest.annotation_filters)
  return annotation_filters_;
}

// -------------------------------------------------------------------

// PatchAnnotationFiltersRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchAnnotationFiltersRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchAnnotationFiltersRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchAnnotationFiltersRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchAnnotationFiltersRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationFiltersRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchAnnotationFiltersRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchAnnotationFiltersRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationFiltersRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationFiltersRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAnnotationFiltersRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationFiltersRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchAnnotationFiltersRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationFiltersRequest.user_app_id)
  return _msg;
}
inline void PatchAnnotationFiltersRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAnnotationFiltersRequest.user_app_id)
}

// repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
inline int PatchAnnotationFiltersRequest::_internal_annotation_filters_size() const {
  return annotation_filters_.size();
}
inline int PatchAnnotationFiltersRequest::annotation_filters_size() const {
  return _internal_annotation_filters_size();
}
inline ::clarifai::api::AnnotationFilter* PatchAnnotationFiltersRequest::mutable_annotation_filters(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationFiltersRequest.annotation_filters)
  return annotation_filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter >*
PatchAnnotationFiltersRequest::mutable_annotation_filters() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchAnnotationFiltersRequest.annotation_filters)
  return &annotation_filters_;
}
inline const ::clarifai::api::AnnotationFilter& PatchAnnotationFiltersRequest::_internal_annotation_filters(int index) const {
  return annotation_filters_.Get(index);
}
inline const ::clarifai::api::AnnotationFilter& PatchAnnotationFiltersRequest::annotation_filters(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationFiltersRequest.annotation_filters)
  return _internal_annotation_filters(index);
}
inline ::clarifai::api::AnnotationFilter* PatchAnnotationFiltersRequest::_internal_add_annotation_filters() {
  return annotation_filters_.Add();
}
inline ::clarifai::api::AnnotationFilter* PatchAnnotationFiltersRequest::add_annotation_filters() {
  ::clarifai::api::AnnotationFilter* _add = _internal_add_annotation_filters();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchAnnotationFiltersRequest.annotation_filters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter >&
PatchAnnotationFiltersRequest::annotation_filters() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchAnnotationFiltersRequest.annotation_filters)
  return annotation_filters_;
}

// string action = 3;
inline void PatchAnnotationFiltersRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchAnnotationFiltersRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAnnotationFiltersRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchAnnotationFiltersRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAnnotationFiltersRequest.action)
}
inline std::string* PatchAnnotationFiltersRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAnnotationFiltersRequest.action)
  return _s;
}
inline const std::string& PatchAnnotationFiltersRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchAnnotationFiltersRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchAnnotationFiltersRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchAnnotationFiltersRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAnnotationFiltersRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchAnnotationFiltersRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAnnotationFiltersRequest.action)
}

// -------------------------------------------------------------------

// DeleteAnnotationFiltersRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteAnnotationFiltersRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteAnnotationFiltersRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteAnnotationFiltersRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteAnnotationFiltersRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationFiltersRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteAnnotationFiltersRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteAnnotationFiltersRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationFiltersRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationFiltersRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteAnnotationFiltersRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationFiltersRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteAnnotationFiltersRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationFiltersRequest.user_app_id)
  return _msg;
}
inline void DeleteAnnotationFiltersRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteAnnotationFiltersRequest.user_app_id)
}

// repeated string annotation_filter_ids = 2;
inline int DeleteAnnotationFiltersRequest::_internal_annotation_filter_ids_size() const {
  return annotation_filter_ids_.size();
}
inline int DeleteAnnotationFiltersRequest::annotation_filter_ids_size() const {
  return _internal_annotation_filter_ids_size();
}
inline void DeleteAnnotationFiltersRequest::clear_annotation_filter_ids() {
  annotation_filter_ids_.Clear();
}
inline std::string* DeleteAnnotationFiltersRequest::add_annotation_filter_ids() {
  std::string* _s = _internal_add_annotation_filter_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
  return _s;
}
inline const std::string& DeleteAnnotationFiltersRequest::_internal_annotation_filter_ids(int index) const {
  return annotation_filter_ids_.Get(index);
}
inline const std::string& DeleteAnnotationFiltersRequest::annotation_filter_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
  return _internal_annotation_filter_ids(index);
}
inline std::string* DeleteAnnotationFiltersRequest::mutable_annotation_filter_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
  return annotation_filter_ids_.Mutable(index);
}
inline void DeleteAnnotationFiltersRequest::set_annotation_filter_ids(int index, const std::string& value) {
  annotation_filter_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
}
inline void DeleteAnnotationFiltersRequest::set_annotation_filter_ids(int index, std::string&& value) {
  annotation_filter_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
}
inline void DeleteAnnotationFiltersRequest::set_annotation_filter_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotation_filter_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
}
inline void DeleteAnnotationFiltersRequest::set_annotation_filter_ids(int index, const char* value, size_t size) {
  annotation_filter_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
}
inline std::string* DeleteAnnotationFiltersRequest::_internal_add_annotation_filter_ids() {
  return annotation_filter_ids_.Add();
}
inline void DeleteAnnotationFiltersRequest::add_annotation_filter_ids(const std::string& value) {
  annotation_filter_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
}
inline void DeleteAnnotationFiltersRequest::add_annotation_filter_ids(std::string&& value) {
  annotation_filter_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
}
inline void DeleteAnnotationFiltersRequest::add_annotation_filter_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  annotation_filter_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
}
inline void DeleteAnnotationFiltersRequest::add_annotation_filter_ids(const char* value, size_t size) {
  annotation_filter_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteAnnotationFiltersRequest::annotation_filter_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
  return annotation_filter_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteAnnotationFiltersRequest::mutable_annotation_filter_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids)
  return &annotation_filter_ids_;
}

// -------------------------------------------------------------------

// MultiAnnotationFilterResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiAnnotationFilterResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiAnnotationFilterResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiAnnotationFilterResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiAnnotationFilterResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAnnotationFilterResponse.status)
  return _internal_status();
}
inline void MultiAnnotationFilterResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiAnnotationFilterResponse.status)
}
inline ::clarifai::api::status::Status* MultiAnnotationFilterResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiAnnotationFilterResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiAnnotationFilterResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiAnnotationFilterResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiAnnotationFilterResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAnnotationFilterResponse.status)
  return _msg;
}
inline void MultiAnnotationFilterResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiAnnotationFilterResponse.status)
}

// repeated .clarifai.api.AnnotationFilter annotation_filters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiAnnotationFilterResponse::_internal_annotation_filters_size() const {
  return annotation_filters_.size();
}
inline int MultiAnnotationFilterResponse::annotation_filters_size() const {
  return _internal_annotation_filters_size();
}
inline ::clarifai::api::AnnotationFilter* MultiAnnotationFilterResponse::mutable_annotation_filters(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAnnotationFilterResponse.annotation_filters)
  return annotation_filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter >*
MultiAnnotationFilterResponse::mutable_annotation_filters() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiAnnotationFilterResponse.annotation_filters)
  return &annotation_filters_;
}
inline const ::clarifai::api::AnnotationFilter& MultiAnnotationFilterResponse::_internal_annotation_filters(int index) const {
  return annotation_filters_.Get(index);
}
inline const ::clarifai::api::AnnotationFilter& MultiAnnotationFilterResponse::annotation_filters(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAnnotationFilterResponse.annotation_filters)
  return _internal_annotation_filters(index);
}
inline ::clarifai::api::AnnotationFilter* MultiAnnotationFilterResponse::_internal_add_annotation_filters() {
  return annotation_filters_.Add();
}
inline ::clarifai::api::AnnotationFilter* MultiAnnotationFilterResponse::add_annotation_filters() {
  ::clarifai::api::AnnotationFilter* _add = _internal_add_annotation_filters();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiAnnotationFilterResponse.annotation_filters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AnnotationFilter >&
MultiAnnotationFilterResponse::annotation_filters() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiAnnotationFilterResponse.annotation_filters)
  return annotation_filters_;
}

// -------------------------------------------------------------------

// SingleAnnotationFilterResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleAnnotationFilterResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleAnnotationFilterResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleAnnotationFilterResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleAnnotationFilterResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAnnotationFilterResponse.status)
  return _internal_status();
}
inline void SingleAnnotationFilterResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleAnnotationFilterResponse.status)
}
inline ::clarifai::api::status::Status* SingleAnnotationFilterResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleAnnotationFilterResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAnnotationFilterResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleAnnotationFilterResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleAnnotationFilterResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAnnotationFilterResponse.status)
  return _msg;
}
inline void SingleAnnotationFilterResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAnnotationFilterResponse.status)
}

// .clarifai.api.AnnotationFilter annotation_filter = 2;
inline bool SingleAnnotationFilterResponse::_internal_has_annotation_filter() const {
  return this != internal_default_instance() && annotation_filter_ != nullptr;
}
inline bool SingleAnnotationFilterResponse::has_annotation_filter() const {
  return _internal_has_annotation_filter();
}
inline const ::clarifai::api::AnnotationFilter& SingleAnnotationFilterResponse::_internal_annotation_filter() const {
  const ::clarifai::api::AnnotationFilter* p = annotation_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::AnnotationFilter&>(
      ::clarifai::api::_AnnotationFilter_default_instance_);
}
inline const ::clarifai::api::AnnotationFilter& SingleAnnotationFilterResponse::annotation_filter() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAnnotationFilterResponse.annotation_filter)
  return _internal_annotation_filter();
}
inline void SingleAnnotationFilterResponse::unsafe_arena_set_allocated_annotation_filter(
    ::clarifai::api::AnnotationFilter* annotation_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_filter_);
  }
  annotation_filter_ = annotation_filter;
  if (annotation_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleAnnotationFilterResponse.annotation_filter)
}
inline ::clarifai::api::AnnotationFilter* SingleAnnotationFilterResponse::release_annotation_filter() {
  
  ::clarifai::api::AnnotationFilter* temp = annotation_filter_;
  annotation_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::AnnotationFilter* SingleAnnotationFilterResponse::unsafe_arena_release_annotation_filter() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAnnotationFilterResponse.annotation_filter)
  
  ::clarifai::api::AnnotationFilter* temp = annotation_filter_;
  annotation_filter_ = nullptr;
  return temp;
}
inline ::clarifai::api::AnnotationFilter* SingleAnnotationFilterResponse::_internal_mutable_annotation_filter() {
  
  if (annotation_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::AnnotationFilter>(GetArenaForAllocation());
    annotation_filter_ = p;
  }
  return annotation_filter_;
}
inline ::clarifai::api::AnnotationFilter* SingleAnnotationFilterResponse::mutable_annotation_filter() {
  ::clarifai::api::AnnotationFilter* _msg = _internal_mutable_annotation_filter();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAnnotationFilterResponse.annotation_filter)
  return _msg;
}
inline void SingleAnnotationFilterResponse::set_allocated_annotation_filter(::clarifai::api::AnnotationFilter* annotation_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_filter_);
  }
  if (annotation_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_filter));
    if (message_arena != submessage_arena) {
      annotation_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_filter, submessage_arena);
    }
    
  } else {
    
  }
  annotation_filter_ = annotation_filter;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAnnotationFilterResponse.annotation_filter)
}

// -------------------------------------------------------------------

// PostValidatePasswordRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostValidatePasswordRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostValidatePasswordRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostValidatePasswordRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostValidatePasswordRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostValidatePasswordRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostValidatePasswordRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostValidatePasswordRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostValidatePasswordRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostValidatePasswordRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostValidatePasswordRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostValidatePasswordRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostValidatePasswordRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostValidatePasswordRequest.user_app_id)
  return _msg;
}
inline void PostValidatePasswordRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostValidatePasswordRequest.user_app_id)
}

// .clarifai.api.Password password = 2;
inline bool PostValidatePasswordRequest::_internal_has_password() const {
  return this != internal_default_instance() && password_ != nullptr;
}
inline bool PostValidatePasswordRequest::has_password() const {
  return _internal_has_password();
}
inline const ::clarifai::api::Password& PostValidatePasswordRequest::_internal_password() const {
  const ::clarifai::api::Password* p = password_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Password&>(
      ::clarifai::api::_Password_default_instance_);
}
inline const ::clarifai::api::Password& PostValidatePasswordRequest::password() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostValidatePasswordRequest.password)
  return _internal_password();
}
inline void PostValidatePasswordRequest::unsafe_arena_set_allocated_password(
    ::clarifai::api::Password* password) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_);
  }
  password_ = password;
  if (password) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostValidatePasswordRequest.password)
}
inline ::clarifai::api::Password* PostValidatePasswordRequest::release_password() {
  
  ::clarifai::api::Password* temp = password_;
  password_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Password* PostValidatePasswordRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostValidatePasswordRequest.password)
  
  ::clarifai::api::Password* temp = password_;
  password_ = nullptr;
  return temp;
}
inline ::clarifai::api::Password* PostValidatePasswordRequest::_internal_mutable_password() {
  
  if (password_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Password>(GetArenaForAllocation());
    password_ = p;
  }
  return password_;
}
inline ::clarifai::api::Password* PostValidatePasswordRequest::mutable_password() {
  ::clarifai::api::Password* _msg = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostValidatePasswordRequest.password)
  return _msg;
}
inline void PostValidatePasswordRequest::set_allocated_password(::clarifai::api::Password* password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_);
  }
  if (password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password));
    if (message_arena != submessage_arena) {
      password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password, submessage_arena);
    }
    
  } else {
    
  }
  password_ = password;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostValidatePasswordRequest.password)
}

// -------------------------------------------------------------------

// SinglePasswordValidationResponse

// .clarifai.api.status.Status status = 1;
inline bool SinglePasswordValidationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SinglePasswordValidationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SinglePasswordValidationResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SinglePasswordValidationResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SinglePasswordValidationResponse.status)
  return _internal_status();
}
inline void SinglePasswordValidationResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SinglePasswordValidationResponse.status)
}
inline ::clarifai::api::status::Status* SinglePasswordValidationResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SinglePasswordValidationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SinglePasswordValidationResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SinglePasswordValidationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SinglePasswordValidationResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SinglePasswordValidationResponse.status)
  return _msg;
}
inline void SinglePasswordValidationResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SinglePasswordValidationResponse.status)
}

// .clarifai.api.PasswordViolations password_violations = 2;
inline bool SinglePasswordValidationResponse::_internal_has_password_violations() const {
  return this != internal_default_instance() && password_violations_ != nullptr;
}
inline bool SinglePasswordValidationResponse::has_password_violations() const {
  return _internal_has_password_violations();
}
inline const ::clarifai::api::PasswordViolations& SinglePasswordValidationResponse::_internal_password_violations() const {
  const ::clarifai::api::PasswordViolations* p = password_violations_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::PasswordViolations&>(
      ::clarifai::api::_PasswordViolations_default_instance_);
}
inline const ::clarifai::api::PasswordViolations& SinglePasswordValidationResponse::password_violations() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SinglePasswordValidationResponse.password_violations)
  return _internal_password_violations();
}
inline void SinglePasswordValidationResponse::unsafe_arena_set_allocated_password_violations(
    ::clarifai::api::PasswordViolations* password_violations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_violations_);
  }
  password_violations_ = password_violations;
  if (password_violations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SinglePasswordValidationResponse.password_violations)
}
inline ::clarifai::api::PasswordViolations* SinglePasswordValidationResponse::release_password_violations() {
  
  ::clarifai::api::PasswordViolations* temp = password_violations_;
  password_violations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::PasswordViolations* SinglePasswordValidationResponse::unsafe_arena_release_password_violations() {
  // @@protoc_insertion_point(field_release:clarifai.api.SinglePasswordValidationResponse.password_violations)
  
  ::clarifai::api::PasswordViolations* temp = password_violations_;
  password_violations_ = nullptr;
  return temp;
}
inline ::clarifai::api::PasswordViolations* SinglePasswordValidationResponse::_internal_mutable_password_violations() {
  
  if (password_violations_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::PasswordViolations>(GetArenaForAllocation());
    password_violations_ = p;
  }
  return password_violations_;
}
inline ::clarifai::api::PasswordViolations* SinglePasswordValidationResponse::mutable_password_violations() {
  ::clarifai::api::PasswordViolations* _msg = _internal_mutable_password_violations();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SinglePasswordValidationResponse.password_violations)
  return _msg;
}
inline void SinglePasswordValidationResponse::set_allocated_password_violations(::clarifai::api::PasswordViolations* password_violations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_violations_);
  }
  if (password_violations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_violations));
    if (message_arena != submessage_arena) {
      password_violations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password_violations, submessage_arena);
    }
    
  } else {
    
  }
  password_violations_ = password_violations;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SinglePasswordValidationResponse.password_violations)
}

// -------------------------------------------------------------------

// GetWorkflowRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetWorkflowRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetWorkflowRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetWorkflowRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetWorkflowRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetWorkflowRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetWorkflowRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetWorkflowRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetWorkflowRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetWorkflowRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetWorkflowRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetWorkflowRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetWorkflowRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetWorkflowRequest.user_app_id)
  return _msg;
}
inline void GetWorkflowRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetWorkflowRequest.user_app_id)
}

// string workflow_id = 2;
inline void GetWorkflowRequest::clear_workflow_id() {
  workflow_id_.ClearToEmpty();
}
inline const std::string& GetWorkflowRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetWorkflowRequest.workflow_id)
  return _internal_workflow_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetWorkflowRequest::set_workflow_id(ArgT0&& arg0, ArgT... args) {
 
 workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetWorkflowRequest.workflow_id)
}
inline std::string* GetWorkflowRequest::mutable_workflow_id() {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetWorkflowRequest.workflow_id)
  return _s;
}
inline const std::string& GetWorkflowRequest::_internal_workflow_id() const {
  return workflow_id_.Get();
}
inline void GetWorkflowRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetWorkflowRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetWorkflowRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetWorkflowRequest.workflow_id)
  return workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetWorkflowRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetWorkflowRequest.workflow_id)
}

// bool favor_clarifai_workflows = 3;
inline void GetWorkflowRequest::clear_favor_clarifai_workflows() {
  favor_clarifai_workflows_ = false;
}
inline bool GetWorkflowRequest::_internal_favor_clarifai_workflows() const {
  return favor_clarifai_workflows_;
}
inline bool GetWorkflowRequest::favor_clarifai_workflows() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetWorkflowRequest.favor_clarifai_workflows)
  return _internal_favor_clarifai_workflows();
}
inline void GetWorkflowRequest::_internal_set_favor_clarifai_workflows(bool value) {
  
  favor_clarifai_workflows_ = value;
}
inline void GetWorkflowRequest::set_favor_clarifai_workflows(bool value) {
  _internal_set_favor_clarifai_workflows(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetWorkflowRequest.favor_clarifai_workflows)
}

// repeated string additional_fields = 4;
inline int GetWorkflowRequest::_internal_additional_fields_size() const {
  return additional_fields_.size();
}
inline int GetWorkflowRequest::additional_fields_size() const {
  return _internal_additional_fields_size();
}
inline void GetWorkflowRequest::clear_additional_fields() {
  additional_fields_.Clear();
}
inline std::string* GetWorkflowRequest::add_additional_fields() {
  std::string* _s = _internal_add_additional_fields();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.GetWorkflowRequest.additional_fields)
  return _s;
}
inline const std::string& GetWorkflowRequest::_internal_additional_fields(int index) const {
  return additional_fields_.Get(index);
}
inline const std::string& GetWorkflowRequest::additional_fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetWorkflowRequest.additional_fields)
  return _internal_additional_fields(index);
}
inline std::string* GetWorkflowRequest::mutable_additional_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetWorkflowRequest.additional_fields)
  return additional_fields_.Mutable(index);
}
inline void GetWorkflowRequest::set_additional_fields(int index, const std::string& value) {
  additional_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetWorkflowRequest.additional_fields)
}
inline void GetWorkflowRequest::set_additional_fields(int index, std::string&& value) {
  additional_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.GetWorkflowRequest.additional_fields)
}
inline void GetWorkflowRequest::set_additional_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetWorkflowRequest.additional_fields)
}
inline void GetWorkflowRequest::set_additional_fields(int index, const char* value, size_t size) {
  additional_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetWorkflowRequest.additional_fields)
}
inline std::string* GetWorkflowRequest::_internal_add_additional_fields() {
  return additional_fields_.Add();
}
inline void GetWorkflowRequest::add_additional_fields(const std::string& value) {
  additional_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.GetWorkflowRequest.additional_fields)
}
inline void GetWorkflowRequest::add_additional_fields(std::string&& value) {
  additional_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.GetWorkflowRequest.additional_fields)
}
inline void GetWorkflowRequest::add_additional_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.GetWorkflowRequest.additional_fields)
}
inline void GetWorkflowRequest::add_additional_fields(const char* value, size_t size) {
  additional_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.GetWorkflowRequest.additional_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetWorkflowRequest::additional_fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.GetWorkflowRequest.additional_fields)
  return additional_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetWorkflowRequest::mutable_additional_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.GetWorkflowRequest.additional_fields)
  return &additional_fields_;
}

// bool exclude_clarifai_workflows = 5;
inline void GetWorkflowRequest::clear_exclude_clarifai_workflows() {
  exclude_clarifai_workflows_ = false;
}
inline bool GetWorkflowRequest::_internal_exclude_clarifai_workflows() const {
  return exclude_clarifai_workflows_;
}
inline bool GetWorkflowRequest::exclude_clarifai_workflows() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetWorkflowRequest.exclude_clarifai_workflows)
  return _internal_exclude_clarifai_workflows();
}
inline void GetWorkflowRequest::_internal_set_exclude_clarifai_workflows(bool value) {
  
  exclude_clarifai_workflows_ = value;
}
inline void GetWorkflowRequest::set_exclude_clarifai_workflows(bool value) {
  _internal_set_exclude_clarifai_workflows(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetWorkflowRequest.exclude_clarifai_workflows)
}

// -------------------------------------------------------------------

// ListWorkflowsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListWorkflowsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListWorkflowsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListWorkflowsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListWorkflowsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListWorkflowsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListWorkflowsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListWorkflowsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListWorkflowsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListWorkflowsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListWorkflowsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListWorkflowsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListWorkflowsRequest.user_app_id)
  return _msg;
}
inline void ListWorkflowsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListWorkflowsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListWorkflowsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListWorkflowsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListWorkflowsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.page)
  return _internal_page();
}
inline void ListWorkflowsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListWorkflowsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.page)
}

// uint32 per_page = 3;
inline void ListWorkflowsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListWorkflowsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListWorkflowsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.per_page)
  return _internal_per_page();
}
inline void ListWorkflowsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListWorkflowsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.per_page)
}

// bool sort_ascending = 5;
inline void ListWorkflowsRequest::clear_sort_ascending() {
  sort_ascending_ = false;
}
inline bool ListWorkflowsRequest::_internal_sort_ascending() const {
  return sort_ascending_;
}
inline bool ListWorkflowsRequest::sort_ascending() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.sort_ascending)
  return _internal_sort_ascending();
}
inline void ListWorkflowsRequest::_internal_set_sort_ascending(bool value) {
  
  sort_ascending_ = value;
}
inline void ListWorkflowsRequest::set_sort_ascending(bool value) {
  _internal_set_sort_ascending(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.sort_ascending)
}

// bool sort_by_id = 6;
inline bool ListWorkflowsRequest::_internal_has_sort_by_id() const {
  return sort_by_case() == kSortById;
}
inline bool ListWorkflowsRequest::has_sort_by_id() const {
  return _internal_has_sort_by_id();
}
inline void ListWorkflowsRequest::set_has_sort_by_id() {
  _oneof_case_[0] = kSortById;
}
inline void ListWorkflowsRequest::clear_sort_by_id() {
  if (_internal_has_sort_by_id()) {
    sort_by_.sort_by_id_ = false;
    clear_has_sort_by();
  }
}
inline bool ListWorkflowsRequest::_internal_sort_by_id() const {
  if (_internal_has_sort_by_id()) {
    return sort_by_.sort_by_id_;
  }
  return false;
}
inline void ListWorkflowsRequest::_internal_set_sort_by_id(bool value) {
  if (!_internal_has_sort_by_id()) {
    clear_sort_by();
    set_has_sort_by_id();
  }
  sort_by_.sort_by_id_ = value;
}
inline bool ListWorkflowsRequest::sort_by_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.sort_by_id)
  return _internal_sort_by_id();
}
inline void ListWorkflowsRequest::set_sort_by_id(bool value) {
  _internal_set_sort_by_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.sort_by_id)
}

// bool sort_by_modified_at = 7;
inline bool ListWorkflowsRequest::_internal_has_sort_by_modified_at() const {
  return sort_by_case() == kSortByModifiedAt;
}
inline bool ListWorkflowsRequest::has_sort_by_modified_at() const {
  return _internal_has_sort_by_modified_at();
}
inline void ListWorkflowsRequest::set_has_sort_by_modified_at() {
  _oneof_case_[0] = kSortByModifiedAt;
}
inline void ListWorkflowsRequest::clear_sort_by_modified_at() {
  if (_internal_has_sort_by_modified_at()) {
    sort_by_.sort_by_modified_at_ = false;
    clear_has_sort_by();
  }
}
inline bool ListWorkflowsRequest::_internal_sort_by_modified_at() const {
  if (_internal_has_sort_by_modified_at()) {
    return sort_by_.sort_by_modified_at_;
  }
  return false;
}
inline void ListWorkflowsRequest::_internal_set_sort_by_modified_at(bool value) {
  if (!_internal_has_sort_by_modified_at()) {
    clear_sort_by();
    set_has_sort_by_modified_at();
  }
  sort_by_.sort_by_modified_at_ = value;
}
inline bool ListWorkflowsRequest::sort_by_modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.sort_by_modified_at)
  return _internal_sort_by_modified_at();
}
inline void ListWorkflowsRequest::set_sort_by_modified_at(bool value) {
  _internal_set_sort_by_modified_at(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.sort_by_modified_at)
}

// string query = 8;
inline void ListWorkflowsRequest::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& ListWorkflowsRequest::query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListWorkflowsRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.query)
}
inline std::string* ListWorkflowsRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListWorkflowsRequest.query)
  return _s;
}
inline const std::string& ListWorkflowsRequest::_internal_query() const {
  return query_.Get();
}
inline void ListWorkflowsRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListWorkflowsRequest::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListWorkflowsRequest::release_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListWorkflowsRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListWorkflowsRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (query_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListWorkflowsRequest.query)
}

// string id = 4 [deprecated = true];
inline void ListWorkflowsRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ListWorkflowsRequest::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListWorkflowsRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.id)
}
inline std::string* ListWorkflowsRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListWorkflowsRequest.id)
  return _s;
}
inline const std::string& ListWorkflowsRequest::_internal_id() const {
  return id_.Get();
}
inline void ListWorkflowsRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListWorkflowsRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListWorkflowsRequest::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListWorkflowsRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListWorkflowsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListWorkflowsRequest.id)
}

// bool featured_only = 9;
inline void ListWorkflowsRequest::clear_featured_only() {
  featured_only_ = false;
}
inline bool ListWorkflowsRequest::_internal_featured_only() const {
  return featured_only_;
}
inline bool ListWorkflowsRequest::featured_only() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.featured_only)
  return _internal_featured_only();
}
inline void ListWorkflowsRequest::_internal_set_featured_only(bool value) {
  
  featured_only_ = value;
}
inline void ListWorkflowsRequest::set_featured_only(bool value) {
  _internal_set_featured_only(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.featured_only)
}

// bool starred_only = 11;
inline void ListWorkflowsRequest::clear_starred_only() {
  starred_only_ = false;
}
inline bool ListWorkflowsRequest::_internal_starred_only() const {
  return starred_only_;
}
inline bool ListWorkflowsRequest::starred_only() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.starred_only)
  return _internal_starred_only();
}
inline void ListWorkflowsRequest::_internal_set_starred_only(bool value) {
  
  starred_only_ = value;
}
inline void ListWorkflowsRequest::set_starred_only(bool value) {
  _internal_set_starred_only(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.starred_only)
}

// repeated string additional_fields = 10;
inline int ListWorkflowsRequest::_internal_additional_fields_size() const {
  return additional_fields_.size();
}
inline int ListWorkflowsRequest::additional_fields_size() const {
  return _internal_additional_fields_size();
}
inline void ListWorkflowsRequest::clear_additional_fields() {
  additional_fields_.Clear();
}
inline std::string* ListWorkflowsRequest::add_additional_fields() {
  std::string* _s = _internal_add_additional_fields();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListWorkflowsRequest.additional_fields)
  return _s;
}
inline const std::string& ListWorkflowsRequest::_internal_additional_fields(int index) const {
  return additional_fields_.Get(index);
}
inline const std::string& ListWorkflowsRequest::additional_fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowsRequest.additional_fields)
  return _internal_additional_fields(index);
}
inline std::string* ListWorkflowsRequest::mutable_additional_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListWorkflowsRequest.additional_fields)
  return additional_fields_.Mutable(index);
}
inline void ListWorkflowsRequest::set_additional_fields(int index, const std::string& value) {
  additional_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.additional_fields)
}
inline void ListWorkflowsRequest::set_additional_fields(int index, std::string&& value) {
  additional_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowsRequest.additional_fields)
}
inline void ListWorkflowsRequest::set_additional_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListWorkflowsRequest.additional_fields)
}
inline void ListWorkflowsRequest::set_additional_fields(int index, const char* value, size_t size) {
  additional_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListWorkflowsRequest.additional_fields)
}
inline std::string* ListWorkflowsRequest::_internal_add_additional_fields() {
  return additional_fields_.Add();
}
inline void ListWorkflowsRequest::add_additional_fields(const std::string& value) {
  additional_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListWorkflowsRequest.additional_fields)
}
inline void ListWorkflowsRequest::add_additional_fields(std::string&& value) {
  additional_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListWorkflowsRequest.additional_fields)
}
inline void ListWorkflowsRequest::add_additional_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListWorkflowsRequest.additional_fields)
}
inline void ListWorkflowsRequest::add_additional_fields(const char* value, size_t size) {
  additional_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListWorkflowsRequest.additional_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListWorkflowsRequest::additional_fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListWorkflowsRequest.additional_fields)
  return additional_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListWorkflowsRequest::mutable_additional_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListWorkflowsRequest.additional_fields)
  return &additional_fields_;
}

inline bool ListWorkflowsRequest::has_sort_by() const {
  return sort_by_case() != SORT_BY_NOT_SET;
}
inline void ListWorkflowsRequest::clear_has_sort_by() {
  _oneof_case_[0] = SORT_BY_NOT_SET;
}
inline ListWorkflowsRequest::SortByCase ListWorkflowsRequest::sort_by_case() const {
  return ListWorkflowsRequest::SortByCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PostWorkflowsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostWorkflowsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostWorkflowsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostWorkflowsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostWorkflowsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowsRequest.user_app_id)
  return _msg;
}
inline void PostWorkflowsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowsRequest.user_app_id)
}

// repeated .clarifai.api.Workflow workflows = 2;
inline int PostWorkflowsRequest::_internal_workflows_size() const {
  return workflows_.size();
}
inline int PostWorkflowsRequest::workflows_size() const {
  return _internal_workflows_size();
}
inline ::clarifai::api::Workflow* PostWorkflowsRequest::mutable_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowsRequest.workflows)
  return workflows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >*
PostWorkflowsRequest::mutable_workflows() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowsRequest.workflows)
  return &workflows_;
}
inline const ::clarifai::api::Workflow& PostWorkflowsRequest::_internal_workflows(int index) const {
  return workflows_.Get(index);
}
inline const ::clarifai::api::Workflow& PostWorkflowsRequest::workflows(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowsRequest.workflows)
  return _internal_workflows(index);
}
inline ::clarifai::api::Workflow* PostWorkflowsRequest::_internal_add_workflows() {
  return workflows_.Add();
}
inline ::clarifai::api::Workflow* PostWorkflowsRequest::add_workflows() {
  ::clarifai::api::Workflow* _add = _internal_add_workflows();
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowsRequest.workflows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >&
PostWorkflowsRequest::workflows() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowsRequest.workflows)
  return workflows_;
}

// -------------------------------------------------------------------

// PatchWorkflowsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchWorkflowsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchWorkflowsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchWorkflowsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchWorkflowsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchWorkflowsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchWorkflowsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchWorkflowsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchWorkflowsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchWorkflowsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchWorkflowsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchWorkflowsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchWorkflowsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchWorkflowsRequest.user_app_id)
  return _msg;
}
inline void PatchWorkflowsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchWorkflowsRequest.user_app_id)
}

// repeated .clarifai.api.Workflow workflows = 2;
inline int PatchWorkflowsRequest::_internal_workflows_size() const {
  return workflows_.size();
}
inline int PatchWorkflowsRequest::workflows_size() const {
  return _internal_workflows_size();
}
inline ::clarifai::api::Workflow* PatchWorkflowsRequest::mutable_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchWorkflowsRequest.workflows)
  return workflows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >*
PatchWorkflowsRequest::mutable_workflows() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchWorkflowsRequest.workflows)
  return &workflows_;
}
inline const ::clarifai::api::Workflow& PatchWorkflowsRequest::_internal_workflows(int index) const {
  return workflows_.Get(index);
}
inline const ::clarifai::api::Workflow& PatchWorkflowsRequest::workflows(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchWorkflowsRequest.workflows)
  return _internal_workflows(index);
}
inline ::clarifai::api::Workflow* PatchWorkflowsRequest::_internal_add_workflows() {
  return workflows_.Add();
}
inline ::clarifai::api::Workflow* PatchWorkflowsRequest::add_workflows() {
  ::clarifai::api::Workflow* _add = _internal_add_workflows();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchWorkflowsRequest.workflows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >&
PatchWorkflowsRequest::workflows() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchWorkflowsRequest.workflows)
  return workflows_;
}

// string action = 3;
inline void PatchWorkflowsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchWorkflowsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchWorkflowsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchWorkflowsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchWorkflowsRequest.action)
}
inline std::string* PatchWorkflowsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchWorkflowsRequest.action)
  return _s;
}
inline const std::string& PatchWorkflowsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchWorkflowsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchWorkflowsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchWorkflowsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchWorkflowsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchWorkflowsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchWorkflowsRequest.action)
}

// -------------------------------------------------------------------

// DeleteWorkflowRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteWorkflowRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteWorkflowRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteWorkflowRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteWorkflowRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteWorkflowRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteWorkflowRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteWorkflowRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteWorkflowRequest.user_app_id)
  return _msg;
}
inline void DeleteWorkflowRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteWorkflowRequest.user_app_id)
}

// string workflow_id = 2;
inline void DeleteWorkflowRequest::clear_workflow_id() {
  workflow_id_.ClearToEmpty();
}
inline const std::string& DeleteWorkflowRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowRequest.workflow_id)
  return _internal_workflow_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteWorkflowRequest::set_workflow_id(ArgT0&& arg0, ArgT... args) {
 
 workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteWorkflowRequest.workflow_id)
}
inline std::string* DeleteWorkflowRequest::mutable_workflow_id() {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteWorkflowRequest.workflow_id)
  return _s;
}
inline const std::string& DeleteWorkflowRequest::_internal_workflow_id() const {
  return workflow_id_.Get();
}
inline void DeleteWorkflowRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteWorkflowRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteWorkflowRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteWorkflowRequest.workflow_id)
  return workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteWorkflowRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteWorkflowRequest.workflow_id)
}

// -------------------------------------------------------------------

// DeleteWorkflowsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteWorkflowsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteWorkflowsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteWorkflowsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteWorkflowsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteWorkflowsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteWorkflowsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteWorkflowsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteWorkflowsRequest.user_app_id)
  return _msg;
}
inline void DeleteWorkflowsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteWorkflowsRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteWorkflowsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteWorkflowsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteWorkflowsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteWorkflowsRequest::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteWorkflowsRequest.ids)
  return _s;
}
inline const std::string& DeleteWorkflowsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteWorkflowsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteWorkflowsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteWorkflowsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteWorkflowsRequest::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline void DeleteWorkflowsRequest::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline void DeleteWorkflowsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline void DeleteWorkflowsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline std::string* DeleteWorkflowsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteWorkflowsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline void DeleteWorkflowsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline void DeleteWorkflowsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline void DeleteWorkflowsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteWorkflowsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteWorkflowsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteWorkflowsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteWorkflowsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteWorkflowsRequest.ids)
  return &ids_;
}

// bool delete_all = 3;
inline void DeleteWorkflowsRequest::clear_delete_all() {
  delete_all_ = false;
}
inline bool DeleteWorkflowsRequest::_internal_delete_all() const {
  return delete_all_;
}
inline bool DeleteWorkflowsRequest::delete_all() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowsRequest.delete_all)
  return _internal_delete_all();
}
inline void DeleteWorkflowsRequest::_internal_set_delete_all(bool value) {
  
  delete_all_ = value;
}
inline void DeleteWorkflowsRequest::set_delete_all(bool value) {
  _internal_set_delete_all(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteWorkflowsRequest.delete_all)
}

// -------------------------------------------------------------------

// SingleWorkflowResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleWorkflowResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleWorkflowResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleWorkflowResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleWorkflowResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleWorkflowResponse.status)
  return _internal_status();
}
inline void SingleWorkflowResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleWorkflowResponse.status)
}
inline ::clarifai::api::status::Status* SingleWorkflowResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleWorkflowResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleWorkflowResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleWorkflowResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleWorkflowResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleWorkflowResponse.status)
  return _msg;
}
inline void SingleWorkflowResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleWorkflowResponse.status)
}

// .clarifai.api.Workflow workflow = 2;
inline bool SingleWorkflowResponse::_internal_has_workflow() const {
  return this != internal_default_instance() && workflow_ != nullptr;
}
inline bool SingleWorkflowResponse::has_workflow() const {
  return _internal_has_workflow();
}
inline const ::clarifai::api::Workflow& SingleWorkflowResponse::_internal_workflow() const {
  const ::clarifai::api::Workflow* p = workflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Workflow&>(
      ::clarifai::api::_Workflow_default_instance_);
}
inline const ::clarifai::api::Workflow& SingleWorkflowResponse::workflow() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleWorkflowResponse.workflow)
  return _internal_workflow();
}
inline void SingleWorkflowResponse::unsafe_arena_set_allocated_workflow(
    ::clarifai::api::Workflow* workflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_);
  }
  workflow_ = workflow;
  if (workflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleWorkflowResponse.workflow)
}
inline ::clarifai::api::Workflow* SingleWorkflowResponse::release_workflow() {
  
  ::clarifai::api::Workflow* temp = workflow_;
  workflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Workflow* SingleWorkflowResponse::unsafe_arena_release_workflow() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleWorkflowResponse.workflow)
  
  ::clarifai::api::Workflow* temp = workflow_;
  workflow_ = nullptr;
  return temp;
}
inline ::clarifai::api::Workflow* SingleWorkflowResponse::_internal_mutable_workflow() {
  
  if (workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Workflow>(GetArenaForAllocation());
    workflow_ = p;
  }
  return workflow_;
}
inline ::clarifai::api::Workflow* SingleWorkflowResponse::mutable_workflow() {
  ::clarifai::api::Workflow* _msg = _internal_mutable_workflow();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleWorkflowResponse.workflow)
  return _msg;
}
inline void SingleWorkflowResponse::set_allocated_workflow(::clarifai::api::Workflow* workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_);
  }
  if (workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow));
    if (message_arena != submessage_arena) {
      workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow, submessage_arena);
    }
    
  } else {
    
  }
  workflow_ = workflow;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleWorkflowResponse.workflow)
}

// -------------------------------------------------------------------

// MultiWorkflowResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiWorkflowResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiWorkflowResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiWorkflowResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiWorkflowResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiWorkflowResponse.status)
  return _internal_status();
}
inline void MultiWorkflowResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiWorkflowResponse.status)
}
inline ::clarifai::api::status::Status* MultiWorkflowResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiWorkflowResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiWorkflowResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiWorkflowResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiWorkflowResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiWorkflowResponse.status)
  return _msg;
}
inline void MultiWorkflowResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiWorkflowResponse.status)
}

// repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiWorkflowResponse::_internal_workflows_size() const {
  return workflows_.size();
}
inline int MultiWorkflowResponse::workflows_size() const {
  return _internal_workflows_size();
}
inline ::clarifai::api::Workflow* MultiWorkflowResponse::mutable_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiWorkflowResponse.workflows)
  return workflows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >*
MultiWorkflowResponse::mutable_workflows() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiWorkflowResponse.workflows)
  return &workflows_;
}
inline const ::clarifai::api::Workflow& MultiWorkflowResponse::_internal_workflows(int index) const {
  return workflows_.Get(index);
}
inline const ::clarifai::api::Workflow& MultiWorkflowResponse::workflows(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiWorkflowResponse.workflows)
  return _internal_workflows(index);
}
inline ::clarifai::api::Workflow* MultiWorkflowResponse::_internal_add_workflows() {
  return workflows_.Add();
}
inline ::clarifai::api::Workflow* MultiWorkflowResponse::add_workflows() {
  ::clarifai::api::Workflow* _add = _internal_add_workflows();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiWorkflowResponse.workflows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Workflow >&
MultiWorkflowResponse::workflows() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiWorkflowResponse.workflows)
  return workflows_;
}

// -------------------------------------------------------------------

// PostWorkflowResultsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostWorkflowResultsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostWorkflowResultsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowResultsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowResultsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostWorkflowResultsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostWorkflowResultsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsRequest.user_app_id)
  return _msg;
}
inline void PostWorkflowResultsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsRequest.user_app_id)
}

// string workflow_id = 2;
inline void PostWorkflowResultsRequest::clear_workflow_id() {
  workflow_id_.ClearToEmpty();
}
inline const std::string& PostWorkflowResultsRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsRequest.workflow_id)
  return _internal_workflow_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostWorkflowResultsRequest::set_workflow_id(ArgT0&& arg0, ArgT... args) {
 
 workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowResultsRequest.workflow_id)
}
inline std::string* PostWorkflowResultsRequest::mutable_workflow_id() {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsRequest.workflow_id)
  return _s;
}
inline const std::string& PostWorkflowResultsRequest::_internal_workflow_id() const {
  return workflow_id_.Get();
}
inline void PostWorkflowResultsRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostWorkflowResultsRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostWorkflowResultsRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsRequest.workflow_id)
  return workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostWorkflowResultsRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsRequest.workflow_id)
}

// string version_id = 7;
inline void PostWorkflowResultsRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& PostWorkflowResultsRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostWorkflowResultsRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowResultsRequest.version_id)
}
inline std::string* PostWorkflowResultsRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsRequest.version_id)
  return _s;
}
inline const std::string& PostWorkflowResultsRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void PostWorkflowResultsRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostWorkflowResultsRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostWorkflowResultsRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostWorkflowResultsRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsRequest.version_id)
}

// repeated .clarifai.api.Input inputs = 3;
inline int PostWorkflowResultsRequest::_internal_inputs_size() const {
  return inputs_.size();
}
inline int PostWorkflowResultsRequest::inputs_size() const {
  return _internal_inputs_size();
}
inline ::clarifai::api::Input* PostWorkflowResultsRequest::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsRequest.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
PostWorkflowResultsRequest::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowResultsRequest.inputs)
  return &inputs_;
}
inline const ::clarifai::api::Input& PostWorkflowResultsRequest::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::clarifai::api::Input& PostWorkflowResultsRequest::inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsRequest.inputs)
  return _internal_inputs(index);
}
inline ::clarifai::api::Input* PostWorkflowResultsRequest::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::clarifai::api::Input* PostWorkflowResultsRequest::add_inputs() {
  ::clarifai::api::Input* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowResultsRequest.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
PostWorkflowResultsRequest::inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowResultsRequest.inputs)
  return inputs_;
}

// .clarifai.api.OutputConfig output_config = 4;
inline bool PostWorkflowResultsRequest::_internal_has_output_config() const {
  return this != internal_default_instance() && output_config_ != nullptr;
}
inline bool PostWorkflowResultsRequest::has_output_config() const {
  return _internal_has_output_config();
}
inline const ::clarifai::api::OutputConfig& PostWorkflowResultsRequest::_internal_output_config() const {
  const ::clarifai::api::OutputConfig* p = output_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::OutputConfig&>(
      ::clarifai::api::_OutputConfig_default_instance_);
}
inline const ::clarifai::api::OutputConfig& PostWorkflowResultsRequest::output_config() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsRequest.output_config)
  return _internal_output_config();
}
inline void PostWorkflowResultsRequest::unsafe_arena_set_allocated_output_config(
    ::clarifai::api::OutputConfig* output_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_config_);
  }
  output_config_ = output_config;
  if (output_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostWorkflowResultsRequest.output_config)
}
inline ::clarifai::api::OutputConfig* PostWorkflowResultsRequest::release_output_config() {
  
  ::clarifai::api::OutputConfig* temp = output_config_;
  output_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::OutputConfig* PostWorkflowResultsRequest::unsafe_arena_release_output_config() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsRequest.output_config)
  
  ::clarifai::api::OutputConfig* temp = output_config_;
  output_config_ = nullptr;
  return temp;
}
inline ::clarifai::api::OutputConfig* PostWorkflowResultsRequest::_internal_mutable_output_config() {
  
  if (output_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::OutputConfig>(GetArenaForAllocation());
    output_config_ = p;
  }
  return output_config_;
}
inline ::clarifai::api::OutputConfig* PostWorkflowResultsRequest::mutable_output_config() {
  ::clarifai::api::OutputConfig* _msg = _internal_mutable_output_config();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsRequest.output_config)
  return _msg;
}
inline void PostWorkflowResultsRequest::set_allocated_output_config(::clarifai::api::OutputConfig* output_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_config_);
  }
  if (output_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_config));
    if (message_arena != submessage_arena) {
      output_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_config, submessage_arena);
    }
    
  } else {
    
  }
  output_config_ = output_config;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsRequest.output_config)
}

// bool favor_clarifai_workflows = 5;
inline void PostWorkflowResultsRequest::clear_favor_clarifai_workflows() {
  favor_clarifai_workflows_ = false;
}
inline bool PostWorkflowResultsRequest::_internal_favor_clarifai_workflows() const {
  return favor_clarifai_workflows_;
}
inline bool PostWorkflowResultsRequest::favor_clarifai_workflows() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsRequest.favor_clarifai_workflows)
  return _internal_favor_clarifai_workflows();
}
inline void PostWorkflowResultsRequest::_internal_set_favor_clarifai_workflows(bool value) {
  
  favor_clarifai_workflows_ = value;
}
inline void PostWorkflowResultsRequest::set_favor_clarifai_workflows(bool value) {
  _internal_set_favor_clarifai_workflows(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowResultsRequest.favor_clarifai_workflows)
}

// .clarifai.api.WorkflowState workflow_state = 6;
inline bool PostWorkflowResultsRequest::_internal_has_workflow_state() const {
  return this != internal_default_instance() && workflow_state_ != nullptr;
}
inline bool PostWorkflowResultsRequest::has_workflow_state() const {
  return _internal_has_workflow_state();
}
inline const ::clarifai::api::WorkflowState& PostWorkflowResultsRequest::_internal_workflow_state() const {
  const ::clarifai::api::WorkflowState* p = workflow_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::WorkflowState&>(
      ::clarifai::api::_WorkflowState_default_instance_);
}
inline const ::clarifai::api::WorkflowState& PostWorkflowResultsRequest::workflow_state() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsRequest.workflow_state)
  return _internal_workflow_state();
}
inline void PostWorkflowResultsRequest::unsafe_arena_set_allocated_workflow_state(
    ::clarifai::api::WorkflowState* workflow_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_state_);
  }
  workflow_state_ = workflow_state;
  if (workflow_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostWorkflowResultsRequest.workflow_state)
}
inline ::clarifai::api::WorkflowState* PostWorkflowResultsRequest::release_workflow_state() {
  
  ::clarifai::api::WorkflowState* temp = workflow_state_;
  workflow_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::WorkflowState* PostWorkflowResultsRequest::unsafe_arena_release_workflow_state() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsRequest.workflow_state)
  
  ::clarifai::api::WorkflowState* temp = workflow_state_;
  workflow_state_ = nullptr;
  return temp;
}
inline ::clarifai::api::WorkflowState* PostWorkflowResultsRequest::_internal_mutable_workflow_state() {
  
  if (workflow_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::WorkflowState>(GetArenaForAllocation());
    workflow_state_ = p;
  }
  return workflow_state_;
}
inline ::clarifai::api::WorkflowState* PostWorkflowResultsRequest::mutable_workflow_state() {
  ::clarifai::api::WorkflowState* _msg = _internal_mutable_workflow_state();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsRequest.workflow_state)
  return _msg;
}
inline void PostWorkflowResultsRequest::set_allocated_workflow_state(::clarifai::api::WorkflowState* workflow_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_state_);
  }
  if (workflow_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_state));
    if (message_arena != submessage_arena) {
      workflow_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow_state, submessage_arena);
    }
    
  } else {
    
  }
  workflow_state_ = workflow_state;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsRequest.workflow_state)
}

// -------------------------------------------------------------------

// PostWorkflowResultsResponse

// .clarifai.api.status.Status status = 1;
inline bool PostWorkflowResultsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PostWorkflowResultsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& PostWorkflowResultsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& PostWorkflowResultsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsResponse.status)
  return _internal_status();
}
inline void PostWorkflowResultsResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostWorkflowResultsResponse.status)
}
inline ::clarifai::api::status::Status* PostWorkflowResultsResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* PostWorkflowResultsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* PostWorkflowResultsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* PostWorkflowResultsResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsResponse.status)
  return _msg;
}
inline void PostWorkflowResultsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsResponse.status)
}

// .clarifai.api.Workflow workflow = 2;
inline bool PostWorkflowResultsResponse::_internal_has_workflow() const {
  return this != internal_default_instance() && workflow_ != nullptr;
}
inline bool PostWorkflowResultsResponse::has_workflow() const {
  return _internal_has_workflow();
}
inline const ::clarifai::api::Workflow& PostWorkflowResultsResponse::_internal_workflow() const {
  const ::clarifai::api::Workflow* p = workflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Workflow&>(
      ::clarifai::api::_Workflow_default_instance_);
}
inline const ::clarifai::api::Workflow& PostWorkflowResultsResponse::workflow() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsResponse.workflow)
  return _internal_workflow();
}
inline void PostWorkflowResultsResponse::unsafe_arena_set_allocated_workflow(
    ::clarifai::api::Workflow* workflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_);
  }
  workflow_ = workflow;
  if (workflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostWorkflowResultsResponse.workflow)
}
inline ::clarifai::api::Workflow* PostWorkflowResultsResponse::release_workflow() {
  
  ::clarifai::api::Workflow* temp = workflow_;
  workflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Workflow* PostWorkflowResultsResponse::unsafe_arena_release_workflow() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsResponse.workflow)
  
  ::clarifai::api::Workflow* temp = workflow_;
  workflow_ = nullptr;
  return temp;
}
inline ::clarifai::api::Workflow* PostWorkflowResultsResponse::_internal_mutable_workflow() {
  
  if (workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Workflow>(GetArenaForAllocation());
    workflow_ = p;
  }
  return workflow_;
}
inline ::clarifai::api::Workflow* PostWorkflowResultsResponse::mutable_workflow() {
  ::clarifai::api::Workflow* _msg = _internal_mutable_workflow();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsResponse.workflow)
  return _msg;
}
inline void PostWorkflowResultsResponse::set_allocated_workflow(::clarifai::api::Workflow* workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_);
  }
  if (workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow));
    if (message_arena != submessage_arena) {
      workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow, submessage_arena);
    }
    
  } else {
    
  }
  workflow_ = workflow;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsResponse.workflow)
}

// repeated .clarifai.api.WorkflowResult results = 3;
inline int PostWorkflowResultsResponse::_internal_results_size() const {
  return results_.size();
}
inline int PostWorkflowResultsResponse::results_size() const {
  return _internal_results_size();
}
inline ::clarifai::api::WorkflowResult* PostWorkflowResultsResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResult >*
PostWorkflowResultsResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowResultsResponse.results)
  return &results_;
}
inline const ::clarifai::api::WorkflowResult& PostWorkflowResultsResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::clarifai::api::WorkflowResult& PostWorkflowResultsResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsResponse.results)
  return _internal_results(index);
}
inline ::clarifai::api::WorkflowResult* PostWorkflowResultsResponse::_internal_add_results() {
  return results_.Add();
}
inline ::clarifai::api::WorkflowResult* PostWorkflowResultsResponse::add_results() {
  ::clarifai::api::WorkflowResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowResultsResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResult >&
PostWorkflowResultsResponse::results() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowResultsResponse.results)
  return results_;
}

// .clarifai.api.WorkflowState workflow_state = 4;
inline bool PostWorkflowResultsResponse::_internal_has_workflow_state() const {
  return this != internal_default_instance() && workflow_state_ != nullptr;
}
inline bool PostWorkflowResultsResponse::has_workflow_state() const {
  return _internal_has_workflow_state();
}
inline const ::clarifai::api::WorkflowState& PostWorkflowResultsResponse::_internal_workflow_state() const {
  const ::clarifai::api::WorkflowState* p = workflow_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::WorkflowState&>(
      ::clarifai::api::_WorkflowState_default_instance_);
}
inline const ::clarifai::api::WorkflowState& PostWorkflowResultsResponse::workflow_state() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsResponse.workflow_state)
  return _internal_workflow_state();
}
inline void PostWorkflowResultsResponse::unsafe_arena_set_allocated_workflow_state(
    ::clarifai::api::WorkflowState* workflow_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_state_);
  }
  workflow_state_ = workflow_state;
  if (workflow_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostWorkflowResultsResponse.workflow_state)
}
inline ::clarifai::api::WorkflowState* PostWorkflowResultsResponse::release_workflow_state() {
  
  ::clarifai::api::WorkflowState* temp = workflow_state_;
  workflow_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::WorkflowState* PostWorkflowResultsResponse::unsafe_arena_release_workflow_state() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsResponse.workflow_state)
  
  ::clarifai::api::WorkflowState* temp = workflow_state_;
  workflow_state_ = nullptr;
  return temp;
}
inline ::clarifai::api::WorkflowState* PostWorkflowResultsResponse::_internal_mutable_workflow_state() {
  
  if (workflow_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::WorkflowState>(GetArenaForAllocation());
    workflow_state_ = p;
  }
  return workflow_state_;
}
inline ::clarifai::api::WorkflowState* PostWorkflowResultsResponse::mutable_workflow_state() {
  ::clarifai::api::WorkflowState* _msg = _internal_mutable_workflow_state();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsResponse.workflow_state)
  return _msg;
}
inline void PostWorkflowResultsResponse::set_allocated_workflow_state(::clarifai::api::WorkflowState* workflow_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_state_);
  }
  if (workflow_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_state));
    if (message_arena != submessage_arena) {
      workflow_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow_state, submessage_arena);
    }
    
  } else {
    
  }
  workflow_state_ = workflow_state;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsResponse.workflow_state)
}

// -------------------------------------------------------------------

// PostWorkflowResultsSimilarityRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostWorkflowResultsSimilarityRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostWorkflowResultsSimilarityRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowResultsSimilarityRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostWorkflowResultsSimilarityRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostWorkflowResultsSimilarityRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostWorkflowResultsSimilarityRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsSimilarityRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsSimilarityRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsSimilarityRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsSimilarityRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostWorkflowResultsSimilarityRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityRequest.user_app_id)
  return _msg;
}
inline void PostWorkflowResultsSimilarityRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsSimilarityRequest.user_app_id)
}

// string workflow_id = 2;
inline void PostWorkflowResultsSimilarityRequest::clear_workflow_id() {
  workflow_id_.ClearToEmpty();
}
inline const std::string& PostWorkflowResultsSimilarityRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
  return _internal_workflow_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostWorkflowResultsSimilarityRequest::set_workflow_id(ArgT0&& arg0, ArgT... args) {
 
 workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
}
inline std::string* PostWorkflowResultsSimilarityRequest::mutable_workflow_id() {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
  return _s;
}
inline const std::string& PostWorkflowResultsSimilarityRequest::_internal_workflow_id() const {
  return workflow_id_.Get();
}
inline void PostWorkflowResultsSimilarityRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostWorkflowResultsSimilarityRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostWorkflowResultsSimilarityRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
  return workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostWorkflowResultsSimilarityRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id)
}

// string version_id = 7;
inline void PostWorkflowResultsSimilarityRequest::clear_version_id() {
  version_id_.ClearToEmpty();
}
inline const std::string& PostWorkflowResultsSimilarityRequest::version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.version_id)
  return _internal_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostWorkflowResultsSimilarityRequest::set_version_id(ArgT0&& arg0, ArgT... args) {
 
 version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowResultsSimilarityRequest.version_id)
}
inline std::string* PostWorkflowResultsSimilarityRequest::mutable_version_id() {
  std::string* _s = _internal_mutable_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityRequest.version_id)
  return _s;
}
inline const std::string& PostWorkflowResultsSimilarityRequest::_internal_version_id() const {
  return version_id_.Get();
}
inline void PostWorkflowResultsSimilarityRequest::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostWorkflowResultsSimilarityRequest::_internal_mutable_version_id() {
  
  return version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostWorkflowResultsSimilarityRequest::release_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsSimilarityRequest.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostWorkflowResultsSimilarityRequest::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsSimilarityRequest.version_id)
}

// string model_version_id = 3;
inline void PostWorkflowResultsSimilarityRequest::clear_model_version_id() {
  model_version_id_.ClearToEmpty();
}
inline const std::string& PostWorkflowResultsSimilarityRequest::model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
  return _internal_model_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostWorkflowResultsSimilarityRequest::set_model_version_id(ArgT0&& arg0, ArgT... args) {
 
 model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
}
inline std::string* PostWorkflowResultsSimilarityRequest::mutable_model_version_id() {
  std::string* _s = _internal_mutable_model_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
  return _s;
}
inline const std::string& PostWorkflowResultsSimilarityRequest::_internal_model_version_id() const {
  return model_version_id_.Get();
}
inline void PostWorkflowResultsSimilarityRequest::_internal_set_model_version_id(const std::string& value) {
  
  model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostWorkflowResultsSimilarityRequest::_internal_mutable_model_version_id() {
  
  return model_version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostWorkflowResultsSimilarityRequest::release_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
  return model_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostWorkflowResultsSimilarityRequest::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id)
}

// repeated .clarifai.api.Input probe_inputs = 4;
inline int PostWorkflowResultsSimilarityRequest::_internal_probe_inputs_size() const {
  return probe_inputs_.size();
}
inline int PostWorkflowResultsSimilarityRequest::probe_inputs_size() const {
  return _internal_probe_inputs_size();
}
inline ::clarifai::api::Input* PostWorkflowResultsSimilarityRequest::mutable_probe_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityRequest.probe_inputs)
  return probe_inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
PostWorkflowResultsSimilarityRequest::mutable_probe_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowResultsSimilarityRequest.probe_inputs)
  return &probe_inputs_;
}
inline const ::clarifai::api::Input& PostWorkflowResultsSimilarityRequest::_internal_probe_inputs(int index) const {
  return probe_inputs_.Get(index);
}
inline const ::clarifai::api::Input& PostWorkflowResultsSimilarityRequest::probe_inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.probe_inputs)
  return _internal_probe_inputs(index);
}
inline ::clarifai::api::Input* PostWorkflowResultsSimilarityRequest::_internal_add_probe_inputs() {
  return probe_inputs_.Add();
}
inline ::clarifai::api::Input* PostWorkflowResultsSimilarityRequest::add_probe_inputs() {
  ::clarifai::api::Input* _add = _internal_add_probe_inputs();
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowResultsSimilarityRequest.probe_inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
PostWorkflowResultsSimilarityRequest::probe_inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowResultsSimilarityRequest.probe_inputs)
  return probe_inputs_;
}

// repeated .clarifai.api.Input pool_inputs = 5;
inline int PostWorkflowResultsSimilarityRequest::_internal_pool_inputs_size() const {
  return pool_inputs_.size();
}
inline int PostWorkflowResultsSimilarityRequest::pool_inputs_size() const {
  return _internal_pool_inputs_size();
}
inline ::clarifai::api::Input* PostWorkflowResultsSimilarityRequest::mutable_pool_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityRequest.pool_inputs)
  return pool_inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >*
PostWorkflowResultsSimilarityRequest::mutable_pool_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowResultsSimilarityRequest.pool_inputs)
  return &pool_inputs_;
}
inline const ::clarifai::api::Input& PostWorkflowResultsSimilarityRequest::_internal_pool_inputs(int index) const {
  return pool_inputs_.Get(index);
}
inline const ::clarifai::api::Input& PostWorkflowResultsSimilarityRequest::pool_inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.pool_inputs)
  return _internal_pool_inputs(index);
}
inline ::clarifai::api::Input* PostWorkflowResultsSimilarityRequest::_internal_add_pool_inputs() {
  return pool_inputs_.Add();
}
inline ::clarifai::api::Input* PostWorkflowResultsSimilarityRequest::add_pool_inputs() {
  ::clarifai::api::Input* _add = _internal_add_pool_inputs();
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowResultsSimilarityRequest.pool_inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Input >&
PostWorkflowResultsSimilarityRequest::pool_inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowResultsSimilarityRequest.pool_inputs)
  return pool_inputs_;
}

// bool favor_clarifai_workflows = 6;
inline void PostWorkflowResultsSimilarityRequest::clear_favor_clarifai_workflows() {
  favor_clarifai_workflows_ = false;
}
inline bool PostWorkflowResultsSimilarityRequest::_internal_favor_clarifai_workflows() const {
  return favor_clarifai_workflows_;
}
inline bool PostWorkflowResultsSimilarityRequest::favor_clarifai_workflows() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityRequest.favor_clarifai_workflows)
  return _internal_favor_clarifai_workflows();
}
inline void PostWorkflowResultsSimilarityRequest::_internal_set_favor_clarifai_workflows(bool value) {
  
  favor_clarifai_workflows_ = value;
}
inline void PostWorkflowResultsSimilarityRequest::set_favor_clarifai_workflows(bool value) {
  _internal_set_favor_clarifai_workflows(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PostWorkflowResultsSimilarityRequest.favor_clarifai_workflows)
}

// -------------------------------------------------------------------

// PostWorkflowResultsSimilarityResponse

// .clarifai.api.status.Status status = 1;
inline bool PostWorkflowResultsSimilarityResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PostWorkflowResultsSimilarityResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& PostWorkflowResultsSimilarityResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& PostWorkflowResultsSimilarityResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityResponse.status)
  return _internal_status();
}
inline void PostWorkflowResultsSimilarityResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostWorkflowResultsSimilarityResponse.status)
}
inline ::clarifai::api::status::Status* PostWorkflowResultsSimilarityResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* PostWorkflowResultsSimilarityResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostWorkflowResultsSimilarityResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* PostWorkflowResultsSimilarityResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* PostWorkflowResultsSimilarityResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityResponse.status)
  return _msg;
}
inline void PostWorkflowResultsSimilarityResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostWorkflowResultsSimilarityResponse.status)
}

// repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
inline int PostWorkflowResultsSimilarityResponse::_internal_results_size() const {
  return results_.size();
}
inline int PostWorkflowResultsSimilarityResponse::results_size() const {
  return _internal_results_size();
}
inline ::clarifai::api::WorkflowResultsSimilarity* PostWorkflowResultsSimilarityResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostWorkflowResultsSimilarityResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResultsSimilarity >*
PostWorkflowResultsSimilarityResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostWorkflowResultsSimilarityResponse.results)
  return &results_;
}
inline const ::clarifai::api::WorkflowResultsSimilarity& PostWorkflowResultsSimilarityResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::clarifai::api::WorkflowResultsSimilarity& PostWorkflowResultsSimilarityResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostWorkflowResultsSimilarityResponse.results)
  return _internal_results(index);
}
inline ::clarifai::api::WorkflowResultsSimilarity* PostWorkflowResultsSimilarityResponse::_internal_add_results() {
  return results_.Add();
}
inline ::clarifai::api::WorkflowResultsSimilarity* PostWorkflowResultsSimilarityResponse::add_results() {
  ::clarifai::api::WorkflowResultsSimilarity* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:clarifai.api.PostWorkflowResultsSimilarityResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowResultsSimilarity >&
PostWorkflowResultsSimilarityResponse::results() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostWorkflowResultsSimilarityResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// ListWorkflowVersionsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListWorkflowVersionsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListWorkflowVersionsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListWorkflowVersionsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListWorkflowVersionsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowVersionsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListWorkflowVersionsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListWorkflowVersionsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListWorkflowVersionsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListWorkflowVersionsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListWorkflowVersionsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListWorkflowVersionsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListWorkflowVersionsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListWorkflowVersionsRequest.user_app_id)
  return _msg;
}
inline void ListWorkflowVersionsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListWorkflowVersionsRequest.user_app_id)
}

// string workflow_id = 2;
inline void ListWorkflowVersionsRequest::clear_workflow_id() {
  workflow_id_.ClearToEmpty();
}
inline const std::string& ListWorkflowVersionsRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowVersionsRequest.workflow_id)
  return _internal_workflow_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListWorkflowVersionsRequest::set_workflow_id(ArgT0&& arg0, ArgT... args) {
 
 workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowVersionsRequest.workflow_id)
}
inline std::string* ListWorkflowVersionsRequest::mutable_workflow_id() {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListWorkflowVersionsRequest.workflow_id)
  return _s;
}
inline const std::string& ListWorkflowVersionsRequest::_internal_workflow_id() const {
  return workflow_id_.Get();
}
inline void ListWorkflowVersionsRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListWorkflowVersionsRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListWorkflowVersionsRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListWorkflowVersionsRequest.workflow_id)
  return workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListWorkflowVersionsRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListWorkflowVersionsRequest.workflow_id)
}

// uint32 page = 3;
inline void ListWorkflowVersionsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListWorkflowVersionsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListWorkflowVersionsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowVersionsRequest.page)
  return _internal_page();
}
inline void ListWorkflowVersionsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListWorkflowVersionsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowVersionsRequest.page)
}

// uint32 per_page = 4;
inline void ListWorkflowVersionsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListWorkflowVersionsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListWorkflowVersionsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListWorkflowVersionsRequest.per_page)
  return _internal_per_page();
}
inline void ListWorkflowVersionsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListWorkflowVersionsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListWorkflowVersionsRequest.per_page)
}

// -------------------------------------------------------------------

// GetWorkflowVersionRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetWorkflowVersionRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetWorkflowVersionRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetWorkflowVersionRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetWorkflowVersionRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetWorkflowVersionRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetWorkflowVersionRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetWorkflowVersionRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetWorkflowVersionRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetWorkflowVersionRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetWorkflowVersionRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetWorkflowVersionRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetWorkflowVersionRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetWorkflowVersionRequest.user_app_id)
  return _msg;
}
inline void GetWorkflowVersionRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetWorkflowVersionRequest.user_app_id)
}

// string workflow_id = 2;
inline void GetWorkflowVersionRequest::clear_workflow_id() {
  workflow_id_.ClearToEmpty();
}
inline const std::string& GetWorkflowVersionRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetWorkflowVersionRequest.workflow_id)
  return _internal_workflow_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetWorkflowVersionRequest::set_workflow_id(ArgT0&& arg0, ArgT... args) {
 
 workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetWorkflowVersionRequest.workflow_id)
}
inline std::string* GetWorkflowVersionRequest::mutable_workflow_id() {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetWorkflowVersionRequest.workflow_id)
  return _s;
}
inline const std::string& GetWorkflowVersionRequest::_internal_workflow_id() const {
  return workflow_id_.Get();
}
inline void GetWorkflowVersionRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetWorkflowVersionRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetWorkflowVersionRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetWorkflowVersionRequest.workflow_id)
  return workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetWorkflowVersionRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetWorkflowVersionRequest.workflow_id)
}

// string workflow_version_id = 3;
inline void GetWorkflowVersionRequest::clear_workflow_version_id() {
  workflow_version_id_.ClearToEmpty();
}
inline const std::string& GetWorkflowVersionRequest::workflow_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetWorkflowVersionRequest.workflow_version_id)
  return _internal_workflow_version_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetWorkflowVersionRequest::set_workflow_version_id(ArgT0&& arg0, ArgT... args) {
 
 workflow_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetWorkflowVersionRequest.workflow_version_id)
}
inline std::string* GetWorkflowVersionRequest::mutable_workflow_version_id() {
  std::string* _s = _internal_mutable_workflow_version_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetWorkflowVersionRequest.workflow_version_id)
  return _s;
}
inline const std::string& GetWorkflowVersionRequest::_internal_workflow_version_id() const {
  return workflow_version_id_.Get();
}
inline void GetWorkflowVersionRequest::_internal_set_workflow_version_id(const std::string& value) {
  
  workflow_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetWorkflowVersionRequest::_internal_mutable_workflow_version_id() {
  
  return workflow_version_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetWorkflowVersionRequest::release_workflow_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetWorkflowVersionRequest.workflow_version_id)
  return workflow_version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetWorkflowVersionRequest::set_allocated_workflow_version_id(std::string* workflow_version_id) {
  if (workflow_version_id != nullptr) {
    
  } else {
    
  }
  workflow_version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_version_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_version_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetWorkflowVersionRequest.workflow_version_id)
}

// -------------------------------------------------------------------

// DeleteWorkflowVersionsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteWorkflowVersionsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteWorkflowVersionsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteWorkflowVersionsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteWorkflowVersionsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowVersionsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteWorkflowVersionsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteWorkflowVersionsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowVersionsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowVersionsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteWorkflowVersionsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowVersionsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteWorkflowVersionsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteWorkflowVersionsRequest.user_app_id)
  return _msg;
}
inline void DeleteWorkflowVersionsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteWorkflowVersionsRequest.user_app_id)
}

// string workflow_id = 2;
inline void DeleteWorkflowVersionsRequest::clear_workflow_id() {
  workflow_id_.ClearToEmpty();
}
inline const std::string& DeleteWorkflowVersionsRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowVersionsRequest.workflow_id)
  return _internal_workflow_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteWorkflowVersionsRequest::set_workflow_id(ArgT0&& arg0, ArgT... args) {
 
 workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteWorkflowVersionsRequest.workflow_id)
}
inline std::string* DeleteWorkflowVersionsRequest::mutable_workflow_id() {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteWorkflowVersionsRequest.workflow_id)
  return _s;
}
inline const std::string& DeleteWorkflowVersionsRequest::_internal_workflow_id() const {
  return workflow_id_.Get();
}
inline void DeleteWorkflowVersionsRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteWorkflowVersionsRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteWorkflowVersionsRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteWorkflowVersionsRequest.workflow_id)
  return workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteWorkflowVersionsRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteWorkflowVersionsRequest.workflow_id)
}

// repeated string workflow_version_ids = 3;
inline int DeleteWorkflowVersionsRequest::_internal_workflow_version_ids_size() const {
  return workflow_version_ids_.size();
}
inline int DeleteWorkflowVersionsRequest::workflow_version_ids_size() const {
  return _internal_workflow_version_ids_size();
}
inline void DeleteWorkflowVersionsRequest::clear_workflow_version_ids() {
  workflow_version_ids_.Clear();
}
inline std::string* DeleteWorkflowVersionsRequest::add_workflow_version_ids() {
  std::string* _s = _internal_add_workflow_version_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
  return _s;
}
inline const std::string& DeleteWorkflowVersionsRequest::_internal_workflow_version_ids(int index) const {
  return workflow_version_ids_.Get(index);
}
inline const std::string& DeleteWorkflowVersionsRequest::workflow_version_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
  return _internal_workflow_version_ids(index);
}
inline std::string* DeleteWorkflowVersionsRequest::mutable_workflow_version_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
  return workflow_version_ids_.Mutable(index);
}
inline void DeleteWorkflowVersionsRequest::set_workflow_version_ids(int index, const std::string& value) {
  workflow_version_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
}
inline void DeleteWorkflowVersionsRequest::set_workflow_version_ids(int index, std::string&& value) {
  workflow_version_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
}
inline void DeleteWorkflowVersionsRequest::set_workflow_version_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  workflow_version_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
}
inline void DeleteWorkflowVersionsRequest::set_workflow_version_ids(int index, const char* value, size_t size) {
  workflow_version_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
}
inline std::string* DeleteWorkflowVersionsRequest::_internal_add_workflow_version_ids() {
  return workflow_version_ids_.Add();
}
inline void DeleteWorkflowVersionsRequest::add_workflow_version_ids(const std::string& value) {
  workflow_version_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
}
inline void DeleteWorkflowVersionsRequest::add_workflow_version_ids(std::string&& value) {
  workflow_version_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
}
inline void DeleteWorkflowVersionsRequest::add_workflow_version_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  workflow_version_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
}
inline void DeleteWorkflowVersionsRequest::add_workflow_version_ids(const char* value, size_t size) {
  workflow_version_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteWorkflowVersionsRequest::workflow_version_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
  return workflow_version_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteWorkflowVersionsRequest::mutable_workflow_version_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids)
  return &workflow_version_ids_;
}

// -------------------------------------------------------------------

// PatchWorkflowVersionsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchWorkflowVersionsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchWorkflowVersionsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchWorkflowVersionsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchWorkflowVersionsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchWorkflowVersionsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchWorkflowVersionsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchWorkflowVersionsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchWorkflowVersionsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchWorkflowVersionsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchWorkflowVersionsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchWorkflowVersionsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchWorkflowVersionsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchWorkflowVersionsRequest.user_app_id)
  return _msg;
}
inline void PatchWorkflowVersionsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchWorkflowVersionsRequest.user_app_id)
}

// string workflow_id = 2;
inline void PatchWorkflowVersionsRequest::clear_workflow_id() {
  workflow_id_.ClearToEmpty();
}
inline const std::string& PatchWorkflowVersionsRequest::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchWorkflowVersionsRequest.workflow_id)
  return _internal_workflow_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchWorkflowVersionsRequest::set_workflow_id(ArgT0&& arg0, ArgT... args) {
 
 workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchWorkflowVersionsRequest.workflow_id)
}
inline std::string* PatchWorkflowVersionsRequest::mutable_workflow_id() {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchWorkflowVersionsRequest.workflow_id)
  return _s;
}
inline const std::string& PatchWorkflowVersionsRequest::_internal_workflow_id() const {
  return workflow_id_.Get();
}
inline void PatchWorkflowVersionsRequest::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchWorkflowVersionsRequest::_internal_mutable_workflow_id() {
  
  return workflow_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchWorkflowVersionsRequest::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchWorkflowVersionsRequest.workflow_id)
  return workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchWorkflowVersionsRequest::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchWorkflowVersionsRequest.workflow_id)
}

// repeated .clarifai.api.WorkflowVersion workflow_versions = 3;
inline int PatchWorkflowVersionsRequest::_internal_workflow_versions_size() const {
  return workflow_versions_.size();
}
inline int PatchWorkflowVersionsRequest::workflow_versions_size() const {
  return _internal_workflow_versions_size();
}
inline ::clarifai::api::WorkflowVersion* PatchWorkflowVersionsRequest::mutable_workflow_versions(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchWorkflowVersionsRequest.workflow_versions)
  return workflow_versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersion >*
PatchWorkflowVersionsRequest::mutable_workflow_versions() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchWorkflowVersionsRequest.workflow_versions)
  return &workflow_versions_;
}
inline const ::clarifai::api::WorkflowVersion& PatchWorkflowVersionsRequest::_internal_workflow_versions(int index) const {
  return workflow_versions_.Get(index);
}
inline const ::clarifai::api::WorkflowVersion& PatchWorkflowVersionsRequest::workflow_versions(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchWorkflowVersionsRequest.workflow_versions)
  return _internal_workflow_versions(index);
}
inline ::clarifai::api::WorkflowVersion* PatchWorkflowVersionsRequest::_internal_add_workflow_versions() {
  return workflow_versions_.Add();
}
inline ::clarifai::api::WorkflowVersion* PatchWorkflowVersionsRequest::add_workflow_versions() {
  ::clarifai::api::WorkflowVersion* _add = _internal_add_workflow_versions();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchWorkflowVersionsRequest.workflow_versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersion >&
PatchWorkflowVersionsRequest::workflow_versions() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchWorkflowVersionsRequest.workflow_versions)
  return workflow_versions_;
}

// string action = 4;
inline void PatchWorkflowVersionsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchWorkflowVersionsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchWorkflowVersionsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchWorkflowVersionsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchWorkflowVersionsRequest.action)
}
inline std::string* PatchWorkflowVersionsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchWorkflowVersionsRequest.action)
  return _s;
}
inline const std::string& PatchWorkflowVersionsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchWorkflowVersionsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchWorkflowVersionsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchWorkflowVersionsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchWorkflowVersionsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchWorkflowVersionsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchWorkflowVersionsRequest.action)
}

// -------------------------------------------------------------------

// MultiWorkflowVersionResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiWorkflowVersionResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiWorkflowVersionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiWorkflowVersionResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiWorkflowVersionResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiWorkflowVersionResponse.status)
  return _internal_status();
}
inline void MultiWorkflowVersionResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiWorkflowVersionResponse.status)
}
inline ::clarifai::api::status::Status* MultiWorkflowVersionResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiWorkflowVersionResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiWorkflowVersionResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiWorkflowVersionResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiWorkflowVersionResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiWorkflowVersionResponse.status)
  return _msg;
}
inline void MultiWorkflowVersionResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiWorkflowVersionResponse.status)
}

// repeated .clarifai.api.WorkflowVersion workflow_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiWorkflowVersionResponse::_internal_workflow_versions_size() const {
  return workflow_versions_.size();
}
inline int MultiWorkflowVersionResponse::workflow_versions_size() const {
  return _internal_workflow_versions_size();
}
inline ::clarifai::api::WorkflowVersion* MultiWorkflowVersionResponse::mutable_workflow_versions(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiWorkflowVersionResponse.workflow_versions)
  return workflow_versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersion >*
MultiWorkflowVersionResponse::mutable_workflow_versions() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiWorkflowVersionResponse.workflow_versions)
  return &workflow_versions_;
}
inline const ::clarifai::api::WorkflowVersion& MultiWorkflowVersionResponse::_internal_workflow_versions(int index) const {
  return workflow_versions_.Get(index);
}
inline const ::clarifai::api::WorkflowVersion& MultiWorkflowVersionResponse::workflow_versions(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiWorkflowVersionResponse.workflow_versions)
  return _internal_workflow_versions(index);
}
inline ::clarifai::api::WorkflowVersion* MultiWorkflowVersionResponse::_internal_add_workflow_versions() {
  return workflow_versions_.Add();
}
inline ::clarifai::api::WorkflowVersion* MultiWorkflowVersionResponse::add_workflow_versions() {
  ::clarifai::api::WorkflowVersion* _add = _internal_add_workflow_versions();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiWorkflowVersionResponse.workflow_versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowVersion >&
MultiWorkflowVersionResponse::workflow_versions() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiWorkflowVersionResponse.workflow_versions)
  return workflow_versions_;
}

// -------------------------------------------------------------------

// SingleWorkflowVersionResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleWorkflowVersionResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleWorkflowVersionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleWorkflowVersionResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleWorkflowVersionResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleWorkflowVersionResponse.status)
  return _internal_status();
}
inline void SingleWorkflowVersionResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleWorkflowVersionResponse.status)
}
inline ::clarifai::api::status::Status* SingleWorkflowVersionResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleWorkflowVersionResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleWorkflowVersionResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleWorkflowVersionResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleWorkflowVersionResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleWorkflowVersionResponse.status)
  return _msg;
}
inline void SingleWorkflowVersionResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleWorkflowVersionResponse.status)
}

// .clarifai.api.WorkflowVersion workflow_version = 2;
inline bool SingleWorkflowVersionResponse::_internal_has_workflow_version() const {
  return this != internal_default_instance() && workflow_version_ != nullptr;
}
inline bool SingleWorkflowVersionResponse::has_workflow_version() const {
  return _internal_has_workflow_version();
}
inline const ::clarifai::api::WorkflowVersion& SingleWorkflowVersionResponse::_internal_workflow_version() const {
  const ::clarifai::api::WorkflowVersion* p = workflow_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::WorkflowVersion&>(
      ::clarifai::api::_WorkflowVersion_default_instance_);
}
inline const ::clarifai::api::WorkflowVersion& SingleWorkflowVersionResponse::workflow_version() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleWorkflowVersionResponse.workflow_version)
  return _internal_workflow_version();
}
inline void SingleWorkflowVersionResponse::unsafe_arena_set_allocated_workflow_version(
    ::clarifai::api::WorkflowVersion* workflow_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_version_);
  }
  workflow_version_ = workflow_version;
  if (workflow_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleWorkflowVersionResponse.workflow_version)
}
inline ::clarifai::api::WorkflowVersion* SingleWorkflowVersionResponse::release_workflow_version() {
  
  ::clarifai::api::WorkflowVersion* temp = workflow_version_;
  workflow_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::WorkflowVersion* SingleWorkflowVersionResponse::unsafe_arena_release_workflow_version() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleWorkflowVersionResponse.workflow_version)
  
  ::clarifai::api::WorkflowVersion* temp = workflow_version_;
  workflow_version_ = nullptr;
  return temp;
}
inline ::clarifai::api::WorkflowVersion* SingleWorkflowVersionResponse::_internal_mutable_workflow_version() {
  
  if (workflow_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::WorkflowVersion>(GetArenaForAllocation());
    workflow_version_ = p;
  }
  return workflow_version_;
}
inline ::clarifai::api::WorkflowVersion* SingleWorkflowVersionResponse::mutable_workflow_version() {
  ::clarifai::api::WorkflowVersion* _msg = _internal_mutable_workflow_version();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleWorkflowVersionResponse.workflow_version)
  return _msg;
}
inline void SingleWorkflowVersionResponse::set_allocated_workflow_version(::clarifai::api::WorkflowVersion* workflow_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_version_);
  }
  if (workflow_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_version));
    if (message_arena != submessage_arena) {
      workflow_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow_version, submessage_arena);
    }
    
  } else {
    
  }
  workflow_version_ = workflow_version;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleWorkflowVersionResponse.workflow_version)
}

// -------------------------------------------------------------------

// PostAppDuplicationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostAppDuplicationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostAppDuplicationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostAppDuplicationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostAppDuplicationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAppDuplicationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostAppDuplicationsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostAppDuplicationsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostAppDuplicationsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAppDuplicationsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostAppDuplicationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostAppDuplicationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostAppDuplicationsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAppDuplicationsRequest.user_app_id)
  return _msg;
}
inline void PostAppDuplicationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostAppDuplicationsRequest.user_app_id)
}

// repeated .clarifai.api.AppDuplication app_duplications = 2;
inline int PostAppDuplicationsRequest::_internal_app_duplications_size() const {
  return app_duplications_.size();
}
inline int PostAppDuplicationsRequest::app_duplications_size() const {
  return _internal_app_duplications_size();
}
inline ::clarifai::api::AppDuplication* PostAppDuplicationsRequest::mutable_app_duplications(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostAppDuplicationsRequest.app_duplications)
  return app_duplications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >*
PostAppDuplicationsRequest::mutable_app_duplications() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostAppDuplicationsRequest.app_duplications)
  return &app_duplications_;
}
inline const ::clarifai::api::AppDuplication& PostAppDuplicationsRequest::_internal_app_duplications(int index) const {
  return app_duplications_.Get(index);
}
inline const ::clarifai::api::AppDuplication& PostAppDuplicationsRequest::app_duplications(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostAppDuplicationsRequest.app_duplications)
  return _internal_app_duplications(index);
}
inline ::clarifai::api::AppDuplication* PostAppDuplicationsRequest::_internal_add_app_duplications() {
  return app_duplications_.Add();
}
inline ::clarifai::api::AppDuplication* PostAppDuplicationsRequest::add_app_duplications() {
  ::clarifai::api::AppDuplication* _add = _internal_add_app_duplications();
  // @@protoc_insertion_point(field_add:clarifai.api.PostAppDuplicationsRequest.app_duplications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >&
PostAppDuplicationsRequest::app_duplications() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostAppDuplicationsRequest.app_duplications)
  return app_duplications_;
}

// -------------------------------------------------------------------

// GetAppDuplicationRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetAppDuplicationRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetAppDuplicationRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetAppDuplicationRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetAppDuplicationRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAppDuplicationRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetAppDuplicationRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetAppDuplicationRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetAppDuplicationRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAppDuplicationRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAppDuplicationRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetAppDuplicationRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetAppDuplicationRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAppDuplicationRequest.user_app_id)
  return _msg;
}
inline void GetAppDuplicationRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAppDuplicationRequest.user_app_id)
}

// string app_duplication_id = 2;
inline void GetAppDuplicationRequest::clear_app_duplication_id() {
  app_duplication_id_.ClearToEmpty();
}
inline const std::string& GetAppDuplicationRequest::app_duplication_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
  return _internal_app_duplication_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAppDuplicationRequest::set_app_duplication_id(ArgT0&& arg0, ArgT... args) {
 
 app_duplication_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
}
inline std::string* GetAppDuplicationRequest::mutable_app_duplication_id() {
  std::string* _s = _internal_mutable_app_duplication_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
  return _s;
}
inline const std::string& GetAppDuplicationRequest::_internal_app_duplication_id() const {
  return app_duplication_id_.Get();
}
inline void GetAppDuplicationRequest::_internal_set_app_duplication_id(const std::string& value) {
  
  app_duplication_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetAppDuplicationRequest::_internal_mutable_app_duplication_id() {
  
  return app_duplication_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetAppDuplicationRequest::release_app_duplication_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
  return app_duplication_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetAppDuplicationRequest::set_allocated_app_duplication_id(std::string* app_duplication_id) {
  if (app_duplication_id != nullptr) {
    
  } else {
    
  }
  app_duplication_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_duplication_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_duplication_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_duplication_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetAppDuplicationRequest.app_duplication_id)
}

// -------------------------------------------------------------------

// ListAppDuplicationsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListAppDuplicationsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListAppDuplicationsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListAppDuplicationsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListAppDuplicationsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppDuplicationsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListAppDuplicationsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListAppDuplicationsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListAppDuplicationsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAppDuplicationsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListAppDuplicationsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListAppDuplicationsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListAppDuplicationsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListAppDuplicationsRequest.user_app_id)
  return _msg;
}
inline void ListAppDuplicationsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListAppDuplicationsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListAppDuplicationsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListAppDuplicationsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListAppDuplicationsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppDuplicationsRequest.page)
  return _internal_page();
}
inline void ListAppDuplicationsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListAppDuplicationsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppDuplicationsRequest.page)
}

// uint32 per_page = 3;
inline void ListAppDuplicationsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListAppDuplicationsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListAppDuplicationsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListAppDuplicationsRequest.per_page)
  return _internal_per_page();
}
inline void ListAppDuplicationsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListAppDuplicationsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListAppDuplicationsRequest.per_page)
}

// -------------------------------------------------------------------

// MultiAppDuplicationsResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiAppDuplicationsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiAppDuplicationsResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiAppDuplicationsResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiAppDuplicationsResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAppDuplicationsResponse.status)
  return _internal_status();
}
inline void MultiAppDuplicationsResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiAppDuplicationsResponse.status)
}
inline ::clarifai::api::status::Status* MultiAppDuplicationsResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiAppDuplicationsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiAppDuplicationsResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiAppDuplicationsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiAppDuplicationsResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAppDuplicationsResponse.status)
  return _msg;
}
inline void MultiAppDuplicationsResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiAppDuplicationsResponse.status)
}

// repeated .clarifai.api.AppDuplication app_duplications = 2;
inline int MultiAppDuplicationsResponse::_internal_app_duplications_size() const {
  return app_duplications_.size();
}
inline int MultiAppDuplicationsResponse::app_duplications_size() const {
  return _internal_app_duplications_size();
}
inline ::clarifai::api::AppDuplication* MultiAppDuplicationsResponse::mutable_app_duplications(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiAppDuplicationsResponse.app_duplications)
  return app_duplications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >*
MultiAppDuplicationsResponse::mutable_app_duplications() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiAppDuplicationsResponse.app_duplications)
  return &app_duplications_;
}
inline const ::clarifai::api::AppDuplication& MultiAppDuplicationsResponse::_internal_app_duplications(int index) const {
  return app_duplications_.Get(index);
}
inline const ::clarifai::api::AppDuplication& MultiAppDuplicationsResponse::app_duplications(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiAppDuplicationsResponse.app_duplications)
  return _internal_app_duplications(index);
}
inline ::clarifai::api::AppDuplication* MultiAppDuplicationsResponse::_internal_add_app_duplications() {
  return app_duplications_.Add();
}
inline ::clarifai::api::AppDuplication* MultiAppDuplicationsResponse::add_app_duplications() {
  ::clarifai::api::AppDuplication* _add = _internal_add_app_duplications();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiAppDuplicationsResponse.app_duplications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::AppDuplication >&
MultiAppDuplicationsResponse::app_duplications() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiAppDuplicationsResponse.app_duplications)
  return app_duplications_;
}

// -------------------------------------------------------------------

// SingleAppDuplicationResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleAppDuplicationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleAppDuplicationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleAppDuplicationResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleAppDuplicationResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAppDuplicationResponse.status)
  return _internal_status();
}
inline void SingleAppDuplicationResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleAppDuplicationResponse.status)
}
inline ::clarifai::api::status::Status* SingleAppDuplicationResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleAppDuplicationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAppDuplicationResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleAppDuplicationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleAppDuplicationResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAppDuplicationResponse.status)
  return _msg;
}
inline void SingleAppDuplicationResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAppDuplicationResponse.status)
}

// .clarifai.api.AppDuplication app_duplication = 2;
inline bool SingleAppDuplicationResponse::_internal_has_app_duplication() const {
  return this != internal_default_instance() && app_duplication_ != nullptr;
}
inline bool SingleAppDuplicationResponse::has_app_duplication() const {
  return _internal_has_app_duplication();
}
inline const ::clarifai::api::AppDuplication& SingleAppDuplicationResponse::_internal_app_duplication() const {
  const ::clarifai::api::AppDuplication* p = app_duplication_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::AppDuplication&>(
      ::clarifai::api::_AppDuplication_default_instance_);
}
inline const ::clarifai::api::AppDuplication& SingleAppDuplicationResponse::app_duplication() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleAppDuplicationResponse.app_duplication)
  return _internal_app_duplication();
}
inline void SingleAppDuplicationResponse::unsafe_arena_set_allocated_app_duplication(
    ::clarifai::api::AppDuplication* app_duplication) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_duplication_);
  }
  app_duplication_ = app_duplication;
  if (app_duplication) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleAppDuplicationResponse.app_duplication)
}
inline ::clarifai::api::AppDuplication* SingleAppDuplicationResponse::release_app_duplication() {
  
  ::clarifai::api::AppDuplication* temp = app_duplication_;
  app_duplication_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::AppDuplication* SingleAppDuplicationResponse::unsafe_arena_release_app_duplication() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleAppDuplicationResponse.app_duplication)
  
  ::clarifai::api::AppDuplication* temp = app_duplication_;
  app_duplication_ = nullptr;
  return temp;
}
inline ::clarifai::api::AppDuplication* SingleAppDuplicationResponse::_internal_mutable_app_duplication() {
  
  if (app_duplication_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::AppDuplication>(GetArenaForAllocation());
    app_duplication_ = p;
  }
  return app_duplication_;
}
inline ::clarifai::api::AppDuplication* SingleAppDuplicationResponse::mutable_app_duplication() {
  ::clarifai::api::AppDuplication* _msg = _internal_mutable_app_duplication();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleAppDuplicationResponse.app_duplication)
  return _msg;
}
inline void SingleAppDuplicationResponse::set_allocated_app_duplication(::clarifai::api::AppDuplication* app_duplication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_duplication_);
  }
  if (app_duplication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_duplication));
    if (message_arena != submessage_arena) {
      app_duplication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_duplication, submessage_arena);
    }
    
  } else {
    
  }
  app_duplication_ = app_duplication;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleAppDuplicationResponse.app_duplication)
}

// -------------------------------------------------------------------

// PostTasksRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostTasksRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostTasksRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostTasksRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostTasksRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostTasksRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostTasksRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostTasksRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostTasksRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostTasksRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostTasksRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostTasksRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostTasksRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostTasksRequest.user_app_id)
  return _msg;
}
inline void PostTasksRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostTasksRequest.user_app_id)
}

// repeated .clarifai.api.Task tasks = 2;
inline int PostTasksRequest::_internal_tasks_size() const {
  return tasks_.size();
}
inline int PostTasksRequest::tasks_size() const {
  return _internal_tasks_size();
}
inline ::clarifai::api::Task* PostTasksRequest::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostTasksRequest.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >*
PostTasksRequest::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostTasksRequest.tasks)
  return &tasks_;
}
inline const ::clarifai::api::Task& PostTasksRequest::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::clarifai::api::Task& PostTasksRequest::tasks(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostTasksRequest.tasks)
  return _internal_tasks(index);
}
inline ::clarifai::api::Task* PostTasksRequest::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::clarifai::api::Task* PostTasksRequest::add_tasks() {
  ::clarifai::api::Task* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:clarifai.api.PostTasksRequest.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >&
PostTasksRequest::tasks() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostTasksRequest.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// GetTaskRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetTaskRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetTaskRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetTaskRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetTaskRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetTaskRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetTaskRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetTaskRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetTaskRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetTaskRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetTaskRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetTaskRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetTaskRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetTaskRequest.user_app_id)
  return _msg;
}
inline void GetTaskRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetTaskRequest.user_app_id)
}

// string task_id = 2;
inline void GetTaskRequest::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& GetTaskRequest::task_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetTaskRequest.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTaskRequest::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetTaskRequest.task_id)
}
inline std::string* GetTaskRequest::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetTaskRequest.task_id)
  return _s;
}
inline const std::string& GetTaskRequest::_internal_task_id() const {
  return task_id_.Get();
}
inline void GetTaskRequest::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetTaskRequest::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetTaskRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetTaskRequest.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetTaskRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetTaskRequest.task_id)
}

// -------------------------------------------------------------------

// ListTasksRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListTasksRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListTasksRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListTasksRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListTasksRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTasksRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListTasksRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListTasksRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListTasksRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListTasksRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListTasksRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListTasksRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListTasksRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListTasksRequest.user_app_id)
  return _msg;
}
inline void ListTasksRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListTasksRequest.user_app_id)
}

// uint32 page = 2;
inline void ListTasksRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListTasksRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListTasksRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTasksRequest.page)
  return _internal_page();
}
inline void ListTasksRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListTasksRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListTasksRequest.page)
}

// uint32 per_page = 3;
inline void ListTasksRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListTasksRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListTasksRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTasksRequest.per_page)
  return _internal_per_page();
}
inline void ListTasksRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListTasksRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListTasksRequest.per_page)
}

// repeated string worker_user_ids = 4;
inline int ListTasksRequest::_internal_worker_user_ids_size() const {
  return worker_user_ids_.size();
}
inline int ListTasksRequest::worker_user_ids_size() const {
  return _internal_worker_user_ids_size();
}
inline void ListTasksRequest::clear_worker_user_ids() {
  worker_user_ids_.Clear();
}
inline std::string* ListTasksRequest::add_worker_user_ids() {
  std::string* _s = _internal_add_worker_user_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListTasksRequest.worker_user_ids)
  return _s;
}
inline const std::string& ListTasksRequest::_internal_worker_user_ids(int index) const {
  return worker_user_ids_.Get(index);
}
inline const std::string& ListTasksRequest::worker_user_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTasksRequest.worker_user_ids)
  return _internal_worker_user_ids(index);
}
inline std::string* ListTasksRequest::mutable_worker_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListTasksRequest.worker_user_ids)
  return worker_user_ids_.Mutable(index);
}
inline void ListTasksRequest::set_worker_user_ids(int index, const std::string& value) {
  worker_user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListTasksRequest.worker_user_ids)
}
inline void ListTasksRequest::set_worker_user_ids(int index, std::string&& value) {
  worker_user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListTasksRequest.worker_user_ids)
}
inline void ListTasksRequest::set_worker_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  worker_user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListTasksRequest.worker_user_ids)
}
inline void ListTasksRequest::set_worker_user_ids(int index, const char* value, size_t size) {
  worker_user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListTasksRequest.worker_user_ids)
}
inline std::string* ListTasksRequest::_internal_add_worker_user_ids() {
  return worker_user_ids_.Add();
}
inline void ListTasksRequest::add_worker_user_ids(const std::string& value) {
  worker_user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListTasksRequest.worker_user_ids)
}
inline void ListTasksRequest::add_worker_user_ids(std::string&& value) {
  worker_user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListTasksRequest.worker_user_ids)
}
inline void ListTasksRequest::add_worker_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  worker_user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListTasksRequest.worker_user_ids)
}
inline void ListTasksRequest::add_worker_user_ids(const char* value, size_t size) {
  worker_user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListTasksRequest.worker_user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListTasksRequest::worker_user_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListTasksRequest.worker_user_ids)
  return worker_user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListTasksRequest::mutable_worker_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListTasksRequest.worker_user_ids)
  return &worker_user_ids_;
}

// repeated string review_user_ids = 5;
inline int ListTasksRequest::_internal_review_user_ids_size() const {
  return review_user_ids_.size();
}
inline int ListTasksRequest::review_user_ids_size() const {
  return _internal_review_user_ids_size();
}
inline void ListTasksRequest::clear_review_user_ids() {
  review_user_ids_.Clear();
}
inline std::string* ListTasksRequest::add_review_user_ids() {
  std::string* _s = _internal_add_review_user_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ListTasksRequest.review_user_ids)
  return _s;
}
inline const std::string& ListTasksRequest::_internal_review_user_ids(int index) const {
  return review_user_ids_.Get(index);
}
inline const std::string& ListTasksRequest::review_user_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTasksRequest.review_user_ids)
  return _internal_review_user_ids(index);
}
inline std::string* ListTasksRequest::mutable_review_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListTasksRequest.review_user_ids)
  return review_user_ids_.Mutable(index);
}
inline void ListTasksRequest::set_review_user_ids(int index, const std::string& value) {
  review_user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListTasksRequest.review_user_ids)
}
inline void ListTasksRequest::set_review_user_ids(int index, std::string&& value) {
  review_user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.ListTasksRequest.review_user_ids)
}
inline void ListTasksRequest::set_review_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  review_user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ListTasksRequest.review_user_ids)
}
inline void ListTasksRequest::set_review_user_ids(int index, const char* value, size_t size) {
  review_user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ListTasksRequest.review_user_ids)
}
inline std::string* ListTasksRequest::_internal_add_review_user_ids() {
  return review_user_ids_.Add();
}
inline void ListTasksRequest::add_review_user_ids(const std::string& value) {
  review_user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ListTasksRequest.review_user_ids)
}
inline void ListTasksRequest::add_review_user_ids(std::string&& value) {
  review_user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ListTasksRequest.review_user_ids)
}
inline void ListTasksRequest::add_review_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  review_user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ListTasksRequest.review_user_ids)
}
inline void ListTasksRequest::add_review_user_ids(const char* value, size_t size) {
  review_user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ListTasksRequest.review_user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListTasksRequest::review_user_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ListTasksRequest.review_user_ids)
  return review_user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListTasksRequest::mutable_review_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ListTasksRequest.review_user_ids)
  return &review_user_ids_;
}

// bool including_label_order_tasks = 6;
inline void ListTasksRequest::clear_including_label_order_tasks() {
  including_label_order_tasks_ = false;
}
inline bool ListTasksRequest::_internal_including_label_order_tasks() const {
  return including_label_order_tasks_;
}
inline bool ListTasksRequest::including_label_order_tasks() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTasksRequest.including_label_order_tasks)
  return _internal_including_label_order_tasks();
}
inline void ListTasksRequest::_internal_set_including_label_order_tasks(bool value) {
  
  including_label_order_tasks_ = value;
}
inline void ListTasksRequest::set_including_label_order_tasks(bool value) {
  _internal_set_including_label_order_tasks(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListTasksRequest.including_label_order_tasks)
}

// -------------------------------------------------------------------

// PatchTasksRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchTasksRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchTasksRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchTasksRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchTasksRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchTasksRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchTasksRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchTasksRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchTasksRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchTasksRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchTasksRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchTasksRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchTasksRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchTasksRequest.user_app_id)
  return _msg;
}
inline void PatchTasksRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchTasksRequest.user_app_id)
}

// repeated .clarifai.api.Task tasks = 2;
inline int PatchTasksRequest::_internal_tasks_size() const {
  return tasks_.size();
}
inline int PatchTasksRequest::tasks_size() const {
  return _internal_tasks_size();
}
inline ::clarifai::api::Task* PatchTasksRequest::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchTasksRequest.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >*
PatchTasksRequest::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchTasksRequest.tasks)
  return &tasks_;
}
inline const ::clarifai::api::Task& PatchTasksRequest::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::clarifai::api::Task& PatchTasksRequest::tasks(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchTasksRequest.tasks)
  return _internal_tasks(index);
}
inline ::clarifai::api::Task* PatchTasksRequest::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::clarifai::api::Task* PatchTasksRequest::add_tasks() {
  ::clarifai::api::Task* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchTasksRequest.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >&
PatchTasksRequest::tasks() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchTasksRequest.tasks)
  return tasks_;
}

// string action = 3;
inline void PatchTasksRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchTasksRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchTasksRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchTasksRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchTasksRequest.action)
}
inline std::string* PatchTasksRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchTasksRequest.action)
  return _s;
}
inline const std::string& PatchTasksRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchTasksRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchTasksRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchTasksRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchTasksRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchTasksRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchTasksRequest.action)
}

// -------------------------------------------------------------------

// DeleteTasksRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteTasksRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteTasksRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteTasksRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteTasksRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteTasksRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteTasksRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteTasksRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteTasksRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteTasksRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteTasksRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteTasksRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteTasksRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteTasksRequest.user_app_id)
  return _msg;
}
inline void DeleteTasksRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteTasksRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteTasksRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteTasksRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteTasksRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteTasksRequest::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteTasksRequest.ids)
  return _s;
}
inline const std::string& DeleteTasksRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteTasksRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteTasksRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteTasksRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteTasksRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteTasksRequest::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteTasksRequest.ids)
}
inline void DeleteTasksRequest::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteTasksRequest.ids)
}
inline void DeleteTasksRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteTasksRequest.ids)
}
inline void DeleteTasksRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteTasksRequest.ids)
}
inline std::string* DeleteTasksRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteTasksRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteTasksRequest.ids)
}
inline void DeleteTasksRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteTasksRequest.ids)
}
inline void DeleteTasksRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteTasksRequest.ids)
}
inline void DeleteTasksRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteTasksRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteTasksRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteTasksRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteTasksRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteTasksRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// MultiTaskResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiTaskResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiTaskResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiTaskResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiTaskResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiTaskResponse.status)
  return _internal_status();
}
inline void MultiTaskResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiTaskResponse.status)
}
inline ::clarifai::api::status::Status* MultiTaskResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiTaskResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiTaskResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiTaskResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiTaskResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiTaskResponse.status)
  return _msg;
}
inline void MultiTaskResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiTaskResponse.status)
}

// repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiTaskResponse::_internal_tasks_size() const {
  return tasks_.size();
}
inline int MultiTaskResponse::tasks_size() const {
  return _internal_tasks_size();
}
inline ::clarifai::api::Task* MultiTaskResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiTaskResponse.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >*
MultiTaskResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiTaskResponse.tasks)
  return &tasks_;
}
inline const ::clarifai::api::Task& MultiTaskResponse::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::clarifai::api::Task& MultiTaskResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiTaskResponse.tasks)
  return _internal_tasks(index);
}
inline ::clarifai::api::Task* MultiTaskResponse::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::clarifai::api::Task* MultiTaskResponse::add_tasks() {
  ::clarifai::api::Task* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiTaskResponse.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Task >&
MultiTaskResponse::tasks() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiTaskResponse.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// SingleTaskResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleTaskResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleTaskResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleTaskResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleTaskResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleTaskResponse.status)
  return _internal_status();
}
inline void SingleTaskResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleTaskResponse.status)
}
inline ::clarifai::api::status::Status* SingleTaskResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleTaskResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleTaskResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleTaskResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleTaskResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleTaskResponse.status)
  return _msg;
}
inline void SingleTaskResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleTaskResponse.status)
}

// .clarifai.api.Task task = 2;
inline bool SingleTaskResponse::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool SingleTaskResponse::has_task() const {
  return _internal_has_task();
}
inline const ::clarifai::api::Task& SingleTaskResponse::_internal_task() const {
  const ::clarifai::api::Task* p = task_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Task&>(
      ::clarifai::api::_Task_default_instance_);
}
inline const ::clarifai::api::Task& SingleTaskResponse::task() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleTaskResponse.task)
  return _internal_task();
}
inline void SingleTaskResponse::unsafe_arena_set_allocated_task(
    ::clarifai::api::Task* task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_);
  }
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleTaskResponse.task)
}
inline ::clarifai::api::Task* SingleTaskResponse::release_task() {
  
  ::clarifai::api::Task* temp = task_;
  task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Task* SingleTaskResponse::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleTaskResponse.task)
  
  ::clarifai::api::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::clarifai::api::Task* SingleTaskResponse::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Task>(GetArenaForAllocation());
    task_ = p;
  }
  return task_;
}
inline ::clarifai::api::Task* SingleTaskResponse::mutable_task() {
  ::clarifai::api::Task* _msg = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleTaskResponse.task)
  return _msg;
}
inline void SingleTaskResponse::set_allocated_task(::clarifai::api::Task* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_);
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task));
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleTaskResponse.task)
}

// -------------------------------------------------------------------

// GetTaskCountRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetTaskCountRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetTaskCountRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetTaskCountRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetTaskCountRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetTaskCountRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetTaskCountRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetTaskCountRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetTaskCountRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetTaskCountRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetTaskCountRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetTaskCountRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetTaskCountRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetTaskCountRequest.user_app_id)
  return _msg;
}
inline void GetTaskCountRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetTaskCountRequest.user_app_id)
}

// string task_id = 2;
inline void GetTaskCountRequest::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& GetTaskCountRequest::task_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetTaskCountRequest.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTaskCountRequest::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetTaskCountRequest.task_id)
}
inline std::string* GetTaskCountRequest::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetTaskCountRequest.task_id)
  return _s;
}
inline const std::string& GetTaskCountRequest::_internal_task_id() const {
  return task_id_.Get();
}
inline void GetTaskCountRequest::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetTaskCountRequest::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetTaskCountRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetTaskCountRequest.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetTaskCountRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetTaskCountRequest.task_id)
}

// repeated string user_ids = 3;
inline int GetTaskCountRequest::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int GetTaskCountRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void GetTaskCountRequest::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* GetTaskCountRequest::add_user_ids() {
  std::string* _s = _internal_add_user_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.GetTaskCountRequest.user_ids)
  return _s;
}
inline const std::string& GetTaskCountRequest::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& GetTaskCountRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetTaskCountRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* GetTaskCountRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetTaskCountRequest.user_ids)
  return user_ids_.Mutable(index);
}
inline void GetTaskCountRequest::set_user_ids(int index, const std::string& value) {
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GetTaskCountRequest.user_ids)
}
inline void GetTaskCountRequest::set_user_ids(int index, std::string&& value) {
  user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.GetTaskCountRequest.user_ids)
}
inline void GetTaskCountRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.GetTaskCountRequest.user_ids)
}
inline void GetTaskCountRequest::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GetTaskCountRequest.user_ids)
}
inline std::string* GetTaskCountRequest::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void GetTaskCountRequest::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.GetTaskCountRequest.user_ids)
}
inline void GetTaskCountRequest::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.GetTaskCountRequest.user_ids)
}
inline void GetTaskCountRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.GetTaskCountRequest.user_ids)
}
inline void GetTaskCountRequest::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.GetTaskCountRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTaskCountRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.GetTaskCountRequest.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTaskCountRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.GetTaskCountRequest.user_ids)
  return &user_ids_;
}

// -------------------------------------------------------------------

// SingleTaskCountResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleTaskCountResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleTaskCountResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleTaskCountResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleTaskCountResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleTaskCountResponse.status)
  return _internal_status();
}
inline void SingleTaskCountResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleTaskCountResponse.status)
}
inline ::clarifai::api::status::Status* SingleTaskCountResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleTaskCountResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleTaskCountResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleTaskCountResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleTaskCountResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleTaskCountResponse.status)
  return _msg;
}
inline void SingleTaskCountResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleTaskCountResponse.status)
}

// string app_id = 2;
inline void SingleTaskCountResponse::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& SingleTaskCountResponse::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleTaskCountResponse.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SingleTaskCountResponse::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.SingleTaskCountResponse.app_id)
}
inline std::string* SingleTaskCountResponse::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleTaskCountResponse.app_id)
  return _s;
}
inline const std::string& SingleTaskCountResponse::_internal_app_id() const {
  return app_id_.Get();
}
inline void SingleTaskCountResponse::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SingleTaskCountResponse::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SingleTaskCountResponse::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleTaskCountResponse.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SingleTaskCountResponse::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleTaskCountResponse.app_id)
}

// string task_id = 3;
inline void SingleTaskCountResponse::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& SingleTaskCountResponse::task_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleTaskCountResponse.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SingleTaskCountResponse::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.SingleTaskCountResponse.task_id)
}
inline std::string* SingleTaskCountResponse::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleTaskCountResponse.task_id)
  return _s;
}
inline const std::string& SingleTaskCountResponse::_internal_task_id() const {
  return task_id_.Get();
}
inline void SingleTaskCountResponse::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SingleTaskCountResponse::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SingleTaskCountResponse::release_task_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleTaskCountResponse.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SingleTaskCountResponse::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleTaskCountResponse.task_id)
}

// repeated .clarifai.api.TaskStatusCountPerUser counts = 4;
inline int SingleTaskCountResponse::_internal_counts_size() const {
  return counts_.size();
}
inline int SingleTaskCountResponse::counts_size() const {
  return _internal_counts_size();
}
inline ::clarifai::api::TaskStatusCountPerUser* SingleTaskCountResponse::mutable_counts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleTaskCountResponse.counts)
  return counts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TaskStatusCountPerUser >*
SingleTaskCountResponse::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.SingleTaskCountResponse.counts)
  return &counts_;
}
inline const ::clarifai::api::TaskStatusCountPerUser& SingleTaskCountResponse::_internal_counts(int index) const {
  return counts_.Get(index);
}
inline const ::clarifai::api::TaskStatusCountPerUser& SingleTaskCountResponse::counts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleTaskCountResponse.counts)
  return _internal_counts(index);
}
inline ::clarifai::api::TaskStatusCountPerUser* SingleTaskCountResponse::_internal_add_counts() {
  return counts_.Add();
}
inline ::clarifai::api::TaskStatusCountPerUser* SingleTaskCountResponse::add_counts() {
  ::clarifai::api::TaskStatusCountPerUser* _add = _internal_add_counts();
  // @@protoc_insertion_point(field_add:clarifai.api.SingleTaskCountResponse.counts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TaskStatusCountPerUser >&
SingleTaskCountResponse::counts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.SingleTaskCountResponse.counts)
  return counts_;
}

// -------------------------------------------------------------------

// PostLabelOrdersRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostLabelOrdersRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostLabelOrdersRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostLabelOrdersRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostLabelOrdersRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostLabelOrdersRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostLabelOrdersRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostLabelOrdersRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostLabelOrdersRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostLabelOrdersRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostLabelOrdersRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostLabelOrdersRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostLabelOrdersRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostLabelOrdersRequest.user_app_id)
  return _msg;
}
inline void PostLabelOrdersRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostLabelOrdersRequest.user_app_id)
}

// repeated .clarifai.api.LabelOrder label_orders = 2;
inline int PostLabelOrdersRequest::_internal_label_orders_size() const {
  return label_orders_.size();
}
inline int PostLabelOrdersRequest::label_orders_size() const {
  return _internal_label_orders_size();
}
inline ::clarifai::api::LabelOrder* PostLabelOrdersRequest::mutable_label_orders(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostLabelOrdersRequest.label_orders)
  return label_orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder >*
PostLabelOrdersRequest::mutable_label_orders() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostLabelOrdersRequest.label_orders)
  return &label_orders_;
}
inline const ::clarifai::api::LabelOrder& PostLabelOrdersRequest::_internal_label_orders(int index) const {
  return label_orders_.Get(index);
}
inline const ::clarifai::api::LabelOrder& PostLabelOrdersRequest::label_orders(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostLabelOrdersRequest.label_orders)
  return _internal_label_orders(index);
}
inline ::clarifai::api::LabelOrder* PostLabelOrdersRequest::_internal_add_label_orders() {
  return label_orders_.Add();
}
inline ::clarifai::api::LabelOrder* PostLabelOrdersRequest::add_label_orders() {
  ::clarifai::api::LabelOrder* _add = _internal_add_label_orders();
  // @@protoc_insertion_point(field_add:clarifai.api.PostLabelOrdersRequest.label_orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder >&
PostLabelOrdersRequest::label_orders() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostLabelOrdersRequest.label_orders)
  return label_orders_;
}

// -------------------------------------------------------------------

// GetLabelOrderRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetLabelOrderRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetLabelOrderRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetLabelOrderRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetLabelOrderRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetLabelOrderRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetLabelOrderRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetLabelOrderRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetLabelOrderRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetLabelOrderRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetLabelOrderRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetLabelOrderRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetLabelOrderRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetLabelOrderRequest.user_app_id)
  return _msg;
}
inline void GetLabelOrderRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetLabelOrderRequest.user_app_id)
}

// string label_order_id = 2;
inline void GetLabelOrderRequest::clear_label_order_id() {
  label_order_id_.ClearToEmpty();
}
inline const std::string& GetLabelOrderRequest::label_order_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetLabelOrderRequest.label_order_id)
  return _internal_label_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLabelOrderRequest::set_label_order_id(ArgT0&& arg0, ArgT... args) {
 
 label_order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetLabelOrderRequest.label_order_id)
}
inline std::string* GetLabelOrderRequest::mutable_label_order_id() {
  std::string* _s = _internal_mutable_label_order_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetLabelOrderRequest.label_order_id)
  return _s;
}
inline const std::string& GetLabelOrderRequest::_internal_label_order_id() const {
  return label_order_id_.Get();
}
inline void GetLabelOrderRequest::_internal_set_label_order_id(const std::string& value) {
  
  label_order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetLabelOrderRequest::_internal_mutable_label_order_id() {
  
  return label_order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetLabelOrderRequest::release_label_order_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetLabelOrderRequest.label_order_id)
  return label_order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetLabelOrderRequest::set_allocated_label_order_id(std::string* label_order_id) {
  if (label_order_id != nullptr) {
    
  } else {
    
  }
  label_order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label_order_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_order_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetLabelOrderRequest.label_order_id)
}

// -------------------------------------------------------------------

// ListLabelOrdersRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListLabelOrdersRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListLabelOrdersRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListLabelOrdersRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListLabelOrdersRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListLabelOrdersRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListLabelOrdersRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListLabelOrdersRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListLabelOrdersRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListLabelOrdersRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListLabelOrdersRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListLabelOrdersRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListLabelOrdersRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListLabelOrdersRequest.user_app_id)
  return _msg;
}
inline void ListLabelOrdersRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListLabelOrdersRequest.user_app_id)
}

// uint32 page = 2;
inline void ListLabelOrdersRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListLabelOrdersRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListLabelOrdersRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListLabelOrdersRequest.page)
  return _internal_page();
}
inline void ListLabelOrdersRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListLabelOrdersRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListLabelOrdersRequest.page)
}

// uint32 per_page = 3;
inline void ListLabelOrdersRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListLabelOrdersRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListLabelOrdersRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListLabelOrdersRequest.per_page)
  return _internal_per_page();
}
inline void ListLabelOrdersRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListLabelOrdersRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListLabelOrdersRequest.per_page)
}

// -------------------------------------------------------------------

// PatchLabelOrdersRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchLabelOrdersRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchLabelOrdersRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchLabelOrdersRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchLabelOrdersRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchLabelOrdersRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchLabelOrdersRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchLabelOrdersRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchLabelOrdersRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchLabelOrdersRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchLabelOrdersRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchLabelOrdersRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchLabelOrdersRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchLabelOrdersRequest.user_app_id)
  return _msg;
}
inline void PatchLabelOrdersRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchLabelOrdersRequest.user_app_id)
}

// repeated .clarifai.api.LabelOrder label_orders = 2;
inline int PatchLabelOrdersRequest::_internal_label_orders_size() const {
  return label_orders_.size();
}
inline int PatchLabelOrdersRequest::label_orders_size() const {
  return _internal_label_orders_size();
}
inline ::clarifai::api::LabelOrder* PatchLabelOrdersRequest::mutable_label_orders(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchLabelOrdersRequest.label_orders)
  return label_orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder >*
PatchLabelOrdersRequest::mutable_label_orders() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchLabelOrdersRequest.label_orders)
  return &label_orders_;
}
inline const ::clarifai::api::LabelOrder& PatchLabelOrdersRequest::_internal_label_orders(int index) const {
  return label_orders_.Get(index);
}
inline const ::clarifai::api::LabelOrder& PatchLabelOrdersRequest::label_orders(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchLabelOrdersRequest.label_orders)
  return _internal_label_orders(index);
}
inline ::clarifai::api::LabelOrder* PatchLabelOrdersRequest::_internal_add_label_orders() {
  return label_orders_.Add();
}
inline ::clarifai::api::LabelOrder* PatchLabelOrdersRequest::add_label_orders() {
  ::clarifai::api::LabelOrder* _add = _internal_add_label_orders();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchLabelOrdersRequest.label_orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder >&
PatchLabelOrdersRequest::label_orders() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchLabelOrdersRequest.label_orders)
  return label_orders_;
}

// string action = 3;
inline void PatchLabelOrdersRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchLabelOrdersRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchLabelOrdersRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchLabelOrdersRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchLabelOrdersRequest.action)
}
inline std::string* PatchLabelOrdersRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchLabelOrdersRequest.action)
  return _s;
}
inline const std::string& PatchLabelOrdersRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchLabelOrdersRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchLabelOrdersRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchLabelOrdersRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchLabelOrdersRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchLabelOrdersRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchLabelOrdersRequest.action)
}

// -------------------------------------------------------------------

// DeleteLabelOrdersRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteLabelOrdersRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteLabelOrdersRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteLabelOrdersRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteLabelOrdersRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteLabelOrdersRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteLabelOrdersRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteLabelOrdersRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteLabelOrdersRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteLabelOrdersRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteLabelOrdersRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteLabelOrdersRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteLabelOrdersRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteLabelOrdersRequest.user_app_id)
  return _msg;
}
inline void DeleteLabelOrdersRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteLabelOrdersRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteLabelOrdersRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteLabelOrdersRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteLabelOrdersRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteLabelOrdersRequest::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteLabelOrdersRequest.ids)
  return _s;
}
inline const std::string& DeleteLabelOrdersRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteLabelOrdersRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteLabelOrdersRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteLabelOrdersRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteLabelOrdersRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteLabelOrdersRequest::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteLabelOrdersRequest.ids)
}
inline void DeleteLabelOrdersRequest::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteLabelOrdersRequest.ids)
}
inline void DeleteLabelOrdersRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteLabelOrdersRequest.ids)
}
inline void DeleteLabelOrdersRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteLabelOrdersRequest.ids)
}
inline std::string* DeleteLabelOrdersRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteLabelOrdersRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteLabelOrdersRequest.ids)
}
inline void DeleteLabelOrdersRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteLabelOrdersRequest.ids)
}
inline void DeleteLabelOrdersRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteLabelOrdersRequest.ids)
}
inline void DeleteLabelOrdersRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteLabelOrdersRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteLabelOrdersRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteLabelOrdersRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteLabelOrdersRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteLabelOrdersRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// MultiLabelOrderResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiLabelOrderResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiLabelOrderResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiLabelOrderResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiLabelOrderResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiLabelOrderResponse.status)
  return _internal_status();
}
inline void MultiLabelOrderResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiLabelOrderResponse.status)
}
inline ::clarifai::api::status::Status* MultiLabelOrderResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiLabelOrderResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiLabelOrderResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiLabelOrderResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiLabelOrderResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiLabelOrderResponse.status)
  return _msg;
}
inline void MultiLabelOrderResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiLabelOrderResponse.status)
}

// repeated .clarifai.api.LabelOrder label_orders = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiLabelOrderResponse::_internal_label_orders_size() const {
  return label_orders_.size();
}
inline int MultiLabelOrderResponse::label_orders_size() const {
  return _internal_label_orders_size();
}
inline ::clarifai::api::LabelOrder* MultiLabelOrderResponse::mutable_label_orders(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiLabelOrderResponse.label_orders)
  return label_orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder >*
MultiLabelOrderResponse::mutable_label_orders() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiLabelOrderResponse.label_orders)
  return &label_orders_;
}
inline const ::clarifai::api::LabelOrder& MultiLabelOrderResponse::_internal_label_orders(int index) const {
  return label_orders_.Get(index);
}
inline const ::clarifai::api::LabelOrder& MultiLabelOrderResponse::label_orders(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiLabelOrderResponse.label_orders)
  return _internal_label_orders(index);
}
inline ::clarifai::api::LabelOrder* MultiLabelOrderResponse::_internal_add_label_orders() {
  return label_orders_.Add();
}
inline ::clarifai::api::LabelOrder* MultiLabelOrderResponse::add_label_orders() {
  ::clarifai::api::LabelOrder* _add = _internal_add_label_orders();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiLabelOrderResponse.label_orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelOrder >&
MultiLabelOrderResponse::label_orders() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiLabelOrderResponse.label_orders)
  return label_orders_;
}

// -------------------------------------------------------------------

// SingleLabelOrderResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleLabelOrderResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleLabelOrderResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleLabelOrderResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleLabelOrderResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLabelOrderResponse.status)
  return _internal_status();
}
inline void SingleLabelOrderResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleLabelOrderResponse.status)
}
inline ::clarifai::api::status::Status* SingleLabelOrderResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleLabelOrderResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLabelOrderResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleLabelOrderResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleLabelOrderResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLabelOrderResponse.status)
  return _msg;
}
inline void SingleLabelOrderResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLabelOrderResponse.status)
}

// .clarifai.api.LabelOrder label_order = 2;
inline bool SingleLabelOrderResponse::_internal_has_label_order() const {
  return this != internal_default_instance() && label_order_ != nullptr;
}
inline bool SingleLabelOrderResponse::has_label_order() const {
  return _internal_has_label_order();
}
inline const ::clarifai::api::LabelOrder& SingleLabelOrderResponse::_internal_label_order() const {
  const ::clarifai::api::LabelOrder* p = label_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::LabelOrder&>(
      ::clarifai::api::_LabelOrder_default_instance_);
}
inline const ::clarifai::api::LabelOrder& SingleLabelOrderResponse::label_order() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleLabelOrderResponse.label_order)
  return _internal_label_order();
}
inline void SingleLabelOrderResponse::unsafe_arena_set_allocated_label_order(
    ::clarifai::api::LabelOrder* label_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_order_);
  }
  label_order_ = label_order;
  if (label_order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleLabelOrderResponse.label_order)
}
inline ::clarifai::api::LabelOrder* SingleLabelOrderResponse::release_label_order() {
  
  ::clarifai::api::LabelOrder* temp = label_order_;
  label_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::LabelOrder* SingleLabelOrderResponse::unsafe_arena_release_label_order() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleLabelOrderResponse.label_order)
  
  ::clarifai::api::LabelOrder* temp = label_order_;
  label_order_ = nullptr;
  return temp;
}
inline ::clarifai::api::LabelOrder* SingleLabelOrderResponse::_internal_mutable_label_order() {
  
  if (label_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::LabelOrder>(GetArenaForAllocation());
    label_order_ = p;
  }
  return label_order_;
}
inline ::clarifai::api::LabelOrder* SingleLabelOrderResponse::mutable_label_order() {
  ::clarifai::api::LabelOrder* _msg = _internal_mutable_label_order();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleLabelOrderResponse.label_order)
  return _msg;
}
inline void SingleLabelOrderResponse::set_allocated_label_order(::clarifai::api::LabelOrder* label_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_order_);
  }
  if (label_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_order));
    if (message_arena != submessage_arena) {
      label_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_order, submessage_arena);
    }
    
  } else {
    
  }
  label_order_ = label_order;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleLabelOrderResponse.label_order)
}

// -------------------------------------------------------------------

// PostCollectorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostCollectorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostCollectorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostCollectorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostCollectorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostCollectorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostCollectorsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostCollectorsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostCollectorsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostCollectorsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostCollectorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostCollectorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostCollectorsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostCollectorsRequest.user_app_id)
  return _msg;
}
inline void PostCollectorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostCollectorsRequest.user_app_id)
}

// repeated .clarifai.api.Collector collectors = 2;
inline int PostCollectorsRequest::_internal_collectors_size() const {
  return collectors_.size();
}
inline int PostCollectorsRequest::collectors_size() const {
  return _internal_collectors_size();
}
inline ::clarifai::api::Collector* PostCollectorsRequest::mutable_collectors(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostCollectorsRequest.collectors)
  return collectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >*
PostCollectorsRequest::mutable_collectors() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostCollectorsRequest.collectors)
  return &collectors_;
}
inline const ::clarifai::api::Collector& PostCollectorsRequest::_internal_collectors(int index) const {
  return collectors_.Get(index);
}
inline const ::clarifai::api::Collector& PostCollectorsRequest::collectors(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostCollectorsRequest.collectors)
  return _internal_collectors(index);
}
inline ::clarifai::api::Collector* PostCollectorsRequest::_internal_add_collectors() {
  return collectors_.Add();
}
inline ::clarifai::api::Collector* PostCollectorsRequest::add_collectors() {
  ::clarifai::api::Collector* _add = _internal_add_collectors();
  // @@protoc_insertion_point(field_add:clarifai.api.PostCollectorsRequest.collectors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >&
PostCollectorsRequest::collectors() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostCollectorsRequest.collectors)
  return collectors_;
}

// -------------------------------------------------------------------

// PatchCollectorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PatchCollectorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PatchCollectorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PatchCollectorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PatchCollectorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCollectorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PatchCollectorsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PatchCollectorsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PatchCollectorsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchCollectorsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchCollectorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PatchCollectorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PatchCollectorsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCollectorsRequest.user_app_id)
  return _msg;
}
inline void PatchCollectorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchCollectorsRequest.user_app_id)
}

// repeated .clarifai.api.Collector collectors = 2;
inline int PatchCollectorsRequest::_internal_collectors_size() const {
  return collectors_.size();
}
inline int PatchCollectorsRequest::collectors_size() const {
  return _internal_collectors_size();
}
inline ::clarifai::api::Collector* PatchCollectorsRequest::mutable_collectors(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCollectorsRequest.collectors)
  return collectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >*
PatchCollectorsRequest::mutable_collectors() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PatchCollectorsRequest.collectors)
  return &collectors_;
}
inline const ::clarifai::api::Collector& PatchCollectorsRequest::_internal_collectors(int index) const {
  return collectors_.Get(index);
}
inline const ::clarifai::api::Collector& PatchCollectorsRequest::collectors(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCollectorsRequest.collectors)
  return _internal_collectors(index);
}
inline ::clarifai::api::Collector* PatchCollectorsRequest::_internal_add_collectors() {
  return collectors_.Add();
}
inline ::clarifai::api::Collector* PatchCollectorsRequest::add_collectors() {
  ::clarifai::api::Collector* _add = _internal_add_collectors();
  // @@protoc_insertion_point(field_add:clarifai.api.PatchCollectorsRequest.collectors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >&
PatchCollectorsRequest::collectors() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PatchCollectorsRequest.collectors)
  return collectors_;
}

// string action = 3;
inline void PatchCollectorsRequest::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PatchCollectorsRequest::action() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchCollectorsRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PatchCollectorsRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PatchCollectorsRequest.action)
}
inline std::string* PatchCollectorsRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchCollectorsRequest.action)
  return _s;
}
inline const std::string& PatchCollectorsRequest::_internal_action() const {
  return action_.Get();
}
inline void PatchCollectorsRequest::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PatchCollectorsRequest::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PatchCollectorsRequest::release_action() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchCollectorsRequest.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PatchCollectorsRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchCollectorsRequest.action)
}

// -------------------------------------------------------------------

// DeleteCollectorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool DeleteCollectorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool DeleteCollectorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& DeleteCollectorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& DeleteCollectorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCollectorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void DeleteCollectorsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.DeleteCollectorsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* DeleteCollectorsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteCollectorsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.DeleteCollectorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* DeleteCollectorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* DeleteCollectorsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteCollectorsRequest.user_app_id)
  return _msg;
}
inline void DeleteCollectorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DeleteCollectorsRequest.user_app_id)
}

// repeated string ids = 2;
inline int DeleteCollectorsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteCollectorsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteCollectorsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteCollectorsRequest::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.DeleteCollectorsRequest.ids)
  return _s;
}
inline const std::string& DeleteCollectorsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteCollectorsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCollectorsRequest.ids)
  return _internal_ids(index);
}
inline std::string* DeleteCollectorsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DeleteCollectorsRequest.ids)
  return ids_.Mutable(index);
}
inline void DeleteCollectorsRequest::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollectorsRequest.ids)
}
inline void DeleteCollectorsRequest::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollectorsRequest.ids)
}
inline void DeleteCollectorsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.DeleteCollectorsRequest.ids)
}
inline void DeleteCollectorsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.DeleteCollectorsRequest.ids)
}
inline std::string* DeleteCollectorsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteCollectorsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteCollectorsRequest.ids)
}
inline void DeleteCollectorsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.DeleteCollectorsRequest.ids)
}
inline void DeleteCollectorsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.DeleteCollectorsRequest.ids)
}
inline void DeleteCollectorsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.DeleteCollectorsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteCollectorsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.DeleteCollectorsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteCollectorsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.DeleteCollectorsRequest.ids)
  return &ids_;
}

// bool delete_all = 3;
inline void DeleteCollectorsRequest::clear_delete_all() {
  delete_all_ = false;
}
inline bool DeleteCollectorsRequest::_internal_delete_all() const {
  return delete_all_;
}
inline bool DeleteCollectorsRequest::delete_all() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DeleteCollectorsRequest.delete_all)
  return _internal_delete_all();
}
inline void DeleteCollectorsRequest::_internal_set_delete_all(bool value) {
  
  delete_all_ = value;
}
inline void DeleteCollectorsRequest::set_delete_all(bool value) {
  _internal_set_delete_all(value);
  // @@protoc_insertion_point(field_set:clarifai.api.DeleteCollectorsRequest.delete_all)
}

// -------------------------------------------------------------------

// GetCollectorRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool GetCollectorRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool GetCollectorRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& GetCollectorRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& GetCollectorRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetCollectorRequest.user_app_id)
  return _internal_user_app_id();
}
inline void GetCollectorRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.GetCollectorRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* GetCollectorRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetCollectorRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetCollectorRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* GetCollectorRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* GetCollectorRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetCollectorRequest.user_app_id)
  return _msg;
}
inline void GetCollectorRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetCollectorRequest.user_app_id)
}

// string collector_id = 2;
inline void GetCollectorRequest::clear_collector_id() {
  collector_id_.ClearToEmpty();
}
inline const std::string& GetCollectorRequest::collector_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GetCollectorRequest.collector_id)
  return _internal_collector_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCollectorRequest::set_collector_id(ArgT0&& arg0, ArgT... args) {
 
 collector_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.GetCollectorRequest.collector_id)
}
inline std::string* GetCollectorRequest::mutable_collector_id() {
  std::string* _s = _internal_mutable_collector_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.GetCollectorRequest.collector_id)
  return _s;
}
inline const std::string& GetCollectorRequest::_internal_collector_id() const {
  return collector_id_.Get();
}
inline void GetCollectorRequest::_internal_set_collector_id(const std::string& value) {
  
  collector_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCollectorRequest::_internal_mutable_collector_id() {
  
  return collector_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCollectorRequest::release_collector_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.GetCollectorRequest.collector_id)
  return collector_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCollectorRequest::set_allocated_collector_id(std::string* collector_id) {
  if (collector_id != nullptr) {
    
  } else {
    
  }
  collector_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collector_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (collector_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    collector_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GetCollectorRequest.collector_id)
}

// -------------------------------------------------------------------

// ListCollectorsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListCollectorsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListCollectorsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListCollectorsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListCollectorsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollectorsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListCollectorsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListCollectorsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListCollectorsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListCollectorsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListCollectorsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListCollectorsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListCollectorsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListCollectorsRequest.user_app_id)
  return _msg;
}
inline void ListCollectorsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListCollectorsRequest.user_app_id)
}

// uint32 page = 2;
inline void ListCollectorsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListCollectorsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListCollectorsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollectorsRequest.page)
  return _internal_page();
}
inline void ListCollectorsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListCollectorsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListCollectorsRequest.page)
}

// uint32 per_page = 3;
inline void ListCollectorsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListCollectorsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListCollectorsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListCollectorsRequest.per_page)
  return _internal_per_page();
}
inline void ListCollectorsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListCollectorsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListCollectorsRequest.per_page)
}

// -------------------------------------------------------------------

// MultiCollectorResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiCollectorResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiCollectorResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiCollectorResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiCollectorResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiCollectorResponse.status)
  return _internal_status();
}
inline void MultiCollectorResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiCollectorResponse.status)
}
inline ::clarifai::api::status::Status* MultiCollectorResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiCollectorResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiCollectorResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiCollectorResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiCollectorResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiCollectorResponse.status)
  return _msg;
}
inline void MultiCollectorResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiCollectorResponse.status)
}

// repeated .clarifai.api.Collector collectors = 2;
inline int MultiCollectorResponse::_internal_collectors_size() const {
  return collectors_.size();
}
inline int MultiCollectorResponse::collectors_size() const {
  return _internal_collectors_size();
}
inline ::clarifai::api::Collector* MultiCollectorResponse::mutable_collectors(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiCollectorResponse.collectors)
  return collectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >*
MultiCollectorResponse::mutable_collectors() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiCollectorResponse.collectors)
  return &collectors_;
}
inline const ::clarifai::api::Collector& MultiCollectorResponse::_internal_collectors(int index) const {
  return collectors_.Get(index);
}
inline const ::clarifai::api::Collector& MultiCollectorResponse::collectors(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiCollectorResponse.collectors)
  return _internal_collectors(index);
}
inline ::clarifai::api::Collector* MultiCollectorResponse::_internal_add_collectors() {
  return collectors_.Add();
}
inline ::clarifai::api::Collector* MultiCollectorResponse::add_collectors() {
  ::clarifai::api::Collector* _add = _internal_add_collectors();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiCollectorResponse.collectors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Collector >&
MultiCollectorResponse::collectors() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiCollectorResponse.collectors)
  return collectors_;
}

// -------------------------------------------------------------------

// SingleCollectorResponse

// .clarifai.api.status.Status status = 1;
inline bool SingleCollectorResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SingleCollectorResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& SingleCollectorResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& SingleCollectorResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleCollectorResponse.status)
  return _internal_status();
}
inline void SingleCollectorResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleCollectorResponse.status)
}
inline ::clarifai::api::status::Status* SingleCollectorResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* SingleCollectorResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleCollectorResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* SingleCollectorResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* SingleCollectorResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleCollectorResponse.status)
  return _msg;
}
inline void SingleCollectorResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleCollectorResponse.status)
}

// .clarifai.api.Collector collector = 2;
inline bool SingleCollectorResponse::_internal_has_collector() const {
  return this != internal_default_instance() && collector_ != nullptr;
}
inline bool SingleCollectorResponse::has_collector() const {
  return _internal_has_collector();
}
inline const ::clarifai::api::Collector& SingleCollectorResponse::_internal_collector() const {
  const ::clarifai::api::Collector* p = collector_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::Collector&>(
      ::clarifai::api::_Collector_default_instance_);
}
inline const ::clarifai::api::Collector& SingleCollectorResponse::collector() const {
  // @@protoc_insertion_point(field_get:clarifai.api.SingleCollectorResponse.collector)
  return _internal_collector();
}
inline void SingleCollectorResponse::unsafe_arena_set_allocated_collector(
    ::clarifai::api::Collector* collector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collector_);
  }
  collector_ = collector;
  if (collector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.SingleCollectorResponse.collector)
}
inline ::clarifai::api::Collector* SingleCollectorResponse::release_collector() {
  
  ::clarifai::api::Collector* temp = collector_;
  collector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::Collector* SingleCollectorResponse::unsafe_arena_release_collector() {
  // @@protoc_insertion_point(field_release:clarifai.api.SingleCollectorResponse.collector)
  
  ::clarifai::api::Collector* temp = collector_;
  collector_ = nullptr;
  return temp;
}
inline ::clarifai::api::Collector* SingleCollectorResponse::_internal_mutable_collector() {
  
  if (collector_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Collector>(GetArenaForAllocation());
    collector_ = p;
  }
  return collector_;
}
inline ::clarifai::api::Collector* SingleCollectorResponse::mutable_collector() {
  ::clarifai::api::Collector* _msg = _internal_mutable_collector();
  // @@protoc_insertion_point(field_mutable:clarifai.api.SingleCollectorResponse.collector)
  return _msg;
}
inline void SingleCollectorResponse::set_allocated_collector(::clarifai::api::Collector* collector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(collector_);
  }
  if (collector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collector));
    if (message_arena != submessage_arena) {
      collector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collector, submessage_arena);
    }
    
  } else {
    
  }
  collector_ = collector;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.SingleCollectorResponse.collector)
}

// -------------------------------------------------------------------

// PostStatValuesRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostStatValuesRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostStatValuesRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostStatValuesRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostStatValuesRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostStatValuesRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostStatValuesRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostStatValuesRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostStatValuesRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostStatValuesRequest.user_app_id)
  return _msg;
}
inline void PostStatValuesRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostStatValuesRequest.user_app_id)
}

// repeated .clarifai.api.StatValue stat_values = 2;
inline int PostStatValuesRequest::_internal_stat_values_size() const {
  return stat_values_.size();
}
inline int PostStatValuesRequest::stat_values_size() const {
  return _internal_stat_values_size();
}
inline ::clarifai::api::StatValue* PostStatValuesRequest::mutable_stat_values(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostStatValuesRequest.stat_values)
  return stat_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >*
PostStatValuesRequest::mutable_stat_values() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostStatValuesRequest.stat_values)
  return &stat_values_;
}
inline const ::clarifai::api::StatValue& PostStatValuesRequest::_internal_stat_values(int index) const {
  return stat_values_.Get(index);
}
inline const ::clarifai::api::StatValue& PostStatValuesRequest::stat_values(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostStatValuesRequest.stat_values)
  return _internal_stat_values(index);
}
inline ::clarifai::api::StatValue* PostStatValuesRequest::_internal_add_stat_values() {
  return stat_values_.Add();
}
inline ::clarifai::api::StatValue* PostStatValuesRequest::add_stat_values() {
  ::clarifai::api::StatValue* _add = _internal_add_stat_values();
  // @@protoc_insertion_point(field_add:clarifai.api.PostStatValuesRequest.stat_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >&
PostStatValuesRequest::stat_values() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostStatValuesRequest.stat_values)
  return stat_values_;
}

// -------------------------------------------------------------------

// MultiStatValueResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiStatValueResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiStatValueResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiStatValueResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiStatValueResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiStatValueResponse.status)
  return _internal_status();
}
inline void MultiStatValueResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiStatValueResponse.status)
}
inline ::clarifai::api::status::Status* MultiStatValueResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiStatValueResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiStatValueResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiStatValueResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiStatValueResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiStatValueResponse.status)
  return _msg;
}
inline void MultiStatValueResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiStatValueResponse.status)
}

// repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int MultiStatValueResponse::_internal_stat_values_size() const {
  return stat_values_.size();
}
inline int MultiStatValueResponse::stat_values_size() const {
  return _internal_stat_values_size();
}
inline ::clarifai::api::StatValue* MultiStatValueResponse::mutable_stat_values(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiStatValueResponse.stat_values)
  return stat_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >*
MultiStatValueResponse::mutable_stat_values() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiStatValueResponse.stat_values)
  return &stat_values_;
}
inline const ::clarifai::api::StatValue& MultiStatValueResponse::_internal_stat_values(int index) const {
  return stat_values_.Get(index);
}
inline const ::clarifai::api::StatValue& MultiStatValueResponse::stat_values(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiStatValueResponse.stat_values)
  return _internal_stat_values(index);
}
inline ::clarifai::api::StatValue* MultiStatValueResponse::_internal_add_stat_values() {
  return stat_values_.Add();
}
inline ::clarifai::api::StatValue* MultiStatValueResponse::add_stat_values() {
  ::clarifai::api::StatValue* _add = _internal_add_stat_values();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiStatValueResponse.stat_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValue >&
MultiStatValueResponse::stat_values() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiStatValueResponse.stat_values)
  return stat_values_;
}

// -------------------------------------------------------------------

// PostStatValuesAggregateRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostStatValuesAggregateRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostStatValuesAggregateRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostStatValuesAggregateRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostStatValuesAggregateRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostStatValuesAggregateRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostStatValuesAggregateRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostStatValuesAggregateRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesAggregateRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesAggregateRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostStatValuesAggregateRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesAggregateRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostStatValuesAggregateRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostStatValuesAggregateRequest.user_app_id)
  return _msg;
}
inline void PostStatValuesAggregateRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostStatValuesAggregateRequest.user_app_id)
}

// repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
inline int PostStatValuesAggregateRequest::_internal_stat_value_aggregate_queries_size() const {
  return stat_value_aggregate_queries_.size();
}
inline int PostStatValuesAggregateRequest::stat_value_aggregate_queries_size() const {
  return _internal_stat_value_aggregate_queries_size();
}
inline ::clarifai::api::StatValueAggregateQuery* PostStatValuesAggregateRequest::mutable_stat_value_aggregate_queries(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostStatValuesAggregateRequest.stat_value_aggregate_queries)
  return stat_value_aggregate_queries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateQuery >*
PostStatValuesAggregateRequest::mutable_stat_value_aggregate_queries() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PostStatValuesAggregateRequest.stat_value_aggregate_queries)
  return &stat_value_aggregate_queries_;
}
inline const ::clarifai::api::StatValueAggregateQuery& PostStatValuesAggregateRequest::_internal_stat_value_aggregate_queries(int index) const {
  return stat_value_aggregate_queries_.Get(index);
}
inline const ::clarifai::api::StatValueAggregateQuery& PostStatValuesAggregateRequest::stat_value_aggregate_queries(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostStatValuesAggregateRequest.stat_value_aggregate_queries)
  return _internal_stat_value_aggregate_queries(index);
}
inline ::clarifai::api::StatValueAggregateQuery* PostStatValuesAggregateRequest::_internal_add_stat_value_aggregate_queries() {
  return stat_value_aggregate_queries_.Add();
}
inline ::clarifai::api::StatValueAggregateQuery* PostStatValuesAggregateRequest::add_stat_value_aggregate_queries() {
  ::clarifai::api::StatValueAggregateQuery* _add = _internal_add_stat_value_aggregate_queries();
  // @@protoc_insertion_point(field_add:clarifai.api.PostStatValuesAggregateRequest.stat_value_aggregate_queries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateQuery >&
PostStatValuesAggregateRequest::stat_value_aggregate_queries() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PostStatValuesAggregateRequest.stat_value_aggregate_queries)
  return stat_value_aggregate_queries_;
}

// -------------------------------------------------------------------

// MultiStatValueAggregateResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiStatValueAggregateResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiStatValueAggregateResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiStatValueAggregateResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiStatValueAggregateResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiStatValueAggregateResponse.status)
  return _internal_status();
}
inline void MultiStatValueAggregateResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiStatValueAggregateResponse.status)
}
inline ::clarifai::api::status::Status* MultiStatValueAggregateResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiStatValueAggregateResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiStatValueAggregateResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiStatValueAggregateResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiStatValueAggregateResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiStatValueAggregateResponse.status)
  return _msg;
}
inline void MultiStatValueAggregateResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiStatValueAggregateResponse.status)
}

// repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
inline int MultiStatValueAggregateResponse::_internal_stat_value_aggregate_results_size() const {
  return stat_value_aggregate_results_.size();
}
inline int MultiStatValueAggregateResponse::stat_value_aggregate_results_size() const {
  return _internal_stat_value_aggregate_results_size();
}
inline ::clarifai::api::StatValueAggregateResult* MultiStatValueAggregateResponse::mutable_stat_value_aggregate_results(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiStatValueAggregateResponse.stat_value_aggregate_results)
  return stat_value_aggregate_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateResult >*
MultiStatValueAggregateResponse::mutable_stat_value_aggregate_results() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiStatValueAggregateResponse.stat_value_aggregate_results)
  return &stat_value_aggregate_results_;
}
inline const ::clarifai::api::StatValueAggregateResult& MultiStatValueAggregateResponse::_internal_stat_value_aggregate_results(int index) const {
  return stat_value_aggregate_results_.Get(index);
}
inline const ::clarifai::api::StatValueAggregateResult& MultiStatValueAggregateResponse::stat_value_aggregate_results(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiStatValueAggregateResponse.stat_value_aggregate_results)
  return _internal_stat_value_aggregate_results(index);
}
inline ::clarifai::api::StatValueAggregateResult* MultiStatValueAggregateResponse::_internal_add_stat_value_aggregate_results() {
  return stat_value_aggregate_results_.Add();
}
inline ::clarifai::api::StatValueAggregateResult* MultiStatValueAggregateResponse::add_stat_value_aggregate_results() {
  ::clarifai::api::StatValueAggregateResult* _add = _internal_add_stat_value_aggregate_results();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiStatValueAggregateResponse.stat_value_aggregate_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregateResult >&
MultiStatValueAggregateResponse::stat_value_aggregate_results() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiStatValueAggregateResponse.stat_value_aggregate_results)
  return stat_value_aggregate_results_;
}

// -------------------------------------------------------------------

// PostTrendingMetricsViewRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool PostTrendingMetricsViewRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool PostTrendingMetricsViewRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& PostTrendingMetricsViewRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& PostTrendingMetricsViewRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostTrendingMetricsViewRequest.user_app_id)
  return _internal_user_app_id();
}
inline void PostTrendingMetricsViewRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.PostTrendingMetricsViewRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* PostTrendingMetricsViewRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostTrendingMetricsViewRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostTrendingMetricsViewRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* PostTrendingMetricsViewRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* PostTrendingMetricsViewRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostTrendingMetricsViewRequest.user_app_id)
  return _msg;
}
inline void PostTrendingMetricsViewRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostTrendingMetricsViewRequest.user_app_id)
}

// string view_type = 2;
inline void PostTrendingMetricsViewRequest::clear_view_type() {
  view_type_.ClearToEmpty();
}
inline const std::string& PostTrendingMetricsViewRequest::view_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostTrendingMetricsViewRequest.view_type)
  return _internal_view_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostTrendingMetricsViewRequest::set_view_type(ArgT0&& arg0, ArgT... args) {
 
 view_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostTrendingMetricsViewRequest.view_type)
}
inline std::string* PostTrendingMetricsViewRequest::mutable_view_type() {
  std::string* _s = _internal_mutable_view_type();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostTrendingMetricsViewRequest.view_type)
  return _s;
}
inline const std::string& PostTrendingMetricsViewRequest::_internal_view_type() const {
  return view_type_.Get();
}
inline void PostTrendingMetricsViewRequest::_internal_set_view_type(const std::string& value) {
  
  view_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostTrendingMetricsViewRequest::_internal_mutable_view_type() {
  
  return view_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostTrendingMetricsViewRequest::release_view_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostTrendingMetricsViewRequest.view_type)
  return view_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostTrendingMetricsViewRequest::set_allocated_view_type(std::string* view_type) {
  if (view_type != nullptr) {
    
  } else {
    
  }
  view_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (view_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    view_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostTrendingMetricsViewRequest.view_type)
}

// string object_id = 3;
inline void PostTrendingMetricsViewRequest::clear_object_id() {
  object_id_.ClearToEmpty();
}
inline const std::string& PostTrendingMetricsViewRequest::object_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PostTrendingMetricsViewRequest.object_id)
  return _internal_object_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostTrendingMetricsViewRequest::set_object_id(ArgT0&& arg0, ArgT... args) {
 
 object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.PostTrendingMetricsViewRequest.object_id)
}
inline std::string* PostTrendingMetricsViewRequest::mutable_object_id() {
  std::string* _s = _internal_mutable_object_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.PostTrendingMetricsViewRequest.object_id)
  return _s;
}
inline const std::string& PostTrendingMetricsViewRequest::_internal_object_id() const {
  return object_id_.Get();
}
inline void PostTrendingMetricsViewRequest::_internal_set_object_id(const std::string& value) {
  
  object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostTrendingMetricsViewRequest::_internal_mutable_object_id() {
  
  return object_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostTrendingMetricsViewRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PostTrendingMetricsViewRequest.object_id)
  return object_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostTrendingMetricsViewRequest::set_allocated_object_id(std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (object_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PostTrendingMetricsViewRequest.object_id)
}

// -------------------------------------------------------------------

// ListTrendingMetricsViewsRequest

// .clarifai.api.UserAppIDSet user_app_id = 1;
inline bool ListTrendingMetricsViewsRequest::_internal_has_user_app_id() const {
  return this != internal_default_instance() && user_app_id_ != nullptr;
}
inline bool ListTrendingMetricsViewsRequest::has_user_app_id() const {
  return _internal_has_user_app_id();
}
inline const ::clarifai::api::UserAppIDSet& ListTrendingMetricsViewsRequest::_internal_user_app_id() const {
  const ::clarifai::api::UserAppIDSet* p = user_app_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::UserAppIDSet&>(
      ::clarifai::api::_UserAppIDSet_default_instance_);
}
inline const ::clarifai::api::UserAppIDSet& ListTrendingMetricsViewsRequest::user_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTrendingMetricsViewsRequest.user_app_id)
  return _internal_user_app_id();
}
inline void ListTrendingMetricsViewsRequest::unsafe_arena_set_allocated_user_app_id(
    ::clarifai::api::UserAppIDSet* user_app_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  user_app_id_ = user_app_id;
  if (user_app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.ListTrendingMetricsViewsRequest.user_app_id)
}
inline ::clarifai::api::UserAppIDSet* ListTrendingMetricsViewsRequest::release_user_app_id() {
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListTrendingMetricsViewsRequest::unsafe_arena_release_user_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListTrendingMetricsViewsRequest.user_app_id)
  
  ::clarifai::api::UserAppIDSet* temp = user_app_id_;
  user_app_id_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserAppIDSet* ListTrendingMetricsViewsRequest::_internal_mutable_user_app_id() {
  
  if (user_app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserAppIDSet>(GetArenaForAllocation());
    user_app_id_ = p;
  }
  return user_app_id_;
}
inline ::clarifai::api::UserAppIDSet* ListTrendingMetricsViewsRequest::mutable_user_app_id() {
  ::clarifai::api::UserAppIDSet* _msg = _internal_mutable_user_app_id();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListTrendingMetricsViewsRequest.user_app_id)
  return _msg;
}
inline void ListTrendingMetricsViewsRequest::set_allocated_user_app_id(::clarifai::api::UserAppIDSet* user_app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id_);
  }
  if (user_app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_app_id));
    if (message_arena != submessage_arena) {
      user_app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_app_id, submessage_arena);
    }
    
  } else {
    
  }
  user_app_id_ = user_app_id;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListTrendingMetricsViewsRequest.user_app_id)
}

// string view_type = 2;
inline void ListTrendingMetricsViewsRequest::clear_view_type() {
  view_type_.ClearToEmpty();
}
inline const std::string& ListTrendingMetricsViewsRequest::view_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTrendingMetricsViewsRequest.view_type)
  return _internal_view_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTrendingMetricsViewsRequest::set_view_type(ArgT0&& arg0, ArgT... args) {
 
 view_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clarifai.api.ListTrendingMetricsViewsRequest.view_type)
}
inline std::string* ListTrendingMetricsViewsRequest::mutable_view_type() {
  std::string* _s = _internal_mutable_view_type();
  // @@protoc_insertion_point(field_mutable:clarifai.api.ListTrendingMetricsViewsRequest.view_type)
  return _s;
}
inline const std::string& ListTrendingMetricsViewsRequest::_internal_view_type() const {
  return view_type_.Get();
}
inline void ListTrendingMetricsViewsRequest::_internal_set_view_type(const std::string& value) {
  
  view_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListTrendingMetricsViewsRequest::_internal_mutable_view_type() {
  
  return view_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListTrendingMetricsViewsRequest::release_view_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.ListTrendingMetricsViewsRequest.view_type)
  return view_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListTrendingMetricsViewsRequest::set_allocated_view_type(std::string* view_type) {
  if (view_type != nullptr) {
    
  } else {
    
  }
  view_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (view_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    view_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ListTrendingMetricsViewsRequest.view_type)
}

// uint32 page = 3;
inline void ListTrendingMetricsViewsRequest::clear_page() {
  page_ = 0u;
}
inline uint32_t ListTrendingMetricsViewsRequest::_internal_page() const {
  return page_;
}
inline uint32_t ListTrendingMetricsViewsRequest::page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTrendingMetricsViewsRequest.page)
  return _internal_page();
}
inline void ListTrendingMetricsViewsRequest::_internal_set_page(uint32_t value) {
  
  page_ = value;
}
inline void ListTrendingMetricsViewsRequest::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListTrendingMetricsViewsRequest.page)
}

// uint32 per_page = 4;
inline void ListTrendingMetricsViewsRequest::clear_per_page() {
  per_page_ = 0u;
}
inline uint32_t ListTrendingMetricsViewsRequest::_internal_per_page() const {
  return per_page_;
}
inline uint32_t ListTrendingMetricsViewsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ListTrendingMetricsViewsRequest.per_page)
  return _internal_per_page();
}
inline void ListTrendingMetricsViewsRequest::_internal_set_per_page(uint32_t value) {
  
  per_page_ = value;
}
inline void ListTrendingMetricsViewsRequest::set_per_page(uint32_t value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ListTrendingMetricsViewsRequest.per_page)
}

// -------------------------------------------------------------------

// MultiTrendingMetricsViewResponse

// .clarifai.api.status.Status status = 1;
inline bool MultiTrendingMetricsViewResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiTrendingMetricsViewResponse::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& MultiTrendingMetricsViewResponse::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::clarifai::api::status::Status&>(
      ::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& MultiTrendingMetricsViewResponse::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiTrendingMetricsViewResponse.status)
  return _internal_status();
}
inline void MultiTrendingMetricsViewResponse::unsafe_arena_set_allocated_status(
    ::clarifai::api::status::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clarifai.api.MultiTrendingMetricsViewResponse.status)
}
inline ::clarifai::api::status::Status* MultiTrendingMetricsViewResponse::release_status() {
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clarifai::api::status::Status* MultiTrendingMetricsViewResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.MultiTrendingMetricsViewResponse.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* MultiTrendingMetricsViewResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* MultiTrendingMetricsViewResponse::mutable_status() {
  ::clarifai::api::status::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiTrendingMetricsViewResponse.status)
  return _msg;
}
inline void MultiTrendingMetricsViewResponse::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.MultiTrendingMetricsViewResponse.status)
}

// repeated .clarifai.api.TrendingMetric metrics = 2;
inline int MultiTrendingMetricsViewResponse::_internal_metrics_size() const {
  return metrics_.size();
}
inline int MultiTrendingMetricsViewResponse::metrics_size() const {
  return _internal_metrics_size();
}
inline ::clarifai::api::TrendingMetric* MultiTrendingMetricsViewResponse::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MultiTrendingMetricsViewResponse.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrendingMetric >*
MultiTrendingMetricsViewResponse::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MultiTrendingMetricsViewResponse.metrics)
  return &metrics_;
}
inline const ::clarifai::api::TrendingMetric& MultiTrendingMetricsViewResponse::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::clarifai::api::TrendingMetric& MultiTrendingMetricsViewResponse::metrics(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MultiTrendingMetricsViewResponse.metrics)
  return _internal_metrics(index);
}
inline ::clarifai::api::TrendingMetric* MultiTrendingMetricsViewResponse::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::clarifai::api::TrendingMetric* MultiTrendingMetricsViewResponse::add_metrics() {
  ::clarifai::api::TrendingMetric* _add = _internal_add_metrics();
  // @@protoc_insertion_point(field_add:clarifai.api.MultiTrendingMetricsViewResponse.metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrendingMetric >&
MultiTrendingMetricsViewResponse::metrics() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MultiTrendingMetricsViewResponse.metrics)
  return metrics_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace clarifai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::clarifai::api::OrganizationInvitationStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::OrganizationInvitationStatus>() {
  return ::clarifai::api::OrganizationInvitationStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fapi_2fservice_2eproto
