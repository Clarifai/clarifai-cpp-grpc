// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/clarifai/api/service.proto
#ifndef GRPC_proto_2fclarifai_2fapi_2fservice_2eproto__INCLUDED
#define GRPC_proto_2fclarifai_2fapi_2fservice_2eproto__INCLUDED

#include "proto/clarifai/api/service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace clarifai {
namespace api {

//
// Note: this is based on the google api format defined here. Please
// read this before contributing to this file and other *.proto files
// for the API.
// https://cloud.google.com/service-management/reference/rpc/google.api#google.api.HttpRule
//
class V2 final {
 public:
  static constexpr char const* service_full_name() {
    return "clarifai.api.V2";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // List concept relations between concepts in the platform.
    // MUST be above ListConcepts so that if concept_id is empty this will still match
    // /concepts/relations to list all the concept relations in the app.
    virtual ::grpc::Status ListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::clarifai::api::MultiConceptRelationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptRelationResponse>> AsyncListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptRelationResponse>>(AsyncListConceptRelationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptRelationResponse>> PrepareAsyncListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptRelationResponse>>(PrepareAsyncListConceptRelationsRaw(context, request, cq));
    }
    // Post concept relations to create relations between concepts in the platform.
    virtual ::grpc::Status PostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::clarifai::api::MultiConceptRelationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptRelationResponse>> AsyncPostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptRelationResponse>>(AsyncPostConceptRelationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptRelationResponse>> PrepareAsyncPostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptRelationResponse>>(PrepareAsyncPostConceptRelationsRaw(context, request, cq));
    }
    // Post concept relations to create relations between concepts in the platform.
    virtual ::grpc::Status DeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteConceptRelationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteConceptRelationsRaw(context, request, cq));
    }
    // List all the concepts with their positive and negative counts
    virtual ::grpc::Status GetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::clarifai::api::MultiConceptCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptCountResponse>> AsyncGetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptCountResponse>>(AsyncGetConceptCountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptCountResponse>> PrepareAsyncGetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptCountResponse>>(PrepareAsyncGetConceptCountsRaw(context, request, cq));
    }
    // Get a specific concept from an app.
    virtual ::grpc::Status GetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::clarifai::api::SingleConceptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleConceptResponse>> AsyncGetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleConceptResponse>>(AsyncGetConceptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleConceptResponse>> PrepareAsyncGetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleConceptResponse>>(PrepareAsyncGetConceptRaw(context, request, cq));
    }
    // List all the concepts.
    virtual ::grpc::Status ListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::clarifai::api::MultiConceptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>> AsyncListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>>(AsyncListConceptsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>> PrepareAsyncListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>>(PrepareAsyncListConceptsRaw(context, request, cq));
    }
    // Search over the concepts to find one or more you're looking for.
    // This leverage the "body" parameter because we also have page and
    // per_page as url query param variables in this request.
    virtual ::grpc::Status PostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::clarifai::api::MultiConceptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>> AsyncPostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>>(AsyncPostConceptsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>> PrepareAsyncPostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>>(PrepareAsyncPostConceptsSearchesRaw(context, request, cq));
    }
    // Add a concept to an app.
    virtual ::grpc::Status PostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::clarifai::api::MultiConceptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>> AsyncPostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>>(AsyncPostConceptsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>> PrepareAsyncPostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>>(PrepareAsyncPostConceptsRaw(context, request, cq));
    }
    // Patch one or more concepts.
    virtual ::grpc::Status PatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::clarifai::api::MultiConceptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>> AsyncPatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>>(AsyncPatchConceptsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>> PrepareAsyncPatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>>(PrepareAsyncPatchConceptsRaw(context, request, cq));
    }
    // Get a specific concept from an app.
    virtual ::grpc::Status GetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::clarifai::api::SingleConceptLanguageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleConceptLanguageResponse>> AsyncGetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleConceptLanguageResponse>>(AsyncGetConceptLanguageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleConceptLanguageResponse>> PrepareAsyncGetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleConceptLanguageResponse>>(PrepareAsyncGetConceptLanguageRaw(context, request, cq));
    }
    // List the concept in all the translated languages.
    virtual ::grpc::Status ListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::clarifai::api::MultiConceptLanguageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>> AsyncListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>>(AsyncListConceptLanguagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>> PrepareAsyncListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>>(PrepareAsyncListConceptLanguagesRaw(context, request, cq));
    }
    // Add a new translation for this concept.
    virtual ::grpc::Status PostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::clarifai::api::MultiConceptLanguageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>> AsyncPostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>>(AsyncPostConceptLanguagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>> PrepareAsyncPostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>>(PrepareAsyncPostConceptLanguagesRaw(context, request, cq));
    }
    // Patch the name for a given language names by passing in a list of concepts with the new names
    // for the languages.
    virtual ::grpc::Status PatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::clarifai::api::MultiConceptLanguageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>> AsyncPatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>>(AsyncPatchConceptLanguagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>> PrepareAsyncPatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>>(PrepareAsyncPatchConceptLanguagesRaw(context, request, cq));
    }
    // List all domain graphs.
    virtual ::grpc::Status ListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::clarifai::api::MultiKnowledgeGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKnowledgeGraphResponse>> AsyncListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKnowledgeGraphResponse>>(AsyncListKnowledgeGraphsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKnowledgeGraphResponse>> PrepareAsyncListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKnowledgeGraphResponse>>(PrepareAsyncListKnowledgeGraphsRaw(context, request, cq));
    }
    // Post domain graphs.
    virtual ::grpc::Status PostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::clarifai::api::MultiKnowledgeGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKnowledgeGraphResponse>> AsyncPostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKnowledgeGraphResponse>>(AsyncPostKnowledgeGraphsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKnowledgeGraphResponse>> PrepareAsyncPostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKnowledgeGraphResponse>>(PrepareAsyncPostKnowledgeGraphsRaw(context, request, cq));
    }
    // Start concept mapping jobs.
    virtual ::grpc::Status PostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::clarifai::api::MultiConceptMappingJobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptMappingJobResponse>> AsyncPostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptMappingJobResponse>>(AsyncPostConceptMappingJobsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptMappingJobResponse>> PrepareAsyncPostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptMappingJobResponse>>(PrepareAsyncPostConceptMappingJobsRaw(context, request, cq));
    }
    // Get a specific annotation from an app.
    virtual ::grpc::Status GetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::clarifai::api::SingleAnnotationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAnnotationResponse>> AsyncGetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAnnotationResponse>>(AsyncGetAnnotationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAnnotationResponse>> PrepareAsyncGetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAnnotationResponse>>(PrepareAsyncGetAnnotationRaw(context, request, cq));
    }
    // List all the annotation.
    virtual ::grpc::Status ListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::clarifai::api::MultiAnnotationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>> AsyncListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>>(AsyncListAnnotationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>> PrepareAsyncListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>>(PrepareAsyncListAnnotationsRaw(context, request, cq));
    }
    // Post annotations.
    virtual ::grpc::Status PostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::clarifai::api::MultiAnnotationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>> AsyncPostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>>(AsyncPostAnnotationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>> PrepareAsyncPostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>>(PrepareAsyncPostAnnotationsRaw(context, request, cq));
    }
    // Patch one or more annotations.
    virtual ::grpc::Status PatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::clarifai::api::MultiAnnotationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>> AsyncPatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>>(AsyncPatchAnnotationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>> PrepareAsyncPatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>>(PrepareAsyncPatchAnnotationsRaw(context, request, cq));
    }
    // Patch annotations status by worker id and task id.
    virtual ::grpc::Status PatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::clarifai::api::PatchAnnotationsStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PatchAnnotationsStatusResponse>> AsyncPatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PatchAnnotationsStatusResponse>>(AsyncPatchAnnotationsStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PatchAnnotationsStatusResponse>> PrepareAsyncPatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PatchAnnotationsStatusResponse>>(PrepareAsyncPatchAnnotationsStatusRaw(context, request, cq));
    }
    // Delete a single annotation.
    virtual ::grpc::Status DeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteAnnotationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteAnnotationRaw(context, request, cq));
    }
    // Delete multiple annotations in one request.
    virtual ::grpc::Status DeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteAnnotationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteAnnotationsRaw(context, request, cq));
    }
    // Patch saved annotations searches by ids.
    virtual ::grpc::Status PatchAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> AsyncPatchAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(AsyncPatchAnnotationsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPatchAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPatchAnnotationsSearchesRaw(context, request, cq));
    }
    // Execute a search over annotations
    virtual ::grpc::Status PostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> AsyncPostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(AsyncPostAnnotationsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPostAnnotationsSearchesRaw(context, request, cq));
    }
    // Get input count per status.
    virtual ::grpc::Status GetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::clarifai::api::SingleInputCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleInputCountResponse>> AsyncGetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleInputCountResponse>>(AsyncGetInputCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleInputCountResponse>> PrepareAsyncGetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleInputCountResponse>>(PrepareAsyncGetInputCountRaw(context, request, cq));
    }
    // Streams all the inputs starting from oldest assets.
    virtual ::grpc::Status StreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::clarifai::api::MultiInputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>> AsyncStreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>>(AsyncStreamInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>> PrepareAsyncStreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>>(PrepareAsyncStreamInputsRaw(context, request, cq));
    }
    // Get a specific input from an app.
    virtual ::grpc::Status GetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::clarifai::api::MultiInputAnnotationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputAnnotationResponse>> AsyncGetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputAnnotationResponse>>(AsyncGetInputSamplesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputAnnotationResponse>> PrepareAsyncGetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputAnnotationResponse>>(PrepareAsyncGetInputSamplesRaw(context, request, cq));
    }
    // Get a specific input from an app.
    virtual ::grpc::Status GetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::clarifai::api::SingleInputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleInputResponse>> AsyncGetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleInputResponse>>(AsyncGetInputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleInputResponse>> PrepareAsyncGetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleInputResponse>>(PrepareAsyncGetInputRaw(context, request, cq));
    }
    // List all the inputs.
    virtual ::grpc::Status ListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::clarifai::api::MultiInputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>> AsyncListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>>(AsyncListInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>> PrepareAsyncListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>>(PrepareAsyncListInputsRaw(context, request, cq));
    }
    // Add an input (or set of inputs) to an app.
    // This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
    // it is asynchronous.
    virtual ::grpc::Status PostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::clarifai::api::MultiInputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>> AsyncPostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>>(AsyncPostInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>> PrepareAsyncPostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>>(PrepareAsyncPostInputsRaw(context, request, cq));
    }
    // Patch one or more inputs.
    virtual ::grpc::Status PatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::clarifai::api::MultiInputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>> AsyncPatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>>(AsyncPatchInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>> PrepareAsyncPatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>>(PrepareAsyncPatchInputsRaw(context, request, cq));
    }
    // Delete a single input asynchronously.
    virtual ::grpc::Status DeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteInputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteInputRaw(context, request, cq));
    }
    // Delete multiple inputs in one request.
    // This call is asynchronous.
    virtual ::grpc::Status DeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteInputsRaw(context, request, cq));
    }
    // Patch saved inputs searches by ids.
    virtual ::grpc::Status PatchInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> AsyncPatchInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(AsyncPatchInputsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPatchInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPatchInputsSearchesRaw(context, request, cq));
    }
    // Execute a search over inputs
    virtual ::grpc::Status PostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> AsyncPostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(AsyncPostInputsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPostInputsSearchesRaw(context, request, cq));
    }
    // Get predicted outputs from the model.
    virtual ::grpc::Status PostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::clarifai::api::MultiOutputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiOutputResponse>> AsyncPostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiOutputResponse>>(AsyncPostModelOutputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiOutputResponse>> PrepareAsyncPostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiOutputResponse>>(PrepareAsyncPostModelOutputsRaw(context, request, cq));
    }
    // List all the datasets.
    virtual ::grpc::Status ListDatasets(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest& request, ::clarifai::api::MultiDatasetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>> AsyncListDatasets(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>>(AsyncListDatasetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>> PrepareAsyncListDatasets(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>>(PrepareAsyncListDatasetsRaw(context, request, cq));
    }
    // Get a specific dataset.
    virtual ::grpc::Status GetDataset(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest& request, ::clarifai::api::SingleDatasetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetResponse>> AsyncGetDataset(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetResponse>>(AsyncGetDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetResponse>> PrepareAsyncGetDataset(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetResponse>>(PrepareAsyncGetDatasetRaw(context, request, cq));
    }
    // Add datasets to an app.
    // The process is atomic, i.e. either all or no datasets are added.
    // If there is an error for one dataset,
    // the process will stop, revert the transaction and return the error.
    virtual ::grpc::Status PostDatasets(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest& request, ::clarifai::api::MultiDatasetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>> AsyncPostDatasets(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>>(AsyncPostDatasetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>> PrepareAsyncPostDatasets(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>>(PrepareAsyncPostDatasetsRaw(context, request, cq));
    }
    // Patch one or more datasets.
    // The process is atomic, i.e. either all or no datasets are patched.
    // If there is an error for one dataset,
    // the process will stop, revert the transaction and return the error.
    virtual ::grpc::Status PatchDatasets(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest& request, ::clarifai::api::MultiDatasetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>> AsyncPatchDatasets(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>>(AsyncPatchDatasetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>> PrepareAsyncPatchDatasets(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>>(PrepareAsyncPatchDatasetsRaw(context, request, cq));
    }
    // Delete one or more datasets in a single request.
    virtual ::grpc::Status DeleteDatasets(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteDatasets(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteDatasetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteDatasets(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteDatasetsRaw(context, request, cq));
    }
    // List all the dataset inputs in a dataset.
    virtual ::grpc::Status ListDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest& request, ::clarifai::api::MultiDatasetInputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetInputResponse>> AsyncListDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetInputResponse>>(AsyncListDatasetInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetInputResponse>> PrepareAsyncListDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetInputResponse>>(PrepareAsyncListDatasetInputsRaw(context, request, cq));
    }
    // Get a specific dataset input.
    virtual ::grpc::Status GetDatasetInput(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest& request, ::clarifai::api::SingleDatasetInputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetInputResponse>> AsyncGetDatasetInput(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetInputResponse>>(AsyncGetDatasetInputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetInputResponse>> PrepareAsyncGetDatasetInput(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetInputResponse>>(PrepareAsyncGetDatasetInputRaw(context, request, cq));
    }
    // Add dataset inputs to a dataset.
    // The process is not atomic, i.e. if there are errors with some dataset
    // inputs, others might still be added. The response reports
    //   - SUCCESS if all dataset inputs were added,
    //   - MIXED_STATUS if only some dataset inputs were added, and
    //   - FAILURE if no dataset inputs were added.
    // Each individual dataset input in the response has the status set to
    // indicate if it was successful or if there was an error.
    virtual ::grpc::Status PostDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest& request, ::clarifai::api::MultiDatasetInputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetInputResponse>> AsyncPostDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetInputResponse>>(AsyncPostDatasetInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetInputResponse>> PrepareAsyncPostDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetInputResponse>>(PrepareAsyncPostDatasetInputsRaw(context, request, cq));
    }
    // Delete one or more dataset inputs in a single request.
    virtual ::grpc::Status DeleteDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteDatasetInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteDatasetInputsRaw(context, request, cq));
    }
    // List all the dataset versions.
    virtual ::grpc::Status ListDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest& request, ::clarifai::api::MultiDatasetVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>> AsyncListDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>>(AsyncListDatasetVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>> PrepareAsyncListDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>>(PrepareAsyncListDatasetVersionsRaw(context, request, cq));
    }
    // Get a specific dataset version.
    virtual ::grpc::Status GetDatasetVersion(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest& request, ::clarifai::api::SingleDatasetVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetVersionResponse>> AsyncGetDatasetVersion(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetVersionResponse>>(AsyncGetDatasetVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetVersionResponse>> PrepareAsyncGetDatasetVersion(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetVersionResponse>>(PrepareAsyncGetDatasetVersionRaw(context, request, cq));
    }
    virtual ::grpc::Status ListDatasetVersionMetricsGroups(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest& request, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>> AsyncListDatasetVersionMetricsGroups(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>>(AsyncListDatasetVersionMetricsGroupsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>> PrepareAsyncListDatasetVersionMetricsGroups(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>>(PrepareAsyncListDatasetVersionMetricsGroupsRaw(context, request, cq));
    }
    // Add dataset versions to a dataset.
    virtual ::grpc::Status PostDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest& request, ::clarifai::api::MultiDatasetVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>> AsyncPostDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>>(AsyncPostDatasetVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>> PrepareAsyncPostDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>>(PrepareAsyncPostDatasetVersionsRaw(context, request, cq));
    }
    // Patch one or more dataset versions.
    virtual ::grpc::Status PatchDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest& request, ::clarifai::api::MultiDatasetVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>> AsyncPatchDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>>(AsyncPatchDatasetVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>> PrepareAsyncPatchDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>>(PrepareAsyncPatchDatasetVersionsRaw(context, request, cq));
    }
    // Delete one or more dataset versions in a single request.
    virtual ::grpc::Status DeleteDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteDatasetVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteDatasetVersionsRaw(context, request, cq));
    }
    // //////////////////////////////////////
    // Models
    // //////////////////////////////////////
    //
    // Get a specific model type.
    virtual ::grpc::Status GetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::clarifai::api::SingleModelTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelTypeResponse>> AsyncGetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelTypeResponse>>(AsyncGetModelTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelTypeResponse>> PrepareAsyncGetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelTypeResponse>>(PrepareAsyncGetModelTypeRaw(context, request, cq));
    }
    // List all the supported open source licenses in the platform.
    virtual ::grpc::Status ListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::clarifai::api::ListOpenSourceLicensesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::ListOpenSourceLicensesResponse>> AsyncListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::ListOpenSourceLicensesResponse>>(AsyncListOpenSourceLicensesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::ListOpenSourceLicensesResponse>> PrepareAsyncListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::ListOpenSourceLicensesResponse>>(PrepareAsyncListOpenSourceLicensesRaw(context, request, cq));
    }
    // List all the model types available in the platform.
    // This MUST be above ListModels so that the /models/types endpoint takes precedence.
    virtual ::grpc::Status ListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::clarifai::api::MultiModelTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelTypeResponse>> AsyncListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelTypeResponse>>(AsyncListModelTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelTypeResponse>> PrepareAsyncListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelTypeResponse>>(PrepareAsyncListModelTypesRaw(context, request, cq));
    }
    // Get a specific model from an app.
    virtual ::grpc::Status GetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::clarifai::api::SingleModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>> AsyncGetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>>(AsyncGetModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>> PrepareAsyncGetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>>(PrepareAsyncGetModelRaw(context, request, cq));
    }
    // Get a the output info for a given model_id or model_id/version_id
    // combo.
    virtual ::grpc::Status GetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::clarifai::api::SingleModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>> AsyncGetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>>(AsyncGetModelOutputInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>> PrepareAsyncGetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>>(PrepareAsyncGetModelOutputInfoRaw(context, request, cq));
    }
    // List all the models.
    virtual ::grpc::Status ListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::clarifai::api::MultiModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>> AsyncListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>>(AsyncListModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>> PrepareAsyncListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>>(PrepareAsyncListModelsRaw(context, request, cq));
    }
    // Search over the models to find one or more you're looking for.
    // This leverage the "body" parameter because we also have page and
    // per_page as url query param variables in this request.
    virtual ::grpc::Status PostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::clarifai::api::MultiModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>> AsyncPostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>>(AsyncPostModelsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>> PrepareAsyncPostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>>(PrepareAsyncPostModelsSearchesRaw(context, request, cq));
    }
    // Add a models to an app.
    virtual ::grpc::Status PostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::clarifai::api::SingleModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>> AsyncPostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>>(AsyncPostModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>> PrepareAsyncPostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>>(PrepareAsyncPostModelsRaw(context, request, cq));
    }
    // Patch one or more models.
    virtual ::grpc::Status PatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::clarifai::api::MultiModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>> AsyncPatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>>(AsyncPatchModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>> PrepareAsyncPatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>>(PrepareAsyncPatchModelsRaw(context, request, cq));
    }
    // Patch one or more models.
    virtual ::grpc::Status PatchModelIds(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest& request, ::clarifai::api::MultiModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>> AsyncPatchModelIds(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>>(AsyncPatchModelIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>> PrepareAsyncPatchModelIds(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>>(PrepareAsyncPatchModelIdsRaw(context, request, cq));
    }
    // Delete a single model.
    virtual ::grpc::Status DeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteModelRaw(context, request, cq));
    }
    // Delete multiple models in one request.
    virtual ::grpc::Status DeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteModelsRaw(context, request, cq));
    }
    // Update model toolkits tags
    virtual ::grpc::Status PatchModelToolkits(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest& request, ::clarifai::api::MultiModelToolkitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelToolkitResponse>> AsyncPatchModelToolkits(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelToolkitResponse>>(AsyncPatchModelToolkitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelToolkitResponse>> PrepareAsyncPatchModelToolkits(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelToolkitResponse>>(PrepareAsyncPatchModelToolkitsRaw(context, request, cq));
    }
    // Update model use_cases tags
    virtual ::grpc::Status PatchModelUseCases(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest& request, ::clarifai::api::MultiModelUseCaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelUseCaseResponse>> AsyncPatchModelUseCases(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelUseCaseResponse>>(AsyncPatchModelUseCasesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelUseCaseResponse>> PrepareAsyncPatchModelUseCases(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelUseCaseResponse>>(PrepareAsyncPatchModelUseCasesRaw(context, request, cq));
    }
    // Update model languages tags
    virtual ::grpc::Status PatchModelLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest& request, ::clarifai::api::MultiModelLanguageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelLanguageResponse>> AsyncPatchModelLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelLanguageResponse>>(AsyncPatchModelLanguagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelLanguageResponse>> PrepareAsyncPatchModelLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelLanguageResponse>>(PrepareAsyncPatchModelLanguagesRaw(context, request, cq));
    }
    // List all the inputs.
    virtual ::grpc::Status ListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::clarifai::api::MultiInputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>> AsyncListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>>(AsyncListModelInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>> PrepareAsyncListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>>(PrepareAsyncListModelInputsRaw(context, request, cq));
    }
    // Get a specific model from an app.
    virtual ::grpc::Status GetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::clarifai::api::SingleModelVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>> AsyncGetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>>(AsyncGetModelVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>> PrepareAsyncGetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>>(PrepareAsyncGetModelVersionRaw(context, request, cq));
    }
    // List all the models.
    virtual ::grpc::Status ListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::clarifai::api::MultiModelVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionResponse>> AsyncListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionResponse>>(AsyncListModelVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionResponse>> PrepareAsyncListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionResponse>>(PrepareAsyncListModelVersionsRaw(context, request, cq));
    }
    virtual ::grpc::Status PostWorkflowVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncPostWorkflowVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncPostWorkflowVersionsUnPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncPostWorkflowVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncPostWorkflowVersionsUnPublishRaw(context, request, cq));
    }
    virtual ::grpc::Status PostWorkflowVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncPostWorkflowVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncPostWorkflowVersionsPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncPostWorkflowVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncPostWorkflowVersionsPublishRaw(context, request, cq));
    }
    // PostModelVersionsPublish
    virtual ::grpc::Status PostModelVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncPostModelVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncPostModelVersionsPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncPostModelVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncPostModelVersionsPublishRaw(context, request, cq));
    }
    // PostModelVersionsUnPublish
    virtual ::grpc::Status PostModelVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncPostModelVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncPostModelVersionsUnPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncPostModelVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncPostModelVersionsUnPublishRaw(context, request, cq));
    }
    // NOTE: inconsistency: do we want this to return a SingleModelResponse?
    //
    // Create a new model version to trigger training of the model.
    virtual ::grpc::Status PostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::clarifai::api::SingleModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>> AsyncPostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>>(AsyncPostModelVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>> PrepareAsyncPostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>>(PrepareAsyncPostModelVersionsRaw(context, request, cq));
    }
    // PatchModelVersions
    virtual ::grpc::Status PatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::clarifai::api::MultiModelVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionResponse>> AsyncPatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionResponse>>(AsyncPatchModelVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionResponse>> PrepareAsyncPatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionResponse>>(PrepareAsyncPatchModelVersionsRaw(context, request, cq));
    }
    // Delete a single model.
    virtual ::grpc::Status DeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteModelVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteModelVersionRaw(context, request, cq));
    }
    // Get the evaluation metrics for a model version.
    virtual ::grpc::Status GetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::clarifai::api::SingleModelVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>> AsyncGetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>>(AsyncGetModelVersionMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>> PrepareAsyncGetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>>(PrepareAsyncGetModelVersionMetricsRaw(context, request, cq));
    }
    // Run the evaluation metrics for a model version.
    virtual ::grpc::Status PostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::clarifai::api::SingleModelVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>> AsyncPostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>>(AsyncPostModelVersionMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>> PrepareAsyncPostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>>(PrepareAsyncPostModelVersionMetricsRaw(context, request, cq));
    }
    // Lists model references tied to a particular model id.
    virtual ::grpc::Status ListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::clarifai::api::MultiModelReferenceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelReferenceResponse>> AsyncListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelReferenceResponse>>(AsyncListModelReferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelReferenceResponse>> PrepareAsyncListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelReferenceResponse>>(PrepareAsyncListModelReferencesRaw(context, request, cq));
    }
    // GetModelVersionInputExample
    virtual ::grpc::Status GetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::clarifai::api::SingleModelVersionInputExampleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionInputExampleResponse>> AsyncGetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionInputExampleResponse>>(AsyncGetModelVersionInputExampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionInputExampleResponse>> PrepareAsyncGetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionInputExampleResponse>>(PrepareAsyncGetModelVersionInputExampleRaw(context, request, cq));
    }
    // ListModelVersionInputExamples
    virtual ::grpc::Status ListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::clarifai::api::MultiModelVersionInputExampleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionInputExampleResponse>> AsyncListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionInputExampleResponse>>(AsyncListModelVersionInputExamplesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionInputExampleResponse>> PrepareAsyncListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionInputExampleResponse>>(PrepareAsyncListModelVersionInputExamplesRaw(context, request, cq));
    }
    // //////////////////////////////////////
    //
    // //////////////////////////////////////
    // Workflows
    // //////////////////////////////////////
    //
    // Get a specific workflow from an app.
    virtual ::grpc::Status GetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::clarifai::api::SingleWorkflowResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleWorkflowResponse>> AsyncGetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleWorkflowResponse>>(AsyncGetWorkflowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleWorkflowResponse>> PrepareAsyncGetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleWorkflowResponse>>(PrepareAsyncGetWorkflowRaw(context, request, cq));
    }
    // List all the workflows.
    virtual ::grpc::Status ListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::clarifai::api::MultiWorkflowResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>> AsyncListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>>(AsyncListWorkflowsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>> PrepareAsyncListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>>(PrepareAsyncListWorkflowsRaw(context, request, cq));
    }
    // Add a workflow to an app.
    virtual ::grpc::Status PostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::clarifai::api::MultiWorkflowResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>> AsyncPostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>>(AsyncPostWorkflowsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>> PrepareAsyncPostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>>(PrepareAsyncPostWorkflowsRaw(context, request, cq));
    }
    // Patch one or more workflows.
    virtual ::grpc::Status PatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::clarifai::api::MultiWorkflowResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>> AsyncPatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>>(AsyncPatchWorkflowsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>> PrepareAsyncPatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>>(PrepareAsyncPatchWorkflowsRaw(context, request, cq));
    }
    // Delete a single workflow.
    virtual ::grpc::Status DeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteWorkflowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteWorkflowRaw(context, request, cq));
    }
    // Delete multiple workflows in one request.
    virtual ::grpc::Status DeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteWorkflowsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteWorkflowsRaw(context, request, cq));
    }
    // Predict using a workflow.
    virtual ::grpc::Status PostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::clarifai::api::PostWorkflowResultsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PostWorkflowResultsResponse>> AsyncPostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PostWorkflowResultsResponse>>(AsyncPostWorkflowResultsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PostWorkflowResultsResponse>> PrepareAsyncPostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PostWorkflowResultsResponse>>(PrepareAsyncPostWorkflowResultsRaw(context, request, cq));
    }
    // Compare embeddings distances using a workflow
    virtual ::grpc::Status PostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PostWorkflowResultsSimilarityResponse>> AsyncPostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PostWorkflowResultsSimilarityResponse>>(AsyncPostWorkflowResultsSimilarityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PostWorkflowResultsSimilarityResponse>> PrepareAsyncPostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PostWorkflowResultsSimilarityResponse>>(PrepareAsyncPostWorkflowResultsSimilarityRaw(context, request, cq));
    }
    // List workflow versions.
    virtual ::grpc::Status ListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::clarifai::api::MultiWorkflowVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowVersionResponse>> AsyncListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowVersionResponse>>(AsyncListWorkflowVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowVersionResponse>> PrepareAsyncListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowVersionResponse>>(PrepareAsyncListWorkflowVersionsRaw(context, request, cq));
    }
    // Get single workflow version.
    virtual ::grpc::Status GetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::clarifai::api::SingleWorkflowVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleWorkflowVersionResponse>> AsyncGetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleWorkflowVersionResponse>>(AsyncGetWorkflowVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleWorkflowVersionResponse>> PrepareAsyncGetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleWorkflowVersionResponse>>(PrepareAsyncGetWorkflowVersionRaw(context, request, cq));
    }
    // Delete workflow versions.
    virtual ::grpc::Status DeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteWorkflowVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteWorkflowVersionsRaw(context, request, cq));
    }
    // Patch workflow versions.
    virtual ::grpc::Status PatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::clarifai::api::MultiWorkflowVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowVersionResponse>> AsyncPatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowVersionResponse>>(AsyncPatchWorkflowVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowVersionResponse>> PrepareAsyncPatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowVersionResponse>>(PrepareAsyncPatchWorkflowVersionsRaw(context, request, cq));
    }
    // Get a specific key from an app.
    virtual ::grpc::Status GetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::clarifai::api::SingleKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleKeyResponse>> AsyncGetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleKeyResponse>>(AsyncGetKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleKeyResponse>> PrepareAsyncGetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleKeyResponse>>(PrepareAsyncGetKeyRaw(context, request, cq));
    }
    // List all the keys.
    virtual ::grpc::Status ListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::clarifai::api::MultiKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>> AsyncListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>>(AsyncListKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>> PrepareAsyncListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>>(PrepareAsyncListKeysRaw(context, request, cq));
    }
    // List keys by app_id
    virtual ::grpc::Status ListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::clarifai::api::MultiKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>> AsyncListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>>(AsyncListAppKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>> PrepareAsyncListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>>(PrepareAsyncListAppKeysRaw(context, request, cq));
    }
    // Search over the keys to find one or more you're looking for.
    // This leverage the "body" parameter because we also have page and
    // per_page as url query param variables in this request.
    virtual ::grpc::Status DeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteKeyRaw(context, request, cq));
    }
    // Add a key to an app.
    virtual ::grpc::Status PostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::clarifai::api::MultiKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>> AsyncPostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>>(AsyncPostKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>> PrepareAsyncPostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>>(PrepareAsyncPostKeysRaw(context, request, cq));
    }
    // Patch one or more keys.
    virtual ::grpc::Status PatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::clarifai::api::MultiKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>> AsyncPatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>>(AsyncPatchKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>> PrepareAsyncPatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>>(PrepareAsyncPatchKeysRaw(context, request, cq));
    }
    // API Keys in the public API -- request is itself Key authorized, and will tell
    // the user the scopes/access of the key/credential they're providing, as computed by
    // our authorizer:
    virtual ::grpc::Status MyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::clarifai::api::MultiScopeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeResponse>> AsyncMyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeResponse>>(AsyncMyScopesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeResponse>> PrepareAsyncMyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeResponse>>(PrepareAsyncMyScopesRaw(context, request, cq));
    }
    virtual ::grpc::Status MyScopesUser(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest& request, ::clarifai::api::MultiScopeUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeUserResponse>> AsyncMyScopesUser(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeUserResponse>>(AsyncMyScopesUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeUserResponse>> PrepareAsyncMyScopesUser(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeUserResponse>>(PrepareAsyncMyScopesUserRaw(context, request, cq));
    }
    virtual ::grpc::Status MyScopesRoot(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest& request, ::clarifai::api::MultiScopeRootResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeRootResponse>> AsyncMyScopesRoot(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeRootResponse>>(AsyncMyScopesRootRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeRootResponse>> PrepareAsyncMyScopesRoot(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeRootResponse>>(PrepareAsyncMyScopesRootRaw(context, request, cq));
    }
    // List all auth scopes available to me as a user.
    virtual ::grpc::Status ListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::clarifai::api::MultiScopeDepsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeDepsResponse>> AsyncListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeDepsResponse>>(AsyncListScopesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeDepsResponse>> PrepareAsyncListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeDepsResponse>>(PrepareAsyncListScopesRaw(context, request, cq));
    }
    // Get a specific app from an app.
    virtual ::grpc::Status GetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::clarifai::api::SingleAppResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppResponse>> AsyncGetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppResponse>>(AsyncGetAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppResponse>> PrepareAsyncGetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppResponse>>(PrepareAsyncGetAppRaw(context, request, cq));
    }
    // List all the apps.
    virtual ::grpc::Status ListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::clarifai::api::MultiAppResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>> AsyncListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>>(AsyncListAppsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>> PrepareAsyncListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>>(PrepareAsyncListAppsRaw(context, request, cq));
    }
    // Search over the apps to find one or more you're looking for.
    // This leverage the "body" parameter because we also have page and
    // per_page as url query param variables in this request.
    virtual ::grpc::Status DeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteAppRaw(context, request, cq));
    }
    // Add a app to an app.
    // This needs to load the default workflow to make a copy, validating all the models in it, and
    // then writing the new workflow back to this new app.
    virtual ::grpc::Status PostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::clarifai::api::MultiAppResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>> AsyncPostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>>(AsyncPostAppsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>> PrepareAsyncPostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>>(PrepareAsyncPostAppsRaw(context, request, cq));
    }
    // Patch one or more apps.
    virtual ::grpc::Status PatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::clarifai::api::MultiAppResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>> AsyncPatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>>(AsyncPatchAppsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>> PrepareAsyncPatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>>(PrepareAsyncPatchAppsRaw(context, request, cq));
    }
    // Patch one app.
    virtual ::grpc::Status PatchApp(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest& request, ::clarifai::api::SingleAppResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppResponse>> AsyncPatchApp(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppResponse>>(AsyncPatchAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppResponse>> PrepareAsyncPatchApp(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppResponse>>(PrepareAsyncPatchAppRaw(context, request, cq));
    }
    // Patch apps ids.
    virtual ::grpc::Status PatchAppsIds(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest& request, ::clarifai::api::MultiAppResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>> AsyncPatchAppsIds(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>>(AsyncPatchAppsIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>> PrepareAsyncPatchAppsIds(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>>(PrepareAsyncPatchAppsIdsRaw(context, request, cq));
    }
    // Search over the applications to find one or more you're looking for.
    virtual ::grpc::Status PostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::clarifai::api::MultiAppResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>> AsyncPostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>>(AsyncPostAppsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>> PrepareAsyncPostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>>(PrepareAsyncPostAppsSearchesRaw(context, request, cq));
    }
    // Validate new password in real-time for a user
    virtual ::grpc::Status PostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::clarifai::api::SinglePasswordValidationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SinglePasswordValidationResponse>> AsyncPostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SinglePasswordValidationResponse>>(AsyncPostValidatePasswordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SinglePasswordValidationResponse>> PrepareAsyncPostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SinglePasswordValidationResponse>>(PrepareAsyncPostValidatePasswordRaw(context, request, cq));
    }
    // Get a saved legacy search.
    virtual ::grpc::Status GetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::clarifai::api::SingleSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleSearchResponse>> AsyncGetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleSearchResponse>>(AsyncGetSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleSearchResponse>> PrepareAsyncGetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleSearchResponse>>(PrepareAsyncGetSearchRaw(context, request, cq));
    }
    // List all saved legacy searches.
    virtual ::grpc::Status ListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> AsyncListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(AsyncListSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> PrepareAsyncListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncListSearchesRaw(context, request, cq));
    }
    // Patch saved legacy searches by ids.
    virtual ::grpc::Status PatchSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> AsyncPatchSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(AsyncPatchSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPatchSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPatchSearchesRaw(context, request, cq));
    }
    // Execute a new search and optionally save it.
    virtual ::grpc::Status PostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> AsyncPostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(AsyncPostSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPostSearchesRaw(context, request, cq));
    }
    // Execute a previously saved legacy search.
    virtual ::grpc::Status PostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::clarifai::api::MultiSearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> AsyncPostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(AsyncPostSearchesByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPostSearchesByIDRaw(context, request, cq));
    }
    // Evaluate the results of two search requests
    virtual ::grpc::Status PostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>> AsyncPostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>>(AsyncPostAnnotationSearchMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>> PrepareAsyncPostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>>(PrepareAsyncPostAnnotationSearchMetricsRaw(context, request, cq));
    }
    // Get the evaluation results between two search requests
    virtual ::grpc::Status GetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>> AsyncGetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>>(AsyncGetAnnotationSearchMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>> PrepareAsyncGetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>>(PrepareAsyncGetAnnotationSearchMetricsRaw(context, request, cq));
    }
    // List the evaluation results between two search requests
    virtual ::grpc::Status ListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>> AsyncListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>>(AsyncListAnnotationSearchMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>> PrepareAsyncListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>>(PrepareAsyncListAnnotationSearchMetricsRaw(context, request, cq));
    }
    // DeleteAnnotationSearchMetrics
    virtual ::grpc::Status DeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteAnnotationSearchMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteAnnotationSearchMetricsRaw(context, request, cq));
    }
    // Delete a saved search.
    virtual ::grpc::Status DeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteSearchRaw(context, request, cq));
    }
    // List all the annotation filters.
    virtual ::grpc::Status ListAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest& request, ::clarifai::api::MultiAnnotationFilterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>> AsyncListAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>>(AsyncListAnnotationFiltersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>> PrepareAsyncListAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>>(PrepareAsyncListAnnotationFiltersRaw(context, request, cq));
    }
    // Get a specific annotation filter.
    virtual ::grpc::Status GetAnnotationFilter(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest& request, ::clarifai::api::SingleAnnotationFilterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAnnotationFilterResponse>> AsyncGetAnnotationFilter(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAnnotationFilterResponse>>(AsyncGetAnnotationFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAnnotationFilterResponse>> PrepareAsyncGetAnnotationFilter(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAnnotationFilterResponse>>(PrepareAsyncGetAnnotationFilterRaw(context, request, cq));
    }
    // Add annotation filters.
    virtual ::grpc::Status PostAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest& request, ::clarifai::api::MultiAnnotationFilterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>> AsyncPostAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>>(AsyncPostAnnotationFiltersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>> PrepareAsyncPostAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>>(PrepareAsyncPostAnnotationFiltersRaw(context, request, cq));
    }
    // Patch one or more annotation filters.
    virtual ::grpc::Status PatchAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest& request, ::clarifai::api::MultiAnnotationFilterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>> AsyncPatchAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>>(AsyncPatchAnnotationFiltersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>> PrepareAsyncPatchAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>>(PrepareAsyncPatchAnnotationFiltersRaw(context, request, cq));
    }
    // Delete one or more annotation filters in a single request.
    virtual ::grpc::Status DeleteAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteAnnotationFiltersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteAnnotationFiltersRaw(context, request, cq));
    }
    // List all status codes.
    virtual ::grpc::Status ListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::clarifai::api::MultiStatusCodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatusCodeResponse>> AsyncListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatusCodeResponse>>(AsyncListStatusCodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatusCodeResponse>> PrepareAsyncListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatusCodeResponse>>(PrepareAsyncListStatusCodesRaw(context, request, cq));
    }
    // Get more details for a status code.
    virtual ::grpc::Status GetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::clarifai::api::SingleStatusCodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleStatusCodeResponse>> AsyncGetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleStatusCodeResponse>>(AsyncGetStatusCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleStatusCodeResponse>> PrepareAsyncGetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleStatusCodeResponse>>(PrepareAsyncGetStatusCodeRaw(context, request, cq));
    }
    // owner list users who the app is shared with
    virtual ::grpc::Status ListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::clarifai::api::MultiCollaboratorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>> AsyncListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>>(AsyncListCollaboratorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>> PrepareAsyncListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>>(PrepareAsyncListCollaboratorsRaw(context, request, cq));
    }
    // add collaborators to an app.
    virtual ::grpc::Status PostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::clarifai::api::MultiCollaboratorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>> AsyncPostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>>(AsyncPostCollaboratorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>> PrepareAsyncPostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>>(PrepareAsyncPostCollaboratorsRaw(context, request, cq));
    }
    // Patch existing collaborators.
    virtual ::grpc::Status PatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::clarifai::api::MultiCollaboratorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>> AsyncPatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>>(AsyncPatchCollaboratorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>> PrepareAsyncPatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>>(PrepareAsyncPatchCollaboratorsRaw(context, request, cq));
    }
    // Delete existing collaborators.
    virtual ::grpc::Status DeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteCollaboratorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteCollaboratorsRaw(context, request, cq));
    }
    // Collaboration includes the app user are invitied to work on
    virtual ::grpc::Status ListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::clarifai::api::MultiCollaborationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaborationsResponse>> AsyncListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaborationsResponse>>(AsyncListCollaborationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaborationsResponse>> PrepareAsyncListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaborationsResponse>>(PrepareAsyncListCollaborationsRaw(context, request, cq));
    }
    // start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
    // this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
    virtual ::grpc::Status PostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::clarifai::api::MultiAppDuplicationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppDuplicationsResponse>> AsyncPostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppDuplicationsResponse>>(AsyncPostAppDuplicationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppDuplicationsResponse>> PrepareAsyncPostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppDuplicationsResponse>>(PrepareAsyncPostAppDuplicationsRaw(context, request, cq));
    }
    // list all the app duplications user triggers
    virtual ::grpc::Status ListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::clarifai::api::MultiAppDuplicationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppDuplicationsResponse>> AsyncListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppDuplicationsResponse>>(AsyncListAppDuplicationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppDuplicationsResponse>> PrepareAsyncListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppDuplicationsResponse>>(PrepareAsyncListAppDuplicationsRaw(context, request, cq));
    }
    // get the app duplication status
    virtual ::grpc::Status GetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::clarifai::api::SingleAppDuplicationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppDuplicationResponse>> AsyncGetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppDuplicationResponse>>(AsyncGetAppDuplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppDuplicationResponse>> PrepareAsyncGetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppDuplicationResponse>>(PrepareAsyncGetAppDuplicationRaw(context, request, cq));
    }
    // Add tasks to an app.
    virtual ::grpc::Status PostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::clarifai::api::MultiTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>> AsyncPostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>>(AsyncPostTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>> PrepareAsyncPostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>>(PrepareAsyncPostTasksRaw(context, request, cq));
    }
    // Task annotation count
    virtual ::grpc::Status GetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::clarifai::api::SingleTaskCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskCountResponse>> AsyncGetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskCountResponse>>(AsyncGetTaskAnnotationCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskCountResponse>> PrepareAsyncGetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskCountResponse>>(PrepareAsyncGetTaskAnnotationCountRaw(context, request, cq));
    }
    // Task Input count
    virtual ::grpc::Status GetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::clarifai::api::SingleTaskCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskCountResponse>> AsyncGetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskCountResponse>>(AsyncGetTaskInputCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskCountResponse>> PrepareAsyncGetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskCountResponse>>(PrepareAsyncGetTaskInputCountRaw(context, request, cq));
    }
    // Get a specific task from an app.
    virtual ::grpc::Status GetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::clarifai::api::SingleTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskResponse>> AsyncGetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskResponse>>(AsyncGetTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskResponse>> PrepareAsyncGetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskResponse>>(PrepareAsyncGetTaskRaw(context, request, cq));
    }
    // List tasks from an app.
    virtual ::grpc::Status ListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::clarifai::api::MultiTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>> AsyncListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>>(AsyncListTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>> PrepareAsyncListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>>(PrepareAsyncListTasksRaw(context, request, cq));
    }
    // Patch one or more tasks.
    virtual ::grpc::Status PatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::clarifai::api::MultiTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>> AsyncPatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>>(AsyncPatchTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>> PrepareAsyncPatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>>(PrepareAsyncPatchTasksRaw(context, request, cq));
    }
    // Delete multiple tasks in one request.
    virtual ::grpc::Status DeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteTasksRaw(context, request, cq));
    }
    // //////////////////////////////////////
    // Label Order
    // //////////////////////////////////////
    //
    // Add Label orders.
    virtual ::grpc::Status PostLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest& request, ::clarifai::api::MultiLabelOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>> AsyncPostLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>>(AsyncPostLabelOrdersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>> PrepareAsyncPostLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>>(PrepareAsyncPostLabelOrdersRaw(context, request, cq));
    }
    // Get a label order.
    virtual ::grpc::Status GetLabelOrder(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest& request, ::clarifai::api::SingleLabelOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleLabelOrderResponse>> AsyncGetLabelOrder(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleLabelOrderResponse>>(AsyncGetLabelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleLabelOrderResponse>> PrepareAsyncGetLabelOrder(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleLabelOrderResponse>>(PrepareAsyncGetLabelOrderRaw(context, request, cq));
    }
    // List label orders.
    virtual ::grpc::Status ListLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest& request, ::clarifai::api::MultiLabelOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>> AsyncListLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>>(AsyncListLabelOrdersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>> PrepareAsyncListLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>>(PrepareAsyncListLabelOrdersRaw(context, request, cq));
    }
    // Patch one or more label orders.
    virtual ::grpc::Status PatchLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest& request, ::clarifai::api::MultiLabelOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>> AsyncPatchLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>>(AsyncPatchLabelOrdersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>> PrepareAsyncPatchLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>>(PrepareAsyncPatchLabelOrdersRaw(context, request, cq));
    }
    // Delete multiple label orders in one request.
    // this do not change task status
    virtual ::grpc::Status DeleteLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteLabelOrdersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteLabelOrdersRaw(context, request, cq));
    }
    // Add a list of Collectors to an app.
    // In the handler of this endpoint we also check for all the scopes of the  POST /inputs
    // endpoint.
    // Those current scopes are listed here as a hard requirement.
    // They are needed when adding the collectors just so we now that you have permission with
    // that key at least to do the writing to this app with POST /inputs.
    virtual ::grpc::Status PostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::clarifai::api::MultiCollectorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>> AsyncPostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>>(AsyncPostCollectorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>> PrepareAsyncPostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>>(PrepareAsyncPostCollectorsRaw(context, request, cq));
    }
    // Get a specific collector from an app.
    virtual ::grpc::Status GetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::clarifai::api::SingleCollectorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleCollectorResponse>> AsyncGetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleCollectorResponse>>(AsyncGetCollectorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleCollectorResponse>> PrepareAsyncGetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleCollectorResponse>>(PrepareAsyncGetCollectorRaw(context, request, cq));
    }
    // List all the collectors.
    virtual ::grpc::Status ListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::clarifai::api::MultiCollectorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>> AsyncListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>>(AsyncListCollectorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>> PrepareAsyncListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>>(PrepareAsyncListCollectorsRaw(context, request, cq));
    }
    // Patch one or more collectors.
    virtual ::grpc::Status PatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::clarifai::api::MultiCollectorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>> AsyncPatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>>(AsyncPatchCollectorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>> PrepareAsyncPatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>>(PrepareAsyncPatchCollectorsRaw(context, request, cq));
    }
    // Delete multiple collectors in one request.
    // This call is asynchronous. Use DeleteCollector if you want a synchronous version.
    virtual ::grpc::Status DeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteCollectorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteCollectorsRaw(context, request, cq));
    }
    // PostStatValues
    virtual ::grpc::Status PostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::clarifai::api::MultiStatValueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatValueResponse>> AsyncPostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatValueResponse>>(AsyncPostStatValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatValueResponse>> PrepareAsyncPostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatValueResponse>>(PrepareAsyncPostStatValuesRaw(context, request, cq));
    }
    // PostStatValuesAggregate
    virtual ::grpc::Status PostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::clarifai::api::MultiStatValueAggregateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatValueAggregateResponse>> AsyncPostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatValueAggregateResponse>>(AsyncPostStatValuesAggregateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatValueAggregateResponse>> PrepareAsyncPostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatValueAggregateResponse>>(PrepareAsyncPostStatValuesAggregateRaw(context, request, cq));
    }
    // Increase the view metric for a detail view
    virtual ::grpc::Status PostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncPostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncPostTrendingMetricsViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncPostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncPostTrendingMetricsViewRaw(context, request, cq));
    }
    // List the view metrics for a detail view
    virtual ::grpc::Status ListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::clarifai::api::MultiTrendingMetricsViewResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTrendingMetricsViewResponse>> AsyncListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTrendingMetricsViewResponse>>(AsyncListTrendingMetricsViewsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTrendingMetricsViewResponse>> PrepareAsyncListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTrendingMetricsViewResponse>>(PrepareAsyncListTrendingMetricsViewsRaw(context, request, cq));
    }
    // Perform bulk operations on a list of inputs based on input source.
    // Operation include add, update, delete of concepts, metadata and geo data.
    // This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
    virtual ::grpc::Status PostBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest& request, ::clarifai::api::MultiBulkOperationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>> AsyncPostBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>>(AsyncPostBulkOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>> PrepareAsyncPostBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>>(PrepareAsyncPostBulkOperationsRaw(context, request, cq));
    }
    // List all the bulk operations
    virtual ::grpc::Status ListBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest& request, ::clarifai::api::MultiBulkOperationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>> AsyncListBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>>(AsyncListBulkOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>> PrepareAsyncListBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>>(PrepareAsyncListBulkOperationsRaw(context, request, cq));
    }
    // Get the bulk operation details by ID
    virtual ::grpc::Status GetBulkOperation(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest& request, ::clarifai::api::SingleBulkOperationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleBulkOperationsResponse>> AsyncGetBulkOperation(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleBulkOperationsResponse>>(AsyncGetBulkOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleBulkOperationsResponse>> PrepareAsyncGetBulkOperation(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleBulkOperationsResponse>>(PrepareAsyncGetBulkOperationRaw(context, request, cq));
    }
    // Cancel one or more bulk operations
    virtual ::grpc::Status CancelBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest& request, ::clarifai::api::MultiBulkOperationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>> AsyncCancelBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>>(AsyncCancelBulkOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>> PrepareAsyncCancelBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>>(PrepareAsyncCancelBulkOperationsRaw(context, request, cq));
    }
    // delete one or more terminated bulk operations
    virtual ::grpc::Status DeleteBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest& request, ::clarifai::api::status::BaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> AsyncDeleteBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(AsyncDeleteBulkOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteBulkOperationsRaw(context, request, cq));
    }
    // Get a specific job.
    virtual ::grpc::Status GetDatasetInputsSearchAddJob(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest& request, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>> AsyncGetDatasetInputsSearchAddJob(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>>(AsyncGetDatasetInputsSearchAddJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>> PrepareAsyncGetDatasetInputsSearchAddJob(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>>(PrepareAsyncGetDatasetInputsSearchAddJobRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // List concept relations between concepts in the platform.
      // MUST be above ListConcepts so that if concept_id is empty this will still match
      // /concepts/relations to list all the concept relations in the app.
      virtual void ListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Post concept relations to create relations between concepts in the platform.
      virtual void PostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Post concept relations to create relations between concepts in the platform.
      virtual void DeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the concepts with their positive and negative counts
      virtual void GetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest* request, ::clarifai::api::MultiConceptCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest* request, ::clarifai::api::MultiConceptCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific concept from an app.
      virtual void GetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest* request, ::clarifai::api::SingleConceptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest* request, ::clarifai::api::SingleConceptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the concepts.
      virtual void ListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Search over the concepts to find one or more you're looking for.
      // This leverage the "body" parameter because we also have page and
      // per_page as url query param variables in this request.
      virtual void PostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add a concept to an app.
      virtual void PostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more concepts.
      virtual void PatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific concept from an app.
      virtual void GetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest* request, ::clarifai::api::SingleConceptLanguageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest* request, ::clarifai::api::SingleConceptLanguageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List the concept in all the translated languages.
      virtual void ListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add a new translation for this concept.
      virtual void PostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch the name for a given language names by passing in a list of concepts with the new names
      // for the languages.
      virtual void PatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all domain graphs.
      virtual void ListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Post domain graphs.
      virtual void PostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Start concept mapping jobs.
      virtual void PostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest* request, ::clarifai::api::MultiConceptMappingJobResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest* request, ::clarifai::api::MultiConceptMappingJobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific annotation from an app.
      virtual void GetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest* request, ::clarifai::api::SingleAnnotationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest* request, ::clarifai::api::SingleAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the annotation.
      virtual void ListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Post annotations.
      virtual void PostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more annotations.
      virtual void PatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch annotations status by worker id and task id.
      virtual void PatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest* request, ::clarifai::api::PatchAnnotationsStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest* request, ::clarifai::api::PatchAnnotationsStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a single annotation.
      virtual void DeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete multiple annotations in one request.
      virtual void DeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch saved annotations searches by ids.
      virtual void PatchAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Execute a search over annotations
      virtual void PostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get input count per status.
      virtual void GetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest* request, ::clarifai::api::SingleInputCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest* request, ::clarifai::api::SingleInputCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Streams all the inputs starting from oldest assets.
      virtual void StreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific input from an app.
      virtual void GetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest* request, ::clarifai::api::MultiInputAnnotationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest* request, ::clarifai::api::MultiInputAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific input from an app.
      virtual void GetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest* request, ::clarifai::api::SingleInputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest* request, ::clarifai::api::SingleInputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the inputs.
      virtual void ListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add an input (or set of inputs) to an app.
      // This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
      // it is asynchronous.
      virtual void PostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more inputs.
      virtual void PatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a single input asynchronously.
      virtual void DeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete multiple inputs in one request.
      // This call is asynchronous.
      virtual void DeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch saved inputs searches by ids.
      virtual void PatchInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Execute a search over inputs
      virtual void PostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get predicted outputs from the model.
      virtual void PostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest* request, ::clarifai::api::MultiOutputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest* request, ::clarifai::api::MultiOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the datasets.
      virtual void ListDatasets(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDatasets(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific dataset.
      virtual void GetDataset(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest* request, ::clarifai::api::SingleDatasetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDataset(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest* request, ::clarifai::api::SingleDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add datasets to an app.
      // The process is atomic, i.e. either all or no datasets are added.
      // If there is an error for one dataset,
      // the process will stop, revert the transaction and return the error.
      virtual void PostDatasets(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostDatasets(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more datasets.
      // The process is atomic, i.e. either all or no datasets are patched.
      // If there is an error for one dataset,
      // the process will stop, revert the transaction and return the error.
      virtual void PatchDatasets(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchDatasets(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete one or more datasets in a single request.
      virtual void DeleteDatasets(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDatasets(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the dataset inputs in a dataset.
      virtual void ListDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest* request, ::clarifai::api::MultiDatasetInputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest* request, ::clarifai::api::MultiDatasetInputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific dataset input.
      virtual void GetDatasetInput(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest* request, ::clarifai::api::SingleDatasetInputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDatasetInput(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest* request, ::clarifai::api::SingleDatasetInputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add dataset inputs to a dataset.
      // The process is not atomic, i.e. if there are errors with some dataset
      // inputs, others might still be added. The response reports
      //   - SUCCESS if all dataset inputs were added,
      //   - MIXED_STATUS if only some dataset inputs were added, and
      //   - FAILURE if no dataset inputs were added.
      // Each individual dataset input in the response has the status set to
      // indicate if it was successful or if there was an error.
      virtual void PostDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest* request, ::clarifai::api::MultiDatasetInputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest* request, ::clarifai::api::MultiDatasetInputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete one or more dataset inputs in a single request.
      virtual void DeleteDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the dataset versions.
      virtual void ListDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific dataset version.
      virtual void GetDatasetVersion(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest* request, ::clarifai::api::SingleDatasetVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDatasetVersion(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest* request, ::clarifai::api::SingleDatasetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListDatasetVersionMetricsGroups(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* request, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDatasetVersionMetricsGroups(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* request, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add dataset versions to a dataset.
      virtual void PostDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more dataset versions.
      virtual void PatchDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete one or more dataset versions in a single request.
      virtual void DeleteDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // //////////////////////////////////////
      // Models
      // //////////////////////////////////////
      //
      // Get a specific model type.
      virtual void GetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest* request, ::clarifai::api::SingleModelTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest* request, ::clarifai::api::SingleModelTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the supported open source licenses in the platform.
      virtual void ListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest* request, ::clarifai::api::ListOpenSourceLicensesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest* request, ::clarifai::api::ListOpenSourceLicensesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the model types available in the platform.
      // This MUST be above ListModels so that the /models/types endpoint takes precedence.
      virtual void ListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest* request, ::clarifai::api::MultiModelTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest* request, ::clarifai::api::MultiModelTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific model from an app.
      virtual void GetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a the output info for a given model_id or model_id/version_id
      // combo.
      virtual void GetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the models.
      virtual void ListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest* request, ::clarifai::api::MultiModelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Search over the models to find one or more you're looking for.
      // This leverage the "body" parameter because we also have page and
      // per_page as url query param variables in this request.
      virtual void PostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest* request, ::clarifai::api::MultiModelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add a models to an app.
      virtual void PostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest* request, ::clarifai::api::SingleModelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more models.
      virtual void PatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest* request, ::clarifai::api::MultiModelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more models.
      virtual void PatchModelIds(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchModelIds(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest* request, ::clarifai::api::MultiModelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a single model.
      virtual void DeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete multiple models in one request.
      virtual void DeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update model toolkits tags
      virtual void PatchModelToolkits(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest* request, ::clarifai::api::MultiModelToolkitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchModelToolkits(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest* request, ::clarifai::api::MultiModelToolkitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update model use_cases tags
      virtual void PatchModelUseCases(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest* request, ::clarifai::api::MultiModelUseCaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchModelUseCases(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest* request, ::clarifai::api::MultiModelUseCaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update model languages tags
      virtual void PatchModelLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest* request, ::clarifai::api::MultiModelLanguageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchModelLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest* request, ::clarifai::api::MultiModelLanguageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the inputs.
      virtual void ListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific model from an app.
      virtual void GetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest* request, ::clarifai::api::SingleModelVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest* request, ::clarifai::api::SingleModelVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the models.
      virtual void ListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PostWorkflowVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostWorkflowVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PostWorkflowVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostWorkflowVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PostModelVersionsPublish
      virtual void PostModelVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostModelVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PostModelVersionsUnPublish
      virtual void PostModelVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostModelVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // NOTE: inconsistency: do we want this to return a SingleModelResponse?
      //
      // Create a new model version to trigger training of the model.
      virtual void PostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest* request, ::clarifai::api::SingleModelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PatchModelVersions
      virtual void PatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a single model.
      virtual void DeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get the evaluation metrics for a model version.
      virtual void GetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Run the evaluation metrics for a model version.
      virtual void PostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists model references tied to a particular model id.
      virtual void ListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest* request, ::clarifai::api::MultiModelReferenceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest* request, ::clarifai::api::MultiModelReferenceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetModelVersionInputExample
      virtual void GetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest* request, ::clarifai::api::SingleModelVersionInputExampleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest* request, ::clarifai::api::SingleModelVersionInputExampleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ListModelVersionInputExamples
      virtual void ListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest* request, ::clarifai::api::MultiModelVersionInputExampleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest* request, ::clarifai::api::MultiModelVersionInputExampleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // //////////////////////////////////////
      //
      // //////////////////////////////////////
      // Workflows
      // //////////////////////////////////////
      //
      // Get a specific workflow from an app.
      virtual void GetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest* request, ::clarifai::api::SingleWorkflowResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest* request, ::clarifai::api::SingleWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the workflows.
      virtual void ListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add a workflow to an app.
      virtual void PostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more workflows.
      virtual void PatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a single workflow.
      virtual void DeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete multiple workflows in one request.
      virtual void DeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Predict using a workflow.
      virtual void PostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest* request, ::clarifai::api::PostWorkflowResultsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest* request, ::clarifai::api::PostWorkflowResultsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Compare embeddings distances using a workflow
      virtual void PostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List workflow versions.
      virtual void ListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get single workflow version.
      virtual void GetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest* request, ::clarifai::api::SingleWorkflowVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest* request, ::clarifai::api::SingleWorkflowVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete workflow versions.
      virtual void DeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch workflow versions.
      virtual void PatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific key from an app.
      virtual void GetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest* request, ::clarifai::api::SingleKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest* request, ::clarifai::api::SingleKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the keys.
      virtual void ListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List keys by app_id
      virtual void ListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Search over the keys to find one or more you're looking for.
      // This leverage the "body" parameter because we also have page and
      // per_page as url query param variables in this request.
      virtual void DeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add a key to an app.
      virtual void PostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more keys.
      virtual void PatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // API Keys in the public API -- request is itself Key authorized, and will tell
      // the user the scopes/access of the key/credential they're providing, as computed by
      // our authorizer:
      virtual void MyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest* request, ::clarifai::api::MultiScopeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest* request, ::clarifai::api::MultiScopeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MyScopesUser(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest* request, ::clarifai::api::MultiScopeUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MyScopesUser(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest* request, ::clarifai::api::MultiScopeUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MyScopesRoot(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest* request, ::clarifai::api::MultiScopeRootResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MyScopesRoot(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest* request, ::clarifai::api::MultiScopeRootResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all auth scopes available to me as a user.
      virtual void ListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest* request, ::clarifai::api::MultiScopeDepsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest* request, ::clarifai::api::MultiScopeDepsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific app from an app.
      virtual void GetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest* request, ::clarifai::api::SingleAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest* request, ::clarifai::api::SingleAppResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the apps.
      virtual void ListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Search over the apps to find one or more you're looking for.
      // This leverage the "body" parameter because we also have page and
      // per_page as url query param variables in this request.
      virtual void DeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add a app to an app.
      // This needs to load the default workflow to make a copy, validating all the models in it, and
      // then writing the new workflow back to this new app.
      virtual void PostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more apps.
      virtual void PatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one app.
      virtual void PatchApp(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest* request, ::clarifai::api::SingleAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchApp(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest* request, ::clarifai::api::SingleAppResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch apps ids.
      virtual void PatchAppsIds(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchAppsIds(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Search over the applications to find one or more you're looking for.
      virtual void PostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Validate new password in real-time for a user
      virtual void PostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest* request, ::clarifai::api::SinglePasswordValidationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest* request, ::clarifai::api::SinglePasswordValidationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a saved legacy search.
      virtual void GetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest* request, ::clarifai::api::SingleSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest* request, ::clarifai::api::SingleSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all saved legacy searches.
      virtual void ListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch saved legacy searches by ids.
      virtual void PatchSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Execute a new search and optionally save it.
      virtual void PostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Execute a previously saved legacy search.
      virtual void PostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Evaluate the results of two search requests
      virtual void PostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get the evaluation results between two search requests
      virtual void GetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List the evaluation results between two search requests
      virtual void ListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DeleteAnnotationSearchMetrics
      virtual void DeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a saved search.
      virtual void DeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the annotation filters.
      virtual void ListAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific annotation filter.
      virtual void GetAnnotationFilter(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest* request, ::clarifai::api::SingleAnnotationFilterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAnnotationFilter(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest* request, ::clarifai::api::SingleAnnotationFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add annotation filters.
      virtual void PostAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more annotation filters.
      virtual void PatchAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete one or more annotation filters in a single request.
      virtual void DeleteAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all status codes.
      virtual void ListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest* request, ::clarifai::api::MultiStatusCodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest* request, ::clarifai::api::MultiStatusCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get more details for a status code.
      virtual void GetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest* request, ::clarifai::api::SingleStatusCodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest* request, ::clarifai::api::SingleStatusCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // owner list users who the app is shared with
      virtual void ListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // add collaborators to an app.
      virtual void PostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch existing collaborators.
      virtual void PatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete existing collaborators.
      virtual void DeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Collaboration includes the app user are invitied to work on
      virtual void ListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest* request, ::clarifai::api::MultiCollaborationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest* request, ::clarifai::api::MultiCollaborationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
      // this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
      virtual void PostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // list all the app duplications user triggers
      virtual void ListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get the app duplication status
      virtual void GetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest* request, ::clarifai::api::SingleAppDuplicationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest* request, ::clarifai::api::SingleAppDuplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add tasks to an app.
      virtual void PostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Task annotation count
      virtual void GetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Task Input count
      virtual void GetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific task from an app.
      virtual void GetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest* request, ::clarifai::api::SingleTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest* request, ::clarifai::api::SingleTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List tasks from an app.
      virtual void ListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more tasks.
      virtual void PatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete multiple tasks in one request.
      virtual void DeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // //////////////////////////////////////
      // Label Order
      // //////////////////////////////////////
      //
      // Add Label orders.
      virtual void PostLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a label order.
      virtual void GetLabelOrder(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest* request, ::clarifai::api::SingleLabelOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLabelOrder(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest* request, ::clarifai::api::SingleLabelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List label orders.
      virtual void ListLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more label orders.
      virtual void PatchLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete multiple label orders in one request.
      // this do not change task status
      virtual void DeleteLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Add a list of Collectors to an app.
      // In the handler of this endpoint we also check for all the scopes of the  POST /inputs
      // endpoint.
      // Those current scopes are listed here as a hard requirement.
      // They are needed when adding the collectors just so we now that you have permission with
      // that key at least to do the writing to this app with POST /inputs.
      virtual void PostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific collector from an app.
      virtual void GetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest* request, ::clarifai::api::SingleCollectorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest* request, ::clarifai::api::SingleCollectorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the collectors.
      virtual void ListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Patch one or more collectors.
      virtual void PatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete multiple collectors in one request.
      // This call is asynchronous. Use DeleteCollector if you want a synchronous version.
      virtual void DeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PostStatValues
      virtual void PostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest* request, ::clarifai::api::MultiStatValueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest* request, ::clarifai::api::MultiStatValueResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PostStatValuesAggregate
      virtual void PostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest* request, ::clarifai::api::MultiStatValueAggregateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest* request, ::clarifai::api::MultiStatValueAggregateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Increase the view metric for a detail view
      virtual void PostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List the view metrics for a detail view
      virtual void ListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest* request, ::clarifai::api::MultiTrendingMetricsViewResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest* request, ::clarifai::api::MultiTrendingMetricsViewResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Perform bulk operations on a list of inputs based on input source.
      // Operation include add, update, delete of concepts, metadata and geo data.
      // This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
      virtual void PostBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the bulk operations
      virtual void ListBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get the bulk operation details by ID
      virtual void GetBulkOperation(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest* request, ::clarifai::api::SingleBulkOperationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBulkOperation(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest* request, ::clarifai::api::SingleBulkOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Cancel one or more bulk operations
      virtual void CancelBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // delete one or more terminated bulk operations
      virtual void DeleteBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific job.
      virtual void GetDatasetInputsSearchAddJob(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* request, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDatasetInputsSearchAddJob(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* request, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptRelationResponse>* AsyncListConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptRelationResponse>* PrepareAsyncListConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptRelationResponse>* AsyncPostConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptRelationResponse>* PrepareAsyncPostConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptCountResponse>* AsyncGetConceptCountsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptCountResponse>* PrepareAsyncGetConceptCountsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleConceptResponse>* AsyncGetConceptRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleConceptResponse>* PrepareAsyncGetConceptRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>* AsyncListConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>* PrepareAsyncListConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>* AsyncPostConceptsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>* PrepareAsyncPostConceptsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>* AsyncPostConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>* PrepareAsyncPostConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>* AsyncPatchConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptResponse>* PrepareAsyncPatchConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleConceptLanguageResponse>* AsyncGetConceptLanguageRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleConceptLanguageResponse>* PrepareAsyncGetConceptLanguageRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>* AsyncListConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>* PrepareAsyncListConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>* AsyncPostConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>* PrepareAsyncPostConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>* AsyncPatchConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptLanguageResponse>* PrepareAsyncPatchConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKnowledgeGraphResponse>* AsyncListKnowledgeGraphsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKnowledgeGraphResponse>* PrepareAsyncListKnowledgeGraphsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKnowledgeGraphResponse>* AsyncPostKnowledgeGraphsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKnowledgeGraphResponse>* PrepareAsyncPostKnowledgeGraphsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptMappingJobResponse>* AsyncPostConceptMappingJobsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiConceptMappingJobResponse>* PrepareAsyncPostConceptMappingJobsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAnnotationResponse>* AsyncGetAnnotationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAnnotationResponse>* PrepareAsyncGetAnnotationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>* AsyncListAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>* PrepareAsyncListAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>* AsyncPostAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>* PrepareAsyncPostAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>* AsyncPatchAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationResponse>* PrepareAsyncPatchAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PatchAnnotationsStatusResponse>* AsyncPatchAnnotationsStatusRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PatchAnnotationsStatusResponse>* PrepareAsyncPatchAnnotationsStatusRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteAnnotationRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteAnnotationRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* AsyncPatchAnnotationsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPatchAnnotationsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* AsyncPostAnnotationsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPostAnnotationsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleInputCountResponse>* AsyncGetInputCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleInputCountResponse>* PrepareAsyncGetInputCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>* AsyncStreamInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>* PrepareAsyncStreamInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputAnnotationResponse>* AsyncGetInputSamplesRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputAnnotationResponse>* PrepareAsyncGetInputSamplesRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleInputResponse>* AsyncGetInputRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleInputResponse>* PrepareAsyncGetInputRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>* AsyncListInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>* PrepareAsyncListInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>* AsyncPostInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>* PrepareAsyncPostInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>* AsyncPatchInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>* PrepareAsyncPatchInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteInputRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteInputRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* AsyncPatchInputsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPatchInputsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* AsyncPostInputsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPostInputsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiOutputResponse>* AsyncPostModelOutputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiOutputResponse>* PrepareAsyncPostModelOutputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>* AsyncListDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>* PrepareAsyncListDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetResponse>* AsyncGetDatasetRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetResponse>* PrepareAsyncGetDatasetRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>* AsyncPostDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>* PrepareAsyncPostDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>* AsyncPatchDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetResponse>* PrepareAsyncPatchDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetInputResponse>* AsyncListDatasetInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetInputResponse>* PrepareAsyncListDatasetInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetInputResponse>* AsyncGetDatasetInputRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetInputResponse>* PrepareAsyncGetDatasetInputRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetInputResponse>* AsyncPostDatasetInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetInputResponse>* PrepareAsyncPostDatasetInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteDatasetInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteDatasetInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>* AsyncListDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>* PrepareAsyncListDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetVersionResponse>* AsyncGetDatasetVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetVersionResponse>* PrepareAsyncGetDatasetVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>* AsyncListDatasetVersionMetricsGroupsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>* PrepareAsyncListDatasetVersionMetricsGroupsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>* AsyncPostDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>* PrepareAsyncPostDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>* AsyncPatchDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiDatasetVersionResponse>* PrepareAsyncPatchDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelTypeResponse>* AsyncGetModelTypeRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelTypeResponse>* PrepareAsyncGetModelTypeRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::ListOpenSourceLicensesResponse>* AsyncListOpenSourceLicensesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::ListOpenSourceLicensesResponse>* PrepareAsyncListOpenSourceLicensesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelTypeResponse>* AsyncListModelTypesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelTypeResponse>* PrepareAsyncListModelTypesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>* AsyncGetModelRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>* PrepareAsyncGetModelRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>* AsyncGetModelOutputInfoRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>* PrepareAsyncGetModelOutputInfoRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>* AsyncListModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>* PrepareAsyncListModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>* AsyncPostModelsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>* PrepareAsyncPostModelsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>* AsyncPostModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>* PrepareAsyncPostModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>* AsyncPatchModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>* PrepareAsyncPatchModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>* AsyncPatchModelIdsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelResponse>* PrepareAsyncPatchModelIdsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteModelRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteModelRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelToolkitResponse>* AsyncPatchModelToolkitsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelToolkitResponse>* PrepareAsyncPatchModelToolkitsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelUseCaseResponse>* AsyncPatchModelUseCasesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelUseCaseResponse>* PrepareAsyncPatchModelUseCasesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelLanguageResponse>* AsyncPatchModelLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelLanguageResponse>* PrepareAsyncPatchModelLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>* AsyncListModelInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiInputResponse>* PrepareAsyncListModelInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>* AsyncGetModelVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>* PrepareAsyncGetModelVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionResponse>* AsyncListModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionResponse>* PrepareAsyncListModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncPostWorkflowVersionsUnPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncPostWorkflowVersionsUnPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncPostWorkflowVersionsPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncPostWorkflowVersionsPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncPostModelVersionsPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncPostModelVersionsPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncPostModelVersionsUnPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncPostModelVersionsUnPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>* AsyncPostModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelResponse>* PrepareAsyncPostModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionResponse>* AsyncPatchModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionResponse>* PrepareAsyncPatchModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteModelVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteModelVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>* AsyncGetModelVersionMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>* PrepareAsyncGetModelVersionMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>* AsyncPostModelVersionMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionResponse>* PrepareAsyncPostModelVersionMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelReferenceResponse>* AsyncListModelReferencesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelReferenceResponse>* PrepareAsyncListModelReferencesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionInputExampleResponse>* AsyncGetModelVersionInputExampleRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleModelVersionInputExampleResponse>* PrepareAsyncGetModelVersionInputExampleRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionInputExampleResponse>* AsyncListModelVersionInputExamplesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiModelVersionInputExampleResponse>* PrepareAsyncListModelVersionInputExamplesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleWorkflowResponse>* AsyncGetWorkflowRaw(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleWorkflowResponse>* PrepareAsyncGetWorkflowRaw(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>* AsyncListWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>* PrepareAsyncListWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>* AsyncPostWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>* PrepareAsyncPostWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>* AsyncPatchWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowResponse>* PrepareAsyncPatchWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteWorkflowRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteWorkflowRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PostWorkflowResultsResponse>* AsyncPostWorkflowResultsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PostWorkflowResultsResponse>* PrepareAsyncPostWorkflowResultsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PostWorkflowResultsSimilarityResponse>* AsyncPostWorkflowResultsSimilarityRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::PostWorkflowResultsSimilarityResponse>* PrepareAsyncPostWorkflowResultsSimilarityRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowVersionResponse>* AsyncListWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowVersionResponse>* PrepareAsyncListWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleWorkflowVersionResponse>* AsyncGetWorkflowVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleWorkflowVersionResponse>* PrepareAsyncGetWorkflowVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowVersionResponse>* AsyncPatchWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiWorkflowVersionResponse>* PrepareAsyncPatchWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleKeyResponse>* AsyncGetKeyRaw(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleKeyResponse>* PrepareAsyncGetKeyRaw(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>* AsyncListKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>* PrepareAsyncListKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>* AsyncListAppKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>* PrepareAsyncListAppKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteKeyRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteKeyRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>* AsyncPostKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>* PrepareAsyncPostKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>* AsyncPatchKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiKeyResponse>* PrepareAsyncPatchKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeResponse>* AsyncMyScopesRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeResponse>* PrepareAsyncMyScopesRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeUserResponse>* AsyncMyScopesUserRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeUserResponse>* PrepareAsyncMyScopesUserRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeRootResponse>* AsyncMyScopesRootRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeRootResponse>* PrepareAsyncMyScopesRootRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeDepsResponse>* AsyncListScopesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiScopeDepsResponse>* PrepareAsyncListScopesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppResponse>* AsyncGetAppRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppResponse>* PrepareAsyncGetAppRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>* AsyncListAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>* PrepareAsyncListAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteAppRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteAppRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>* AsyncPostAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>* PrepareAsyncPostAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>* AsyncPatchAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>* PrepareAsyncPatchAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppResponse>* AsyncPatchAppRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppResponse>* PrepareAsyncPatchAppRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>* AsyncPatchAppsIdsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>* PrepareAsyncPatchAppsIdsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>* AsyncPostAppsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppResponse>* PrepareAsyncPostAppsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SinglePasswordValidationResponse>* AsyncPostValidatePasswordRaw(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SinglePasswordValidationResponse>* PrepareAsyncPostValidatePasswordRaw(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleSearchResponse>* AsyncGetSearchRaw(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleSearchResponse>* PrepareAsyncGetSearchRaw(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* AsyncListSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* PrepareAsyncListSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* AsyncPatchSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPatchSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* AsyncPostSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPostSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* AsyncPostSearchesByIDRaw(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPostSearchesByIDRaw(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* AsyncPostAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* PrepareAsyncPostAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* AsyncGetAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* PrepareAsyncGetAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* AsyncListAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* PrepareAsyncListAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteSearchRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteSearchRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>* AsyncListAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>* PrepareAsyncListAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAnnotationFilterResponse>* AsyncGetAnnotationFilterRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAnnotationFilterResponse>* PrepareAsyncGetAnnotationFilterRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>* AsyncPostAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>* PrepareAsyncPostAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>* AsyncPatchAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAnnotationFilterResponse>* PrepareAsyncPatchAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatusCodeResponse>* AsyncListStatusCodesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatusCodeResponse>* PrepareAsyncListStatusCodesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleStatusCodeResponse>* AsyncGetStatusCodeRaw(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleStatusCodeResponse>* PrepareAsyncGetStatusCodeRaw(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>* AsyncListCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>* PrepareAsyncListCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>* AsyncPostCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>* PrepareAsyncPostCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>* AsyncPatchCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaboratorsResponse>* PrepareAsyncPatchCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaborationsResponse>* AsyncListCollaborationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollaborationsResponse>* PrepareAsyncListCollaborationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppDuplicationsResponse>* AsyncPostAppDuplicationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppDuplicationsResponse>* PrepareAsyncPostAppDuplicationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppDuplicationsResponse>* AsyncListAppDuplicationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiAppDuplicationsResponse>* PrepareAsyncListAppDuplicationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppDuplicationResponse>* AsyncGetAppDuplicationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleAppDuplicationResponse>* PrepareAsyncGetAppDuplicationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>* AsyncPostTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>* PrepareAsyncPostTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskCountResponse>* AsyncGetTaskAnnotationCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskCountResponse>* PrepareAsyncGetTaskAnnotationCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskCountResponse>* AsyncGetTaskInputCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskCountResponse>* PrepareAsyncGetTaskInputCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskResponse>* AsyncGetTaskRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleTaskResponse>* PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>* AsyncListTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>* PrepareAsyncListTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>* AsyncPatchTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTaskResponse>* PrepareAsyncPatchTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>* AsyncPostLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>* PrepareAsyncPostLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleLabelOrderResponse>* AsyncGetLabelOrderRaw(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleLabelOrderResponse>* PrepareAsyncGetLabelOrderRaw(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>* AsyncListLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>* PrepareAsyncListLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>* AsyncPatchLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiLabelOrderResponse>* PrepareAsyncPatchLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>* AsyncPostCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>* PrepareAsyncPostCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleCollectorResponse>* AsyncGetCollectorRaw(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleCollectorResponse>* PrepareAsyncGetCollectorRaw(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>* AsyncListCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>* PrepareAsyncListCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>* AsyncPatchCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiCollectorResponse>* PrepareAsyncPatchCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatValueResponse>* AsyncPostStatValuesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatValueResponse>* PrepareAsyncPostStatValuesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatValueAggregateResponse>* AsyncPostStatValuesAggregateRaw(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiStatValueAggregateResponse>* PrepareAsyncPostStatValuesAggregateRaw(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncPostTrendingMetricsViewRaw(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncPostTrendingMetricsViewRaw(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTrendingMetricsViewResponse>* AsyncListTrendingMetricsViewsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiTrendingMetricsViewResponse>* PrepareAsyncListTrendingMetricsViewsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>* AsyncPostBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>* PrepareAsyncPostBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>* AsyncListBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>* PrepareAsyncListBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleBulkOperationsResponse>* AsyncGetBulkOperationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleBulkOperationsResponse>* PrepareAsyncGetBulkOperationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>* AsyncCancelBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::MultiBulkOperationsResponse>* PrepareAsyncCancelBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* AsyncDeleteBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>* AsyncGetDatasetInputsSearchAddJobRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>* PrepareAsyncGetDatasetInputsSearchAddJobRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::clarifai::api::MultiConceptRelationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>> AsyncListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>>(AsyncListConceptRelationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>> PrepareAsyncListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>>(PrepareAsyncListConceptRelationsRaw(context, request, cq));
    }
    ::grpc::Status PostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::clarifai::api::MultiConceptRelationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>> AsyncPostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>>(AsyncPostConceptRelationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>> PrepareAsyncPostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>>(PrepareAsyncPostConceptRelationsRaw(context, request, cq));
    }
    ::grpc::Status DeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteConceptRelationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteConceptRelationsRaw(context, request, cq));
    }
    ::grpc::Status GetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::clarifai::api::MultiConceptCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptCountResponse>> AsyncGetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptCountResponse>>(AsyncGetConceptCountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptCountResponse>> PrepareAsyncGetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptCountResponse>>(PrepareAsyncGetConceptCountsRaw(context, request, cq));
    }
    ::grpc::Status GetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::clarifai::api::SingleConceptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptResponse>> AsyncGetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptResponse>>(AsyncGetConceptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptResponse>> PrepareAsyncGetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptResponse>>(PrepareAsyncGetConceptRaw(context, request, cq));
    }
    ::grpc::Status ListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::clarifai::api::MultiConceptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>> AsyncListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>>(AsyncListConceptsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>> PrepareAsyncListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>>(PrepareAsyncListConceptsRaw(context, request, cq));
    }
    ::grpc::Status PostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::clarifai::api::MultiConceptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>> AsyncPostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>>(AsyncPostConceptsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>> PrepareAsyncPostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>>(PrepareAsyncPostConceptsSearchesRaw(context, request, cq));
    }
    ::grpc::Status PostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::clarifai::api::MultiConceptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>> AsyncPostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>>(AsyncPostConceptsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>> PrepareAsyncPostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>>(PrepareAsyncPostConceptsRaw(context, request, cq));
    }
    ::grpc::Status PatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::clarifai::api::MultiConceptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>> AsyncPatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>>(AsyncPatchConceptsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>> PrepareAsyncPatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>>(PrepareAsyncPatchConceptsRaw(context, request, cq));
    }
    ::grpc::Status GetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::clarifai::api::SingleConceptLanguageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptLanguageResponse>> AsyncGetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptLanguageResponse>>(AsyncGetConceptLanguageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptLanguageResponse>> PrepareAsyncGetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptLanguageResponse>>(PrepareAsyncGetConceptLanguageRaw(context, request, cq));
    }
    ::grpc::Status ListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::clarifai::api::MultiConceptLanguageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>> AsyncListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>>(AsyncListConceptLanguagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>> PrepareAsyncListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>>(PrepareAsyncListConceptLanguagesRaw(context, request, cq));
    }
    ::grpc::Status PostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::clarifai::api::MultiConceptLanguageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>> AsyncPostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>>(AsyncPostConceptLanguagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>> PrepareAsyncPostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>>(PrepareAsyncPostConceptLanguagesRaw(context, request, cq));
    }
    ::grpc::Status PatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::clarifai::api::MultiConceptLanguageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>> AsyncPatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>>(AsyncPatchConceptLanguagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>> PrepareAsyncPatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>>(PrepareAsyncPatchConceptLanguagesRaw(context, request, cq));
    }
    ::grpc::Status ListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::clarifai::api::MultiKnowledgeGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>> AsyncListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>>(AsyncListKnowledgeGraphsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>> PrepareAsyncListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>>(PrepareAsyncListKnowledgeGraphsRaw(context, request, cq));
    }
    ::grpc::Status PostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::clarifai::api::MultiKnowledgeGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>> AsyncPostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>>(AsyncPostKnowledgeGraphsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>> PrepareAsyncPostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>>(PrepareAsyncPostKnowledgeGraphsRaw(context, request, cq));
    }
    ::grpc::Status PostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::clarifai::api::MultiConceptMappingJobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptMappingJobResponse>> AsyncPostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptMappingJobResponse>>(AsyncPostConceptMappingJobsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptMappingJobResponse>> PrepareAsyncPostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptMappingJobResponse>>(PrepareAsyncPostConceptMappingJobsRaw(context, request, cq));
    }
    ::grpc::Status GetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::clarifai::api::SingleAnnotationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationResponse>> AsyncGetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationResponse>>(AsyncGetAnnotationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationResponse>> PrepareAsyncGetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationResponse>>(PrepareAsyncGetAnnotationRaw(context, request, cq));
    }
    ::grpc::Status ListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::clarifai::api::MultiAnnotationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>> AsyncListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>>(AsyncListAnnotationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>> PrepareAsyncListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>>(PrepareAsyncListAnnotationsRaw(context, request, cq));
    }
    ::grpc::Status PostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::clarifai::api::MultiAnnotationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>> AsyncPostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>>(AsyncPostAnnotationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>> PrepareAsyncPostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>>(PrepareAsyncPostAnnotationsRaw(context, request, cq));
    }
    ::grpc::Status PatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::clarifai::api::MultiAnnotationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>> AsyncPatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>>(AsyncPatchAnnotationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>> PrepareAsyncPatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>>(PrepareAsyncPatchAnnotationsRaw(context, request, cq));
    }
    ::grpc::Status PatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::clarifai::api::PatchAnnotationsStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::PatchAnnotationsStatusResponse>> AsyncPatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::PatchAnnotationsStatusResponse>>(AsyncPatchAnnotationsStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::PatchAnnotationsStatusResponse>> PrepareAsyncPatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::PatchAnnotationsStatusResponse>>(PrepareAsyncPatchAnnotationsStatusRaw(context, request, cq));
    }
    ::grpc::Status DeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteAnnotationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteAnnotationRaw(context, request, cq));
    }
    ::grpc::Status DeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteAnnotationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteAnnotationsRaw(context, request, cq));
    }
    ::grpc::Status PatchAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> AsyncPatchAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(AsyncPatchAnnotationsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPatchAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPatchAnnotationsSearchesRaw(context, request, cq));
    }
    ::grpc::Status PostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> AsyncPostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(AsyncPostAnnotationsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPostAnnotationsSearchesRaw(context, request, cq));
    }
    ::grpc::Status GetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::clarifai::api::SingleInputCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputCountResponse>> AsyncGetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputCountResponse>>(AsyncGetInputCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputCountResponse>> PrepareAsyncGetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputCountResponse>>(PrepareAsyncGetInputCountRaw(context, request, cq));
    }
    ::grpc::Status StreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::clarifai::api::MultiInputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>> AsyncStreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>>(AsyncStreamInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>> PrepareAsyncStreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>>(PrepareAsyncStreamInputsRaw(context, request, cq));
    }
    ::grpc::Status GetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::clarifai::api::MultiInputAnnotationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputAnnotationResponse>> AsyncGetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputAnnotationResponse>>(AsyncGetInputSamplesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputAnnotationResponse>> PrepareAsyncGetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputAnnotationResponse>>(PrepareAsyncGetInputSamplesRaw(context, request, cq));
    }
    ::grpc::Status GetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::clarifai::api::SingleInputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputResponse>> AsyncGetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputResponse>>(AsyncGetInputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputResponse>> PrepareAsyncGetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputResponse>>(PrepareAsyncGetInputRaw(context, request, cq));
    }
    ::grpc::Status ListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::clarifai::api::MultiInputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>> AsyncListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>>(AsyncListInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>> PrepareAsyncListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>>(PrepareAsyncListInputsRaw(context, request, cq));
    }
    ::grpc::Status PostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::clarifai::api::MultiInputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>> AsyncPostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>>(AsyncPostInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>> PrepareAsyncPostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>>(PrepareAsyncPostInputsRaw(context, request, cq));
    }
    ::grpc::Status PatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::clarifai::api::MultiInputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>> AsyncPatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>>(AsyncPatchInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>> PrepareAsyncPatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>>(PrepareAsyncPatchInputsRaw(context, request, cq));
    }
    ::grpc::Status DeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteInputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteInputRaw(context, request, cq));
    }
    ::grpc::Status DeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteInputsRaw(context, request, cq));
    }
    ::grpc::Status PatchInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> AsyncPatchInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(AsyncPatchInputsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPatchInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPatchInputsSearchesRaw(context, request, cq));
    }
    ::grpc::Status PostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> AsyncPostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(AsyncPostInputsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPostInputsSearchesRaw(context, request, cq));
    }
    ::grpc::Status PostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::clarifai::api::MultiOutputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiOutputResponse>> AsyncPostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiOutputResponse>>(AsyncPostModelOutputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiOutputResponse>> PrepareAsyncPostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiOutputResponse>>(PrepareAsyncPostModelOutputsRaw(context, request, cq));
    }
    ::grpc::Status ListDatasets(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest& request, ::clarifai::api::MultiDatasetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>> AsyncListDatasets(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>>(AsyncListDatasetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>> PrepareAsyncListDatasets(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>>(PrepareAsyncListDatasetsRaw(context, request, cq));
    }
    ::grpc::Status GetDataset(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest& request, ::clarifai::api::SingleDatasetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetResponse>> AsyncGetDataset(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetResponse>>(AsyncGetDatasetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetResponse>> PrepareAsyncGetDataset(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetResponse>>(PrepareAsyncGetDatasetRaw(context, request, cq));
    }
    ::grpc::Status PostDatasets(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest& request, ::clarifai::api::MultiDatasetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>> AsyncPostDatasets(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>>(AsyncPostDatasetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>> PrepareAsyncPostDatasets(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>>(PrepareAsyncPostDatasetsRaw(context, request, cq));
    }
    ::grpc::Status PatchDatasets(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest& request, ::clarifai::api::MultiDatasetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>> AsyncPatchDatasets(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>>(AsyncPatchDatasetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>> PrepareAsyncPatchDatasets(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>>(PrepareAsyncPatchDatasetsRaw(context, request, cq));
    }
    ::grpc::Status DeleteDatasets(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteDatasets(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteDatasetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteDatasets(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteDatasetsRaw(context, request, cq));
    }
    ::grpc::Status ListDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest& request, ::clarifai::api::MultiDatasetInputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetInputResponse>> AsyncListDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetInputResponse>>(AsyncListDatasetInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetInputResponse>> PrepareAsyncListDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetInputResponse>>(PrepareAsyncListDatasetInputsRaw(context, request, cq));
    }
    ::grpc::Status GetDatasetInput(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest& request, ::clarifai::api::SingleDatasetInputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetInputResponse>> AsyncGetDatasetInput(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetInputResponse>>(AsyncGetDatasetInputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetInputResponse>> PrepareAsyncGetDatasetInput(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetInputResponse>>(PrepareAsyncGetDatasetInputRaw(context, request, cq));
    }
    ::grpc::Status PostDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest& request, ::clarifai::api::MultiDatasetInputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetInputResponse>> AsyncPostDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetInputResponse>>(AsyncPostDatasetInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetInputResponse>> PrepareAsyncPostDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetInputResponse>>(PrepareAsyncPostDatasetInputsRaw(context, request, cq));
    }
    ::grpc::Status DeleteDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteDatasetInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteDatasetInputsRaw(context, request, cq));
    }
    ::grpc::Status ListDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest& request, ::clarifai::api::MultiDatasetVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>> AsyncListDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>>(AsyncListDatasetVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>> PrepareAsyncListDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>>(PrepareAsyncListDatasetVersionsRaw(context, request, cq));
    }
    ::grpc::Status GetDatasetVersion(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest& request, ::clarifai::api::SingleDatasetVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetVersionResponse>> AsyncGetDatasetVersion(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetVersionResponse>>(AsyncGetDatasetVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetVersionResponse>> PrepareAsyncGetDatasetVersion(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetVersionResponse>>(PrepareAsyncGetDatasetVersionRaw(context, request, cq));
    }
    ::grpc::Status ListDatasetVersionMetricsGroups(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest& request, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>> AsyncListDatasetVersionMetricsGroups(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>>(AsyncListDatasetVersionMetricsGroupsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>> PrepareAsyncListDatasetVersionMetricsGroups(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>>(PrepareAsyncListDatasetVersionMetricsGroupsRaw(context, request, cq));
    }
    ::grpc::Status PostDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest& request, ::clarifai::api::MultiDatasetVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>> AsyncPostDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>>(AsyncPostDatasetVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>> PrepareAsyncPostDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>>(PrepareAsyncPostDatasetVersionsRaw(context, request, cq));
    }
    ::grpc::Status PatchDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest& request, ::clarifai::api::MultiDatasetVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>> AsyncPatchDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>>(AsyncPatchDatasetVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>> PrepareAsyncPatchDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>>(PrepareAsyncPatchDatasetVersionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteDatasetVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteDatasetVersionsRaw(context, request, cq));
    }
    ::grpc::Status GetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::clarifai::api::SingleModelTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelTypeResponse>> AsyncGetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelTypeResponse>>(AsyncGetModelTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelTypeResponse>> PrepareAsyncGetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelTypeResponse>>(PrepareAsyncGetModelTypeRaw(context, request, cq));
    }
    ::grpc::Status ListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::clarifai::api::ListOpenSourceLicensesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::ListOpenSourceLicensesResponse>> AsyncListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::ListOpenSourceLicensesResponse>>(AsyncListOpenSourceLicensesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::ListOpenSourceLicensesResponse>> PrepareAsyncListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::ListOpenSourceLicensesResponse>>(PrepareAsyncListOpenSourceLicensesRaw(context, request, cq));
    }
    ::grpc::Status ListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::clarifai::api::MultiModelTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelTypeResponse>> AsyncListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelTypeResponse>>(AsyncListModelTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelTypeResponse>> PrepareAsyncListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelTypeResponse>>(PrepareAsyncListModelTypesRaw(context, request, cq));
    }
    ::grpc::Status GetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::clarifai::api::SingleModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>> AsyncGetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>>(AsyncGetModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>> PrepareAsyncGetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>>(PrepareAsyncGetModelRaw(context, request, cq));
    }
    ::grpc::Status GetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::clarifai::api::SingleModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>> AsyncGetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>>(AsyncGetModelOutputInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>> PrepareAsyncGetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>>(PrepareAsyncGetModelOutputInfoRaw(context, request, cq));
    }
    ::grpc::Status ListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::clarifai::api::MultiModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>> AsyncListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>>(AsyncListModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>> PrepareAsyncListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>>(PrepareAsyncListModelsRaw(context, request, cq));
    }
    ::grpc::Status PostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::clarifai::api::MultiModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>> AsyncPostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>>(AsyncPostModelsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>> PrepareAsyncPostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>>(PrepareAsyncPostModelsSearchesRaw(context, request, cq));
    }
    ::grpc::Status PostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::clarifai::api::SingleModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>> AsyncPostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>>(AsyncPostModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>> PrepareAsyncPostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>>(PrepareAsyncPostModelsRaw(context, request, cq));
    }
    ::grpc::Status PatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::clarifai::api::MultiModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>> AsyncPatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>>(AsyncPatchModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>> PrepareAsyncPatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>>(PrepareAsyncPatchModelsRaw(context, request, cq));
    }
    ::grpc::Status PatchModelIds(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest& request, ::clarifai::api::MultiModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>> AsyncPatchModelIds(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>>(AsyncPatchModelIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>> PrepareAsyncPatchModelIds(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>>(PrepareAsyncPatchModelIdsRaw(context, request, cq));
    }
    ::grpc::Status DeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteModelRaw(context, request, cq));
    }
    ::grpc::Status DeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteModelsRaw(context, request, cq));
    }
    ::grpc::Status PatchModelToolkits(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest& request, ::clarifai::api::MultiModelToolkitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelToolkitResponse>> AsyncPatchModelToolkits(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelToolkitResponse>>(AsyncPatchModelToolkitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelToolkitResponse>> PrepareAsyncPatchModelToolkits(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelToolkitResponse>>(PrepareAsyncPatchModelToolkitsRaw(context, request, cq));
    }
    ::grpc::Status PatchModelUseCases(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest& request, ::clarifai::api::MultiModelUseCaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelUseCaseResponse>> AsyncPatchModelUseCases(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelUseCaseResponse>>(AsyncPatchModelUseCasesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelUseCaseResponse>> PrepareAsyncPatchModelUseCases(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelUseCaseResponse>>(PrepareAsyncPatchModelUseCasesRaw(context, request, cq));
    }
    ::grpc::Status PatchModelLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest& request, ::clarifai::api::MultiModelLanguageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelLanguageResponse>> AsyncPatchModelLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelLanguageResponse>>(AsyncPatchModelLanguagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelLanguageResponse>> PrepareAsyncPatchModelLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelLanguageResponse>>(PrepareAsyncPatchModelLanguagesRaw(context, request, cq));
    }
    ::grpc::Status ListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::clarifai::api::MultiInputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>> AsyncListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>>(AsyncListModelInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>> PrepareAsyncListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>>(PrepareAsyncListModelInputsRaw(context, request, cq));
    }
    ::grpc::Status GetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::clarifai::api::SingleModelVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>> AsyncGetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>>(AsyncGetModelVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>> PrepareAsyncGetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>>(PrepareAsyncGetModelVersionRaw(context, request, cq));
    }
    ::grpc::Status ListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::clarifai::api::MultiModelVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>> AsyncListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>>(AsyncListModelVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>> PrepareAsyncListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>>(PrepareAsyncListModelVersionsRaw(context, request, cq));
    }
    ::grpc::Status PostWorkflowVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncPostWorkflowVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncPostWorkflowVersionsUnPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncPostWorkflowVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncPostWorkflowVersionsUnPublishRaw(context, request, cq));
    }
    ::grpc::Status PostWorkflowVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncPostWorkflowVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncPostWorkflowVersionsPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncPostWorkflowVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncPostWorkflowVersionsPublishRaw(context, request, cq));
    }
    ::grpc::Status PostModelVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncPostModelVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncPostModelVersionsPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncPostModelVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncPostModelVersionsPublishRaw(context, request, cq));
    }
    ::grpc::Status PostModelVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncPostModelVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncPostModelVersionsUnPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncPostModelVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncPostModelVersionsUnPublishRaw(context, request, cq));
    }
    ::grpc::Status PostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::clarifai::api::SingleModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>> AsyncPostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>>(AsyncPostModelVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>> PrepareAsyncPostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>>(PrepareAsyncPostModelVersionsRaw(context, request, cq));
    }
    ::grpc::Status PatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::clarifai::api::MultiModelVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>> AsyncPatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>>(AsyncPatchModelVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>> PrepareAsyncPatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>>(PrepareAsyncPatchModelVersionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteModelVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteModelVersionRaw(context, request, cq));
    }
    ::grpc::Status GetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::clarifai::api::SingleModelVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>> AsyncGetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>>(AsyncGetModelVersionMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>> PrepareAsyncGetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>>(PrepareAsyncGetModelVersionMetricsRaw(context, request, cq));
    }
    ::grpc::Status PostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::clarifai::api::SingleModelVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>> AsyncPostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>>(AsyncPostModelVersionMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>> PrepareAsyncPostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>>(PrepareAsyncPostModelVersionMetricsRaw(context, request, cq));
    }
    ::grpc::Status ListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::clarifai::api::MultiModelReferenceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelReferenceResponse>> AsyncListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelReferenceResponse>>(AsyncListModelReferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelReferenceResponse>> PrepareAsyncListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelReferenceResponse>>(PrepareAsyncListModelReferencesRaw(context, request, cq));
    }
    ::grpc::Status GetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::clarifai::api::SingleModelVersionInputExampleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionInputExampleResponse>> AsyncGetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionInputExampleResponse>>(AsyncGetModelVersionInputExampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionInputExampleResponse>> PrepareAsyncGetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionInputExampleResponse>>(PrepareAsyncGetModelVersionInputExampleRaw(context, request, cq));
    }
    ::grpc::Status ListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::clarifai::api::MultiModelVersionInputExampleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionInputExampleResponse>> AsyncListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionInputExampleResponse>>(AsyncListModelVersionInputExamplesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionInputExampleResponse>> PrepareAsyncListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionInputExampleResponse>>(PrepareAsyncListModelVersionInputExamplesRaw(context, request, cq));
    }
    ::grpc::Status GetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::clarifai::api::SingleWorkflowResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowResponse>> AsyncGetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowResponse>>(AsyncGetWorkflowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowResponse>> PrepareAsyncGetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowResponse>>(PrepareAsyncGetWorkflowRaw(context, request, cq));
    }
    ::grpc::Status ListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::clarifai::api::MultiWorkflowResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>> AsyncListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>>(AsyncListWorkflowsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>> PrepareAsyncListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>>(PrepareAsyncListWorkflowsRaw(context, request, cq));
    }
    ::grpc::Status PostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::clarifai::api::MultiWorkflowResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>> AsyncPostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>>(AsyncPostWorkflowsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>> PrepareAsyncPostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>>(PrepareAsyncPostWorkflowsRaw(context, request, cq));
    }
    ::grpc::Status PatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::clarifai::api::MultiWorkflowResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>> AsyncPatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>>(AsyncPatchWorkflowsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>> PrepareAsyncPatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>>(PrepareAsyncPatchWorkflowsRaw(context, request, cq));
    }
    ::grpc::Status DeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteWorkflowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteWorkflowRaw(context, request, cq));
    }
    ::grpc::Status DeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteWorkflowsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteWorkflowsRaw(context, request, cq));
    }
    ::grpc::Status PostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::clarifai::api::PostWorkflowResultsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsResponse>> AsyncPostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsResponse>>(AsyncPostWorkflowResultsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsResponse>> PrepareAsyncPostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsResponse>>(PrepareAsyncPostWorkflowResultsRaw(context, request, cq));
    }
    ::grpc::Status PostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsSimilarityResponse>> AsyncPostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsSimilarityResponse>>(AsyncPostWorkflowResultsSimilarityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsSimilarityResponse>> PrepareAsyncPostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsSimilarityResponse>>(PrepareAsyncPostWorkflowResultsSimilarityRaw(context, request, cq));
    }
    ::grpc::Status ListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::clarifai::api::MultiWorkflowVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>> AsyncListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>>(AsyncListWorkflowVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>> PrepareAsyncListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>>(PrepareAsyncListWorkflowVersionsRaw(context, request, cq));
    }
    ::grpc::Status GetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::clarifai::api::SingleWorkflowVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowVersionResponse>> AsyncGetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowVersionResponse>>(AsyncGetWorkflowVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowVersionResponse>> PrepareAsyncGetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowVersionResponse>>(PrepareAsyncGetWorkflowVersionRaw(context, request, cq));
    }
    ::grpc::Status DeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteWorkflowVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteWorkflowVersionsRaw(context, request, cq));
    }
    ::grpc::Status PatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::clarifai::api::MultiWorkflowVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>> AsyncPatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>>(AsyncPatchWorkflowVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>> PrepareAsyncPatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>>(PrepareAsyncPatchWorkflowVersionsRaw(context, request, cq));
    }
    ::grpc::Status GetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::clarifai::api::SingleKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleKeyResponse>> AsyncGetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleKeyResponse>>(AsyncGetKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleKeyResponse>> PrepareAsyncGetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleKeyResponse>>(PrepareAsyncGetKeyRaw(context, request, cq));
    }
    ::grpc::Status ListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::clarifai::api::MultiKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>> AsyncListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>>(AsyncListKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>> PrepareAsyncListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>>(PrepareAsyncListKeysRaw(context, request, cq));
    }
    ::grpc::Status ListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::clarifai::api::MultiKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>> AsyncListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>>(AsyncListAppKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>> PrepareAsyncListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>>(PrepareAsyncListAppKeysRaw(context, request, cq));
    }
    ::grpc::Status DeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteKeyRaw(context, request, cq));
    }
    ::grpc::Status PostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::clarifai::api::MultiKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>> AsyncPostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>>(AsyncPostKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>> PrepareAsyncPostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>>(PrepareAsyncPostKeysRaw(context, request, cq));
    }
    ::grpc::Status PatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::clarifai::api::MultiKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>> AsyncPatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>>(AsyncPatchKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>> PrepareAsyncPatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>>(PrepareAsyncPatchKeysRaw(context, request, cq));
    }
    ::grpc::Status MyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::clarifai::api::MultiScopeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeResponse>> AsyncMyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeResponse>>(AsyncMyScopesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeResponse>> PrepareAsyncMyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeResponse>>(PrepareAsyncMyScopesRaw(context, request, cq));
    }
    ::grpc::Status MyScopesUser(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest& request, ::clarifai::api::MultiScopeUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeUserResponse>> AsyncMyScopesUser(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeUserResponse>>(AsyncMyScopesUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeUserResponse>> PrepareAsyncMyScopesUser(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeUserResponse>>(PrepareAsyncMyScopesUserRaw(context, request, cq));
    }
    ::grpc::Status MyScopesRoot(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest& request, ::clarifai::api::MultiScopeRootResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeRootResponse>> AsyncMyScopesRoot(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeRootResponse>>(AsyncMyScopesRootRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeRootResponse>> PrepareAsyncMyScopesRoot(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeRootResponse>>(PrepareAsyncMyScopesRootRaw(context, request, cq));
    }
    ::grpc::Status ListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::clarifai::api::MultiScopeDepsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeDepsResponse>> AsyncListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeDepsResponse>>(AsyncListScopesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeDepsResponse>> PrepareAsyncListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeDepsResponse>>(PrepareAsyncListScopesRaw(context, request, cq));
    }
    ::grpc::Status GetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::clarifai::api::SingleAppResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>> AsyncGetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>>(AsyncGetAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>> PrepareAsyncGetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>>(PrepareAsyncGetAppRaw(context, request, cq));
    }
    ::grpc::Status ListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::clarifai::api::MultiAppResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>> AsyncListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>>(AsyncListAppsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>> PrepareAsyncListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>>(PrepareAsyncListAppsRaw(context, request, cq));
    }
    ::grpc::Status DeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteAppRaw(context, request, cq));
    }
    ::grpc::Status PostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::clarifai::api::MultiAppResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>> AsyncPostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>>(AsyncPostAppsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>> PrepareAsyncPostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>>(PrepareAsyncPostAppsRaw(context, request, cq));
    }
    ::grpc::Status PatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::clarifai::api::MultiAppResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>> AsyncPatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>>(AsyncPatchAppsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>> PrepareAsyncPatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>>(PrepareAsyncPatchAppsRaw(context, request, cq));
    }
    ::grpc::Status PatchApp(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest& request, ::clarifai::api::SingleAppResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>> AsyncPatchApp(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>>(AsyncPatchAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>> PrepareAsyncPatchApp(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>>(PrepareAsyncPatchAppRaw(context, request, cq));
    }
    ::grpc::Status PatchAppsIds(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest& request, ::clarifai::api::MultiAppResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>> AsyncPatchAppsIds(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>>(AsyncPatchAppsIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>> PrepareAsyncPatchAppsIds(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>>(PrepareAsyncPatchAppsIdsRaw(context, request, cq));
    }
    ::grpc::Status PostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::clarifai::api::MultiAppResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>> AsyncPostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>>(AsyncPostAppsSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>> PrepareAsyncPostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>>(PrepareAsyncPostAppsSearchesRaw(context, request, cq));
    }
    ::grpc::Status PostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::clarifai::api::SinglePasswordValidationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SinglePasswordValidationResponse>> AsyncPostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SinglePasswordValidationResponse>>(AsyncPostValidatePasswordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SinglePasswordValidationResponse>> PrepareAsyncPostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SinglePasswordValidationResponse>>(PrepareAsyncPostValidatePasswordRaw(context, request, cq));
    }
    ::grpc::Status GetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::clarifai::api::SingleSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleSearchResponse>> AsyncGetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleSearchResponse>>(AsyncGetSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleSearchResponse>> PrepareAsyncGetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleSearchResponse>>(PrepareAsyncGetSearchRaw(context, request, cq));
    }
    ::grpc::Status ListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> AsyncListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(AsyncListSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> PrepareAsyncListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncListSearchesRaw(context, request, cq));
    }
    ::grpc::Status PatchSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> AsyncPatchSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(AsyncPatchSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPatchSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPatchSearchesRaw(context, request, cq));
    }
    ::grpc::Status PostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> AsyncPostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(AsyncPostSearchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPostSearchesRaw(context, request, cq));
    }
    ::grpc::Status PostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::clarifai::api::MultiSearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> AsyncPostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(AsyncPostSearchesByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>> PrepareAsyncPostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>>(PrepareAsyncPostSearchesByIDRaw(context, request, cq));
    }
    ::grpc::Status PostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>> AsyncPostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>>(AsyncPostAnnotationSearchMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>> PrepareAsyncPostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>>(PrepareAsyncPostAnnotationSearchMetricsRaw(context, request, cq));
    }
    ::grpc::Status GetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>> AsyncGetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>>(AsyncGetAnnotationSearchMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>> PrepareAsyncGetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>>(PrepareAsyncGetAnnotationSearchMetricsRaw(context, request, cq));
    }
    ::grpc::Status ListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>> AsyncListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>>(AsyncListAnnotationSearchMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>> PrepareAsyncListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>>(PrepareAsyncListAnnotationSearchMetricsRaw(context, request, cq));
    }
    ::grpc::Status DeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteAnnotationSearchMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteAnnotationSearchMetricsRaw(context, request, cq));
    }
    ::grpc::Status DeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteSearchRaw(context, request, cq));
    }
    ::grpc::Status ListAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest& request, ::clarifai::api::MultiAnnotationFilterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>> AsyncListAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>>(AsyncListAnnotationFiltersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>> PrepareAsyncListAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>>(PrepareAsyncListAnnotationFiltersRaw(context, request, cq));
    }
    ::grpc::Status GetAnnotationFilter(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest& request, ::clarifai::api::SingleAnnotationFilterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationFilterResponse>> AsyncGetAnnotationFilter(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationFilterResponse>>(AsyncGetAnnotationFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationFilterResponse>> PrepareAsyncGetAnnotationFilter(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationFilterResponse>>(PrepareAsyncGetAnnotationFilterRaw(context, request, cq));
    }
    ::grpc::Status PostAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest& request, ::clarifai::api::MultiAnnotationFilterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>> AsyncPostAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>>(AsyncPostAnnotationFiltersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>> PrepareAsyncPostAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>>(PrepareAsyncPostAnnotationFiltersRaw(context, request, cq));
    }
    ::grpc::Status PatchAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest& request, ::clarifai::api::MultiAnnotationFilterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>> AsyncPatchAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>>(AsyncPatchAnnotationFiltersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>> PrepareAsyncPatchAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>>(PrepareAsyncPatchAnnotationFiltersRaw(context, request, cq));
    }
    ::grpc::Status DeleteAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteAnnotationFiltersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteAnnotationFiltersRaw(context, request, cq));
    }
    ::grpc::Status ListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::clarifai::api::MultiStatusCodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatusCodeResponse>> AsyncListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatusCodeResponse>>(AsyncListStatusCodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatusCodeResponse>> PrepareAsyncListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatusCodeResponse>>(PrepareAsyncListStatusCodesRaw(context, request, cq));
    }
    ::grpc::Status GetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::clarifai::api::SingleStatusCodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleStatusCodeResponse>> AsyncGetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleStatusCodeResponse>>(AsyncGetStatusCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleStatusCodeResponse>> PrepareAsyncGetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleStatusCodeResponse>>(PrepareAsyncGetStatusCodeRaw(context, request, cq));
    }
    ::grpc::Status ListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::clarifai::api::MultiCollaboratorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>> AsyncListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>>(AsyncListCollaboratorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>> PrepareAsyncListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>>(PrepareAsyncListCollaboratorsRaw(context, request, cq));
    }
    ::grpc::Status PostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::clarifai::api::MultiCollaboratorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>> AsyncPostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>>(AsyncPostCollaboratorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>> PrepareAsyncPostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>>(PrepareAsyncPostCollaboratorsRaw(context, request, cq));
    }
    ::grpc::Status PatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::clarifai::api::MultiCollaboratorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>> AsyncPatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>>(AsyncPatchCollaboratorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>> PrepareAsyncPatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>>(PrepareAsyncPatchCollaboratorsRaw(context, request, cq));
    }
    ::grpc::Status DeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteCollaboratorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteCollaboratorsRaw(context, request, cq));
    }
    ::grpc::Status ListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::clarifai::api::MultiCollaborationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaborationsResponse>> AsyncListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaborationsResponse>>(AsyncListCollaborationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaborationsResponse>> PrepareAsyncListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaborationsResponse>>(PrepareAsyncListCollaborationsRaw(context, request, cq));
    }
    ::grpc::Status PostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::clarifai::api::MultiAppDuplicationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>> AsyncPostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>>(AsyncPostAppDuplicationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>> PrepareAsyncPostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>>(PrepareAsyncPostAppDuplicationsRaw(context, request, cq));
    }
    ::grpc::Status ListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::clarifai::api::MultiAppDuplicationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>> AsyncListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>>(AsyncListAppDuplicationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>> PrepareAsyncListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>>(PrepareAsyncListAppDuplicationsRaw(context, request, cq));
    }
    ::grpc::Status GetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::clarifai::api::SingleAppDuplicationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppDuplicationResponse>> AsyncGetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppDuplicationResponse>>(AsyncGetAppDuplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppDuplicationResponse>> PrepareAsyncGetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppDuplicationResponse>>(PrepareAsyncGetAppDuplicationRaw(context, request, cq));
    }
    ::grpc::Status PostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::clarifai::api::MultiTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>> AsyncPostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>>(AsyncPostTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>> PrepareAsyncPostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>>(PrepareAsyncPostTasksRaw(context, request, cq));
    }
    ::grpc::Status GetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::clarifai::api::SingleTaskCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>> AsyncGetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>>(AsyncGetTaskAnnotationCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>> PrepareAsyncGetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>>(PrepareAsyncGetTaskAnnotationCountRaw(context, request, cq));
    }
    ::grpc::Status GetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::clarifai::api::SingleTaskCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>> AsyncGetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>>(AsyncGetTaskInputCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>> PrepareAsyncGetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>>(PrepareAsyncGetTaskInputCountRaw(context, request, cq));
    }
    ::grpc::Status GetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::clarifai::api::SingleTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskResponse>> AsyncGetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskResponse>>(AsyncGetTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskResponse>> PrepareAsyncGetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskResponse>>(PrepareAsyncGetTaskRaw(context, request, cq));
    }
    ::grpc::Status ListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::clarifai::api::MultiTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>> AsyncListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>>(AsyncListTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>> PrepareAsyncListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>>(PrepareAsyncListTasksRaw(context, request, cq));
    }
    ::grpc::Status PatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::clarifai::api::MultiTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>> AsyncPatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>>(AsyncPatchTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>> PrepareAsyncPatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>>(PrepareAsyncPatchTasksRaw(context, request, cq));
    }
    ::grpc::Status DeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteTasksRaw(context, request, cq));
    }
    ::grpc::Status PostLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest& request, ::clarifai::api::MultiLabelOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>> AsyncPostLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>>(AsyncPostLabelOrdersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>> PrepareAsyncPostLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>>(PrepareAsyncPostLabelOrdersRaw(context, request, cq));
    }
    ::grpc::Status GetLabelOrder(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest& request, ::clarifai::api::SingleLabelOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleLabelOrderResponse>> AsyncGetLabelOrder(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleLabelOrderResponse>>(AsyncGetLabelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleLabelOrderResponse>> PrepareAsyncGetLabelOrder(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleLabelOrderResponse>>(PrepareAsyncGetLabelOrderRaw(context, request, cq));
    }
    ::grpc::Status ListLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest& request, ::clarifai::api::MultiLabelOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>> AsyncListLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>>(AsyncListLabelOrdersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>> PrepareAsyncListLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>>(PrepareAsyncListLabelOrdersRaw(context, request, cq));
    }
    ::grpc::Status PatchLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest& request, ::clarifai::api::MultiLabelOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>> AsyncPatchLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>>(AsyncPatchLabelOrdersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>> PrepareAsyncPatchLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>>(PrepareAsyncPatchLabelOrdersRaw(context, request, cq));
    }
    ::grpc::Status DeleteLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteLabelOrdersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteLabelOrdersRaw(context, request, cq));
    }
    ::grpc::Status PostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::clarifai::api::MultiCollectorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>> AsyncPostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>>(AsyncPostCollectorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>> PrepareAsyncPostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>>(PrepareAsyncPostCollectorsRaw(context, request, cq));
    }
    ::grpc::Status GetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::clarifai::api::SingleCollectorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleCollectorResponse>> AsyncGetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleCollectorResponse>>(AsyncGetCollectorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleCollectorResponse>> PrepareAsyncGetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleCollectorResponse>>(PrepareAsyncGetCollectorRaw(context, request, cq));
    }
    ::grpc::Status ListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::clarifai::api::MultiCollectorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>> AsyncListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>>(AsyncListCollectorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>> PrepareAsyncListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>>(PrepareAsyncListCollectorsRaw(context, request, cq));
    }
    ::grpc::Status PatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::clarifai::api::MultiCollectorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>> AsyncPatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>>(AsyncPatchCollectorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>> PrepareAsyncPatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>>(PrepareAsyncPatchCollectorsRaw(context, request, cq));
    }
    ::grpc::Status DeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteCollectorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteCollectorsRaw(context, request, cq));
    }
    ::grpc::Status PostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::clarifai::api::MultiStatValueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueResponse>> AsyncPostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueResponse>>(AsyncPostStatValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueResponse>> PrepareAsyncPostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueResponse>>(PrepareAsyncPostStatValuesRaw(context, request, cq));
    }
    ::grpc::Status PostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::clarifai::api::MultiStatValueAggregateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueAggregateResponse>> AsyncPostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueAggregateResponse>>(AsyncPostStatValuesAggregateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueAggregateResponse>> PrepareAsyncPostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueAggregateResponse>>(PrepareAsyncPostStatValuesAggregateRaw(context, request, cq));
    }
    ::grpc::Status PostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncPostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncPostTrendingMetricsViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncPostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncPostTrendingMetricsViewRaw(context, request, cq));
    }
    ::grpc::Status ListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::clarifai::api::MultiTrendingMetricsViewResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTrendingMetricsViewResponse>> AsyncListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTrendingMetricsViewResponse>>(AsyncListTrendingMetricsViewsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTrendingMetricsViewResponse>> PrepareAsyncListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTrendingMetricsViewResponse>>(PrepareAsyncListTrendingMetricsViewsRaw(context, request, cq));
    }
    ::grpc::Status PostBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest& request, ::clarifai::api::MultiBulkOperationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>> AsyncPostBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>>(AsyncPostBulkOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>> PrepareAsyncPostBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>>(PrepareAsyncPostBulkOperationsRaw(context, request, cq));
    }
    ::grpc::Status ListBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest& request, ::clarifai::api::MultiBulkOperationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>> AsyncListBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>>(AsyncListBulkOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>> PrepareAsyncListBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>>(PrepareAsyncListBulkOperationsRaw(context, request, cq));
    }
    ::grpc::Status GetBulkOperation(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest& request, ::clarifai::api::SingleBulkOperationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleBulkOperationsResponse>> AsyncGetBulkOperation(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleBulkOperationsResponse>>(AsyncGetBulkOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleBulkOperationsResponse>> PrepareAsyncGetBulkOperation(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleBulkOperationsResponse>>(PrepareAsyncGetBulkOperationRaw(context, request, cq));
    }
    ::grpc::Status CancelBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest& request, ::clarifai::api::MultiBulkOperationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>> AsyncCancelBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>>(AsyncCancelBulkOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>> PrepareAsyncCancelBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>>(PrepareAsyncCancelBulkOperationsRaw(context, request, cq));
    }
    ::grpc::Status DeleteBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest& request, ::clarifai::api::status::BaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> AsyncDeleteBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(AsyncDeleteBulkOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>> PrepareAsyncDeleteBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>>(PrepareAsyncDeleteBulkOperationsRaw(context, request, cq));
    }
    ::grpc::Status GetDatasetInputsSearchAddJob(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest& request, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>> AsyncGetDatasetInputsSearchAddJob(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>>(AsyncGetDatasetInputsSearchAddJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>> PrepareAsyncGetDatasetInputsSearchAddJob(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>>(PrepareAsyncGetDatasetInputsSearchAddJobRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response, std::function<void(::grpc::Status)>) override;
      void ListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response, std::function<void(::grpc::Status)>) override;
      void PostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest* request, ::clarifai::api::MultiConceptCountResponse* response, std::function<void(::grpc::Status)>) override;
      void GetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest* request, ::clarifai::api::MultiConceptCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest* request, ::clarifai::api::SingleConceptResponse* response, std::function<void(::grpc::Status)>) override;
      void GetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest* request, ::clarifai::api::SingleConceptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)>) override;
      void ListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)>) override;
      void PostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)>) override;
      void PostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest* request, ::clarifai::api::SingleConceptLanguageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest* request, ::clarifai::api::SingleConceptLanguageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, std::function<void(::grpc::Status)>) override;
      void ListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, std::function<void(::grpc::Status)>) override;
      void PostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, std::function<void(::grpc::Status)>) override;
      void ListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, std::function<void(::grpc::Status)>) override;
      void PostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest* request, ::clarifai::api::MultiConceptMappingJobResponse* response, std::function<void(::grpc::Status)>) override;
      void PostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest* request, ::clarifai::api::MultiConceptMappingJobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest* request, ::clarifai::api::SingleAnnotationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest* request, ::clarifai::api::SingleAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, std::function<void(::grpc::Status)>) override;
      void ListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, std::function<void(::grpc::Status)>) override;
      void PostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest* request, ::clarifai::api::PatchAnnotationsStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest* request, ::clarifai::api::PatchAnnotationsStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void PostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest* request, ::clarifai::api::SingleInputCountResponse* response, std::function<void(::grpc::Status)>) override;
      void GetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest* request, ::clarifai::api::SingleInputCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)>) override;
      void StreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest* request, ::clarifai::api::MultiInputAnnotationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest* request, ::clarifai::api::MultiInputAnnotationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest* request, ::clarifai::api::SingleInputResponse* response, std::function<void(::grpc::Status)>) override;
      void GetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest* request, ::clarifai::api::SingleInputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)>) override;
      void ListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)>) override;
      void PostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void PostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest* request, ::clarifai::api::MultiOutputResponse* response, std::function<void(::grpc::Status)>) override;
      void PostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest* request, ::clarifai::api::MultiOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListDatasets(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDatasets(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDataset(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest* request, ::clarifai::api::SingleDatasetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDataset(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest* request, ::clarifai::api::SingleDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostDatasets(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response, std::function<void(::grpc::Status)>) override;
      void PostDatasets(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchDatasets(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchDatasets(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteDatasets(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteDatasets(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest* request, ::clarifai::api::MultiDatasetInputResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest* request, ::clarifai::api::MultiDatasetInputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDatasetInput(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest* request, ::clarifai::api::SingleDatasetInputResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDatasetInput(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest* request, ::clarifai::api::SingleDatasetInputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest* request, ::clarifai::api::MultiDatasetInputResponse* response, std::function<void(::grpc::Status)>) override;
      void PostDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest* request, ::clarifai::api::MultiDatasetInputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteDatasetInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDatasetVersion(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest* request, ::clarifai::api::SingleDatasetVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDatasetVersion(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest* request, ::clarifai::api::SingleDatasetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListDatasetVersionMetricsGroups(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* request, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDatasetVersionMetricsGroups(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* request, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void PostDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteDatasetVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest* request, ::clarifai::api::SingleModelTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest* request, ::clarifai::api::SingleModelTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest* request, ::clarifai::api::ListOpenSourceLicensesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest* request, ::clarifai::api::ListOpenSourceLicensesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest* request, ::clarifai::api::MultiModelTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void ListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest* request, ::clarifai::api::MultiModelTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)>) override;
      void GetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)>) override;
      void GetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)>) override;
      void ListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest* request, ::clarifai::api::MultiModelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)>) override;
      void PostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest* request, ::clarifai::api::MultiModelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)>) override;
      void PostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest* request, ::clarifai::api::SingleModelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest* request, ::clarifai::api::MultiModelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchModelIds(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchModelIds(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest* request, ::clarifai::api::MultiModelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchModelToolkits(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest* request, ::clarifai::api::MultiModelToolkitResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchModelToolkits(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest* request, ::clarifai::api::MultiModelToolkitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchModelUseCases(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest* request, ::clarifai::api::MultiModelUseCaseResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchModelUseCases(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest* request, ::clarifai::api::MultiModelUseCaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchModelLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest* request, ::clarifai::api::MultiModelLanguageResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchModelLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest* request, ::clarifai::api::MultiModelLanguageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)>) override;
      void ListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest* request, ::clarifai::api::SingleModelVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest* request, ::clarifai::api::SingleModelVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void ListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostWorkflowVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void PostWorkflowVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostWorkflowVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void PostWorkflowVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostModelVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void PostModelVersionsPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostModelVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void PostModelVersionsUnPublish(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)>) override;
      void PostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest* request, ::clarifai::api::SingleModelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void PostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest* request, ::clarifai::api::MultiModelReferenceResponse* response, std::function<void(::grpc::Status)>) override;
      void ListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest* request, ::clarifai::api::MultiModelReferenceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest* request, ::clarifai::api::SingleModelVersionInputExampleResponse* response, std::function<void(::grpc::Status)>) override;
      void GetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest* request, ::clarifai::api::SingleModelVersionInputExampleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest* request, ::clarifai::api::MultiModelVersionInputExampleResponse* response, std::function<void(::grpc::Status)>) override;
      void ListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest* request, ::clarifai::api::MultiModelVersionInputExampleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest* request, ::clarifai::api::SingleWorkflowResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest* request, ::clarifai::api::SingleWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, std::function<void(::grpc::Status)>) override;
      void ListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, std::function<void(::grpc::Status)>) override;
      void PostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest* request, ::clarifai::api::PostWorkflowResultsResponse* response, std::function<void(::grpc::Status)>) override;
      void PostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest* request, ::clarifai::api::PostWorkflowResultsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response, std::function<void(::grpc::Status)>) override;
      void PostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void ListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest* request, ::clarifai::api::SingleWorkflowVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest* request, ::clarifai::api::SingleWorkflowVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest* request, ::clarifai::api::SingleKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void GetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest* request, ::clarifai::api::SingleKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void ListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void ListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void PostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest* request, ::clarifai::api::MultiScopeResponse* response, std::function<void(::grpc::Status)>) override;
      void MyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest* request, ::clarifai::api::MultiScopeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MyScopesUser(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest* request, ::clarifai::api::MultiScopeUserResponse* response, std::function<void(::grpc::Status)>) override;
      void MyScopesUser(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest* request, ::clarifai::api::MultiScopeUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MyScopesRoot(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest* request, ::clarifai::api::MultiScopeRootResponse* response, std::function<void(::grpc::Status)>) override;
      void MyScopesRoot(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest* request, ::clarifai::api::MultiScopeRootResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest* request, ::clarifai::api::MultiScopeDepsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest* request, ::clarifai::api::MultiScopeDepsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest* request, ::clarifai::api::SingleAppResponse* response, std::function<void(::grpc::Status)>) override;
      void GetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest* request, ::clarifai::api::SingleAppResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)>) override;
      void ListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)>) override;
      void PostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchApp(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest* request, ::clarifai::api::SingleAppResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchApp(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest* request, ::clarifai::api::SingleAppResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchAppsIds(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchAppsIds(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)>) override;
      void PostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest* request, ::clarifai::api::SinglePasswordValidationResponse* response, std::function<void(::grpc::Status)>) override;
      void PostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest* request, ::clarifai::api::SinglePasswordValidationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest* request, ::clarifai::api::SingleSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest* request, ::clarifai::api::SingleSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchSearches(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void PostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)>) override;
      void PostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, std::function<void(::grpc::Status)>) override;
      void PostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response, std::function<void(::grpc::Status)>) override;
      void ListAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAnnotationFilter(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest* request, ::clarifai::api::SingleAnnotationFilterResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAnnotationFilter(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest* request, ::clarifai::api::SingleAnnotationFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response, std::function<void(::grpc::Status)>) override;
      void PostAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteAnnotationFilters(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest* request, ::clarifai::api::MultiStatusCodeResponse* response, std::function<void(::grpc::Status)>) override;
      void ListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest* request, ::clarifai::api::MultiStatusCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest* request, ::clarifai::api::SingleStatusCodeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest* request, ::clarifai::api::SingleStatusCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, std::function<void(::grpc::Status)>) override;
      void PostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest* request, ::clarifai::api::MultiCollaborationsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest* request, ::clarifai::api::MultiCollaborationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response, std::function<void(::grpc::Status)>) override;
      void PostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest* request, ::clarifai::api::SingleAppDuplicationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest* request, ::clarifai::api::SingleAppDuplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void PostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest* request, ::clarifai::api::SingleTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest* request, ::clarifai::api::SingleTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void PostLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLabelOrder(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest* request, ::clarifai::api::SingleLabelOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLabelOrder(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest* request, ::clarifai::api::SingleLabelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void ListLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteLabelOrders(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, std::function<void(::grpc::Status)>) override;
      void PostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest* request, ::clarifai::api::SingleCollectorResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest* request, ::clarifai::api::SingleCollectorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, std::function<void(::grpc::Status)>) override;
      void PatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest* request, ::clarifai::api::MultiStatValueResponse* response, std::function<void(::grpc::Status)>) override;
      void PostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest* request, ::clarifai::api::MultiStatValueResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest* request, ::clarifai::api::MultiStatValueAggregateResponse* response, std::function<void(::grpc::Status)>) override;
      void PostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest* request, ::clarifai::api::MultiStatValueAggregateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void PostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest* request, ::clarifai::api::MultiTrendingMetricsViewResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest* request, ::clarifai::api::MultiTrendingMetricsViewResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PostBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response, std::function<void(::grpc::Status)>) override;
      void PostBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBulkOperation(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest* request, ::clarifai::api::SingleBulkOperationsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBulkOperation(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest* request, ::clarifai::api::SingleBulkOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteBulkOperations(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDatasetInputsSearchAddJob(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* request, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDatasetInputsSearchAddJob(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* request, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>* AsyncListConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>* PrepareAsyncListConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>* AsyncPostConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>* PrepareAsyncPostConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptCountResponse>* AsyncGetConceptCountsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptCountResponse>* PrepareAsyncGetConceptCountsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptResponse>* AsyncGetConceptRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptResponse>* PrepareAsyncGetConceptRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* AsyncListConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* PrepareAsyncListConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* AsyncPostConceptsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* PrepareAsyncPostConceptsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* AsyncPostConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* PrepareAsyncPostConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* AsyncPatchConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* PrepareAsyncPatchConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptLanguageResponse>* AsyncGetConceptLanguageRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptLanguageResponse>* PrepareAsyncGetConceptLanguageRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>* AsyncListConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>* PrepareAsyncListConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>* AsyncPostConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>* PrepareAsyncPostConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>* AsyncPatchConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>* PrepareAsyncPatchConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>* AsyncListKnowledgeGraphsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>* PrepareAsyncListKnowledgeGraphsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>* AsyncPostKnowledgeGraphsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>* PrepareAsyncPostKnowledgeGraphsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptMappingJobResponse>* AsyncPostConceptMappingJobsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptMappingJobResponse>* PrepareAsyncPostConceptMappingJobsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationResponse>* AsyncGetAnnotationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationResponse>* PrepareAsyncGetAnnotationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>* AsyncListAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>* PrepareAsyncListAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>* AsyncPostAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>* PrepareAsyncPostAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>* AsyncPatchAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>* PrepareAsyncPatchAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::PatchAnnotationsStatusResponse>* AsyncPatchAnnotationsStatusRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::PatchAnnotationsStatusResponse>* PrepareAsyncPatchAnnotationsStatusRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteAnnotationRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteAnnotationRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* AsyncPatchAnnotationsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPatchAnnotationsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* AsyncPostAnnotationsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPostAnnotationsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputCountResponse>* AsyncGetInputCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputCountResponse>* PrepareAsyncGetInputCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* AsyncStreamInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* PrepareAsyncStreamInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputAnnotationResponse>* AsyncGetInputSamplesRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputAnnotationResponse>* PrepareAsyncGetInputSamplesRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputResponse>* AsyncGetInputRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputResponse>* PrepareAsyncGetInputRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* AsyncListInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* PrepareAsyncListInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* AsyncPostInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* PrepareAsyncPostInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* AsyncPatchInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* PrepareAsyncPatchInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteInputRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteInputRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* AsyncPatchInputsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPatchInputsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* AsyncPostInputsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPostInputsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiOutputResponse>* AsyncPostModelOutputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiOutputResponse>* PrepareAsyncPostModelOutputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>* AsyncListDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>* PrepareAsyncListDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetResponse>* AsyncGetDatasetRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetResponse>* PrepareAsyncGetDatasetRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>* AsyncPostDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>* PrepareAsyncPostDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>* AsyncPatchDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetResponse>* PrepareAsyncPatchDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteDatasetsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetInputResponse>* AsyncListDatasetInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetInputResponse>* PrepareAsyncListDatasetInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetInputResponse>* AsyncGetDatasetInputRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetInputResponse>* PrepareAsyncGetDatasetInputRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetInputResponse>* AsyncPostDatasetInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetInputResponse>* PrepareAsyncPostDatasetInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteDatasetInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteDatasetInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>* AsyncListDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>* PrepareAsyncListDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetVersionResponse>* AsyncGetDatasetVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetVersionResponse>* PrepareAsyncGetDatasetVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>* AsyncListDatasetVersionMetricsGroupsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>* PrepareAsyncListDatasetVersionMetricsGroupsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>* AsyncPostDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>* PrepareAsyncPostDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>* AsyncPatchDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiDatasetVersionResponse>* PrepareAsyncPatchDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteDatasetVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelTypeResponse>* AsyncGetModelTypeRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelTypeResponse>* PrepareAsyncGetModelTypeRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::ListOpenSourceLicensesResponse>* AsyncListOpenSourceLicensesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::ListOpenSourceLicensesResponse>* PrepareAsyncListOpenSourceLicensesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelTypeResponse>* AsyncListModelTypesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelTypeResponse>* PrepareAsyncListModelTypesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* AsyncGetModelRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* PrepareAsyncGetModelRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* AsyncGetModelOutputInfoRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* PrepareAsyncGetModelOutputInfoRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* AsyncListModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* PrepareAsyncListModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* AsyncPostModelsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* PrepareAsyncPostModelsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* AsyncPostModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* PrepareAsyncPostModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* AsyncPatchModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* PrepareAsyncPatchModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* AsyncPatchModelIdsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* PrepareAsyncPatchModelIdsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteModelRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteModelRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelToolkitResponse>* AsyncPatchModelToolkitsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelToolkitResponse>* PrepareAsyncPatchModelToolkitsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelToolkitsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelUseCaseResponse>* AsyncPatchModelUseCasesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelUseCaseResponse>* PrepareAsyncPatchModelUseCasesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelUseCasesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelLanguageResponse>* AsyncPatchModelLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelLanguageResponse>* PrepareAsyncPatchModelLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelLanguagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* AsyncListModelInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* PrepareAsyncListModelInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>* AsyncGetModelVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>* PrepareAsyncGetModelVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>* AsyncListModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>* PrepareAsyncListModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncPostWorkflowVersionsUnPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncPostWorkflowVersionsUnPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncPostWorkflowVersionsPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncPostWorkflowVersionsPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncPostModelVersionsPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncPostModelVersionsPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsPublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncPostModelVersionsUnPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncPostModelVersionsUnPublishRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* AsyncPostModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* PrepareAsyncPostModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>* AsyncPatchModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>* PrepareAsyncPatchModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteModelVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteModelVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>* AsyncGetModelVersionMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>* PrepareAsyncGetModelVersionMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>* AsyncPostModelVersionMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>* PrepareAsyncPostModelVersionMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelReferenceResponse>* AsyncListModelReferencesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelReferenceResponse>* PrepareAsyncListModelReferencesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionInputExampleResponse>* AsyncGetModelVersionInputExampleRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionInputExampleResponse>* PrepareAsyncGetModelVersionInputExampleRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionInputExampleResponse>* AsyncListModelVersionInputExamplesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionInputExampleResponse>* PrepareAsyncListModelVersionInputExamplesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowResponse>* AsyncGetWorkflowRaw(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowResponse>* PrepareAsyncGetWorkflowRaw(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>* AsyncListWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>* PrepareAsyncListWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>* AsyncPostWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>* PrepareAsyncPostWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>* AsyncPatchWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>* PrepareAsyncPatchWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteWorkflowRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteWorkflowRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsResponse>* AsyncPostWorkflowResultsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsResponse>* PrepareAsyncPostWorkflowResultsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsSimilarityResponse>* AsyncPostWorkflowResultsSimilarityRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsSimilarityResponse>* PrepareAsyncPostWorkflowResultsSimilarityRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>* AsyncListWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>* PrepareAsyncListWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowVersionResponse>* AsyncGetWorkflowVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowVersionResponse>* PrepareAsyncGetWorkflowVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>* AsyncPatchWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>* PrepareAsyncPatchWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleKeyResponse>* AsyncGetKeyRaw(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleKeyResponse>* PrepareAsyncGetKeyRaw(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* AsyncListKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* PrepareAsyncListKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* AsyncListAppKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* PrepareAsyncListAppKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteKeyRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteKeyRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* AsyncPostKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* PrepareAsyncPostKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* AsyncPatchKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* PrepareAsyncPatchKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeResponse>* AsyncMyScopesRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeResponse>* PrepareAsyncMyScopesRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeUserResponse>* AsyncMyScopesUserRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeUserResponse>* PrepareAsyncMyScopesUserRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeRootResponse>* AsyncMyScopesRootRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeRootResponse>* PrepareAsyncMyScopesRootRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRootRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeDepsResponse>* AsyncListScopesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeDepsResponse>* PrepareAsyncListScopesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>* AsyncGetAppRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>* PrepareAsyncGetAppRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* AsyncListAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* PrepareAsyncListAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteAppRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteAppRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* AsyncPostAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* PrepareAsyncPostAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* AsyncPatchAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* PrepareAsyncPatchAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>* AsyncPatchAppRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>* PrepareAsyncPatchAppRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* AsyncPatchAppsIdsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* PrepareAsyncPatchAppsIdsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* AsyncPostAppsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* PrepareAsyncPostAppsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SinglePasswordValidationResponse>* AsyncPostValidatePasswordRaw(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SinglePasswordValidationResponse>* PrepareAsyncPostValidatePasswordRaw(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleSearchResponse>* AsyncGetSearchRaw(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleSearchResponse>* PrepareAsyncGetSearchRaw(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* AsyncListSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* PrepareAsyncListSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* AsyncPatchSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPatchSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* AsyncPostSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPostSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* AsyncPostSearchesByIDRaw(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* PrepareAsyncPostSearchesByIDRaw(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* AsyncPostAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* PrepareAsyncPostAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* AsyncGetAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* PrepareAsyncGetAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* AsyncListAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* PrepareAsyncListAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteSearchRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteSearchRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>* AsyncListAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>* PrepareAsyncListAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationFilterResponse>* AsyncGetAnnotationFilterRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationFilterResponse>* PrepareAsyncGetAnnotationFilterRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationFilterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>* AsyncPostAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>* PrepareAsyncPostAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>* AsyncPatchAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationFilterResponse>* PrepareAsyncPatchAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteAnnotationFiltersRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatusCodeResponse>* AsyncListStatusCodesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatusCodeResponse>* PrepareAsyncListStatusCodesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleStatusCodeResponse>* AsyncGetStatusCodeRaw(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleStatusCodeResponse>* PrepareAsyncGetStatusCodeRaw(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>* AsyncListCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>* PrepareAsyncListCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>* AsyncPostCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>* PrepareAsyncPostCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>* AsyncPatchCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>* PrepareAsyncPatchCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaborationsResponse>* AsyncListCollaborationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaborationsResponse>* PrepareAsyncListCollaborationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>* AsyncPostAppDuplicationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>* PrepareAsyncPostAppDuplicationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>* AsyncListAppDuplicationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>* PrepareAsyncListAppDuplicationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppDuplicationResponse>* AsyncGetAppDuplicationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppDuplicationResponse>* PrepareAsyncGetAppDuplicationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>* AsyncPostTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>* PrepareAsyncPostTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>* AsyncGetTaskAnnotationCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>* PrepareAsyncGetTaskAnnotationCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>* AsyncGetTaskInputCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>* PrepareAsyncGetTaskInputCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskResponse>* AsyncGetTaskRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskResponse>* PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>* AsyncListTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>* PrepareAsyncListTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>* AsyncPatchTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>* PrepareAsyncPatchTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>* AsyncPostLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>* PrepareAsyncPostLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::PostLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleLabelOrderResponse>* AsyncGetLabelOrderRaw(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleLabelOrderResponse>* PrepareAsyncGetLabelOrderRaw(::grpc::ClientContext* context, const ::clarifai::api::GetLabelOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>* AsyncListLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>* PrepareAsyncListLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::ListLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>* AsyncPatchLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiLabelOrderResponse>* PrepareAsyncPatchLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteLabelOrdersRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteLabelOrdersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>* AsyncPostCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>* PrepareAsyncPostCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleCollectorResponse>* AsyncGetCollectorRaw(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleCollectorResponse>* PrepareAsyncGetCollectorRaw(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>* AsyncListCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>* PrepareAsyncListCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>* AsyncPatchCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>* PrepareAsyncPatchCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueResponse>* AsyncPostStatValuesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueResponse>* PrepareAsyncPostStatValuesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueAggregateResponse>* AsyncPostStatValuesAggregateRaw(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueAggregateResponse>* PrepareAsyncPostStatValuesAggregateRaw(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncPostTrendingMetricsViewRaw(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncPostTrendingMetricsViewRaw(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTrendingMetricsViewResponse>* AsyncListTrendingMetricsViewsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTrendingMetricsViewResponse>* PrepareAsyncListTrendingMetricsViewsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>* AsyncPostBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>* PrepareAsyncPostBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>* AsyncListBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>* PrepareAsyncListBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListBulkOperationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleBulkOperationsResponse>* AsyncGetBulkOperationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleBulkOperationsResponse>* PrepareAsyncGetBulkOperationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetBulkOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>* AsyncCancelBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiBulkOperationsResponse>* PrepareAsyncCancelBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::CancelBulkOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* AsyncDeleteBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* PrepareAsyncDeleteBulkOperationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteBulkOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>* AsyncGetDatasetInputsSearchAddJobRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>* PrepareAsyncGetDatasetInputsSearchAddJobRaw(::grpc::ClientContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListConceptRelations_;
    const ::grpc::internal::RpcMethod rpcmethod_PostConceptRelations_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteConceptRelations_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConceptCounts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConcept_;
    const ::grpc::internal::RpcMethod rpcmethod_ListConcepts_;
    const ::grpc::internal::RpcMethod rpcmethod_PostConceptsSearches_;
    const ::grpc::internal::RpcMethod rpcmethod_PostConcepts_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchConcepts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConceptLanguage_;
    const ::grpc::internal::RpcMethod rpcmethod_ListConceptLanguages_;
    const ::grpc::internal::RpcMethod rpcmethod_PostConceptLanguages_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchConceptLanguages_;
    const ::grpc::internal::RpcMethod rpcmethod_ListKnowledgeGraphs_;
    const ::grpc::internal::RpcMethod rpcmethod_PostKnowledgeGraphs_;
    const ::grpc::internal::RpcMethod rpcmethod_PostConceptMappingJobs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAnnotation_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAnnotations_;
    const ::grpc::internal::RpcMethod rpcmethod_PostAnnotations_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchAnnotations_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchAnnotationsStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAnnotation_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAnnotations_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchAnnotationsSearches_;
    const ::grpc::internal::RpcMethod rpcmethod_PostAnnotationsSearches_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInputCount_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamInputs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInputSamples_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInput_;
    const ::grpc::internal::RpcMethod rpcmethod_ListInputs_;
    const ::grpc::internal::RpcMethod rpcmethod_PostInputs_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchInputs_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteInput_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteInputs_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchInputsSearches_;
    const ::grpc::internal::RpcMethod rpcmethod_PostInputsSearches_;
    const ::grpc::internal::RpcMethod rpcmethod_PostModelOutputs_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDatasets_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDataset_;
    const ::grpc::internal::RpcMethod rpcmethod_PostDatasets_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchDatasets_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDatasets_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDatasetInputs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDatasetInput_;
    const ::grpc::internal::RpcMethod rpcmethod_PostDatasetInputs_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDatasetInputs_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDatasetVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDatasetVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDatasetVersionMetricsGroups_;
    const ::grpc::internal::RpcMethod rpcmethod_PostDatasetVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchDatasetVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDatasetVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelType_;
    const ::grpc::internal::RpcMethod rpcmethod_ListOpenSourceLicenses_;
    const ::grpc::internal::RpcMethod rpcmethod_ListModelTypes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelOutputInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ListModels_;
    const ::grpc::internal::RpcMethod rpcmethod_PostModelsSearches_;
    const ::grpc::internal::RpcMethod rpcmethod_PostModels_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchModels_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchModelIds_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteModel_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteModels_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchModelToolkits_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchModelUseCases_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchModelLanguages_;
    const ::grpc::internal::RpcMethod rpcmethod_ListModelInputs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_ListModelVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_PostWorkflowVersionsUnPublish_;
    const ::grpc::internal::RpcMethod rpcmethod_PostWorkflowVersionsPublish_;
    const ::grpc::internal::RpcMethod rpcmethod_PostModelVersionsPublish_;
    const ::grpc::internal::RpcMethod rpcmethod_PostModelVersionsUnPublish_;
    const ::grpc::internal::RpcMethod rpcmethod_PostModelVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchModelVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteModelVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelVersionMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_PostModelVersionMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_ListModelReferences_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelVersionInputExample_;
    const ::grpc::internal::RpcMethod rpcmethod_ListModelVersionInputExamples_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWorkflow_;
    const ::grpc::internal::RpcMethod rpcmethod_ListWorkflows_;
    const ::grpc::internal::RpcMethod rpcmethod_PostWorkflows_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchWorkflows_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteWorkflow_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteWorkflows_;
    const ::grpc::internal::RpcMethod rpcmethod_PostWorkflowResults_;
    const ::grpc::internal::RpcMethod rpcmethod_PostWorkflowResultsSimilarity_;
    const ::grpc::internal::RpcMethod rpcmethod_ListWorkflowVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWorkflowVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteWorkflowVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchWorkflowVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetKey_;
    const ::grpc::internal::RpcMethod rpcmethod_ListKeys_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAppKeys_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteKey_;
    const ::grpc::internal::RpcMethod rpcmethod_PostKeys_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchKeys_;
    const ::grpc::internal::RpcMethod rpcmethod_MyScopes_;
    const ::grpc::internal::RpcMethod rpcmethod_MyScopesUser_;
    const ::grpc::internal::RpcMethod rpcmethod_MyScopesRoot_;
    const ::grpc::internal::RpcMethod rpcmethod_ListScopes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetApp_;
    const ::grpc::internal::RpcMethod rpcmethod_ListApps_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteApp_;
    const ::grpc::internal::RpcMethod rpcmethod_PostApps_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchApps_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchApp_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchAppsIds_;
    const ::grpc::internal::RpcMethod rpcmethod_PostAppsSearches_;
    const ::grpc::internal::RpcMethod rpcmethod_PostValidatePassword_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSearch_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSearches_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchSearches_;
    const ::grpc::internal::RpcMethod rpcmethod_PostSearches_;
    const ::grpc::internal::RpcMethod rpcmethod_PostSearchesByID_;
    const ::grpc::internal::RpcMethod rpcmethod_PostAnnotationSearchMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAnnotationSearchMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAnnotationSearchMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAnnotationSearchMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSearch_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAnnotationFilters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAnnotationFilter_;
    const ::grpc::internal::RpcMethod rpcmethod_PostAnnotationFilters_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchAnnotationFilters_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAnnotationFilters_;
    const ::grpc::internal::RpcMethod rpcmethod_ListStatusCodes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatusCode_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCollaborators_;
    const ::grpc::internal::RpcMethod rpcmethod_PostCollaborators_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchCollaborators_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCollaborators_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCollaborations_;
    const ::grpc::internal::RpcMethod rpcmethod_PostAppDuplications_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAppDuplications_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAppDuplication_;
    const ::grpc::internal::RpcMethod rpcmethod_PostTasks_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTaskAnnotationCount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTaskInputCount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTask_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTasks_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchTasks_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTasks_;
    const ::grpc::internal::RpcMethod rpcmethod_PostLabelOrders_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLabelOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_ListLabelOrders_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchLabelOrders_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteLabelOrders_;
    const ::grpc::internal::RpcMethod rpcmethod_PostCollectors_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCollector_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCollectors_;
    const ::grpc::internal::RpcMethod rpcmethod_PatchCollectors_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCollectors_;
    const ::grpc::internal::RpcMethod rpcmethod_PostStatValues_;
    const ::grpc::internal::RpcMethod rpcmethod_PostStatValuesAggregate_;
    const ::grpc::internal::RpcMethod rpcmethod_PostTrendingMetricsView_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTrendingMetricsViews_;
    const ::grpc::internal::RpcMethod rpcmethod_PostBulkOperations_;
    const ::grpc::internal::RpcMethod rpcmethod_ListBulkOperations_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBulkOperation_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelBulkOperations_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteBulkOperations_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDatasetInputsSearchAddJob_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // List concept relations between concepts in the platform.
    // MUST be above ListConcepts so that if concept_id is empty this will still match
    // /concepts/relations to list all the concept relations in the app.
    virtual ::grpc::Status ListConceptRelations(::grpc::ServerContext* context, const ::clarifai::api::ListConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response);
    // Post concept relations to create relations between concepts in the platform.
    virtual ::grpc::Status PostConceptRelations(::grpc::ServerContext* context, const ::clarifai::api::PostConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response);
    // Post concept relations to create relations between concepts in the platform.
    virtual ::grpc::Status DeleteConceptRelations(::grpc::ServerContext* context, const ::clarifai::api::DeleteConceptRelationsRequest* request, ::clarifai::api::status::BaseResponse* response);
    // List all the concepts with their positive and negative counts
    virtual ::grpc::Status GetConceptCounts(::grpc::ServerContext* context, const ::clarifai::api::GetConceptCountsRequest* request, ::clarifai::api::MultiConceptCountResponse* response);
    // Get a specific concept from an app.
    virtual ::grpc::Status GetConcept(::grpc::ServerContext* context, const ::clarifai::api::GetConceptRequest* request, ::clarifai::api::SingleConceptResponse* response);
    // List all the concepts.
    virtual ::grpc::Status ListConcepts(::grpc::ServerContext* context, const ::clarifai::api::ListConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response);
    // Search over the concepts to find one or more you're looking for.
    // This leverage the "body" parameter because we also have page and
    // per_page as url query param variables in this request.
    virtual ::grpc::Status PostConceptsSearches(::grpc::ServerContext* context, const ::clarifai::api::PostConceptsSearchesRequest* request, ::clarifai::api::MultiConceptResponse* response);
    // Add a concept to an app.
    virtual ::grpc::Status PostConcepts(::grpc::ServerContext* context, const ::clarifai::api::PostConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response);
    // Patch one or more concepts.
    virtual ::grpc::Status PatchConcepts(::grpc::ServerContext* context, const ::clarifai::api::PatchConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response);
    // Get a specific concept from an app.
    virtual ::grpc::Status GetConceptLanguage(::grpc::ServerContext* context, const ::clarifai::api::GetConceptLanguageRequest* request, ::clarifai::api::SingleConceptLanguageResponse* response);
    // List the concept in all the translated languages.
    virtual ::grpc::Status ListConceptLanguages(::grpc::ServerContext* context, const ::clarifai::api::ListConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response);
    // Add a new translation for this concept.
    virtual ::grpc::Status PostConceptLanguages(::grpc::ServerContext* context, const ::clarifai::api::PostConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response);
    // Patch the name for a given language names by passing in a list of concepts with the new names
    // for the languages.
    virtual ::grpc::Status PatchConceptLanguages(::grpc::ServerContext* context, const ::clarifai::api::PatchConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response);
    // List all domain graphs.
    virtual ::grpc::Status ListKnowledgeGraphs(::grpc::ServerContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response);
    // Post domain graphs.
    virtual ::grpc::Status PostKnowledgeGraphs(::grpc::ServerContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response);
    // Start concept mapping jobs.
    virtual ::grpc::Status PostConceptMappingJobs(::grpc::ServerContext* context, const ::clarifai::api::PostConceptMappingJobsRequest* request, ::clarifai::api::MultiConceptMappingJobResponse* response);
    // Get a specific annotation from an app.
    virtual ::grpc::Status GetAnnotation(::grpc::ServerContext* context, const ::clarifai::api::GetAnnotationRequest* request, ::clarifai::api::SingleAnnotationResponse* response);
    // List all the annotation.
    virtual ::grpc::Status ListAnnotations(::grpc::ServerContext* context, const ::clarifai::api::ListAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response);
    // Post annotations.
    virtual ::grpc::Status PostAnnotations(::grpc::ServerContext* context, const ::clarifai::api::PostAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response);
    // Patch one or more annotations.
    virtual ::grpc::Status PatchAnnotations(::grpc::ServerContext* context, const ::clarifai::api::PatchAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response);
    // Patch annotations status by worker id and task id.
    virtual ::grpc::Status PatchAnnotationsStatus(::grpc::ServerContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest* request, ::clarifai::api::PatchAnnotationsStatusResponse* response);
    // Delete a single annotation.
    virtual ::grpc::Status DeleteAnnotation(::grpc::ServerContext* context, const ::clarifai::api::DeleteAnnotationRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Delete multiple annotations in one request.
    virtual ::grpc::Status DeleteAnnotations(::grpc::ServerContext* context, const ::clarifai::api::DeleteAnnotationsRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Patch saved annotations searches by ids.
    virtual ::grpc::Status PatchAnnotationsSearches(::grpc::ServerContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response);
    // Execute a search over annotations
    virtual ::grpc::Status PostAnnotationsSearches(::grpc::ServerContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response);
    // Get input count per status.
    virtual ::grpc::Status GetInputCount(::grpc::ServerContext* context, const ::clarifai::api::GetInputCountRequest* request, ::clarifai::api::SingleInputCountResponse* response);
    // Streams all the inputs starting from oldest assets.
    virtual ::grpc::Status StreamInputs(::grpc::ServerContext* context, const ::clarifai::api::StreamInputsRequest* request, ::clarifai::api::MultiInputResponse* response);
    // Get a specific input from an app.
    virtual ::grpc::Status GetInputSamples(::grpc::ServerContext* context, const ::clarifai::api::GetInputSamplesRequest* request, ::clarifai::api::MultiInputAnnotationResponse* response);
    // Get a specific input from an app.
    virtual ::grpc::Status GetInput(::grpc::ServerContext* context, const ::clarifai::api::GetInputRequest* request, ::clarifai::api::SingleInputResponse* response);
    // List all the inputs.
    virtual ::grpc::Status ListInputs(::grpc::ServerContext* context, const ::clarifai::api::ListInputsRequest* request, ::clarifai::api::MultiInputResponse* response);
    // Add an input (or set of inputs) to an app.
    // This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
    // it is asynchronous.
    virtual ::grpc::Status PostInputs(::grpc::ServerContext* context, const ::clarifai::api::PostInputsRequest* request, ::clarifai::api::MultiInputResponse* response);
    // Patch one or more inputs.
    virtual ::grpc::Status PatchInputs(::grpc::ServerContext* context, const ::clarifai::api::PatchInputsRequest* request, ::clarifai::api::MultiInputResponse* response);
    // Delete a single input asynchronously.
    virtual ::grpc::Status DeleteInput(::grpc::ServerContext* context, const ::clarifai::api::DeleteInputRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Delete multiple inputs in one request.
    // This call is asynchronous.
    virtual ::grpc::Status DeleteInputs(::grpc::ServerContext* context, const ::clarifai::api::DeleteInputsRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Patch saved inputs searches by ids.
    virtual ::grpc::Status PatchInputsSearches(::grpc::ServerContext* context, const ::clarifai::api::PatchInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response);
    // Execute a search over inputs
    virtual ::grpc::Status PostInputsSearches(::grpc::ServerContext* context, const ::clarifai::api::PostInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response);
    // Get predicted outputs from the model.
    virtual ::grpc::Status PostModelOutputs(::grpc::ServerContext* context, const ::clarifai::api::PostModelOutputsRequest* request, ::clarifai::api::MultiOutputResponse* response);
    // List all the datasets.
    virtual ::grpc::Status ListDatasets(::grpc::ServerContext* context, const ::clarifai::api::ListDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response);
    // Get a specific dataset.
    virtual ::grpc::Status GetDataset(::grpc::ServerContext* context, const ::clarifai::api::GetDatasetRequest* request, ::clarifai::api::SingleDatasetResponse* response);
    // Add datasets to an app.
    // The process is atomic, i.e. either all or no datasets are added.
    // If there is an error for one dataset,
    // the process will stop, revert the transaction and return the error.
    virtual ::grpc::Status PostDatasets(::grpc::ServerContext* context, const ::clarifai::api::PostDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response);
    // Patch one or more datasets.
    // The process is atomic, i.e. either all or no datasets are patched.
    // If there is an error for one dataset,
    // the process will stop, revert the transaction and return the error.
    virtual ::grpc::Status PatchDatasets(::grpc::ServerContext* context, const ::clarifai::api::PatchDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response);
    // Delete one or more datasets in a single request.
    virtual ::grpc::Status DeleteDatasets(::grpc::ServerContext* context, const ::clarifai::api::DeleteDatasetsRequest* request, ::clarifai::api::status::BaseResponse* response);
    // List all the dataset inputs in a dataset.
    virtual ::grpc::Status ListDatasetInputs(::grpc::ServerContext* context, const ::clarifai::api::ListDatasetInputsRequest* request, ::clarifai::api::MultiDatasetInputResponse* response);
    // Get a specific dataset input.
    virtual ::grpc::Status GetDatasetInput(::grpc::ServerContext* context, const ::clarifai::api::GetDatasetInputRequest* request, ::clarifai::api::SingleDatasetInputResponse* response);
    // Add dataset inputs to a dataset.
    // The process is not atomic, i.e. if there are errors with some dataset
    // inputs, others might still be added. The response reports
    //   - SUCCESS if all dataset inputs were added,
    //   - MIXED_STATUS if only some dataset inputs were added, and
    //   - FAILURE if no dataset inputs were added.
    // Each individual dataset input in the response has the status set to
    // indicate if it was successful or if there was an error.
    virtual ::grpc::Status PostDatasetInputs(::grpc::ServerContext* context, const ::clarifai::api::PostDatasetInputsRequest* request, ::clarifai::api::MultiDatasetInputResponse* response);
    // Delete one or more dataset inputs in a single request.
    virtual ::grpc::Status DeleteDatasetInputs(::grpc::ServerContext* context, const ::clarifai::api::DeleteDatasetInputsRequest* request, ::clarifai::api::status::BaseResponse* response);
    // List all the dataset versions.
    virtual ::grpc::Status ListDatasetVersions(::grpc::ServerContext* context, const ::clarifai::api::ListDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response);
    // Get a specific dataset version.
    virtual ::grpc::Status GetDatasetVersion(::grpc::ServerContext* context, const ::clarifai::api::GetDatasetVersionRequest* request, ::clarifai::api::SingleDatasetVersionResponse* response);
    virtual ::grpc::Status ListDatasetVersionMetricsGroups(::grpc::ServerContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* request, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* response);
    // Add dataset versions to a dataset.
    virtual ::grpc::Status PostDatasetVersions(::grpc::ServerContext* context, const ::clarifai::api::PostDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response);
    // Patch one or more dataset versions.
    virtual ::grpc::Status PatchDatasetVersions(::grpc::ServerContext* context, const ::clarifai::api::PatchDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response);
    // Delete one or more dataset versions in a single request.
    virtual ::grpc::Status DeleteDatasetVersions(::grpc::ServerContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest* request, ::clarifai::api::status::BaseResponse* response);
    // //////////////////////////////////////
    // Models
    // //////////////////////////////////////
    //
    // Get a specific model type.
    virtual ::grpc::Status GetModelType(::grpc::ServerContext* context, const ::clarifai::api::GetModelTypeRequest* request, ::clarifai::api::SingleModelTypeResponse* response);
    // List all the supported open source licenses in the platform.
    virtual ::grpc::Status ListOpenSourceLicenses(::grpc::ServerContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest* request, ::clarifai::api::ListOpenSourceLicensesResponse* response);
    // List all the model types available in the platform.
    // This MUST be above ListModels so that the /models/types endpoint takes precedence.
    virtual ::grpc::Status ListModelTypes(::grpc::ServerContext* context, const ::clarifai::api::ListModelTypesRequest* request, ::clarifai::api::MultiModelTypeResponse* response);
    // Get a specific model from an app.
    virtual ::grpc::Status GetModel(::grpc::ServerContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response);
    // Get a the output info for a given model_id or model_id/version_id
    // combo.
    virtual ::grpc::Status GetModelOutputInfo(::grpc::ServerContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response);
    // List all the models.
    virtual ::grpc::Status ListModels(::grpc::ServerContext* context, const ::clarifai::api::ListModelsRequest* request, ::clarifai::api::MultiModelResponse* response);
    // Search over the models to find one or more you're looking for.
    // This leverage the "body" parameter because we also have page and
    // per_page as url query param variables in this request.
    virtual ::grpc::Status PostModelsSearches(::grpc::ServerContext* context, const ::clarifai::api::PostModelsSearchesRequest* request, ::clarifai::api::MultiModelResponse* response);
    // Add a models to an app.
    virtual ::grpc::Status PostModels(::grpc::ServerContext* context, const ::clarifai::api::PostModelsRequest* request, ::clarifai::api::SingleModelResponse* response);
    // Patch one or more models.
    virtual ::grpc::Status PatchModels(::grpc::ServerContext* context, const ::clarifai::api::PatchModelsRequest* request, ::clarifai::api::MultiModelResponse* response);
    // Patch one or more models.
    virtual ::grpc::Status PatchModelIds(::grpc::ServerContext* context, const ::clarifai::api::PatchModelIdsRequest* request, ::clarifai::api::MultiModelResponse* response);
    // Delete a single model.
    virtual ::grpc::Status DeleteModel(::grpc::ServerContext* context, const ::clarifai::api::DeleteModelRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Delete multiple models in one request.
    virtual ::grpc::Status DeleteModels(::grpc::ServerContext* context, const ::clarifai::api::DeleteModelsRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Update model toolkits tags
    virtual ::grpc::Status PatchModelToolkits(::grpc::ServerContext* context, const ::clarifai::api::PatchModelToolkitsRequest* request, ::clarifai::api::MultiModelToolkitResponse* response);
    // Update model use_cases tags
    virtual ::grpc::Status PatchModelUseCases(::grpc::ServerContext* context, const ::clarifai::api::PatchModelUseCasesRequest* request, ::clarifai::api::MultiModelUseCaseResponse* response);
    // Update model languages tags
    virtual ::grpc::Status PatchModelLanguages(::grpc::ServerContext* context, const ::clarifai::api::PatchModelLanguagesRequest* request, ::clarifai::api::MultiModelLanguageResponse* response);
    // List all the inputs.
    virtual ::grpc::Status ListModelInputs(::grpc::ServerContext* context, const ::clarifai::api::ListModelInputsRequest* request, ::clarifai::api::MultiInputResponse* response);
    // Get a specific model from an app.
    virtual ::grpc::Status GetModelVersion(::grpc::ServerContext* context, const ::clarifai::api::GetModelVersionRequest* request, ::clarifai::api::SingleModelVersionResponse* response);
    // List all the models.
    virtual ::grpc::Status ListModelVersions(::grpc::ServerContext* context, const ::clarifai::api::ListModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response);
    virtual ::grpc::Status PostWorkflowVersionsUnPublish(::grpc::ServerContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* request, ::clarifai::api::status::BaseResponse* response);
    virtual ::grpc::Status PostWorkflowVersionsPublish(::grpc::ServerContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest* request, ::clarifai::api::status::BaseResponse* response);
    // PostModelVersionsPublish
    virtual ::grpc::Status PostModelVersionsPublish(::grpc::ServerContext* context, const ::clarifai::api::PostModelVersionsPublishRequest* request, ::clarifai::api::status::BaseResponse* response);
    // PostModelVersionsUnPublish
    virtual ::grpc::Status PostModelVersionsUnPublish(::grpc::ServerContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest* request, ::clarifai::api::status::BaseResponse* response);
    // NOTE: inconsistency: do we want this to return a SingleModelResponse?
    //
    // Create a new model version to trigger training of the model.
    virtual ::grpc::Status PostModelVersions(::grpc::ServerContext* context, const ::clarifai::api::PostModelVersionsRequest* request, ::clarifai::api::SingleModelResponse* response);
    // PatchModelVersions
    virtual ::grpc::Status PatchModelVersions(::grpc::ServerContext* context, const ::clarifai::api::PatchModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response);
    // Delete a single model.
    virtual ::grpc::Status DeleteModelVersion(::grpc::ServerContext* context, const ::clarifai::api::DeleteModelVersionRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Get the evaluation metrics for a model version.
    virtual ::grpc::Status GetModelVersionMetrics(::grpc::ServerContext* context, const ::clarifai::api::GetModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response);
    // Run the evaluation metrics for a model version.
    virtual ::grpc::Status PostModelVersionMetrics(::grpc::ServerContext* context, const ::clarifai::api::PostModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response);
    // Lists model references tied to a particular model id.
    virtual ::grpc::Status ListModelReferences(::grpc::ServerContext* context, const ::clarifai::api::ListModelReferencesRequest* request, ::clarifai::api::MultiModelReferenceResponse* response);
    // GetModelVersionInputExample
    virtual ::grpc::Status GetModelVersionInputExample(::grpc::ServerContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest* request, ::clarifai::api::SingleModelVersionInputExampleResponse* response);
    // ListModelVersionInputExamples
    virtual ::grpc::Status ListModelVersionInputExamples(::grpc::ServerContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest* request, ::clarifai::api::MultiModelVersionInputExampleResponse* response);
    // //////////////////////////////////////
    //
    // //////////////////////////////////////
    // Workflows
    // //////////////////////////////////////
    //
    // Get a specific workflow from an app.
    virtual ::grpc::Status GetWorkflow(::grpc::ServerContext* context, const ::clarifai::api::GetWorkflowRequest* request, ::clarifai::api::SingleWorkflowResponse* response);
    // List all the workflows.
    virtual ::grpc::Status ListWorkflows(::grpc::ServerContext* context, const ::clarifai::api::ListWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response);
    // Add a workflow to an app.
    virtual ::grpc::Status PostWorkflows(::grpc::ServerContext* context, const ::clarifai::api::PostWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response);
    // Patch one or more workflows.
    virtual ::grpc::Status PatchWorkflows(::grpc::ServerContext* context, const ::clarifai::api::PatchWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response);
    // Delete a single workflow.
    virtual ::grpc::Status DeleteWorkflow(::grpc::ServerContext* context, const ::clarifai::api::DeleteWorkflowRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Delete multiple workflows in one request.
    virtual ::grpc::Status DeleteWorkflows(::grpc::ServerContext* context, const ::clarifai::api::DeleteWorkflowsRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Predict using a workflow.
    virtual ::grpc::Status PostWorkflowResults(::grpc::ServerContext* context, const ::clarifai::api::PostWorkflowResultsRequest* request, ::clarifai::api::PostWorkflowResultsResponse* response);
    // Compare embeddings distances using a workflow
    virtual ::grpc::Status PostWorkflowResultsSimilarity(::grpc::ServerContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response);
    // List workflow versions.
    virtual ::grpc::Status ListWorkflowVersions(::grpc::ServerContext* context, const ::clarifai::api::ListWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response);
    // Get single workflow version.
    virtual ::grpc::Status GetWorkflowVersion(::grpc::ServerContext* context, const ::clarifai::api::GetWorkflowVersionRequest* request, ::clarifai::api::SingleWorkflowVersionResponse* response);
    // Delete workflow versions.
    virtual ::grpc::Status DeleteWorkflowVersions(::grpc::ServerContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Patch workflow versions.
    virtual ::grpc::Status PatchWorkflowVersions(::grpc::ServerContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response);
    // Get a specific key from an app.
    virtual ::grpc::Status GetKey(::grpc::ServerContext* context, const ::clarifai::api::GetKeyRequest* request, ::clarifai::api::SingleKeyResponse* response);
    // List all the keys.
    virtual ::grpc::Status ListKeys(::grpc::ServerContext* context, const ::clarifai::api::ListKeysRequest* request, ::clarifai::api::MultiKeyResponse* response);
    // List keys by app_id
    virtual ::grpc::Status ListAppKeys(::grpc::ServerContext* context, const ::clarifai::api::ListAppKeysRequest* request, ::clarifai::api::MultiKeyResponse* response);
    // Search over the keys to find one or more you're looking for.
    // This leverage the "body" parameter because we also have page and
    // per_page as url query param variables in this request.
    virtual ::grpc::Status DeleteKey(::grpc::ServerContext* context, const ::clarifai::api::DeleteKeyRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Add a key to an app.
    virtual ::grpc::Status PostKeys(::grpc::ServerContext* context, const ::clarifai::api::PostKeysRequest* request, ::clarifai::api::MultiKeyResponse* response);
    // Patch one or more keys.
    virtual ::grpc::Status PatchKeys(::grpc::ServerContext* context, const ::clarifai::api::PatchKeysRequest* request, ::clarifai::api::MultiKeyResponse* response);
    // API Keys in the public API -- request is itself Key authorized, and will tell
    // the user the scopes/access of the key/credential they're providing, as computed by
    // our authorizer:
    virtual ::grpc::Status MyScopes(::grpc::ServerContext* context, const ::clarifai::api::MyScopesRequest* request, ::clarifai::api::MultiScopeResponse* response);
    virtual ::grpc::Status MyScopesUser(::grpc::ServerContext* context, const ::clarifai::api::MyScopesUserRequest* request, ::clarifai::api::MultiScopeUserResponse* response);
    virtual ::grpc::Status MyScopesRoot(::grpc::ServerContext* context, const ::clarifai::api::MyScopesRootRequest* request, ::clarifai::api::MultiScopeRootResponse* response);
    // List all auth scopes available to me as a user.
    virtual ::grpc::Status ListScopes(::grpc::ServerContext* context, const ::clarifai::api::ListScopesRequest* request, ::clarifai::api::MultiScopeDepsResponse* response);
    // Get a specific app from an app.
    virtual ::grpc::Status GetApp(::grpc::ServerContext* context, const ::clarifai::api::GetAppRequest* request, ::clarifai::api::SingleAppResponse* response);
    // List all the apps.
    virtual ::grpc::Status ListApps(::grpc::ServerContext* context, const ::clarifai::api::ListAppsRequest* request, ::clarifai::api::MultiAppResponse* response);
    // Search over the apps to find one or more you're looking for.
    // This leverage the "body" parameter because we also have page and
    // per_page as url query param variables in this request.
    virtual ::grpc::Status DeleteApp(::grpc::ServerContext* context, const ::clarifai::api::DeleteAppRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Add a app to an app.
    // This needs to load the default workflow to make a copy, validating all the models in it, and
    // then writing the new workflow back to this new app.
    virtual ::grpc::Status PostApps(::grpc::ServerContext* context, const ::clarifai::api::PostAppsRequest* request, ::clarifai::api::MultiAppResponse* response);
    // Patch one or more apps.
    virtual ::grpc::Status PatchApps(::grpc::ServerContext* context, const ::clarifai::api::PatchAppsRequest* request, ::clarifai::api::MultiAppResponse* response);
    // Patch one app.
    virtual ::grpc::Status PatchApp(::grpc::ServerContext* context, const ::clarifai::api::PatchAppRequest* request, ::clarifai::api::SingleAppResponse* response);
    // Patch apps ids.
    virtual ::grpc::Status PatchAppsIds(::grpc::ServerContext* context, const ::clarifai::api::PatchAppsIdsRequest* request, ::clarifai::api::MultiAppResponse* response);
    // Search over the applications to find one or more you're looking for.
    virtual ::grpc::Status PostAppsSearches(::grpc::ServerContext* context, const ::clarifai::api::PostAppsSearchesRequest* request, ::clarifai::api::MultiAppResponse* response);
    // Validate new password in real-time for a user
    virtual ::grpc::Status PostValidatePassword(::grpc::ServerContext* context, const ::clarifai::api::PostValidatePasswordRequest* request, ::clarifai::api::SinglePasswordValidationResponse* response);
    // Get a saved legacy search.
    virtual ::grpc::Status GetSearch(::grpc::ServerContext* context, const ::clarifai::api::GetSearchRequest* request, ::clarifai::api::SingleSearchResponse* response);
    // List all saved legacy searches.
    virtual ::grpc::Status ListSearches(::grpc::ServerContext* context, const ::clarifai::api::ListSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response);
    // Patch saved legacy searches by ids.
    virtual ::grpc::Status PatchSearches(::grpc::ServerContext* context, const ::clarifai::api::PatchSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response);
    // Execute a new search and optionally save it.
    virtual ::grpc::Status PostSearches(::grpc::ServerContext* context, const ::clarifai::api::PostSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response);
    // Execute a previously saved legacy search.
    virtual ::grpc::Status PostSearchesByID(::grpc::ServerContext* context, const ::clarifai::api::PostSearchesByIDRequest* request, ::clarifai::api::MultiSearchResponse* response);
    // Evaluate the results of two search requests
    virtual ::grpc::Status PostAnnotationSearchMetrics(::grpc::ServerContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response);
    // Get the evaluation results between two search requests
    virtual ::grpc::Status GetAnnotationSearchMetrics(::grpc::ServerContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response);
    // List the evaluation results between two search requests
    virtual ::grpc::Status ListAnnotationSearchMetrics(::grpc::ServerContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response);
    // DeleteAnnotationSearchMetrics
    virtual ::grpc::Status DeleteAnnotationSearchMetrics(::grpc::ServerContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Delete a saved search.
    virtual ::grpc::Status DeleteSearch(::grpc::ServerContext* context, const ::clarifai::api::DeleteSearchRequest* request, ::clarifai::api::status::BaseResponse* response);
    // List all the annotation filters.
    virtual ::grpc::Status ListAnnotationFilters(::grpc::ServerContext* context, const ::clarifai::api::ListAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response);
    // Get a specific annotation filter.
    virtual ::grpc::Status GetAnnotationFilter(::grpc::ServerContext* context, const ::clarifai::api::GetAnnotationFilterRequest* request, ::clarifai::api::SingleAnnotationFilterResponse* response);
    // Add annotation filters.
    virtual ::grpc::Status PostAnnotationFilters(::grpc::ServerContext* context, const ::clarifai::api::PostAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response);
    // Patch one or more annotation filters.
    virtual ::grpc::Status PatchAnnotationFilters(::grpc::ServerContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response);
    // Delete one or more annotation filters in a single request.
    virtual ::grpc::Status DeleteAnnotationFilters(::grpc::ServerContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest* request, ::clarifai::api::status::BaseResponse* response);
    // List all status codes.
    virtual ::grpc::Status ListStatusCodes(::grpc::ServerContext* context, const ::clarifai::api::ListStatusCodesRequest* request, ::clarifai::api::MultiStatusCodeResponse* response);
    // Get more details for a status code.
    virtual ::grpc::Status GetStatusCode(::grpc::ServerContext* context, const ::clarifai::api::GetStatusCodeRequest* request, ::clarifai::api::SingleStatusCodeResponse* response);
    // owner list users who the app is shared with
    virtual ::grpc::Status ListCollaborators(::grpc::ServerContext* context, const ::clarifai::api::ListCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response);
    // add collaborators to an app.
    virtual ::grpc::Status PostCollaborators(::grpc::ServerContext* context, const ::clarifai::api::PostCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response);
    // Patch existing collaborators.
    virtual ::grpc::Status PatchCollaborators(::grpc::ServerContext* context, const ::clarifai::api::PatchCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response);
    // Delete existing collaborators.
    virtual ::grpc::Status DeleteCollaborators(::grpc::ServerContext* context, const ::clarifai::api::DeleteCollaboratorsRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Collaboration includes the app user are invitied to work on
    virtual ::grpc::Status ListCollaborations(::grpc::ServerContext* context, const ::clarifai::api::ListCollaborationsRequest* request, ::clarifai::api::MultiCollaborationsResponse* response);
    // start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
    // this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
    virtual ::grpc::Status PostAppDuplications(::grpc::ServerContext* context, const ::clarifai::api::PostAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response);
    // list all the app duplications user triggers
    virtual ::grpc::Status ListAppDuplications(::grpc::ServerContext* context, const ::clarifai::api::ListAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response);
    // get the app duplication status
    virtual ::grpc::Status GetAppDuplication(::grpc::ServerContext* context, const ::clarifai::api::GetAppDuplicationRequest* request, ::clarifai::api::SingleAppDuplicationResponse* response);
    // Add tasks to an app.
    virtual ::grpc::Status PostTasks(::grpc::ServerContext* context, const ::clarifai::api::PostTasksRequest* request, ::clarifai::api::MultiTaskResponse* response);
    // Task annotation count
    virtual ::grpc::Status GetTaskAnnotationCount(::grpc::ServerContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response);
    // Task Input count
    virtual ::grpc::Status GetTaskInputCount(::grpc::ServerContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response);
    // Get a specific task from an app.
    virtual ::grpc::Status GetTask(::grpc::ServerContext* context, const ::clarifai::api::GetTaskRequest* request, ::clarifai::api::SingleTaskResponse* response);
    // List tasks from an app.
    virtual ::grpc::Status ListTasks(::grpc::ServerContext* context, const ::clarifai::api::ListTasksRequest* request, ::clarifai::api::MultiTaskResponse* response);
    // Patch one or more tasks.
    virtual ::grpc::Status PatchTasks(::grpc::ServerContext* context, const ::clarifai::api::PatchTasksRequest* request, ::clarifai::api::MultiTaskResponse* response);
    // Delete multiple tasks in one request.
    virtual ::grpc::Status DeleteTasks(::grpc::ServerContext* context, const ::clarifai::api::DeleteTasksRequest* request, ::clarifai::api::status::BaseResponse* response);
    // //////////////////////////////////////
    // Label Order
    // //////////////////////////////////////
    //
    // Add Label orders.
    virtual ::grpc::Status PostLabelOrders(::grpc::ServerContext* context, const ::clarifai::api::PostLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response);
    // Get a label order.
    virtual ::grpc::Status GetLabelOrder(::grpc::ServerContext* context, const ::clarifai::api::GetLabelOrderRequest* request, ::clarifai::api::SingleLabelOrderResponse* response);
    // List label orders.
    virtual ::grpc::Status ListLabelOrders(::grpc::ServerContext* context, const ::clarifai::api::ListLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response);
    // Patch one or more label orders.
    virtual ::grpc::Status PatchLabelOrders(::grpc::ServerContext* context, const ::clarifai::api::PatchLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response);
    // Delete multiple label orders in one request.
    // this do not change task status
    virtual ::grpc::Status DeleteLabelOrders(::grpc::ServerContext* context, const ::clarifai::api::DeleteLabelOrdersRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Add a list of Collectors to an app.
    // In the handler of this endpoint we also check for all the scopes of the  POST /inputs
    // endpoint.
    // Those current scopes are listed here as a hard requirement.
    // They are needed when adding the collectors just so we now that you have permission with
    // that key at least to do the writing to this app with POST /inputs.
    virtual ::grpc::Status PostCollectors(::grpc::ServerContext* context, const ::clarifai::api::PostCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response);
    // Get a specific collector from an app.
    virtual ::grpc::Status GetCollector(::grpc::ServerContext* context, const ::clarifai::api::GetCollectorRequest* request, ::clarifai::api::SingleCollectorResponse* response);
    // List all the collectors.
    virtual ::grpc::Status ListCollectors(::grpc::ServerContext* context, const ::clarifai::api::ListCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response);
    // Patch one or more collectors.
    virtual ::grpc::Status PatchCollectors(::grpc::ServerContext* context, const ::clarifai::api::PatchCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response);
    // Delete multiple collectors in one request.
    // This call is asynchronous. Use DeleteCollector if you want a synchronous version.
    virtual ::grpc::Status DeleteCollectors(::grpc::ServerContext* context, const ::clarifai::api::DeleteCollectorsRequest* request, ::clarifai::api::status::BaseResponse* response);
    // PostStatValues
    virtual ::grpc::Status PostStatValues(::grpc::ServerContext* context, const ::clarifai::api::PostStatValuesRequest* request, ::clarifai::api::MultiStatValueResponse* response);
    // PostStatValuesAggregate
    virtual ::grpc::Status PostStatValuesAggregate(::grpc::ServerContext* context, const ::clarifai::api::PostStatValuesAggregateRequest* request, ::clarifai::api::MultiStatValueAggregateResponse* response);
    // Increase the view metric for a detail view
    virtual ::grpc::Status PostTrendingMetricsView(::grpc::ServerContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest* request, ::clarifai::api::status::BaseResponse* response);
    // List the view metrics for a detail view
    virtual ::grpc::Status ListTrendingMetricsViews(::grpc::ServerContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest* request, ::clarifai::api::MultiTrendingMetricsViewResponse* response);
    // Perform bulk operations on a list of inputs based on input source.
    // Operation include add, update, delete of concepts, metadata and geo data.
    // This is an Asynchronous process. Use ListBulkOperations or GetBulkOperation to check the status.
    virtual ::grpc::Status PostBulkOperations(::grpc::ServerContext* context, const ::clarifai::api::PostBulkOperationsRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response);
    // List all the bulk operations
    virtual ::grpc::Status ListBulkOperations(::grpc::ServerContext* context, const ::clarifai::api::ListBulkOperationsRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response);
    // Get the bulk operation details by ID
    virtual ::grpc::Status GetBulkOperation(::grpc::ServerContext* context, const ::clarifai::api::GetBulkOperationRequest* request, ::clarifai::api::SingleBulkOperationsResponse* response);
    // Cancel one or more bulk operations
    virtual ::grpc::Status CancelBulkOperations(::grpc::ServerContext* context, const ::clarifai::api::CancelBulkOperationRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response);
    // delete one or more terminated bulk operations
    virtual ::grpc::Status DeleteBulkOperations(::grpc::ServerContext* context, const ::clarifai::api::DeleteBulkOperationRequest* request, ::clarifai::api::status::BaseResponse* response);
    // Get a specific job.
    virtual ::grpc::Status GetDatasetInputsSearchAddJob(::grpc::ServerContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* request, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListConceptRelations() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListConceptRelations(::grpc::ServerContext* context, ::clarifai::api::ListConceptRelationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiConceptRelationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostConceptRelations() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PostConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostConceptRelations(::grpc::ServerContext* context, ::clarifai::api::PostConceptRelationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiConceptRelationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteConceptRelations() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteConceptRelationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteConceptRelations(::grpc::ServerContext* context, ::clarifai::api::DeleteConceptRelationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConceptCounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConceptCounts() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetConceptCounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConceptCounts(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptCountsRequest* /*request*/, ::clarifai::api::MultiConceptCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConceptCounts(::grpc::ServerContext* context, ::clarifai::api::GetConceptCountsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiConceptCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConcept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConcept() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetConcept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConcept(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptRequest* /*request*/, ::clarifai::api::SingleConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConcept(::grpc::ServerContext* context, ::clarifai::api::GetConceptRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleConceptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListConcepts() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListConcepts(::grpc::ServerContext* context, ::clarifai::api::ListConceptsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiConceptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostConceptsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostConceptsSearches() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_PostConceptsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptsSearchesRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostConceptsSearches(::grpc::ServerContext* context, ::clarifai::api::PostConceptsSearchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiConceptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostConcepts() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_PostConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostConcepts(::grpc::ServerContext* context, ::clarifai::api::PostConceptsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiConceptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchConcepts() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PatchConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchConcepts(::grpc::ServerContext* context, ::clarifai::api::PatchConceptsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiConceptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConceptLanguage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConceptLanguage() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetConceptLanguage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConceptLanguage(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptLanguageRequest* /*request*/, ::clarifai::api::SingleConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConceptLanguage(::grpc::ServerContext* context, ::clarifai::api::GetConceptLanguageRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleConceptLanguageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListConceptLanguages() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ListConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListConceptLanguages(::grpc::ServerContext* context, ::clarifai::api::ListConceptLanguagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiConceptLanguageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostConceptLanguages() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_PostConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostConceptLanguages(::grpc::ServerContext* context, ::clarifai::api::PostConceptLanguagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiConceptLanguageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchConceptLanguages() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_PatchConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchConceptLanguages(::grpc::ServerContext* context, ::clarifai::api::PatchConceptLanguagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiConceptLanguageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListKnowledgeGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListKnowledgeGraphs() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ListKnowledgeGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKnowledgeGraphs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListKnowledgeGraphs(::grpc::ServerContext* context, ::clarifai::api::ListKnowledgeGraphsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiKnowledgeGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostKnowledgeGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostKnowledgeGraphs() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_PostKnowledgeGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostKnowledgeGraphs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostKnowledgeGraphs(::grpc::ServerContext* context, ::clarifai::api::PostKnowledgeGraphsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiKnowledgeGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostConceptMappingJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostConceptMappingJobs() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_PostConceptMappingJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptMappingJobs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptMappingJobsRequest* /*request*/, ::clarifai::api::MultiConceptMappingJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostConceptMappingJobs(::grpc::ServerContext* context, ::clarifai::api::PostConceptMappingJobsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiConceptMappingJobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAnnotation() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotation(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationRequest* /*request*/, ::clarifai::api::SingleAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnnotation(::grpc::ServerContext* context, ::clarifai::api::GetAnnotationRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleAnnotationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAnnotations() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_ListAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAnnotations(::grpc::ServerContext* context, ::clarifai::api::ListAnnotationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAnnotationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostAnnotations() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_PostAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAnnotations(::grpc::ServerContext* context, ::clarifai::api::PostAnnotationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAnnotationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchAnnotations() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_PatchAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchAnnotations(::grpc::ServerContext* context, ::clarifai::api::PatchAnnotationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAnnotationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchAnnotationsStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchAnnotationsStatus() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_PatchAnnotationsStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationsStatus(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsStatusRequest* /*request*/, ::clarifai::api::PatchAnnotationsStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchAnnotationsStatus(::grpc::ServerContext* context, ::clarifai::api::PatchAnnotationsStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::PatchAnnotationsStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAnnotation() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_DeleteAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotation(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAnnotation(::grpc::ServerContext* context, ::clarifai::api::DeleteAnnotationRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAnnotations() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_DeleteAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAnnotations(::grpc::ServerContext* context, ::clarifai::api::DeleteAnnotationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchAnnotationsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchAnnotationsSearches() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_PatchAnnotationsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchAnnotationsSearches(::grpc::ServerContext* context, ::clarifai::api::PatchAnnotationsSearchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostAnnotationsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostAnnotationsSearches() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_PostAnnotationsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAnnotationsSearches(::grpc::ServerContext* context, ::clarifai::api::PostAnnotationsSearchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInputCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInputCount() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_GetInputCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputCountRequest* /*request*/, ::clarifai::api::SingleInputCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInputCount(::grpc::ServerContext* context, ::clarifai::api::GetInputCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleInputCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamInputs() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_StreamInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::StreamInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamInputs(::grpc::ServerContext* context, ::clarifai::api::StreamInputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiInputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInputSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInputSamples() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_GetInputSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputSamples(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputSamplesRequest* /*request*/, ::clarifai::api::MultiInputAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInputSamples(::grpc::ServerContext* context, ::clarifai::api::GetInputSamplesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiInputAnnotationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInput() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_GetInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputRequest* /*request*/, ::clarifai::api::SingleInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInput(::grpc::ServerContext* context, ::clarifai::api::GetInputRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleInputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListInputs() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_ListInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInputs(::grpc::ServerContext* context, ::clarifai::api::ListInputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiInputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostInputs() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_PostInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostInputs(::grpc::ServerContext* context, ::clarifai::api::PostInputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiInputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchInputs() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_PatchInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchInputs(::grpc::ServerContext* context, ::clarifai::api::PatchInputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiInputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteInput() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_DeleteInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteInputRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteInput(::grpc::ServerContext* context, ::clarifai::api::DeleteInputRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteInputs() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_DeleteInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteInputs(::grpc::ServerContext* context, ::clarifai::api::DeleteInputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchInputsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchInputsSearches() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_PatchInputsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchInputsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchInputsSearches(::grpc::ServerContext* context, ::clarifai::api::PatchInputsSearchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostInputsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostInputsSearches() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_PostInputsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostInputsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostInputsSearches(::grpc::ServerContext* context, ::clarifai::api::PostInputsSearchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostModelOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostModelOutputs() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_PostModelOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelOutputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelOutputsRequest* /*request*/, ::clarifai::api::MultiOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModelOutputs(::grpc::ServerContext* context, ::clarifai::api::PostModelOutputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiOutputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDatasets() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_ListDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDatasets(::grpc::ServerContext* context, ::clarifai::api::ListDatasetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiDatasetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDataset() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetRequest* /*request*/, ::clarifai::api::SingleDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataset(::grpc::ServerContext* context, ::clarifai::api::GetDatasetRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleDatasetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostDatasets() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_PostDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostDatasets(::grpc::ServerContext* context, ::clarifai::api::PostDatasetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiDatasetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchDatasets() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_PatchDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchDatasets(::grpc::ServerContext* context, ::clarifai::api::PatchDatasetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiDatasetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDatasets() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_DeleteDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDatasets(::grpc::ServerContext* context, ::clarifai::api::DeleteDatasetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDatasetInputs() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_ListDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDatasetInputs(::grpc::ServerContext* context, ::clarifai::api::ListDatasetInputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiDatasetInputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDatasetInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDatasetInput() {
      ::grpc::Service::MarkMethodAsync(43);
    }
    ~WithAsyncMethod_GetDatasetInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetInputRequest* /*request*/, ::clarifai::api::SingleDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDatasetInput(::grpc::ServerContext* context, ::clarifai::api::GetDatasetInputRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleDatasetInputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostDatasetInputs() {
      ::grpc::Service::MarkMethodAsync(44);
    }
    ~WithAsyncMethod_PostDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostDatasetInputs(::grpc::ServerContext* context, ::clarifai::api::PostDatasetInputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiDatasetInputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDatasetInputs() {
      ::grpc::Service::MarkMethodAsync(45);
    }
    ~WithAsyncMethod_DeleteDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDatasetInputs(::grpc::ServerContext* context, ::clarifai::api::DeleteDatasetInputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDatasetVersions() {
      ::grpc::Service::MarkMethodAsync(46);
    }
    ~WithAsyncMethod_ListDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDatasetVersions(::grpc::ServerContext* context, ::clarifai::api::ListDatasetVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiDatasetVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDatasetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDatasetVersion() {
      ::grpc::Service::MarkMethodAsync(47);
    }
    ~WithAsyncMethod_GetDatasetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetVersionRequest* /*request*/, ::clarifai::api::SingleDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDatasetVersion(::grpc::ServerContext* context, ::clarifai::api::GetDatasetVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleDatasetVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDatasetVersionMetricsGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDatasetVersionMetricsGroups() {
      ::grpc::Service::MarkMethodAsync(48);
    }
    ~WithAsyncMethod_ListDatasetVersionMetricsGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetVersionMetricsGroups(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDatasetVersionMetricsGroups(::grpc::ServerContext* context, ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostDatasetVersions() {
      ::grpc::Service::MarkMethodAsync(49);
    }
    ~WithAsyncMethod_PostDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostDatasetVersions(::grpc::ServerContext* context, ::clarifai::api::PostDatasetVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiDatasetVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchDatasetVersions() {
      ::grpc::Service::MarkMethodAsync(50);
    }
    ~WithAsyncMethod_PatchDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchDatasetVersions(::grpc::ServerContext* context, ::clarifai::api::PatchDatasetVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiDatasetVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDatasetVersions() {
      ::grpc::Service::MarkMethodAsync(51);
    }
    ~WithAsyncMethod_DeleteDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDatasetVersions(::grpc::ServerContext* context, ::clarifai::api::DeleteDatasetVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelType() {
      ::grpc::Service::MarkMethodAsync(52);
    }
    ~WithAsyncMethod_GetModelType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelType(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelTypeRequest* /*request*/, ::clarifai::api::SingleModelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelType(::grpc::ServerContext* context, ::clarifai::api::GetModelTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleModelTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(52, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListOpenSourceLicenses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListOpenSourceLicenses() {
      ::grpc::Service::MarkMethodAsync(53);
    }
    ~WithAsyncMethod_ListOpenSourceLicenses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOpenSourceLicenses(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListOpenSourceLicensesRequest* /*request*/, ::clarifai::api::ListOpenSourceLicensesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOpenSourceLicenses(::grpc::ServerContext* context, ::clarifai::api::ListOpenSourceLicensesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::ListOpenSourceLicensesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(53, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListModelTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListModelTypes() {
      ::grpc::Service::MarkMethodAsync(54);
    }
    ~WithAsyncMethod_ListModelTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelTypes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelTypesRequest* /*request*/, ::clarifai::api::MultiModelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModelTypes(::grpc::ServerContext* context, ::clarifai::api::ListModelTypesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiModelTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(54, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModel() {
      ::grpc::Service::MarkMethodAsync(55);
    }
    ~WithAsyncMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModel(::grpc::ServerContext* context, ::clarifai::api::GetModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(55, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelOutputInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelOutputInfo() {
      ::grpc::Service::MarkMethodAsync(56);
    }
    ~WithAsyncMethod_GetModelOutputInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelOutputInfo(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelOutputInfo(::grpc::ServerContext* context, ::clarifai::api::GetModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(56, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListModels() {
      ::grpc::Service::MarkMethodAsync(57);
    }
    ~WithAsyncMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModels(::grpc::ServerContext* context, ::clarifai::api::ListModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(57, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostModelsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostModelsSearches() {
      ::grpc::Service::MarkMethodAsync(58);
    }
    ~WithAsyncMethod_PostModelsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelsSearchesRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModelsSearches(::grpc::ServerContext* context, ::clarifai::api::PostModelsSearchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(58, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostModels() {
      ::grpc::Service::MarkMethodAsync(59);
    }
    ~WithAsyncMethod_PostModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModels(::grpc::ServerContext* context, ::clarifai::api::PostModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(59, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchModels() {
      ::grpc::Service::MarkMethodAsync(60);
    }
    ~WithAsyncMethod_PatchModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModels(::grpc::ServerContext* context, ::clarifai::api::PatchModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(60, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchModelIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchModelIds() {
      ::grpc::Service::MarkMethodAsync(61);
    }
    ~WithAsyncMethod_PatchModelIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelIds(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelIdsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModelIds(::grpc::ServerContext* context, ::clarifai::api::PatchModelIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(61, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteModel() {
      ::grpc::Service::MarkMethodAsync(62);
    }
    ~WithAsyncMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteModel(::grpc::ServerContext* context, ::clarifai::api::DeleteModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(62, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteModels() {
      ::grpc::Service::MarkMethodAsync(63);
    }
    ~WithAsyncMethod_DeleteModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteModels(::grpc::ServerContext* context, ::clarifai::api::DeleteModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(63, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchModelToolkits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchModelToolkits() {
      ::grpc::Service::MarkMethodAsync(64);
    }
    ~WithAsyncMethod_PatchModelToolkits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelToolkits(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelToolkitsRequest* /*request*/, ::clarifai::api::MultiModelToolkitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModelToolkits(::grpc::ServerContext* context, ::clarifai::api::PatchModelToolkitsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiModelToolkitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(64, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchModelUseCases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchModelUseCases() {
      ::grpc::Service::MarkMethodAsync(65);
    }
    ~WithAsyncMethod_PatchModelUseCases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelUseCases(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelUseCasesRequest* /*request*/, ::clarifai::api::MultiModelUseCaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModelUseCases(::grpc::ServerContext* context, ::clarifai::api::PatchModelUseCasesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiModelUseCaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(65, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchModelLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchModelLanguages() {
      ::grpc::Service::MarkMethodAsync(66);
    }
    ~WithAsyncMethod_PatchModelLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelLanguagesRequest* /*request*/, ::clarifai::api::MultiModelLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModelLanguages(::grpc::ServerContext* context, ::clarifai::api::PatchModelLanguagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiModelLanguageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(66, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListModelInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListModelInputs() {
      ::grpc::Service::MarkMethodAsync(67);
    }
    ~WithAsyncMethod_ListModelInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModelInputs(::grpc::ServerContext* context, ::clarifai::api::ListModelInputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiInputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(67, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelVersion() {
      ::grpc::Service::MarkMethodAsync(68);
    }
    ~WithAsyncMethod_GetModelVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelVersion(::grpc::ServerContext* context, ::clarifai::api::GetModelVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleModelVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(68, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListModelVersions() {
      ::grpc::Service::MarkMethodAsync(69);
    }
    ~WithAsyncMethod_ListModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModelVersions(::grpc::ServerContext* context, ::clarifai::api::ListModelVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiModelVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(69, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostWorkflowVersionsUnPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostWorkflowVersionsUnPublish() {
      ::grpc::Service::MarkMethodAsync(70);
    }
    ~WithAsyncMethod_PostWorkflowVersionsUnPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowVersionsUnPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostWorkflowVersionsUnPublish(::grpc::ServerContext* context, ::clarifai::api::PostWorkflowVersionsUnPublishRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(70, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostWorkflowVersionsPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostWorkflowVersionsPublish() {
      ::grpc::Service::MarkMethodAsync(71);
    }
    ~WithAsyncMethod_PostWorkflowVersionsPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowVersionsPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostWorkflowVersionsPublish(::grpc::ServerContext* context, ::clarifai::api::PostWorkflowVersionsPublishRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(71, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostModelVersionsPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostModelVersionsPublish() {
      ::grpc::Service::MarkMethodAsync(72);
    }
    ~WithAsyncMethod_PostModelVersionsPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionsPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModelVersionsPublish(::grpc::ServerContext* context, ::clarifai::api::PostModelVersionsPublishRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(72, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostModelVersionsUnPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostModelVersionsUnPublish() {
      ::grpc::Service::MarkMethodAsync(73);
    }
    ~WithAsyncMethod_PostModelVersionsUnPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionsUnPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModelVersionsUnPublish(::grpc::ServerContext* context, ::clarifai::api::PostModelVersionsUnPublishRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(73, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostModelVersions() {
      ::grpc::Service::MarkMethodAsync(74);
    }
    ~WithAsyncMethod_PostModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModelVersions(::grpc::ServerContext* context, ::clarifai::api::PostModelVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(74, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchModelVersions() {
      ::grpc::Service::MarkMethodAsync(75);
    }
    ~WithAsyncMethod_PatchModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModelVersions(::grpc::ServerContext* context, ::clarifai::api::PatchModelVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiModelVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(75, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteModelVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteModelVersion() {
      ::grpc::Service::MarkMethodAsync(76);
    }
    ~WithAsyncMethod_DeleteModelVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModelVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelVersionRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteModelVersion(::grpc::ServerContext* context, ::clarifai::api::DeleteModelVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(76, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelVersionMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelVersionMetrics() {
      ::grpc::Service::MarkMethodAsync(77);
    }
    ~WithAsyncMethod_GetModelVersionMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersionMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelVersionMetrics(::grpc::ServerContext* context, ::clarifai::api::GetModelVersionMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleModelVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(77, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostModelVersionMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostModelVersionMetrics() {
      ::grpc::Service::MarkMethodAsync(78);
    }
    ~WithAsyncMethod_PostModelVersionMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModelVersionMetrics(::grpc::ServerContext* context, ::clarifai::api::PostModelVersionMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleModelVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(78, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListModelReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListModelReferences() {
      ::grpc::Service::MarkMethodAsync(79);
    }
    ~WithAsyncMethod_ListModelReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelReferences(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelReferencesRequest* /*request*/, ::clarifai::api::MultiModelReferenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModelReferences(::grpc::ServerContext* context, ::clarifai::api::ListModelReferencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiModelReferenceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(79, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelVersionInputExample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelVersionInputExample() {
      ::grpc::Service::MarkMethodAsync(80);
    }
    ~WithAsyncMethod_GetModelVersionInputExample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersionInputExample(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionInputExampleRequest* /*request*/, ::clarifai::api::SingleModelVersionInputExampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelVersionInputExample(::grpc::ServerContext* context, ::clarifai::api::GetModelVersionInputExampleRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleModelVersionInputExampleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(80, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListModelVersionInputExamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListModelVersionInputExamples() {
      ::grpc::Service::MarkMethodAsync(81);
    }
    ~WithAsyncMethod_ListModelVersionInputExamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelVersionInputExamples(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelVersionInputExamplesRequest* /*request*/, ::clarifai::api::MultiModelVersionInputExampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModelVersionInputExamples(::grpc::ServerContext* context, ::clarifai::api::ListModelVersionInputExamplesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiModelVersionInputExampleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(81, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWorkflow() {
      ::grpc::Service::MarkMethodAsync(82);
    }
    ~WithAsyncMethod_GetWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflow(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetWorkflowRequest* /*request*/, ::clarifai::api::SingleWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkflow(::grpc::ServerContext* context, ::clarifai::api::GetWorkflowRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleWorkflowResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(82, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListWorkflows() {
      ::grpc::Service::MarkMethodAsync(83);
    }
    ~WithAsyncMethod_ListWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWorkflows(::grpc::ServerContext* context, ::clarifai::api::ListWorkflowsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiWorkflowResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(83, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostWorkflows() {
      ::grpc::Service::MarkMethodAsync(84);
    }
    ~WithAsyncMethod_PostWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostWorkflows(::grpc::ServerContext* context, ::clarifai::api::PostWorkflowsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiWorkflowResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(84, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchWorkflows() {
      ::grpc::Service::MarkMethodAsync(85);
    }
    ~WithAsyncMethod_PatchWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchWorkflows(::grpc::ServerContext* context, ::clarifai::api::PatchWorkflowsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiWorkflowResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(85, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteWorkflow() {
      ::grpc::Service::MarkMethodAsync(86);
    }
    ~WithAsyncMethod_DeleteWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflow(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteWorkflow(::grpc::ServerContext* context, ::clarifai::api::DeleteWorkflowRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(86, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteWorkflows() {
      ::grpc::Service::MarkMethodAsync(87);
    }
    ~WithAsyncMethod_DeleteWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteWorkflows(::grpc::ServerContext* context, ::clarifai::api::DeleteWorkflowsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(87, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostWorkflowResults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostWorkflowResults() {
      ::grpc::Service::MarkMethodAsync(88);
    }
    ~WithAsyncMethod_PostWorkflowResults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowResults(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsRequest* /*request*/, ::clarifai::api::PostWorkflowResultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostWorkflowResults(::grpc::ServerContext* context, ::clarifai::api::PostWorkflowResultsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::PostWorkflowResultsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(88, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostWorkflowResultsSimilarity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostWorkflowResultsSimilarity() {
      ::grpc::Service::MarkMethodAsync(89);
    }
    ~WithAsyncMethod_PostWorkflowResultsSimilarity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowResultsSimilarity(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* /*request*/, ::clarifai::api::PostWorkflowResultsSimilarityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostWorkflowResultsSimilarity(::grpc::ServerContext* context, ::clarifai::api::PostWorkflowResultsSimilarityRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::PostWorkflowResultsSimilarityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(89, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListWorkflowVersions() {
      ::grpc::Service::MarkMethodAsync(90);
    }
    ~WithAsyncMethod_ListWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWorkflowVersions(::grpc::ServerContext* context, ::clarifai::api::ListWorkflowVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiWorkflowVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(90, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWorkflowVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWorkflowVersion() {
      ::grpc::Service::MarkMethodAsync(91);
    }
    ~WithAsyncMethod_GetWorkflowVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflowVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetWorkflowVersionRequest* /*request*/, ::clarifai::api::SingleWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkflowVersion(::grpc::ServerContext* context, ::clarifai::api::GetWorkflowVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleWorkflowVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(91, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteWorkflowVersions() {
      ::grpc::Service::MarkMethodAsync(92);
    }
    ~WithAsyncMethod_DeleteWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteWorkflowVersions(::grpc::ServerContext* context, ::clarifai::api::DeleteWorkflowVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(92, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchWorkflowVersions() {
      ::grpc::Service::MarkMethodAsync(93);
    }
    ~WithAsyncMethod_PatchWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchWorkflowVersions(::grpc::ServerContext* context, ::clarifai::api::PatchWorkflowVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiWorkflowVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(93, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetKey() {
      ::grpc::Service::MarkMethodAsync(94);
    }
    ~WithAsyncMethod_GetKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKey(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetKeyRequest* /*request*/, ::clarifai::api::SingleKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKey(::grpc::ServerContext* context, ::clarifai::api::GetKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(94, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListKeys() {
      ::grpc::Service::MarkMethodAsync(95);
    }
    ~WithAsyncMethod_ListKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListKeys(::grpc::ServerContext* context, ::clarifai::api::ListKeysRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(95, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAppKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAppKeys() {
      ::grpc::Service::MarkMethodAsync(96);
    }
    ~WithAsyncMethod_ListAppKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAppKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAppKeys(::grpc::ServerContext* context, ::clarifai::api::ListAppKeysRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(96, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteKey() {
      ::grpc::Service::MarkMethodAsync(97);
    }
    ~WithAsyncMethod_DeleteKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteKey(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteKeyRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteKey(::grpc::ServerContext* context, ::clarifai::api::DeleteKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(97, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostKeys() {
      ::grpc::Service::MarkMethodAsync(98);
    }
    ~WithAsyncMethod_PostKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostKeys(::grpc::ServerContext* context, ::clarifai::api::PostKeysRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(98, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchKeys() {
      ::grpc::Service::MarkMethodAsync(99);
    }
    ~WithAsyncMethod_PatchKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchKeys(::grpc::ServerContext* context, ::clarifai::api::PatchKeysRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(99, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MyScopes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MyScopes() {
      ::grpc::Service::MarkMethodAsync(100);
    }
    ~WithAsyncMethod_MyScopes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopes(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesRequest* /*request*/, ::clarifai::api::MultiScopeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMyScopes(::grpc::ServerContext* context, ::clarifai::api::MyScopesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiScopeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(100, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MyScopesUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MyScopesUser() {
      ::grpc::Service::MarkMethodAsync(101);
    }
    ~WithAsyncMethod_MyScopesUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopesUser(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesUserRequest* /*request*/, ::clarifai::api::MultiScopeUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMyScopesUser(::grpc::ServerContext* context, ::clarifai::api::MyScopesUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiScopeUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(101, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MyScopesRoot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MyScopesRoot() {
      ::grpc::Service::MarkMethodAsync(102);
    }
    ~WithAsyncMethod_MyScopesRoot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopesRoot(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesRootRequest* /*request*/, ::clarifai::api::MultiScopeRootResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMyScopesRoot(::grpc::ServerContext* context, ::clarifai::api::MyScopesRootRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiScopeRootResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(102, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListScopes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListScopes() {
      ::grpc::Service::MarkMethodAsync(103);
    }
    ~WithAsyncMethod_ListScopes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScopes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListScopesRequest* /*request*/, ::clarifai::api::MultiScopeDepsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListScopes(::grpc::ServerContext* context, ::clarifai::api::ListScopesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiScopeDepsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(103, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetApp() {
      ::grpc::Service::MarkMethodAsync(104);
    }
    ~WithAsyncMethod_GetApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetApp(::grpc::ServerContext* context, ::clarifai::api::GetAppRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleAppResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(104, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListApps() {
      ::grpc::Service::MarkMethodAsync(105);
    }
    ~WithAsyncMethod_ListApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListApps(::grpc::ServerContext* context, ::clarifai::api::ListAppsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAppResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(105, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteApp() {
      ::grpc::Service::MarkMethodAsync(106);
    }
    ~WithAsyncMethod_DeleteApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAppRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteApp(::grpc::ServerContext* context, ::clarifai::api::DeleteAppRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(106, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostApps() {
      ::grpc::Service::MarkMethodAsync(107);
    }
    ~WithAsyncMethod_PostApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostApps(::grpc::ServerContext* context, ::clarifai::api::PostAppsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAppResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(107, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchApps() {
      ::grpc::Service::MarkMethodAsync(108);
    }
    ~WithAsyncMethod_PatchApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchApps(::grpc::ServerContext* context, ::clarifai::api::PatchAppsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAppResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(108, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchApp() {
      ::grpc::Service::MarkMethodAsync(109);
    }
    ~WithAsyncMethod_PatchApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchApp(::grpc::ServerContext* context, ::clarifai::api::PatchAppRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleAppResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(109, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchAppsIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchAppsIds() {
      ::grpc::Service::MarkMethodAsync(110);
    }
    ~WithAsyncMethod_PatchAppsIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAppsIds(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppsIdsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchAppsIds(::grpc::ServerContext* context, ::clarifai::api::PatchAppsIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAppResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(110, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostAppsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostAppsSearches() {
      ::grpc::Service::MarkMethodAsync(111);
    }
    ~WithAsyncMethod_PostAppsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAppsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppsSearchesRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAppsSearches(::grpc::ServerContext* context, ::clarifai::api::PostAppsSearchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAppResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(111, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostValidatePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostValidatePassword() {
      ::grpc::Service::MarkMethodAsync(112);
    }
    ~WithAsyncMethod_PostValidatePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostValidatePassword(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostValidatePasswordRequest* /*request*/, ::clarifai::api::SinglePasswordValidationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostValidatePassword(::grpc::ServerContext* context, ::clarifai::api::PostValidatePasswordRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SinglePasswordValidationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(112, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSearch() {
      ::grpc::Service::MarkMethodAsync(113);
    }
    ~WithAsyncMethod_GetSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSearch(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetSearchRequest* /*request*/, ::clarifai::api::SingleSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSearch(::grpc::ServerContext* context, ::clarifai::api::GetSearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(113, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListSearches() {
      ::grpc::Service::MarkMethodAsync(114);
    }
    ~WithAsyncMethod_ListSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSearches(::grpc::ServerContext* context, ::clarifai::api::ListSearchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(114, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchSearches() {
      ::grpc::Service::MarkMethodAsync(115);
    }
    ~WithAsyncMethod_PatchSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchSearches(::grpc::ServerContext* context, ::clarifai::api::PatchSearchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(115, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostSearches() {
      ::grpc::Service::MarkMethodAsync(116);
    }
    ~WithAsyncMethod_PostSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostSearches(::grpc::ServerContext* context, ::clarifai::api::PostSearchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(116, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostSearchesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostSearchesByID() {
      ::grpc::Service::MarkMethodAsync(117);
    }
    ~WithAsyncMethod_PostSearchesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostSearchesByID(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostSearchesByIDRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostSearchesByID(::grpc::ServerContext* context, ::clarifai::api::PostSearchesByIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiSearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(117, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodAsync(118);
    }
    ~WithAsyncMethod_PostAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAnnotationSearchMetrics(::grpc::ServerContext* context, ::clarifai::api::PostAnnotationSearchMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(118, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodAsync(119);
    }
    ~WithAsyncMethod_GetAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnnotationSearchMetrics(::grpc::ServerContext* context, ::clarifai::api::GetAnnotationSearchMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(119, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodAsync(120);
    }
    ~WithAsyncMethod_ListAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAnnotationSearchMetrics(::grpc::ServerContext* context, ::clarifai::api::ListAnnotationSearchMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(120, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodAsync(121);
    }
    ~WithAsyncMethod_DeleteAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAnnotationSearchMetrics(::grpc::ServerContext* context, ::clarifai::api::DeleteAnnotationSearchMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(121, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSearch() {
      ::grpc::Service::MarkMethodAsync(122);
    }
    ~WithAsyncMethod_DeleteSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSearch(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteSearchRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSearch(::grpc::ServerContext* context, ::clarifai::api::DeleteSearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(122, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAnnotationFilters() {
      ::grpc::Service::MarkMethodAsync(123);
    }
    ~WithAsyncMethod_ListAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAnnotationFilters(::grpc::ServerContext* context, ::clarifai::api::ListAnnotationFiltersRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAnnotationFilterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(123, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAnnotationFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAnnotationFilter() {
      ::grpc::Service::MarkMethodAsync(124);
    }
    ~WithAsyncMethod_GetAnnotationFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotationFilter(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationFilterRequest* /*request*/, ::clarifai::api::SingleAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnnotationFilter(::grpc::ServerContext* context, ::clarifai::api::GetAnnotationFilterRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleAnnotationFilterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(124, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostAnnotationFilters() {
      ::grpc::Service::MarkMethodAsync(125);
    }
    ~WithAsyncMethod_PostAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAnnotationFilters(::grpc::ServerContext* context, ::clarifai::api::PostAnnotationFiltersRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAnnotationFilterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(125, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchAnnotationFilters() {
      ::grpc::Service::MarkMethodAsync(126);
    }
    ~WithAsyncMethod_PatchAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchAnnotationFilters(::grpc::ServerContext* context, ::clarifai::api::PatchAnnotationFiltersRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAnnotationFilterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(126, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAnnotationFilters() {
      ::grpc::Service::MarkMethodAsync(127);
    }
    ~WithAsyncMethod_DeleteAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationFiltersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAnnotationFilters(::grpc::ServerContext* context, ::clarifai::api::DeleteAnnotationFiltersRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(127, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListStatusCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListStatusCodes() {
      ::grpc::Service::MarkMethodAsync(128);
    }
    ~WithAsyncMethod_ListStatusCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListStatusCodes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListStatusCodesRequest* /*request*/, ::clarifai::api::MultiStatusCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListStatusCodes(::grpc::ServerContext* context, ::clarifai::api::ListStatusCodesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiStatusCodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(128, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatusCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStatusCode() {
      ::grpc::Service::MarkMethodAsync(129);
    }
    ~WithAsyncMethod_GetStatusCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatusCode(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetStatusCodeRequest* /*request*/, ::clarifai::api::SingleStatusCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatusCode(::grpc::ServerContext* context, ::clarifai::api::GetStatusCodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleStatusCodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(129, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListCollaborators() {
      ::grpc::Service::MarkMethodAsync(130);
    }
    ~WithAsyncMethod_ListCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCollaborators(::grpc::ServerContext* context, ::clarifai::api::ListCollaboratorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiCollaboratorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(130, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostCollaborators() {
      ::grpc::Service::MarkMethodAsync(131);
    }
    ~WithAsyncMethod_PostCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostCollaborators(::grpc::ServerContext* context, ::clarifai::api::PostCollaboratorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiCollaboratorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(131, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchCollaborators() {
      ::grpc::Service::MarkMethodAsync(132);
    }
    ~WithAsyncMethod_PatchCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchCollaborators(::grpc::ServerContext* context, ::clarifai::api::PatchCollaboratorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiCollaboratorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(132, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCollaborators() {
      ::grpc::Service::MarkMethodAsync(133);
    }
    ~WithAsyncMethod_DeleteCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteCollaboratorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCollaborators(::grpc::ServerContext* context, ::clarifai::api::DeleteCollaboratorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(133, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCollaborations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListCollaborations() {
      ::grpc::Service::MarkMethodAsync(134);
    }
    ~WithAsyncMethod_ListCollaborations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollaborations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollaborationsRequest* /*request*/, ::clarifai::api::MultiCollaborationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCollaborations(::grpc::ServerContext* context, ::clarifai::api::ListCollaborationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiCollaborationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(134, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostAppDuplications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostAppDuplications() {
      ::grpc::Service::MarkMethodAsync(135);
    }
    ~WithAsyncMethod_PostAppDuplications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAppDuplications(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAppDuplications(::grpc::ServerContext* context, ::clarifai::api::PostAppDuplicationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAppDuplicationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(135, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAppDuplications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAppDuplications() {
      ::grpc::Service::MarkMethodAsync(136);
    }
    ~WithAsyncMethod_ListAppDuplications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAppDuplications(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAppDuplications(::grpc::ServerContext* context, ::clarifai::api::ListAppDuplicationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiAppDuplicationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(136, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAppDuplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAppDuplication() {
      ::grpc::Service::MarkMethodAsync(137);
    }
    ~WithAsyncMethod_GetAppDuplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAppDuplication(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAppDuplicationRequest* /*request*/, ::clarifai::api::SingleAppDuplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAppDuplication(::grpc::ServerContext* context, ::clarifai::api::GetAppDuplicationRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleAppDuplicationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(137, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostTasks() {
      ::grpc::Service::MarkMethodAsync(138);
    }
    ~WithAsyncMethod_PostTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostTasks(::grpc::ServerContext* context, ::clarifai::api::PostTasksRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(138, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTaskAnnotationCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTaskAnnotationCount() {
      ::grpc::Service::MarkMethodAsync(139);
    }
    ~WithAsyncMethod_GetTaskAnnotationCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskAnnotationCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTaskAnnotationCount(::grpc::ServerContext* context, ::clarifai::api::GetTaskCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleTaskCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(139, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTaskInputCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTaskInputCount() {
      ::grpc::Service::MarkMethodAsync(140);
    }
    ~WithAsyncMethod_GetTaskInputCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskInputCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTaskInputCount(::grpc::ServerContext* context, ::clarifai::api::GetTaskCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleTaskCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(140, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTask() {
      ::grpc::Service::MarkMethodAsync(141);
    }
    ~WithAsyncMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskRequest* /*request*/, ::clarifai::api::SingleTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTask(::grpc::ServerContext* context, ::clarifai::api::GetTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(141, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTasks() {
      ::grpc::Service::MarkMethodAsync(142);
    }
    ~WithAsyncMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTasks(::grpc::ServerContext* context, ::clarifai::api::ListTasksRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(142, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchTasks() {
      ::grpc::Service::MarkMethodAsync(143);
    }
    ~WithAsyncMethod_PatchTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchTasks(::grpc::ServerContext* context, ::clarifai::api::PatchTasksRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(143, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTasks() {
      ::grpc::Service::MarkMethodAsync(144);
    }
    ~WithAsyncMethod_DeleteTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteTasksRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTasks(::grpc::ServerContext* context, ::clarifai::api::DeleteTasksRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(144, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostLabelOrders() {
      ::grpc::Service::MarkMethodAsync(145);
    }
    ~WithAsyncMethod_PostLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostLabelOrders(::grpc::ServerContext* context, ::clarifai::api::PostLabelOrdersRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiLabelOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(145, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLabelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLabelOrder() {
      ::grpc::Service::MarkMethodAsync(146);
    }
    ~WithAsyncMethod_GetLabelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelOrder(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetLabelOrderRequest* /*request*/, ::clarifai::api::SingleLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLabelOrder(::grpc::ServerContext* context, ::clarifai::api::GetLabelOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleLabelOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(146, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListLabelOrders() {
      ::grpc::Service::MarkMethodAsync(147);
    }
    ~WithAsyncMethod_ListLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLabelOrders(::grpc::ServerContext* context, ::clarifai::api::ListLabelOrdersRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiLabelOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(147, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchLabelOrders() {
      ::grpc::Service::MarkMethodAsync(148);
    }
    ~WithAsyncMethod_PatchLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchLabelOrders(::grpc::ServerContext* context, ::clarifai::api::PatchLabelOrdersRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiLabelOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(148, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteLabelOrders() {
      ::grpc::Service::MarkMethodAsync(149);
    }
    ~WithAsyncMethod_DeleteLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteLabelOrdersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLabelOrders(::grpc::ServerContext* context, ::clarifai::api::DeleteLabelOrdersRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(149, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostCollectors() {
      ::grpc::Service::MarkMethodAsync(150);
    }
    ~WithAsyncMethod_PostCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostCollectors(::grpc::ServerContext* context, ::clarifai::api::PostCollectorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiCollectorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(150, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCollector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCollector() {
      ::grpc::Service::MarkMethodAsync(151);
    }
    ~WithAsyncMethod_GetCollector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollector(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetCollectorRequest* /*request*/, ::clarifai::api::SingleCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCollector(::grpc::ServerContext* context, ::clarifai::api::GetCollectorRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleCollectorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(151, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListCollectors() {
      ::grpc::Service::MarkMethodAsync(152);
    }
    ~WithAsyncMethod_ListCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCollectors(::grpc::ServerContext* context, ::clarifai::api::ListCollectorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiCollectorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(152, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PatchCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PatchCollectors() {
      ::grpc::Service::MarkMethodAsync(153);
    }
    ~WithAsyncMethod_PatchCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchCollectors(::grpc::ServerContext* context, ::clarifai::api::PatchCollectorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiCollectorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(153, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCollectors() {
      ::grpc::Service::MarkMethodAsync(154);
    }
    ~WithAsyncMethod_DeleteCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteCollectorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCollectors(::grpc::ServerContext* context, ::clarifai::api::DeleteCollectorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(154, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostStatValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostStatValues() {
      ::grpc::Service::MarkMethodAsync(155);
    }
    ~WithAsyncMethod_PostStatValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostStatValues(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostStatValuesRequest* /*request*/, ::clarifai::api::MultiStatValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostStatValues(::grpc::ServerContext* context, ::clarifai::api::PostStatValuesRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiStatValueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(155, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostStatValuesAggregate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostStatValuesAggregate() {
      ::grpc::Service::MarkMethodAsync(156);
    }
    ~WithAsyncMethod_PostStatValuesAggregate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostStatValuesAggregate(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostStatValuesAggregateRequest* /*request*/, ::clarifai::api::MultiStatValueAggregateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostStatValuesAggregate(::grpc::ServerContext* context, ::clarifai::api::PostStatValuesAggregateRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiStatValueAggregateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(156, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostTrendingMetricsView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostTrendingMetricsView() {
      ::grpc::Service::MarkMethodAsync(157);
    }
    ~WithAsyncMethod_PostTrendingMetricsView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTrendingMetricsView(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostTrendingMetricsViewRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostTrendingMetricsView(::grpc::ServerContext* context, ::clarifai::api::PostTrendingMetricsViewRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(157, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTrendingMetricsViews : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTrendingMetricsViews() {
      ::grpc::Service::MarkMethodAsync(158);
    }
    ~WithAsyncMethod_ListTrendingMetricsViews() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTrendingMetricsViews(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListTrendingMetricsViewsRequest* /*request*/, ::clarifai::api::MultiTrendingMetricsViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTrendingMetricsViews(::grpc::ServerContext* context, ::clarifai::api::ListTrendingMetricsViewsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiTrendingMetricsViewResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(158, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostBulkOperations() {
      ::grpc::Service::MarkMethodAsync(159);
    }
    ~WithAsyncMethod_PostBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostBulkOperations(::grpc::ServerContext* context, ::clarifai::api::PostBulkOperationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiBulkOperationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(159, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListBulkOperations() {
      ::grpc::Service::MarkMethodAsync(160);
    }
    ~WithAsyncMethod_ListBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListBulkOperations(::grpc::ServerContext* context, ::clarifai::api::ListBulkOperationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiBulkOperationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(160, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBulkOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBulkOperation() {
      ::grpc::Service::MarkMethodAsync(161);
    }
    ~WithAsyncMethod_GetBulkOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBulkOperation(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetBulkOperationRequest* /*request*/, ::clarifai::api::SingleBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBulkOperation(::grpc::ServerContext* context, ::clarifai::api::GetBulkOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleBulkOperationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(161, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelBulkOperations() {
      ::grpc::Service::MarkMethodAsync(162);
    }
    ~WithAsyncMethod_CancelBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::CancelBulkOperationRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelBulkOperations(::grpc::ServerContext* context, ::clarifai::api::CancelBulkOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::MultiBulkOperationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(162, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteBulkOperations() {
      ::grpc::Service::MarkMethodAsync(163);
    }
    ~WithAsyncMethod_DeleteBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteBulkOperationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteBulkOperations(::grpc::ServerContext* context, ::clarifai::api::DeleteBulkOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::status::BaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(163, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDatasetInputsSearchAddJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDatasetInputsSearchAddJob() {
      ::grpc::Service::MarkMethodAsync(164);
    }
    ~WithAsyncMethod_GetDatasetInputsSearchAddJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetInputsSearchAddJob(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* /*request*/, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDatasetInputsSearchAddJob(::grpc::ServerContext* context, ::clarifai::api::GetDatasetInputsSearchAddJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(164, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListConceptRelations<WithAsyncMethod_PostConceptRelations<WithAsyncMethod_DeleteConceptRelations<WithAsyncMethod_GetConceptCounts<WithAsyncMethod_GetConcept<WithAsyncMethod_ListConcepts<WithAsyncMethod_PostConceptsSearches<WithAsyncMethod_PostConcepts<WithAsyncMethod_PatchConcepts<WithAsyncMethod_GetConceptLanguage<WithAsyncMethod_ListConceptLanguages<WithAsyncMethod_PostConceptLanguages<WithAsyncMethod_PatchConceptLanguages<WithAsyncMethod_ListKnowledgeGraphs<WithAsyncMethod_PostKnowledgeGraphs<WithAsyncMethod_PostConceptMappingJobs<WithAsyncMethod_GetAnnotation<WithAsyncMethod_ListAnnotations<WithAsyncMethod_PostAnnotations<WithAsyncMethod_PatchAnnotations<WithAsyncMethod_PatchAnnotationsStatus<WithAsyncMethod_DeleteAnnotation<WithAsyncMethod_DeleteAnnotations<WithAsyncMethod_PatchAnnotationsSearches<WithAsyncMethod_PostAnnotationsSearches<WithAsyncMethod_GetInputCount<WithAsyncMethod_StreamInputs<WithAsyncMethod_GetInputSamples<WithAsyncMethod_GetInput<WithAsyncMethod_ListInputs<WithAsyncMethod_PostInputs<WithAsyncMethod_PatchInputs<WithAsyncMethod_DeleteInput<WithAsyncMethod_DeleteInputs<WithAsyncMethod_PatchInputsSearches<WithAsyncMethod_PostInputsSearches<WithAsyncMethod_PostModelOutputs<WithAsyncMethod_ListDatasets<WithAsyncMethod_GetDataset<WithAsyncMethod_PostDatasets<WithAsyncMethod_PatchDatasets<WithAsyncMethod_DeleteDatasets<WithAsyncMethod_ListDatasetInputs<WithAsyncMethod_GetDatasetInput<WithAsyncMethod_PostDatasetInputs<WithAsyncMethod_DeleteDatasetInputs<WithAsyncMethod_ListDatasetVersions<WithAsyncMethod_GetDatasetVersion<WithAsyncMethod_ListDatasetVersionMetricsGroups<WithAsyncMethod_PostDatasetVersions<WithAsyncMethod_PatchDatasetVersions<WithAsyncMethod_DeleteDatasetVersions<WithAsyncMethod_GetModelType<WithAsyncMethod_ListOpenSourceLicenses<WithAsyncMethod_ListModelTypes<WithAsyncMethod_GetModel<WithAsyncMethod_GetModelOutputInfo<WithAsyncMethod_ListModels<WithAsyncMethod_PostModelsSearches<WithAsyncMethod_PostModels<WithAsyncMethod_PatchModels<WithAsyncMethod_PatchModelIds<WithAsyncMethod_DeleteModel<WithAsyncMethod_DeleteModels<WithAsyncMethod_PatchModelToolkits<WithAsyncMethod_PatchModelUseCases<WithAsyncMethod_PatchModelLanguages<WithAsyncMethod_ListModelInputs<WithAsyncMethod_GetModelVersion<WithAsyncMethod_ListModelVersions<WithAsyncMethod_PostWorkflowVersionsUnPublish<WithAsyncMethod_PostWorkflowVersionsPublish<WithAsyncMethod_PostModelVersionsPublish<WithAsyncMethod_PostModelVersionsUnPublish<WithAsyncMethod_PostModelVersions<WithAsyncMethod_PatchModelVersions<WithAsyncMethod_DeleteModelVersion<WithAsyncMethod_GetModelVersionMetrics<WithAsyncMethod_PostModelVersionMetrics<WithAsyncMethod_ListModelReferences<WithAsyncMethod_GetModelVersionInputExample<WithAsyncMethod_ListModelVersionInputExamples<WithAsyncMethod_GetWorkflow<WithAsyncMethod_ListWorkflows<WithAsyncMethod_PostWorkflows<WithAsyncMethod_PatchWorkflows<WithAsyncMethod_DeleteWorkflow<WithAsyncMethod_DeleteWorkflows<WithAsyncMethod_PostWorkflowResults<WithAsyncMethod_PostWorkflowResultsSimilarity<WithAsyncMethod_ListWorkflowVersions<WithAsyncMethod_GetWorkflowVersion<WithAsyncMethod_DeleteWorkflowVersions<WithAsyncMethod_PatchWorkflowVersions<WithAsyncMethod_GetKey<WithAsyncMethod_ListKeys<WithAsyncMethod_ListAppKeys<WithAsyncMethod_DeleteKey<WithAsyncMethod_PostKeys<WithAsyncMethod_PatchKeys<WithAsyncMethod_MyScopes<WithAsyncMethod_MyScopesUser<WithAsyncMethod_MyScopesRoot<WithAsyncMethod_ListScopes<WithAsyncMethod_GetApp<WithAsyncMethod_ListApps<WithAsyncMethod_DeleteApp<WithAsyncMethod_PostApps<WithAsyncMethod_PatchApps<WithAsyncMethod_PatchApp<WithAsyncMethod_PatchAppsIds<WithAsyncMethod_PostAppsSearches<WithAsyncMethod_PostValidatePassword<WithAsyncMethod_GetSearch<WithAsyncMethod_ListSearches<WithAsyncMethod_PatchSearches<WithAsyncMethod_PostSearches<WithAsyncMethod_PostSearchesByID<WithAsyncMethod_PostAnnotationSearchMetrics<WithAsyncMethod_GetAnnotationSearchMetrics<WithAsyncMethod_ListAnnotationSearchMetrics<WithAsyncMethod_DeleteAnnotationSearchMetrics<WithAsyncMethod_DeleteSearch<WithAsyncMethod_ListAnnotationFilters<WithAsyncMethod_GetAnnotationFilter<WithAsyncMethod_PostAnnotationFilters<WithAsyncMethod_PatchAnnotationFilters<WithAsyncMethod_DeleteAnnotationFilters<WithAsyncMethod_ListStatusCodes<WithAsyncMethod_GetStatusCode<WithAsyncMethod_ListCollaborators<WithAsyncMethod_PostCollaborators<WithAsyncMethod_PatchCollaborators<WithAsyncMethod_DeleteCollaborators<WithAsyncMethod_ListCollaborations<WithAsyncMethod_PostAppDuplications<WithAsyncMethod_ListAppDuplications<WithAsyncMethod_GetAppDuplication<WithAsyncMethod_PostTasks<WithAsyncMethod_GetTaskAnnotationCount<WithAsyncMethod_GetTaskInputCount<WithAsyncMethod_GetTask<WithAsyncMethod_ListTasks<WithAsyncMethod_PatchTasks<WithAsyncMethod_DeleteTasks<WithAsyncMethod_PostLabelOrders<WithAsyncMethod_GetLabelOrder<WithAsyncMethod_ListLabelOrders<WithAsyncMethod_PatchLabelOrders<WithAsyncMethod_DeleteLabelOrders<WithAsyncMethod_PostCollectors<WithAsyncMethod_GetCollector<WithAsyncMethod_ListCollectors<WithAsyncMethod_PatchCollectors<WithAsyncMethod_DeleteCollectors<WithAsyncMethod_PostStatValues<WithAsyncMethod_PostStatValuesAggregate<WithAsyncMethod_PostTrendingMetricsView<WithAsyncMethod_ListTrendingMetricsViews<WithAsyncMethod_PostBulkOperations<WithAsyncMethod_ListBulkOperations<WithAsyncMethod_GetBulkOperation<WithAsyncMethod_CancelBulkOperations<WithAsyncMethod_DeleteBulkOperations<WithAsyncMethod_GetDatasetInputsSearchAddJob<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListConceptRelations() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListConceptRelationsRequest, ::clarifai::api::MultiConceptRelationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response) { return this->ListConceptRelations(context, request, response); }));}
    void SetMessageAllocatorFor_ListConceptRelations(
        ::grpc::MessageAllocator< ::clarifai::api::ListConceptRelationsRequest, ::clarifai::api::MultiConceptRelationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListConceptRelationsRequest, ::clarifai::api::MultiConceptRelationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListConceptRelations(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostConceptRelations() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostConceptRelationsRequest, ::clarifai::api::MultiConceptRelationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response) { return this->PostConceptRelations(context, request, response); }));}
    void SetMessageAllocatorFor_PostConceptRelations(
        ::grpc::MessageAllocator< ::clarifai::api::PostConceptRelationsRequest, ::clarifai::api::MultiConceptRelationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostConceptRelationsRequest, ::clarifai::api::MultiConceptRelationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostConceptRelations(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteConceptRelations() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteConceptRelationsRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteConceptRelationsRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteConceptRelations(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteConceptRelations(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteConceptRelationsRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteConceptRelationsRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteConceptRelationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteConceptRelations(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteConceptRelationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetConceptCounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetConceptCounts() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetConceptCountsRequest, ::clarifai::api::MultiConceptCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetConceptCountsRequest* request, ::clarifai::api::MultiConceptCountResponse* response) { return this->GetConceptCounts(context, request, response); }));}
    void SetMessageAllocatorFor_GetConceptCounts(
        ::grpc::MessageAllocator< ::clarifai::api::GetConceptCountsRequest, ::clarifai::api::MultiConceptCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetConceptCountsRequest, ::clarifai::api::MultiConceptCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetConceptCounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConceptCounts(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptCountsRequest* /*request*/, ::clarifai::api::MultiConceptCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConceptCounts(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetConceptCountsRequest* /*request*/, ::clarifai::api::MultiConceptCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetConcept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetConcept() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetConceptRequest, ::clarifai::api::SingleConceptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetConceptRequest* request, ::clarifai::api::SingleConceptResponse* response) { return this->GetConcept(context, request, response); }));}
    void SetMessageAllocatorFor_GetConcept(
        ::grpc::MessageAllocator< ::clarifai::api::GetConceptRequest, ::clarifai::api::SingleConceptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetConceptRequest, ::clarifai::api::SingleConceptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetConcept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConcept(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptRequest* /*request*/, ::clarifai::api::SingleConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConcept(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetConceptRequest* /*request*/, ::clarifai::api::SingleConceptResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListConcepts() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListConceptsRequest, ::clarifai::api::MultiConceptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response) { return this->ListConcepts(context, request, response); }));}
    void SetMessageAllocatorFor_ListConcepts(
        ::grpc::MessageAllocator< ::clarifai::api::ListConceptsRequest, ::clarifai::api::MultiConceptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListConceptsRequest, ::clarifai::api::MultiConceptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListConcepts(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostConceptsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostConceptsSearches() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostConceptsSearchesRequest, ::clarifai::api::MultiConceptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostConceptsSearchesRequest* request, ::clarifai::api::MultiConceptResponse* response) { return this->PostConceptsSearches(context, request, response); }));}
    void SetMessageAllocatorFor_PostConceptsSearches(
        ::grpc::MessageAllocator< ::clarifai::api::PostConceptsSearchesRequest, ::clarifai::api::MultiConceptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostConceptsSearchesRequest, ::clarifai::api::MultiConceptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostConceptsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptsSearchesRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostConceptsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostConceptsSearchesRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostConcepts() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostConceptsRequest, ::clarifai::api::MultiConceptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response) { return this->PostConcepts(context, request, response); }));}
    void SetMessageAllocatorFor_PostConcepts(
        ::grpc::MessageAllocator< ::clarifai::api::PostConceptsRequest, ::clarifai::api::MultiConceptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostConceptsRequest, ::clarifai::api::MultiConceptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostConcepts(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchConcepts() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchConceptsRequest, ::clarifai::api::MultiConceptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response) { return this->PatchConcepts(context, request, response); }));}
    void SetMessageAllocatorFor_PatchConcepts(
        ::grpc::MessageAllocator< ::clarifai::api::PatchConceptsRequest, ::clarifai::api::MultiConceptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchConceptsRequest, ::clarifai::api::MultiConceptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchConcepts(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetConceptLanguage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetConceptLanguage() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetConceptLanguageRequest, ::clarifai::api::SingleConceptLanguageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetConceptLanguageRequest* request, ::clarifai::api::SingleConceptLanguageResponse* response) { return this->GetConceptLanguage(context, request, response); }));}
    void SetMessageAllocatorFor_GetConceptLanguage(
        ::grpc::MessageAllocator< ::clarifai::api::GetConceptLanguageRequest, ::clarifai::api::SingleConceptLanguageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetConceptLanguageRequest, ::clarifai::api::SingleConceptLanguageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetConceptLanguage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConceptLanguage(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptLanguageRequest* /*request*/, ::clarifai::api::SingleConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConceptLanguage(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetConceptLanguageRequest* /*request*/, ::clarifai::api::SingleConceptLanguageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListConceptLanguages() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response) { return this->ListConceptLanguages(context, request, response); }));}
    void SetMessageAllocatorFor_ListConceptLanguages(
        ::grpc::MessageAllocator< ::clarifai::api::ListConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListConceptLanguages(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostConceptLanguages() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response) { return this->PostConceptLanguages(context, request, response); }));}
    void SetMessageAllocatorFor_PostConceptLanguages(
        ::grpc::MessageAllocator< ::clarifai::api::PostConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostConceptLanguages(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchConceptLanguages() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response) { return this->PatchConceptLanguages(context, request, response); }));}
    void SetMessageAllocatorFor_PatchConceptLanguages(
        ::grpc::MessageAllocator< ::clarifai::api::PatchConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchConceptLanguages(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListKnowledgeGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListKnowledgeGraphs() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListKnowledgeGraphsRequest, ::clarifai::api::MultiKnowledgeGraphResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response) { return this->ListKnowledgeGraphs(context, request, response); }));}
    void SetMessageAllocatorFor_ListKnowledgeGraphs(
        ::grpc::MessageAllocator< ::clarifai::api::ListKnowledgeGraphsRequest, ::clarifai::api::MultiKnowledgeGraphResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListKnowledgeGraphsRequest, ::clarifai::api::MultiKnowledgeGraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListKnowledgeGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKnowledgeGraphs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListKnowledgeGraphs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostKnowledgeGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostKnowledgeGraphs() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostKnowledgeGraphsRequest, ::clarifai::api::MultiKnowledgeGraphResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response) { return this->PostKnowledgeGraphs(context, request, response); }));}
    void SetMessageAllocatorFor_PostKnowledgeGraphs(
        ::grpc::MessageAllocator< ::clarifai::api::PostKnowledgeGraphsRequest, ::clarifai::api::MultiKnowledgeGraphResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostKnowledgeGraphsRequest, ::clarifai::api::MultiKnowledgeGraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostKnowledgeGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostKnowledgeGraphs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostKnowledgeGraphs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostConceptMappingJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostConceptMappingJobs() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostConceptMappingJobsRequest, ::clarifai::api::MultiConceptMappingJobResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostConceptMappingJobsRequest* request, ::clarifai::api::MultiConceptMappingJobResponse* response) { return this->PostConceptMappingJobs(context, request, response); }));}
    void SetMessageAllocatorFor_PostConceptMappingJobs(
        ::grpc::MessageAllocator< ::clarifai::api::PostConceptMappingJobsRequest, ::clarifai::api::MultiConceptMappingJobResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostConceptMappingJobsRequest, ::clarifai::api::MultiConceptMappingJobResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostConceptMappingJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptMappingJobs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptMappingJobsRequest* /*request*/, ::clarifai::api::MultiConceptMappingJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostConceptMappingJobs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostConceptMappingJobsRequest* /*request*/, ::clarifai::api::MultiConceptMappingJobResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAnnotation() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetAnnotationRequest, ::clarifai::api::SingleAnnotationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetAnnotationRequest* request, ::clarifai::api::SingleAnnotationResponse* response) { return this->GetAnnotation(context, request, response); }));}
    void SetMessageAllocatorFor_GetAnnotation(
        ::grpc::MessageAllocator< ::clarifai::api::GetAnnotationRequest, ::clarifai::api::SingleAnnotationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetAnnotationRequest, ::clarifai::api::SingleAnnotationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotation(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationRequest* /*request*/, ::clarifai::api::SingleAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAnnotation(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetAnnotationRequest* /*request*/, ::clarifai::api::SingleAnnotationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAnnotations() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response) { return this->ListAnnotations(context, request, response); }));}
    void SetMessageAllocatorFor_ListAnnotations(
        ::grpc::MessageAllocator< ::clarifai::api::ListAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAnnotations(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostAnnotations() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response) { return this->PostAnnotations(context, request, response); }));}
    void SetMessageAllocatorFor_PostAnnotations(
        ::grpc::MessageAllocator< ::clarifai::api::PostAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostAnnotations(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchAnnotations() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response) { return this->PatchAnnotations(context, request, response); }));}
    void SetMessageAllocatorFor_PatchAnnotations(
        ::grpc::MessageAllocator< ::clarifai::api::PatchAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchAnnotations(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchAnnotationsStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchAnnotationsStatus() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAnnotationsStatusRequest, ::clarifai::api::PatchAnnotationsStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest* request, ::clarifai::api::PatchAnnotationsStatusResponse* response) { return this->PatchAnnotationsStatus(context, request, response); }));}
    void SetMessageAllocatorFor_PatchAnnotationsStatus(
        ::grpc::MessageAllocator< ::clarifai::api::PatchAnnotationsStatusRequest, ::clarifai::api::PatchAnnotationsStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAnnotationsStatusRequest, ::clarifai::api::PatchAnnotationsStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchAnnotationsStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationsStatus(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsStatusRequest* /*request*/, ::clarifai::api::PatchAnnotationsStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchAnnotationsStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsStatusRequest* /*request*/, ::clarifai::api::PatchAnnotationsStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteAnnotation() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteAnnotationRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteAnnotationRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteAnnotation(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAnnotation(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteAnnotationRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteAnnotationRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotation(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAnnotation(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteAnnotations() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteAnnotationsRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteAnnotationsRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteAnnotations(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAnnotations(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteAnnotationsRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteAnnotationsRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAnnotations(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchAnnotationsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchAnnotationsSearches() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAnnotationsSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response) { return this->PatchAnnotationsSearches(context, request, response); }));}
    void SetMessageAllocatorFor_PatchAnnotationsSearches(
        ::grpc::MessageAllocator< ::clarifai::api::PatchAnnotationsSearchesRequest, ::clarifai::api::MultiSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAnnotationsSearchesRequest, ::clarifai::api::MultiSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchAnnotationsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchAnnotationsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostAnnotationsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostAnnotationsSearches() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAnnotationsSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response) { return this->PostAnnotationsSearches(context, request, response); }));}
    void SetMessageAllocatorFor_PostAnnotationsSearches(
        ::grpc::MessageAllocator< ::clarifai::api::PostAnnotationsSearchesRequest, ::clarifai::api::MultiSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAnnotationsSearchesRequest, ::clarifai::api::MultiSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostAnnotationsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostAnnotationsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetInputCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInputCount() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetInputCountRequest, ::clarifai::api::SingleInputCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetInputCountRequest* request, ::clarifai::api::SingleInputCountResponse* response) { return this->GetInputCount(context, request, response); }));}
    void SetMessageAllocatorFor_GetInputCount(
        ::grpc::MessageAllocator< ::clarifai::api::GetInputCountRequest, ::clarifai::api::SingleInputCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetInputCountRequest, ::clarifai::api::SingleInputCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInputCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputCountRequest* /*request*/, ::clarifai::api::SingleInputCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInputCount(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetInputCountRequest* /*request*/, ::clarifai::api::SingleInputCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamInputs() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::StreamInputsRequest, ::clarifai::api::MultiInputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::StreamInputsRequest* request, ::clarifai::api::MultiInputResponse* response) { return this->StreamInputs(context, request, response); }));}
    void SetMessageAllocatorFor_StreamInputs(
        ::grpc::MessageAllocator< ::clarifai::api::StreamInputsRequest, ::clarifai::api::MultiInputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::StreamInputsRequest, ::clarifai::api::MultiInputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StreamInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::StreamInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StreamInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::StreamInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetInputSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInputSamples() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetInputSamplesRequest, ::clarifai::api::MultiInputAnnotationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetInputSamplesRequest* request, ::clarifai::api::MultiInputAnnotationResponse* response) { return this->GetInputSamples(context, request, response); }));}
    void SetMessageAllocatorFor_GetInputSamples(
        ::grpc::MessageAllocator< ::clarifai::api::GetInputSamplesRequest, ::clarifai::api::MultiInputAnnotationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetInputSamplesRequest, ::clarifai::api::MultiInputAnnotationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInputSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputSamples(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputSamplesRequest* /*request*/, ::clarifai::api::MultiInputAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInputSamples(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetInputSamplesRequest* /*request*/, ::clarifai::api::MultiInputAnnotationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInput() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetInputRequest, ::clarifai::api::SingleInputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetInputRequest* request, ::clarifai::api::SingleInputResponse* response) { return this->GetInput(context, request, response); }));}
    void SetMessageAllocatorFor_GetInput(
        ::grpc::MessageAllocator< ::clarifai::api::GetInputRequest, ::clarifai::api::SingleInputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetInputRequest, ::clarifai::api::SingleInputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputRequest* /*request*/, ::clarifai::api::SingleInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInput(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetInputRequest* /*request*/, ::clarifai::api::SingleInputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListInputs() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListInputsRequest, ::clarifai::api::MultiInputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListInputsRequest* request, ::clarifai::api::MultiInputResponse* response) { return this->ListInputs(context, request, response); }));}
    void SetMessageAllocatorFor_ListInputs(
        ::grpc::MessageAllocator< ::clarifai::api::ListInputsRequest, ::clarifai::api::MultiInputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListInputsRequest, ::clarifai::api::MultiInputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostInputs() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostInputsRequest, ::clarifai::api::MultiInputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostInputsRequest* request, ::clarifai::api::MultiInputResponse* response) { return this->PostInputs(context, request, response); }));}
    void SetMessageAllocatorFor_PostInputs(
        ::grpc::MessageAllocator< ::clarifai::api::PostInputsRequest, ::clarifai::api::MultiInputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostInputsRequest, ::clarifai::api::MultiInputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchInputs() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchInputsRequest, ::clarifai::api::MultiInputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchInputsRequest* request, ::clarifai::api::MultiInputResponse* response) { return this->PatchInputs(context, request, response); }));}
    void SetMessageAllocatorFor_PatchInputs(
        ::grpc::MessageAllocator< ::clarifai::api::PatchInputsRequest, ::clarifai::api::MultiInputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchInputsRequest, ::clarifai::api::MultiInputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteInput() {
      ::grpc::Service::MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteInputRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteInputRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteInput(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteInput(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteInputRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteInputRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteInputRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteInput(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteInputRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteInputs() {
      ::grpc::Service::MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteInputsRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteInputsRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteInputs(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteInputs(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteInputsRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteInputsRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchInputsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchInputsSearches() {
      ::grpc::Service::MarkMethodCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchInputsSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response) { return this->PatchInputsSearches(context, request, response); }));}
    void SetMessageAllocatorFor_PatchInputsSearches(
        ::grpc::MessageAllocator< ::clarifai::api::PatchInputsSearchesRequest, ::clarifai::api::MultiSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchInputsSearchesRequest, ::clarifai::api::MultiSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchInputsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchInputsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchInputsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostInputsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostInputsSearches() {
      ::grpc::Service::MarkMethodCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostInputsSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response) { return this->PostInputsSearches(context, request, response); }));}
    void SetMessageAllocatorFor_PostInputsSearches(
        ::grpc::MessageAllocator< ::clarifai::api::PostInputsSearchesRequest, ::clarifai::api::MultiSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostInputsSearchesRequest, ::clarifai::api::MultiSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostInputsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostInputsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostInputsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostModelOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostModelOutputs() {
      ::grpc::Service::MarkMethodCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelOutputsRequest, ::clarifai::api::MultiOutputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostModelOutputsRequest* request, ::clarifai::api::MultiOutputResponse* response) { return this->PostModelOutputs(context, request, response); }));}
    void SetMessageAllocatorFor_PostModelOutputs(
        ::grpc::MessageAllocator< ::clarifai::api::PostModelOutputsRequest, ::clarifai::api::MultiOutputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelOutputsRequest, ::clarifai::api::MultiOutputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostModelOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelOutputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelOutputsRequest* /*request*/, ::clarifai::api::MultiOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModelOutputs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostModelOutputsRequest* /*request*/, ::clarifai::api::MultiOutputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListDatasets() {
      ::grpc::Service::MarkMethodCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListDatasetsRequest, ::clarifai::api::MultiDatasetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response) { return this->ListDatasets(context, request, response); }));}
    void SetMessageAllocatorFor_ListDatasets(
        ::grpc::MessageAllocator< ::clarifai::api::ListDatasetsRequest, ::clarifai::api::MultiDatasetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListDatasetsRequest, ::clarifai::api::MultiDatasetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDatasets(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDataset() {
      ::grpc::Service::MarkMethodCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetDatasetRequest, ::clarifai::api::SingleDatasetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetDatasetRequest* request, ::clarifai::api::SingleDatasetResponse* response) { return this->GetDataset(context, request, response); }));}
    void SetMessageAllocatorFor_GetDataset(
        ::grpc::MessageAllocator< ::clarifai::api::GetDatasetRequest, ::clarifai::api::SingleDatasetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(38);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetDatasetRequest, ::clarifai::api::SingleDatasetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetRequest* /*request*/, ::clarifai::api::SingleDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetDatasetRequest* /*request*/, ::clarifai::api::SingleDatasetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostDatasets() {
      ::grpc::Service::MarkMethodCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostDatasetsRequest, ::clarifai::api::MultiDatasetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response) { return this->PostDatasets(context, request, response); }));}
    void SetMessageAllocatorFor_PostDatasets(
        ::grpc::MessageAllocator< ::clarifai::api::PostDatasetsRequest, ::clarifai::api::MultiDatasetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(39);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostDatasetsRequest, ::clarifai::api::MultiDatasetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostDatasets(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchDatasets() {
      ::grpc::Service::MarkMethodCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchDatasetsRequest, ::clarifai::api::MultiDatasetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchDatasetsRequest* request, ::clarifai::api::MultiDatasetResponse* response) { return this->PatchDatasets(context, request, response); }));}
    void SetMessageAllocatorFor_PatchDatasets(
        ::grpc::MessageAllocator< ::clarifai::api::PatchDatasetsRequest, ::clarifai::api::MultiDatasetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(40);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchDatasetsRequest, ::clarifai::api::MultiDatasetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchDatasets(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteDatasets() {
      ::grpc::Service::MarkMethodCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteDatasetsRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteDatasetsRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteDatasets(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDatasets(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteDatasetsRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(41);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteDatasetsRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDatasets(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteDatasetsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListDatasetInputs() {
      ::grpc::Service::MarkMethodCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListDatasetInputsRequest, ::clarifai::api::MultiDatasetInputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListDatasetInputsRequest* request, ::clarifai::api::MultiDatasetInputResponse* response) { return this->ListDatasetInputs(context, request, response); }));}
    void SetMessageAllocatorFor_ListDatasetInputs(
        ::grpc::MessageAllocator< ::clarifai::api::ListDatasetInputsRequest, ::clarifai::api::MultiDatasetInputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(42);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListDatasetInputsRequest, ::clarifai::api::MultiDatasetInputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDatasetInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDatasetInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDatasetInput() {
      ::grpc::Service::MarkMethodCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetDatasetInputRequest, ::clarifai::api::SingleDatasetInputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetDatasetInputRequest* request, ::clarifai::api::SingleDatasetInputResponse* response) { return this->GetDatasetInput(context, request, response); }));}
    void SetMessageAllocatorFor_GetDatasetInput(
        ::grpc::MessageAllocator< ::clarifai::api::GetDatasetInputRequest, ::clarifai::api::SingleDatasetInputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(43);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetDatasetInputRequest, ::clarifai::api::SingleDatasetInputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDatasetInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetInputRequest* /*request*/, ::clarifai::api::SingleDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDatasetInput(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetDatasetInputRequest* /*request*/, ::clarifai::api::SingleDatasetInputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostDatasetInputs() {
      ::grpc::Service::MarkMethodCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostDatasetInputsRequest, ::clarifai::api::MultiDatasetInputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostDatasetInputsRequest* request, ::clarifai::api::MultiDatasetInputResponse* response) { return this->PostDatasetInputs(context, request, response); }));}
    void SetMessageAllocatorFor_PostDatasetInputs(
        ::grpc::MessageAllocator< ::clarifai::api::PostDatasetInputsRequest, ::clarifai::api::MultiDatasetInputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(44);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostDatasetInputsRequest, ::clarifai::api::MultiDatasetInputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostDatasetInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteDatasetInputs() {
      ::grpc::Service::MarkMethodCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteDatasetInputsRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteDatasetInputsRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteDatasetInputs(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDatasetInputs(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteDatasetInputsRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(45);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteDatasetInputsRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDatasetInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteDatasetInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListDatasetVersions() {
      ::grpc::Service::MarkMethodCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response) { return this->ListDatasetVersions(context, request, response); }));}
    void SetMessageAllocatorFor_ListDatasetVersions(
        ::grpc::MessageAllocator< ::clarifai::api::ListDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(46);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDatasetVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDatasetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDatasetVersion() {
      ::grpc::Service::MarkMethodCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetDatasetVersionRequest, ::clarifai::api::SingleDatasetVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetDatasetVersionRequest* request, ::clarifai::api::SingleDatasetVersionResponse* response) { return this->GetDatasetVersion(context, request, response); }));}
    void SetMessageAllocatorFor_GetDatasetVersion(
        ::grpc::MessageAllocator< ::clarifai::api::GetDatasetVersionRequest, ::clarifai::api::SingleDatasetVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(47);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetDatasetVersionRequest, ::clarifai::api::SingleDatasetVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDatasetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetVersionRequest* /*request*/, ::clarifai::api::SingleDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDatasetVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetDatasetVersionRequest* /*request*/, ::clarifai::api::SingleDatasetVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListDatasetVersionMetricsGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListDatasetVersionMetricsGroups() {
      ::grpc::Service::MarkMethodCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListDatasetVersionMetricsGroupsRequest, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* request, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* response) { return this->ListDatasetVersionMetricsGroups(context, request, response); }));}
    void SetMessageAllocatorFor_ListDatasetVersionMetricsGroups(
        ::grpc::MessageAllocator< ::clarifai::api::ListDatasetVersionMetricsGroupsRequest, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(48);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListDatasetVersionMetricsGroupsRequest, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListDatasetVersionMetricsGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetVersionMetricsGroups(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDatasetVersionMetricsGroups(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostDatasetVersions() {
      ::grpc::Service::MarkMethodCallback(49,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response) { return this->PostDatasetVersions(context, request, response); }));}
    void SetMessageAllocatorFor_PostDatasetVersions(
        ::grpc::MessageAllocator< ::clarifai::api::PostDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(49);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostDatasetVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchDatasetVersions() {
      ::grpc::Service::MarkMethodCallback(50,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchDatasetVersionsRequest* request, ::clarifai::api::MultiDatasetVersionResponse* response) { return this->PatchDatasetVersions(context, request, response); }));}
    void SetMessageAllocatorFor_PatchDatasetVersions(
        ::grpc::MessageAllocator< ::clarifai::api::PatchDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(50);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchDatasetVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteDatasetVersions() {
      ::grpc::Service::MarkMethodCallback(51,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteDatasetVersionsRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteDatasetVersionsRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteDatasetVersions(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDatasetVersions(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteDatasetVersionsRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(51);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteDatasetVersionsRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDatasetVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteDatasetVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelType() {
      ::grpc::Service::MarkMethodCallback(52,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetModelTypeRequest, ::clarifai::api::SingleModelTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetModelTypeRequest* request, ::clarifai::api::SingleModelTypeResponse* response) { return this->GetModelType(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelType(
        ::grpc::MessageAllocator< ::clarifai::api::GetModelTypeRequest, ::clarifai::api::SingleModelTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(52);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetModelTypeRequest, ::clarifai::api::SingleModelTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelType(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelTypeRequest* /*request*/, ::clarifai::api::SingleModelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelType(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetModelTypeRequest* /*request*/, ::clarifai::api::SingleModelTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListOpenSourceLicenses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListOpenSourceLicenses() {
      ::grpc::Service::MarkMethodCallback(53,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListOpenSourceLicensesRequest, ::clarifai::api::ListOpenSourceLicensesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest* request, ::clarifai::api::ListOpenSourceLicensesResponse* response) { return this->ListOpenSourceLicenses(context, request, response); }));}
    void SetMessageAllocatorFor_ListOpenSourceLicenses(
        ::grpc::MessageAllocator< ::clarifai::api::ListOpenSourceLicensesRequest, ::clarifai::api::ListOpenSourceLicensesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(53);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListOpenSourceLicensesRequest, ::clarifai::api::ListOpenSourceLicensesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListOpenSourceLicenses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOpenSourceLicenses(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListOpenSourceLicensesRequest* /*request*/, ::clarifai::api::ListOpenSourceLicensesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListOpenSourceLicenses(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListOpenSourceLicensesRequest* /*request*/, ::clarifai::api::ListOpenSourceLicensesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListModelTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListModelTypes() {
      ::grpc::Service::MarkMethodCallback(54,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListModelTypesRequest, ::clarifai::api::MultiModelTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListModelTypesRequest* request, ::clarifai::api::MultiModelTypeResponse* response) { return this->ListModelTypes(context, request, response); }));}
    void SetMessageAllocatorFor_ListModelTypes(
        ::grpc::MessageAllocator< ::clarifai::api::ListModelTypesRequest, ::clarifai::api::MultiModelTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(54);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListModelTypesRequest, ::clarifai::api::MultiModelTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListModelTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelTypes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelTypesRequest* /*request*/, ::clarifai::api::MultiModelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModelTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListModelTypesRequest* /*request*/, ::clarifai::api::MultiModelTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModel() {
      ::grpc::Service::MarkMethodCallback(55,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetModelRequest, ::clarifai::api::SingleModelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response) { return this->GetModel(context, request, response); }));}
    void SetMessageAllocatorFor_GetModel(
        ::grpc::MessageAllocator< ::clarifai::api::GetModelRequest, ::clarifai::api::SingleModelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(55);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetModelRequest, ::clarifai::api::SingleModelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModel(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelOutputInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelOutputInfo() {
      ::grpc::Service::MarkMethodCallback(56,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetModelRequest, ::clarifai::api::SingleModelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response) { return this->GetModelOutputInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelOutputInfo(
        ::grpc::MessageAllocator< ::clarifai::api::GetModelRequest, ::clarifai::api::SingleModelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(56);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetModelRequest, ::clarifai::api::SingleModelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelOutputInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelOutputInfo(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelOutputInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListModels() {
      ::grpc::Service::MarkMethodCallback(57,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListModelsRequest, ::clarifai::api::MultiModelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListModelsRequest* request, ::clarifai::api::MultiModelResponse* response) { return this->ListModels(context, request, response); }));}
    void SetMessageAllocatorFor_ListModels(
        ::grpc::MessageAllocator< ::clarifai::api::ListModelsRequest, ::clarifai::api::MultiModelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(57);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListModelsRequest, ::clarifai::api::MultiModelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModels(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostModelsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostModelsSearches() {
      ::grpc::Service::MarkMethodCallback(58,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelsSearchesRequest, ::clarifai::api::MultiModelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostModelsSearchesRequest* request, ::clarifai::api::MultiModelResponse* response) { return this->PostModelsSearches(context, request, response); }));}
    void SetMessageAllocatorFor_PostModelsSearches(
        ::grpc::MessageAllocator< ::clarifai::api::PostModelsSearchesRequest, ::clarifai::api::MultiModelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(58);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelsSearchesRequest, ::clarifai::api::MultiModelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostModelsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelsSearchesRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModelsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostModelsSearchesRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostModels() {
      ::grpc::Service::MarkMethodCallback(59,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelsRequest, ::clarifai::api::SingleModelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostModelsRequest* request, ::clarifai::api::SingleModelResponse* response) { return this->PostModels(context, request, response); }));}
    void SetMessageAllocatorFor_PostModels(
        ::grpc::MessageAllocator< ::clarifai::api::PostModelsRequest, ::clarifai::api::SingleModelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(59);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelsRequest, ::clarifai::api::SingleModelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModels(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostModelsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchModels() {
      ::grpc::Service::MarkMethodCallback(60,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchModelsRequest, ::clarifai::api::MultiModelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchModelsRequest* request, ::clarifai::api::MultiModelResponse* response) { return this->PatchModels(context, request, response); }));}
    void SetMessageAllocatorFor_PatchModels(
        ::grpc::MessageAllocator< ::clarifai::api::PatchModelsRequest, ::clarifai::api::MultiModelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(60);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchModelsRequest, ::clarifai::api::MultiModelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModels(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchModelIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchModelIds() {
      ::grpc::Service::MarkMethodCallback(61,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchModelIdsRequest, ::clarifai::api::MultiModelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchModelIdsRequest* request, ::clarifai::api::MultiModelResponse* response) { return this->PatchModelIds(context, request, response); }));}
    void SetMessageAllocatorFor_PatchModelIds(
        ::grpc::MessageAllocator< ::clarifai::api::PatchModelIdsRequest, ::clarifai::api::MultiModelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(61);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchModelIdsRequest, ::clarifai::api::MultiModelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchModelIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelIds(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelIdsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModelIds(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchModelIdsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteModel() {
      ::grpc::Service::MarkMethodCallback(62,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteModelRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteModelRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteModel(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteModel(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteModelRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(62);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteModelRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteModel(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteModelRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteModels() {
      ::grpc::Service::MarkMethodCallback(63,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteModelsRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteModelsRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteModels(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteModels(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteModelsRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(63);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteModelsRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteModels(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteModelsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchModelToolkits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchModelToolkits() {
      ::grpc::Service::MarkMethodCallback(64,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchModelToolkitsRequest, ::clarifai::api::MultiModelToolkitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchModelToolkitsRequest* request, ::clarifai::api::MultiModelToolkitResponse* response) { return this->PatchModelToolkits(context, request, response); }));}
    void SetMessageAllocatorFor_PatchModelToolkits(
        ::grpc::MessageAllocator< ::clarifai::api::PatchModelToolkitsRequest, ::clarifai::api::MultiModelToolkitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(64);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchModelToolkitsRequest, ::clarifai::api::MultiModelToolkitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchModelToolkits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelToolkits(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelToolkitsRequest* /*request*/, ::clarifai::api::MultiModelToolkitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModelToolkits(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchModelToolkitsRequest* /*request*/, ::clarifai::api::MultiModelToolkitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchModelUseCases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchModelUseCases() {
      ::grpc::Service::MarkMethodCallback(65,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchModelUseCasesRequest, ::clarifai::api::MultiModelUseCaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchModelUseCasesRequest* request, ::clarifai::api::MultiModelUseCaseResponse* response) { return this->PatchModelUseCases(context, request, response); }));}
    void SetMessageAllocatorFor_PatchModelUseCases(
        ::grpc::MessageAllocator< ::clarifai::api::PatchModelUseCasesRequest, ::clarifai::api::MultiModelUseCaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(65);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchModelUseCasesRequest, ::clarifai::api::MultiModelUseCaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchModelUseCases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelUseCases(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelUseCasesRequest* /*request*/, ::clarifai::api::MultiModelUseCaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModelUseCases(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchModelUseCasesRequest* /*request*/, ::clarifai::api::MultiModelUseCaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchModelLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchModelLanguages() {
      ::grpc::Service::MarkMethodCallback(66,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchModelLanguagesRequest, ::clarifai::api::MultiModelLanguageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchModelLanguagesRequest* request, ::clarifai::api::MultiModelLanguageResponse* response) { return this->PatchModelLanguages(context, request, response); }));}
    void SetMessageAllocatorFor_PatchModelLanguages(
        ::grpc::MessageAllocator< ::clarifai::api::PatchModelLanguagesRequest, ::clarifai::api::MultiModelLanguageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(66);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchModelLanguagesRequest, ::clarifai::api::MultiModelLanguageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchModelLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelLanguagesRequest* /*request*/, ::clarifai::api::MultiModelLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModelLanguages(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchModelLanguagesRequest* /*request*/, ::clarifai::api::MultiModelLanguageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListModelInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListModelInputs() {
      ::grpc::Service::MarkMethodCallback(67,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListModelInputsRequest, ::clarifai::api::MultiInputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListModelInputsRequest* request, ::clarifai::api::MultiInputResponse* response) { return this->ListModelInputs(context, request, response); }));}
    void SetMessageAllocatorFor_ListModelInputs(
        ::grpc::MessageAllocator< ::clarifai::api::ListModelInputsRequest, ::clarifai::api::MultiInputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(67);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListModelInputsRequest, ::clarifai::api::MultiInputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListModelInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModelInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListModelInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelVersion() {
      ::grpc::Service::MarkMethodCallback(68,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetModelVersionRequest, ::clarifai::api::SingleModelVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetModelVersionRequest* request, ::clarifai::api::SingleModelVersionResponse* response) { return this->GetModelVersion(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelVersion(
        ::grpc::MessageAllocator< ::clarifai::api::GetModelVersionRequest, ::clarifai::api::SingleModelVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(68);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetModelVersionRequest, ::clarifai::api::SingleModelVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetModelVersionRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListModelVersions() {
      ::grpc::Service::MarkMethodCallback(69,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListModelVersionsRequest, ::clarifai::api::MultiModelVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response) { return this->ListModelVersions(context, request, response); }));}
    void SetMessageAllocatorFor_ListModelVersions(
        ::grpc::MessageAllocator< ::clarifai::api::ListModelVersionsRequest, ::clarifai::api::MultiModelVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(69);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListModelVersionsRequest, ::clarifai::api::MultiModelVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModelVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostWorkflowVersionsUnPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostWorkflowVersionsUnPublish() {
      ::grpc::Service::MarkMethodCallback(70,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostWorkflowVersionsUnPublishRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->PostWorkflowVersionsUnPublish(context, request, response); }));}
    void SetMessageAllocatorFor_PostWorkflowVersionsUnPublish(
        ::grpc::MessageAllocator< ::clarifai::api::PostWorkflowVersionsUnPublishRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(70);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostWorkflowVersionsUnPublishRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostWorkflowVersionsUnPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowVersionsUnPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostWorkflowVersionsUnPublish(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostWorkflowVersionsPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostWorkflowVersionsPublish() {
      ::grpc::Service::MarkMethodCallback(71,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostWorkflowVersionsPublishRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostWorkflowVersionsPublishRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->PostWorkflowVersionsPublish(context, request, response); }));}
    void SetMessageAllocatorFor_PostWorkflowVersionsPublish(
        ::grpc::MessageAllocator< ::clarifai::api::PostWorkflowVersionsPublishRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(71);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostWorkflowVersionsPublishRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostWorkflowVersionsPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowVersionsPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostWorkflowVersionsPublish(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostModelVersionsPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostModelVersionsPublish() {
      ::grpc::Service::MarkMethodCallback(72,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelVersionsPublishRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostModelVersionsPublishRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->PostModelVersionsPublish(context, request, response); }));}
    void SetMessageAllocatorFor_PostModelVersionsPublish(
        ::grpc::MessageAllocator< ::clarifai::api::PostModelVersionsPublishRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(72);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelVersionsPublishRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostModelVersionsPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionsPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModelVersionsPublish(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostModelVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostModelVersionsUnPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostModelVersionsUnPublish() {
      ::grpc::Service::MarkMethodCallback(73,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelVersionsUnPublishRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostModelVersionsUnPublishRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->PostModelVersionsUnPublish(context, request, response); }));}
    void SetMessageAllocatorFor_PostModelVersionsUnPublish(
        ::grpc::MessageAllocator< ::clarifai::api::PostModelVersionsUnPublishRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(73);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelVersionsUnPublishRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostModelVersionsUnPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionsUnPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModelVersionsUnPublish(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostModelVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostModelVersions() {
      ::grpc::Service::MarkMethodCallback(74,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelVersionsRequest, ::clarifai::api::SingleModelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostModelVersionsRequest* request, ::clarifai::api::SingleModelResponse* response) { return this->PostModelVersions(context, request, response); }));}
    void SetMessageAllocatorFor_PostModelVersions(
        ::grpc::MessageAllocator< ::clarifai::api::PostModelVersionsRequest, ::clarifai::api::SingleModelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(74);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelVersionsRequest, ::clarifai::api::SingleModelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModelVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostModelVersionsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchModelVersions() {
      ::grpc::Service::MarkMethodCallback(75,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchModelVersionsRequest, ::clarifai::api::MultiModelVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response) { return this->PatchModelVersions(context, request, response); }));}
    void SetMessageAllocatorFor_PatchModelVersions(
        ::grpc::MessageAllocator< ::clarifai::api::PatchModelVersionsRequest, ::clarifai::api::MultiModelVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(75);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchModelVersionsRequest, ::clarifai::api::MultiModelVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModelVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteModelVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteModelVersion() {
      ::grpc::Service::MarkMethodCallback(76,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteModelVersionRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteModelVersionRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteModelVersion(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteModelVersion(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteModelVersionRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(76);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteModelVersionRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteModelVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModelVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelVersionRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteModelVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteModelVersionRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelVersionMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelVersionMetrics() {
      ::grpc::Service::MarkMethodCallback(77,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetModelVersionMetricsRequest, ::clarifai::api::SingleModelVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response) { return this->GetModelVersionMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelVersionMetrics(
        ::grpc::MessageAllocator< ::clarifai::api::GetModelVersionMetricsRequest, ::clarifai::api::SingleModelVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(77);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetModelVersionMetricsRequest, ::clarifai::api::SingleModelVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelVersionMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersionMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelVersionMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostModelVersionMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostModelVersionMetrics() {
      ::grpc::Service::MarkMethodCallback(78,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelVersionMetricsRequest, ::clarifai::api::SingleModelVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response) { return this->PostModelVersionMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_PostModelVersionMetrics(
        ::grpc::MessageAllocator< ::clarifai::api::PostModelVersionMetricsRequest, ::clarifai::api::SingleModelVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(78);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostModelVersionMetricsRequest, ::clarifai::api::SingleModelVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostModelVersionMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModelVersionMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListModelReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListModelReferences() {
      ::grpc::Service::MarkMethodCallback(79,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListModelReferencesRequest, ::clarifai::api::MultiModelReferenceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListModelReferencesRequest* request, ::clarifai::api::MultiModelReferenceResponse* response) { return this->ListModelReferences(context, request, response); }));}
    void SetMessageAllocatorFor_ListModelReferences(
        ::grpc::MessageAllocator< ::clarifai::api::ListModelReferencesRequest, ::clarifai::api::MultiModelReferenceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(79);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListModelReferencesRequest, ::clarifai::api::MultiModelReferenceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListModelReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelReferences(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelReferencesRequest* /*request*/, ::clarifai::api::MultiModelReferenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModelReferences(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListModelReferencesRequest* /*request*/, ::clarifai::api::MultiModelReferenceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelVersionInputExample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelVersionInputExample() {
      ::grpc::Service::MarkMethodCallback(80,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetModelVersionInputExampleRequest, ::clarifai::api::SingleModelVersionInputExampleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest* request, ::clarifai::api::SingleModelVersionInputExampleResponse* response) { return this->GetModelVersionInputExample(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelVersionInputExample(
        ::grpc::MessageAllocator< ::clarifai::api::GetModelVersionInputExampleRequest, ::clarifai::api::SingleModelVersionInputExampleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(80);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetModelVersionInputExampleRequest, ::clarifai::api::SingleModelVersionInputExampleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelVersionInputExample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersionInputExample(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionInputExampleRequest* /*request*/, ::clarifai::api::SingleModelVersionInputExampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelVersionInputExample(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetModelVersionInputExampleRequest* /*request*/, ::clarifai::api::SingleModelVersionInputExampleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListModelVersionInputExamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListModelVersionInputExamples() {
      ::grpc::Service::MarkMethodCallback(81,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListModelVersionInputExamplesRequest, ::clarifai::api::MultiModelVersionInputExampleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest* request, ::clarifai::api::MultiModelVersionInputExampleResponse* response) { return this->ListModelVersionInputExamples(context, request, response); }));}
    void SetMessageAllocatorFor_ListModelVersionInputExamples(
        ::grpc::MessageAllocator< ::clarifai::api::ListModelVersionInputExamplesRequest, ::clarifai::api::MultiModelVersionInputExampleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(81);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListModelVersionInputExamplesRequest, ::clarifai::api::MultiModelVersionInputExampleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListModelVersionInputExamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelVersionInputExamples(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelVersionInputExamplesRequest* /*request*/, ::clarifai::api::MultiModelVersionInputExampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModelVersionInputExamples(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListModelVersionInputExamplesRequest* /*request*/, ::clarifai::api::MultiModelVersionInputExampleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWorkflow() {
      ::grpc::Service::MarkMethodCallback(82,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetWorkflowRequest, ::clarifai::api::SingleWorkflowResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetWorkflowRequest* request, ::clarifai::api::SingleWorkflowResponse* response) { return this->GetWorkflow(context, request, response); }));}
    void SetMessageAllocatorFor_GetWorkflow(
        ::grpc::MessageAllocator< ::clarifai::api::GetWorkflowRequest, ::clarifai::api::SingleWorkflowResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(82);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetWorkflowRequest, ::clarifai::api::SingleWorkflowResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflow(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetWorkflowRequest* /*request*/, ::clarifai::api::SingleWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkflow(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetWorkflowRequest* /*request*/, ::clarifai::api::SingleWorkflowResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListWorkflows() {
      ::grpc::Service::MarkMethodCallback(83,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response) { return this->ListWorkflows(context, request, response); }));}
    void SetMessageAllocatorFor_ListWorkflows(
        ::grpc::MessageAllocator< ::clarifai::api::ListWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(83);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListWorkflows(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostWorkflows() {
      ::grpc::Service::MarkMethodCallback(84,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response) { return this->PostWorkflows(context, request, response); }));}
    void SetMessageAllocatorFor_PostWorkflows(
        ::grpc::MessageAllocator< ::clarifai::api::PostWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(84);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostWorkflows(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchWorkflows() {
      ::grpc::Service::MarkMethodCallback(85,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response) { return this->PatchWorkflows(context, request, response); }));}
    void SetMessageAllocatorFor_PatchWorkflows(
        ::grpc::MessageAllocator< ::clarifai::api::PatchWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(85);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchWorkflows(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteWorkflow() {
      ::grpc::Service::MarkMethodCallback(86,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteWorkflowRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteWorkflowRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteWorkflow(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteWorkflow(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteWorkflowRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(86);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteWorkflowRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflow(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteWorkflow(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteWorkflows() {
      ::grpc::Service::MarkMethodCallback(87,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteWorkflowsRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteWorkflowsRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteWorkflows(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteWorkflows(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteWorkflowsRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(87);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteWorkflowsRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteWorkflows(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostWorkflowResults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostWorkflowResults() {
      ::grpc::Service::MarkMethodCallback(88,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostWorkflowResultsRequest, ::clarifai::api::PostWorkflowResultsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostWorkflowResultsRequest* request, ::clarifai::api::PostWorkflowResultsResponse* response) { return this->PostWorkflowResults(context, request, response); }));}
    void SetMessageAllocatorFor_PostWorkflowResults(
        ::grpc::MessageAllocator< ::clarifai::api::PostWorkflowResultsRequest, ::clarifai::api::PostWorkflowResultsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(88);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostWorkflowResultsRequest, ::clarifai::api::PostWorkflowResultsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostWorkflowResults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowResults(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsRequest* /*request*/, ::clarifai::api::PostWorkflowResultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostWorkflowResults(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsRequest* /*request*/, ::clarifai::api::PostWorkflowResultsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostWorkflowResultsSimilarity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostWorkflowResultsSimilarity() {
      ::grpc::Service::MarkMethodCallback(89,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostWorkflowResultsSimilarityRequest, ::clarifai::api::PostWorkflowResultsSimilarityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response) { return this->PostWorkflowResultsSimilarity(context, request, response); }));}
    void SetMessageAllocatorFor_PostWorkflowResultsSimilarity(
        ::grpc::MessageAllocator< ::clarifai::api::PostWorkflowResultsSimilarityRequest, ::clarifai::api::PostWorkflowResultsSimilarityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(89);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostWorkflowResultsSimilarityRequest, ::clarifai::api::PostWorkflowResultsSimilarityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostWorkflowResultsSimilarity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowResultsSimilarity(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* /*request*/, ::clarifai::api::PostWorkflowResultsSimilarityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostWorkflowResultsSimilarity(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* /*request*/, ::clarifai::api::PostWorkflowResultsSimilarityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListWorkflowVersions() {
      ::grpc::Service::MarkMethodCallback(90,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListWorkflowVersionsRequest, ::clarifai::api::MultiWorkflowVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response) { return this->ListWorkflowVersions(context, request, response); }));}
    void SetMessageAllocatorFor_ListWorkflowVersions(
        ::grpc::MessageAllocator< ::clarifai::api::ListWorkflowVersionsRequest, ::clarifai::api::MultiWorkflowVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(90);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListWorkflowVersionsRequest, ::clarifai::api::MultiWorkflowVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListWorkflowVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWorkflowVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWorkflowVersion() {
      ::grpc::Service::MarkMethodCallback(91,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetWorkflowVersionRequest, ::clarifai::api::SingleWorkflowVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetWorkflowVersionRequest* request, ::clarifai::api::SingleWorkflowVersionResponse* response) { return this->GetWorkflowVersion(context, request, response); }));}
    void SetMessageAllocatorFor_GetWorkflowVersion(
        ::grpc::MessageAllocator< ::clarifai::api::GetWorkflowVersionRequest, ::clarifai::api::SingleWorkflowVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(91);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetWorkflowVersionRequest, ::clarifai::api::SingleWorkflowVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWorkflowVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflowVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetWorkflowVersionRequest* /*request*/, ::clarifai::api::SingleWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkflowVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetWorkflowVersionRequest* /*request*/, ::clarifai::api::SingleWorkflowVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteWorkflowVersions() {
      ::grpc::Service::MarkMethodCallback(92,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteWorkflowVersionsRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteWorkflowVersions(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteWorkflowVersions(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteWorkflowVersionsRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(92);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteWorkflowVersionsRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteWorkflowVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchWorkflowVersions() {
      ::grpc::Service::MarkMethodCallback(93,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchWorkflowVersionsRequest, ::clarifai::api::MultiWorkflowVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response) { return this->PatchWorkflowVersions(context, request, response); }));}
    void SetMessageAllocatorFor_PatchWorkflowVersions(
        ::grpc::MessageAllocator< ::clarifai::api::PatchWorkflowVersionsRequest, ::clarifai::api::MultiWorkflowVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(93);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchWorkflowVersionsRequest, ::clarifai::api::MultiWorkflowVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchWorkflowVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetKey() {
      ::grpc::Service::MarkMethodCallback(94,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetKeyRequest, ::clarifai::api::SingleKeyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetKeyRequest* request, ::clarifai::api::SingleKeyResponse* response) { return this->GetKey(context, request, response); }));}
    void SetMessageAllocatorFor_GetKey(
        ::grpc::MessageAllocator< ::clarifai::api::GetKeyRequest, ::clarifai::api::SingleKeyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(94);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetKeyRequest, ::clarifai::api::SingleKeyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKey(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetKeyRequest* /*request*/, ::clarifai::api::SingleKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetKey(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetKeyRequest* /*request*/, ::clarifai::api::SingleKeyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListKeys() {
      ::grpc::Service::MarkMethodCallback(95,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListKeysRequest, ::clarifai::api::MultiKeyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListKeysRequest* request, ::clarifai::api::MultiKeyResponse* response) { return this->ListKeys(context, request, response); }));}
    void SetMessageAllocatorFor_ListKeys(
        ::grpc::MessageAllocator< ::clarifai::api::ListKeysRequest, ::clarifai::api::MultiKeyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(95);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListKeysRequest, ::clarifai::api::MultiKeyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListAppKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAppKeys() {
      ::grpc::Service::MarkMethodCallback(96,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListAppKeysRequest, ::clarifai::api::MultiKeyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListAppKeysRequest* request, ::clarifai::api::MultiKeyResponse* response) { return this->ListAppKeys(context, request, response); }));}
    void SetMessageAllocatorFor_ListAppKeys(
        ::grpc::MessageAllocator< ::clarifai::api::ListAppKeysRequest, ::clarifai::api::MultiKeyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(96);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListAppKeysRequest, ::clarifai::api::MultiKeyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAppKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAppKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAppKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListAppKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteKey() {
      ::grpc::Service::MarkMethodCallback(97,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteKeyRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteKeyRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteKey(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteKey(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteKeyRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(97);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteKeyRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteKey(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteKeyRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteKey(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteKeyRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostKeys() {
      ::grpc::Service::MarkMethodCallback(98,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostKeysRequest, ::clarifai::api::MultiKeyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostKeysRequest* request, ::clarifai::api::MultiKeyResponse* response) { return this->PostKeys(context, request, response); }));}
    void SetMessageAllocatorFor_PostKeys(
        ::grpc::MessageAllocator< ::clarifai::api::PostKeysRequest, ::clarifai::api::MultiKeyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(98);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostKeysRequest, ::clarifai::api::MultiKeyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchKeys() {
      ::grpc::Service::MarkMethodCallback(99,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchKeysRequest, ::clarifai::api::MultiKeyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchKeysRequest* request, ::clarifai::api::MultiKeyResponse* response) { return this->PatchKeys(context, request, response); }));}
    void SetMessageAllocatorFor_PatchKeys(
        ::grpc::MessageAllocator< ::clarifai::api::PatchKeysRequest, ::clarifai::api::MultiKeyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(99);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchKeysRequest, ::clarifai::api::MultiKeyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MyScopes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MyScopes() {
      ::grpc::Service::MarkMethodCallback(100,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::MyScopesRequest, ::clarifai::api::MultiScopeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::MyScopesRequest* request, ::clarifai::api::MultiScopeResponse* response) { return this->MyScopes(context, request, response); }));}
    void SetMessageAllocatorFor_MyScopes(
        ::grpc::MessageAllocator< ::clarifai::api::MyScopesRequest, ::clarifai::api::MultiScopeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(100);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::MyScopesRequest, ::clarifai::api::MultiScopeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MyScopes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopes(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesRequest* /*request*/, ::clarifai::api::MultiScopeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MyScopes(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::MyScopesRequest* /*request*/, ::clarifai::api::MultiScopeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MyScopesUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MyScopesUser() {
      ::grpc::Service::MarkMethodCallback(101,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::MyScopesUserRequest, ::clarifai::api::MultiScopeUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::MyScopesUserRequest* request, ::clarifai::api::MultiScopeUserResponse* response) { return this->MyScopesUser(context, request, response); }));}
    void SetMessageAllocatorFor_MyScopesUser(
        ::grpc::MessageAllocator< ::clarifai::api::MyScopesUserRequest, ::clarifai::api::MultiScopeUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(101);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::MyScopesUserRequest, ::clarifai::api::MultiScopeUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MyScopesUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopesUser(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesUserRequest* /*request*/, ::clarifai::api::MultiScopeUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MyScopesUser(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::MyScopesUserRequest* /*request*/, ::clarifai::api::MultiScopeUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MyScopesRoot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MyScopesRoot() {
      ::grpc::Service::MarkMethodCallback(102,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::MyScopesRootRequest, ::clarifai::api::MultiScopeRootResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::MyScopesRootRequest* request, ::clarifai::api::MultiScopeRootResponse* response) { return this->MyScopesRoot(context, request, response); }));}
    void SetMessageAllocatorFor_MyScopesRoot(
        ::grpc::MessageAllocator< ::clarifai::api::MyScopesRootRequest, ::clarifai::api::MultiScopeRootResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(102);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::MyScopesRootRequest, ::clarifai::api::MultiScopeRootResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MyScopesRoot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopesRoot(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesRootRequest* /*request*/, ::clarifai::api::MultiScopeRootResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MyScopesRoot(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::MyScopesRootRequest* /*request*/, ::clarifai::api::MultiScopeRootResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListScopes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListScopes() {
      ::grpc::Service::MarkMethodCallback(103,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListScopesRequest, ::clarifai::api::MultiScopeDepsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListScopesRequest* request, ::clarifai::api::MultiScopeDepsResponse* response) { return this->ListScopes(context, request, response); }));}
    void SetMessageAllocatorFor_ListScopes(
        ::grpc::MessageAllocator< ::clarifai::api::ListScopesRequest, ::clarifai::api::MultiScopeDepsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(103);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListScopesRequest, ::clarifai::api::MultiScopeDepsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListScopes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScopes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListScopesRequest* /*request*/, ::clarifai::api::MultiScopeDepsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListScopes(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListScopesRequest* /*request*/, ::clarifai::api::MultiScopeDepsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetApp() {
      ::grpc::Service::MarkMethodCallback(104,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetAppRequest, ::clarifai::api::SingleAppResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetAppRequest* request, ::clarifai::api::SingleAppResponse* response) { return this->GetApp(context, request, response); }));}
    void SetMessageAllocatorFor_GetApp(
        ::grpc::MessageAllocator< ::clarifai::api::GetAppRequest, ::clarifai::api::SingleAppResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(104);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetAppRequest, ::clarifai::api::SingleAppResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetApp(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListApps() {
      ::grpc::Service::MarkMethodCallback(105,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListAppsRequest, ::clarifai::api::MultiAppResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListAppsRequest* request, ::clarifai::api::MultiAppResponse* response) { return this->ListApps(context, request, response); }));}
    void SetMessageAllocatorFor_ListApps(
        ::grpc::MessageAllocator< ::clarifai::api::ListAppsRequest, ::clarifai::api::MultiAppResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(105);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListAppsRequest, ::clarifai::api::MultiAppResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListApps(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteApp() {
      ::grpc::Service::MarkMethodCallback(106,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteAppRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteAppRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteApp(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteApp(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteAppRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(106);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteAppRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAppRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteApp(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteAppRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostApps() {
      ::grpc::Service::MarkMethodCallback(107,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAppsRequest, ::clarifai::api::MultiAppResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostAppsRequest* request, ::clarifai::api::MultiAppResponse* response) { return this->PostApps(context, request, response); }));}
    void SetMessageAllocatorFor_PostApps(
        ::grpc::MessageAllocator< ::clarifai::api::PostAppsRequest, ::clarifai::api::MultiAppResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(107);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAppsRequest, ::clarifai::api::MultiAppResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostApps(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchApps() {
      ::grpc::Service::MarkMethodCallback(108,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAppsRequest, ::clarifai::api::MultiAppResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchAppsRequest* request, ::clarifai::api::MultiAppResponse* response) { return this->PatchApps(context, request, response); }));}
    void SetMessageAllocatorFor_PatchApps(
        ::grpc::MessageAllocator< ::clarifai::api::PatchAppsRequest, ::clarifai::api::MultiAppResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(108);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAppsRequest, ::clarifai::api::MultiAppResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchApps(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchApp() {
      ::grpc::Service::MarkMethodCallback(109,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAppRequest, ::clarifai::api::SingleAppResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchAppRequest* request, ::clarifai::api::SingleAppResponse* response) { return this->PatchApp(context, request, response); }));}
    void SetMessageAllocatorFor_PatchApp(
        ::grpc::MessageAllocator< ::clarifai::api::PatchAppRequest, ::clarifai::api::SingleAppResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(109);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAppRequest, ::clarifai::api::SingleAppResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchApp(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchAppsIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchAppsIds() {
      ::grpc::Service::MarkMethodCallback(110,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAppsIdsRequest, ::clarifai::api::MultiAppResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchAppsIdsRequest* request, ::clarifai::api::MultiAppResponse* response) { return this->PatchAppsIds(context, request, response); }));}
    void SetMessageAllocatorFor_PatchAppsIds(
        ::grpc::MessageAllocator< ::clarifai::api::PatchAppsIdsRequest, ::clarifai::api::MultiAppResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(110);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAppsIdsRequest, ::clarifai::api::MultiAppResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchAppsIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAppsIds(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppsIdsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchAppsIds(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchAppsIdsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostAppsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostAppsSearches() {
      ::grpc::Service::MarkMethodCallback(111,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAppsSearchesRequest, ::clarifai::api::MultiAppResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostAppsSearchesRequest* request, ::clarifai::api::MultiAppResponse* response) { return this->PostAppsSearches(context, request, response); }));}
    void SetMessageAllocatorFor_PostAppsSearches(
        ::grpc::MessageAllocator< ::clarifai::api::PostAppsSearchesRequest, ::clarifai::api::MultiAppResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(111);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAppsSearchesRequest, ::clarifai::api::MultiAppResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostAppsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAppsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppsSearchesRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostAppsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostAppsSearchesRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostValidatePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostValidatePassword() {
      ::grpc::Service::MarkMethodCallback(112,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostValidatePasswordRequest, ::clarifai::api::SinglePasswordValidationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostValidatePasswordRequest* request, ::clarifai::api::SinglePasswordValidationResponse* response) { return this->PostValidatePassword(context, request, response); }));}
    void SetMessageAllocatorFor_PostValidatePassword(
        ::grpc::MessageAllocator< ::clarifai::api::PostValidatePasswordRequest, ::clarifai::api::SinglePasswordValidationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(112);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostValidatePasswordRequest, ::clarifai::api::SinglePasswordValidationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostValidatePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostValidatePassword(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostValidatePasswordRequest* /*request*/, ::clarifai::api::SinglePasswordValidationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostValidatePassword(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostValidatePasswordRequest* /*request*/, ::clarifai::api::SinglePasswordValidationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSearch() {
      ::grpc::Service::MarkMethodCallback(113,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetSearchRequest, ::clarifai::api::SingleSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetSearchRequest* request, ::clarifai::api::SingleSearchResponse* response) { return this->GetSearch(context, request, response); }));}
    void SetMessageAllocatorFor_GetSearch(
        ::grpc::MessageAllocator< ::clarifai::api::GetSearchRequest, ::clarifai::api::SingleSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(113);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetSearchRequest, ::clarifai::api::SingleSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSearch(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetSearchRequest* /*request*/, ::clarifai::api::SingleSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSearch(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetSearchRequest* /*request*/, ::clarifai::api::SingleSearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListSearches() {
      ::grpc::Service::MarkMethodCallback(114,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response) { return this->ListSearches(context, request, response); }));}
    void SetMessageAllocatorFor_ListSearches(
        ::grpc::MessageAllocator< ::clarifai::api::ListSearchesRequest, ::clarifai::api::MultiSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(114);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListSearchesRequest, ::clarifai::api::MultiSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchSearches() {
      ::grpc::Service::MarkMethodCallback(115,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response) { return this->PatchSearches(context, request, response); }));}
    void SetMessageAllocatorFor_PatchSearches(
        ::grpc::MessageAllocator< ::clarifai::api::PatchSearchesRequest, ::clarifai::api::MultiSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(115);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchSearchesRequest, ::clarifai::api::MultiSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostSearches() {
      ::grpc::Service::MarkMethodCallback(116,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response) { return this->PostSearches(context, request, response); }));}
    void SetMessageAllocatorFor_PostSearches(
        ::grpc::MessageAllocator< ::clarifai::api::PostSearchesRequest, ::clarifai::api::MultiSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(116);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostSearchesRequest, ::clarifai::api::MultiSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostSearchesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostSearchesByID() {
      ::grpc::Service::MarkMethodCallback(117,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostSearchesByIDRequest, ::clarifai::api::MultiSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostSearchesByIDRequest* request, ::clarifai::api::MultiSearchResponse* response) { return this->PostSearchesByID(context, request, response); }));}
    void SetMessageAllocatorFor_PostSearchesByID(
        ::grpc::MessageAllocator< ::clarifai::api::PostSearchesByIDRequest, ::clarifai::api::MultiSearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(117);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostSearchesByIDRequest, ::clarifai::api::MultiSearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostSearchesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostSearchesByID(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostSearchesByIDRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostSearchesByID(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostSearchesByIDRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodCallback(118,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) { return this->PostAnnotationSearchMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_PostAnnotationSearchMetrics(
        ::grpc::MessageAllocator< ::clarifai::api::PostAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(118);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostAnnotationSearchMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodCallback(119,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) { return this->GetAnnotationSearchMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_GetAnnotationSearchMetrics(
        ::grpc::MessageAllocator< ::clarifai::api::GetAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(119);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAnnotationSearchMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodCallback(120,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) { return this->ListAnnotationSearchMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_ListAnnotationSearchMetrics(
        ::grpc::MessageAllocator< ::clarifai::api::ListAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(120);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAnnotationSearchMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodCallback(121,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteAnnotationSearchMetricsRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteAnnotationSearchMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAnnotationSearchMetrics(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteAnnotationSearchMetricsRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(121);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteAnnotationSearchMetricsRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAnnotationSearchMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSearch() {
      ::grpc::Service::MarkMethodCallback(122,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteSearchRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteSearchRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteSearch(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSearch(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteSearchRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(122);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteSearchRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSearch(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteSearchRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSearch(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteSearchRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAnnotationFilters() {
      ::grpc::Service::MarkMethodCallback(123,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response) { return this->ListAnnotationFilters(context, request, response); }));}
    void SetMessageAllocatorFor_ListAnnotationFilters(
        ::grpc::MessageAllocator< ::clarifai::api::ListAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(123);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAnnotationFilters(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAnnotationFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAnnotationFilter() {
      ::grpc::Service::MarkMethodCallback(124,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetAnnotationFilterRequest, ::clarifai::api::SingleAnnotationFilterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetAnnotationFilterRequest* request, ::clarifai::api::SingleAnnotationFilterResponse* response) { return this->GetAnnotationFilter(context, request, response); }));}
    void SetMessageAllocatorFor_GetAnnotationFilter(
        ::grpc::MessageAllocator< ::clarifai::api::GetAnnotationFilterRequest, ::clarifai::api::SingleAnnotationFilterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(124);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetAnnotationFilterRequest, ::clarifai::api::SingleAnnotationFilterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAnnotationFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotationFilter(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationFilterRequest* /*request*/, ::clarifai::api::SingleAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAnnotationFilter(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetAnnotationFilterRequest* /*request*/, ::clarifai::api::SingleAnnotationFilterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostAnnotationFilters() {
      ::grpc::Service::MarkMethodCallback(125,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response) { return this->PostAnnotationFilters(context, request, response); }));}
    void SetMessageAllocatorFor_PostAnnotationFilters(
        ::grpc::MessageAllocator< ::clarifai::api::PostAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(125);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostAnnotationFilters(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchAnnotationFilters() {
      ::grpc::Service::MarkMethodCallback(126,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchAnnotationFiltersRequest* request, ::clarifai::api::MultiAnnotationFilterResponse* response) { return this->PatchAnnotationFilters(context, request, response); }));}
    void SetMessageAllocatorFor_PatchAnnotationFilters(
        ::grpc::MessageAllocator< ::clarifai::api::PatchAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(126);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchAnnotationFilters(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteAnnotationFilters() {
      ::grpc::Service::MarkMethodCallback(127,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteAnnotationFiltersRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteAnnotationFiltersRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteAnnotationFilters(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAnnotationFilters(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteAnnotationFiltersRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(127);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteAnnotationFiltersRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationFiltersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAnnotationFilters(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationFiltersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListStatusCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListStatusCodes() {
      ::grpc::Service::MarkMethodCallback(128,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListStatusCodesRequest, ::clarifai::api::MultiStatusCodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListStatusCodesRequest* request, ::clarifai::api::MultiStatusCodeResponse* response) { return this->ListStatusCodes(context, request, response); }));}
    void SetMessageAllocatorFor_ListStatusCodes(
        ::grpc::MessageAllocator< ::clarifai::api::ListStatusCodesRequest, ::clarifai::api::MultiStatusCodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(128);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListStatusCodesRequest, ::clarifai::api::MultiStatusCodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListStatusCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListStatusCodes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListStatusCodesRequest* /*request*/, ::clarifai::api::MultiStatusCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListStatusCodes(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListStatusCodesRequest* /*request*/, ::clarifai::api::MultiStatusCodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStatusCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStatusCode() {
      ::grpc::Service::MarkMethodCallback(129,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetStatusCodeRequest, ::clarifai::api::SingleStatusCodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetStatusCodeRequest* request, ::clarifai::api::SingleStatusCodeResponse* response) { return this->GetStatusCode(context, request, response); }));}
    void SetMessageAllocatorFor_GetStatusCode(
        ::grpc::MessageAllocator< ::clarifai::api::GetStatusCodeRequest, ::clarifai::api::SingleStatusCodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(129);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetStatusCodeRequest, ::clarifai::api::SingleStatusCodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStatusCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatusCode(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetStatusCodeRequest* /*request*/, ::clarifai::api::SingleStatusCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStatusCode(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetStatusCodeRequest* /*request*/, ::clarifai::api::SingleStatusCodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListCollaborators() {
      ::grpc::Service::MarkMethodCallback(130,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response) { return this->ListCollaborators(context, request, response); }));}
    void SetMessageAllocatorFor_ListCollaborators(
        ::grpc::MessageAllocator< ::clarifai::api::ListCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(130);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCollaborators(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostCollaborators() {
      ::grpc::Service::MarkMethodCallback(131,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response) { return this->PostCollaborators(context, request, response); }));}
    void SetMessageAllocatorFor_PostCollaborators(
        ::grpc::MessageAllocator< ::clarifai::api::PostCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(131);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostCollaborators(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchCollaborators() {
      ::grpc::Service::MarkMethodCallback(132,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response) { return this->PatchCollaborators(context, request, response); }));}
    void SetMessageAllocatorFor_PatchCollaborators(
        ::grpc::MessageAllocator< ::clarifai::api::PatchCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(132);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchCollaborators(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteCollaborators() {
      ::grpc::Service::MarkMethodCallback(133,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteCollaboratorsRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteCollaboratorsRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteCollaborators(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCollaborators(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteCollaboratorsRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(133);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteCollaboratorsRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteCollaboratorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCollaborators(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteCollaboratorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListCollaborations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListCollaborations() {
      ::grpc::Service::MarkMethodCallback(134,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListCollaborationsRequest, ::clarifai::api::MultiCollaborationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListCollaborationsRequest* request, ::clarifai::api::MultiCollaborationsResponse* response) { return this->ListCollaborations(context, request, response); }));}
    void SetMessageAllocatorFor_ListCollaborations(
        ::grpc::MessageAllocator< ::clarifai::api::ListCollaborationsRequest, ::clarifai::api::MultiCollaborationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(134);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListCollaborationsRequest, ::clarifai::api::MultiCollaborationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListCollaborations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollaborations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollaborationsRequest* /*request*/, ::clarifai::api::MultiCollaborationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCollaborations(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListCollaborationsRequest* /*request*/, ::clarifai::api::MultiCollaborationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostAppDuplications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostAppDuplications() {
      ::grpc::Service::MarkMethodCallback(135,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAppDuplicationsRequest, ::clarifai::api::MultiAppDuplicationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response) { return this->PostAppDuplications(context, request, response); }));}
    void SetMessageAllocatorFor_PostAppDuplications(
        ::grpc::MessageAllocator< ::clarifai::api::PostAppDuplicationsRequest, ::clarifai::api::MultiAppDuplicationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(135);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostAppDuplicationsRequest, ::clarifai::api::MultiAppDuplicationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostAppDuplications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAppDuplications(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostAppDuplications(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListAppDuplications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAppDuplications() {
      ::grpc::Service::MarkMethodCallback(136,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListAppDuplicationsRequest, ::clarifai::api::MultiAppDuplicationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response) { return this->ListAppDuplications(context, request, response); }));}
    void SetMessageAllocatorFor_ListAppDuplications(
        ::grpc::MessageAllocator< ::clarifai::api::ListAppDuplicationsRequest, ::clarifai::api::MultiAppDuplicationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(136);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListAppDuplicationsRequest, ::clarifai::api::MultiAppDuplicationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAppDuplications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAppDuplications(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAppDuplications(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAppDuplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAppDuplication() {
      ::grpc::Service::MarkMethodCallback(137,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetAppDuplicationRequest, ::clarifai::api::SingleAppDuplicationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetAppDuplicationRequest* request, ::clarifai::api::SingleAppDuplicationResponse* response) { return this->GetAppDuplication(context, request, response); }));}
    void SetMessageAllocatorFor_GetAppDuplication(
        ::grpc::MessageAllocator< ::clarifai::api::GetAppDuplicationRequest, ::clarifai::api::SingleAppDuplicationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(137);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetAppDuplicationRequest, ::clarifai::api::SingleAppDuplicationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAppDuplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAppDuplication(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAppDuplicationRequest* /*request*/, ::clarifai::api::SingleAppDuplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAppDuplication(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetAppDuplicationRequest* /*request*/, ::clarifai::api::SingleAppDuplicationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostTasks() {
      ::grpc::Service::MarkMethodCallback(138,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostTasksRequest, ::clarifai::api::MultiTaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostTasksRequest* request, ::clarifai::api::MultiTaskResponse* response) { return this->PostTasks(context, request, response); }));}
    void SetMessageAllocatorFor_PostTasks(
        ::grpc::MessageAllocator< ::clarifai::api::PostTasksRequest, ::clarifai::api::MultiTaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(138);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostTasksRequest, ::clarifai::api::MultiTaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTaskAnnotationCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTaskAnnotationCount() {
      ::grpc::Service::MarkMethodCallback(139,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetTaskCountRequest, ::clarifai::api::SingleTaskCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response) { return this->GetTaskAnnotationCount(context, request, response); }));}
    void SetMessageAllocatorFor_GetTaskAnnotationCount(
        ::grpc::MessageAllocator< ::clarifai::api::GetTaskCountRequest, ::clarifai::api::SingleTaskCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(139);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetTaskCountRequest, ::clarifai::api::SingleTaskCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTaskAnnotationCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskAnnotationCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTaskAnnotationCount(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTaskInputCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTaskInputCount() {
      ::grpc::Service::MarkMethodCallback(140,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetTaskCountRequest, ::clarifai::api::SingleTaskCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response) { return this->GetTaskInputCount(context, request, response); }));}
    void SetMessageAllocatorFor_GetTaskInputCount(
        ::grpc::MessageAllocator< ::clarifai::api::GetTaskCountRequest, ::clarifai::api::SingleTaskCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(140);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetTaskCountRequest, ::clarifai::api::SingleTaskCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTaskInputCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskInputCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTaskInputCount(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTask() {
      ::grpc::Service::MarkMethodCallback(141,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetTaskRequest, ::clarifai::api::SingleTaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetTaskRequest* request, ::clarifai::api::SingleTaskResponse* response) { return this->GetTask(context, request, response); }));}
    void SetMessageAllocatorFor_GetTask(
        ::grpc::MessageAllocator< ::clarifai::api::GetTaskRequest, ::clarifai::api::SingleTaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(141);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetTaskRequest, ::clarifai::api::SingleTaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskRequest* /*request*/, ::clarifai::api::SingleTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTask(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetTaskRequest* /*request*/, ::clarifai::api::SingleTaskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListTasks() {
      ::grpc::Service::MarkMethodCallback(142,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListTasksRequest, ::clarifai::api::MultiTaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListTasksRequest* request, ::clarifai::api::MultiTaskResponse* response) { return this->ListTasks(context, request, response); }));}
    void SetMessageAllocatorFor_ListTasks(
        ::grpc::MessageAllocator< ::clarifai::api::ListTasksRequest, ::clarifai::api::MultiTaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(142);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListTasksRequest, ::clarifai::api::MultiTaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchTasks() {
      ::grpc::Service::MarkMethodCallback(143,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchTasksRequest, ::clarifai::api::MultiTaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchTasksRequest* request, ::clarifai::api::MultiTaskResponse* response) { return this->PatchTasks(context, request, response); }));}
    void SetMessageAllocatorFor_PatchTasks(
        ::grpc::MessageAllocator< ::clarifai::api::PatchTasksRequest, ::clarifai::api::MultiTaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(143);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchTasksRequest, ::clarifai::api::MultiTaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteTasks() {
      ::grpc::Service::MarkMethodCallback(144,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteTasksRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteTasksRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteTasks(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTasks(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteTasksRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(144);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteTasksRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteTasksRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteTasksRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostLabelOrders() {
      ::grpc::Service::MarkMethodCallback(145,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response) { return this->PostLabelOrders(context, request, response); }));}
    void SetMessageAllocatorFor_PostLabelOrders(
        ::grpc::MessageAllocator< ::clarifai::api::PostLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(145);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostLabelOrders(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLabelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLabelOrder() {
      ::grpc::Service::MarkMethodCallback(146,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetLabelOrderRequest, ::clarifai::api::SingleLabelOrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetLabelOrderRequest* request, ::clarifai::api::SingleLabelOrderResponse* response) { return this->GetLabelOrder(context, request, response); }));}
    void SetMessageAllocatorFor_GetLabelOrder(
        ::grpc::MessageAllocator< ::clarifai::api::GetLabelOrderRequest, ::clarifai::api::SingleLabelOrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(146);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetLabelOrderRequest, ::clarifai::api::SingleLabelOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLabelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelOrder(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetLabelOrderRequest* /*request*/, ::clarifai::api::SingleLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLabelOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetLabelOrderRequest* /*request*/, ::clarifai::api::SingleLabelOrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListLabelOrders() {
      ::grpc::Service::MarkMethodCallback(147,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response) { return this->ListLabelOrders(context, request, response); }));}
    void SetMessageAllocatorFor_ListLabelOrders(
        ::grpc::MessageAllocator< ::clarifai::api::ListLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(147);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListLabelOrders(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchLabelOrders() {
      ::grpc::Service::MarkMethodCallback(148,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchLabelOrdersRequest* request, ::clarifai::api::MultiLabelOrderResponse* response) { return this->PatchLabelOrders(context, request, response); }));}
    void SetMessageAllocatorFor_PatchLabelOrders(
        ::grpc::MessageAllocator< ::clarifai::api::PatchLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(148);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchLabelOrders(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteLabelOrders() {
      ::grpc::Service::MarkMethodCallback(149,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteLabelOrdersRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteLabelOrdersRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteLabelOrders(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteLabelOrders(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteLabelOrdersRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(149);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteLabelOrdersRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteLabelOrdersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteLabelOrders(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteLabelOrdersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostCollectors() {
      ::grpc::Service::MarkMethodCallback(150,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostCollectorsRequest, ::clarifai::api::MultiCollectorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response) { return this->PostCollectors(context, request, response); }));}
    void SetMessageAllocatorFor_PostCollectors(
        ::grpc::MessageAllocator< ::clarifai::api::PostCollectorsRequest, ::clarifai::api::MultiCollectorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(150);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostCollectorsRequest, ::clarifai::api::MultiCollectorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostCollectors(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCollector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCollector() {
      ::grpc::Service::MarkMethodCallback(151,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetCollectorRequest, ::clarifai::api::SingleCollectorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetCollectorRequest* request, ::clarifai::api::SingleCollectorResponse* response) { return this->GetCollector(context, request, response); }));}
    void SetMessageAllocatorFor_GetCollector(
        ::grpc::MessageAllocator< ::clarifai::api::GetCollectorRequest, ::clarifai::api::SingleCollectorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(151);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetCollectorRequest, ::clarifai::api::SingleCollectorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCollector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollector(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetCollectorRequest* /*request*/, ::clarifai::api::SingleCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCollector(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetCollectorRequest* /*request*/, ::clarifai::api::SingleCollectorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListCollectors() {
      ::grpc::Service::MarkMethodCallback(152,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListCollectorsRequest, ::clarifai::api::MultiCollectorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response) { return this->ListCollectors(context, request, response); }));}
    void SetMessageAllocatorFor_ListCollectors(
        ::grpc::MessageAllocator< ::clarifai::api::ListCollectorsRequest, ::clarifai::api::MultiCollectorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(152);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListCollectorsRequest, ::clarifai::api::MultiCollectorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCollectors(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PatchCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PatchCollectors() {
      ::grpc::Service::MarkMethodCallback(153,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchCollectorsRequest, ::clarifai::api::MultiCollectorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PatchCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response) { return this->PatchCollectors(context, request, response); }));}
    void SetMessageAllocatorFor_PatchCollectors(
        ::grpc::MessageAllocator< ::clarifai::api::PatchCollectorsRequest, ::clarifai::api::MultiCollectorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(153);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PatchCollectorsRequest, ::clarifai::api::MultiCollectorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PatchCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchCollectors(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PatchCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteCollectors() {
      ::grpc::Service::MarkMethodCallback(154,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteCollectorsRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteCollectorsRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteCollectors(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCollectors(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteCollectorsRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(154);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteCollectorsRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteCollectorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCollectors(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteCollectorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostStatValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostStatValues() {
      ::grpc::Service::MarkMethodCallback(155,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostStatValuesRequest, ::clarifai::api::MultiStatValueResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostStatValuesRequest* request, ::clarifai::api::MultiStatValueResponse* response) { return this->PostStatValues(context, request, response); }));}
    void SetMessageAllocatorFor_PostStatValues(
        ::grpc::MessageAllocator< ::clarifai::api::PostStatValuesRequest, ::clarifai::api::MultiStatValueResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(155);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostStatValuesRequest, ::clarifai::api::MultiStatValueResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostStatValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostStatValues(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostStatValuesRequest* /*request*/, ::clarifai::api::MultiStatValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostStatValues(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostStatValuesRequest* /*request*/, ::clarifai::api::MultiStatValueResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostStatValuesAggregate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostStatValuesAggregate() {
      ::grpc::Service::MarkMethodCallback(156,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostStatValuesAggregateRequest, ::clarifai::api::MultiStatValueAggregateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostStatValuesAggregateRequest* request, ::clarifai::api::MultiStatValueAggregateResponse* response) { return this->PostStatValuesAggregate(context, request, response); }));}
    void SetMessageAllocatorFor_PostStatValuesAggregate(
        ::grpc::MessageAllocator< ::clarifai::api::PostStatValuesAggregateRequest, ::clarifai::api::MultiStatValueAggregateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(156);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostStatValuesAggregateRequest, ::clarifai::api::MultiStatValueAggregateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostStatValuesAggregate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostStatValuesAggregate(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostStatValuesAggregateRequest* /*request*/, ::clarifai::api::MultiStatValueAggregateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostStatValuesAggregate(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostStatValuesAggregateRequest* /*request*/, ::clarifai::api::MultiStatValueAggregateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostTrendingMetricsView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostTrendingMetricsView() {
      ::grpc::Service::MarkMethodCallback(157,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostTrendingMetricsViewRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->PostTrendingMetricsView(context, request, response); }));}
    void SetMessageAllocatorFor_PostTrendingMetricsView(
        ::grpc::MessageAllocator< ::clarifai::api::PostTrendingMetricsViewRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(157);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostTrendingMetricsViewRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostTrendingMetricsView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTrendingMetricsView(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostTrendingMetricsViewRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostTrendingMetricsView(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostTrendingMetricsViewRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListTrendingMetricsViews : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListTrendingMetricsViews() {
      ::grpc::Service::MarkMethodCallback(158,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListTrendingMetricsViewsRequest, ::clarifai::api::MultiTrendingMetricsViewResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest* request, ::clarifai::api::MultiTrendingMetricsViewResponse* response) { return this->ListTrendingMetricsViews(context, request, response); }));}
    void SetMessageAllocatorFor_ListTrendingMetricsViews(
        ::grpc::MessageAllocator< ::clarifai::api::ListTrendingMetricsViewsRequest, ::clarifai::api::MultiTrendingMetricsViewResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(158);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListTrendingMetricsViewsRequest, ::clarifai::api::MultiTrendingMetricsViewResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListTrendingMetricsViews() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTrendingMetricsViews(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListTrendingMetricsViewsRequest* /*request*/, ::clarifai::api::MultiTrendingMetricsViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTrendingMetricsViews(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListTrendingMetricsViewsRequest* /*request*/, ::clarifai::api::MultiTrendingMetricsViewResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PostBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostBulkOperations() {
      ::grpc::Service::MarkMethodCallback(159,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostBulkOperationsRequest, ::clarifai::api::MultiBulkOperationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::PostBulkOperationsRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response) { return this->PostBulkOperations(context, request, response); }));}
    void SetMessageAllocatorFor_PostBulkOperations(
        ::grpc::MessageAllocator< ::clarifai::api::PostBulkOperationsRequest, ::clarifai::api::MultiBulkOperationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(159);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::PostBulkOperationsRequest, ::clarifai::api::MultiBulkOperationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostBulkOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::PostBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListBulkOperations() {
      ::grpc::Service::MarkMethodCallback(160,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListBulkOperationsRequest, ::clarifai::api::MultiBulkOperationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::ListBulkOperationsRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response) { return this->ListBulkOperations(context, request, response); }));}
    void SetMessageAllocatorFor_ListBulkOperations(
        ::grpc::MessageAllocator< ::clarifai::api::ListBulkOperationsRequest, ::clarifai::api::MultiBulkOperationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(160);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::ListBulkOperationsRequest, ::clarifai::api::MultiBulkOperationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListBulkOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::ListBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBulkOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBulkOperation() {
      ::grpc::Service::MarkMethodCallback(161,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetBulkOperationRequest, ::clarifai::api::SingleBulkOperationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetBulkOperationRequest* request, ::clarifai::api::SingleBulkOperationsResponse* response) { return this->GetBulkOperation(context, request, response); }));}
    void SetMessageAllocatorFor_GetBulkOperation(
        ::grpc::MessageAllocator< ::clarifai::api::GetBulkOperationRequest, ::clarifai::api::SingleBulkOperationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(161);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetBulkOperationRequest, ::clarifai::api::SingleBulkOperationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBulkOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBulkOperation(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetBulkOperationRequest* /*request*/, ::clarifai::api::SingleBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBulkOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetBulkOperationRequest* /*request*/, ::clarifai::api::SingleBulkOperationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelBulkOperations() {
      ::grpc::Service::MarkMethodCallback(162,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::CancelBulkOperationRequest, ::clarifai::api::MultiBulkOperationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::CancelBulkOperationRequest* request, ::clarifai::api::MultiBulkOperationsResponse* response) { return this->CancelBulkOperations(context, request, response); }));}
    void SetMessageAllocatorFor_CancelBulkOperations(
        ::grpc::MessageAllocator< ::clarifai::api::CancelBulkOperationRequest, ::clarifai::api::MultiBulkOperationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(162);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::CancelBulkOperationRequest, ::clarifai::api::MultiBulkOperationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::CancelBulkOperationRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelBulkOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::CancelBulkOperationRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteBulkOperations() {
      ::grpc::Service::MarkMethodCallback(163,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteBulkOperationRequest, ::clarifai::api::status::BaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::DeleteBulkOperationRequest* request, ::clarifai::api::status::BaseResponse* response) { return this->DeleteBulkOperations(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteBulkOperations(
        ::grpc::MessageAllocator< ::clarifai::api::DeleteBulkOperationRequest, ::clarifai::api::status::BaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(163);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::DeleteBulkOperationRequest, ::clarifai::api::status::BaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteBulkOperationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteBulkOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::DeleteBulkOperationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDatasetInputsSearchAddJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDatasetInputsSearchAddJob() {
      ::grpc::Service::MarkMethodCallback(164,
          new ::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetDatasetInputsSearchAddJobRequest, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* request, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* response) { return this->GetDatasetInputsSearchAddJob(context, request, response); }));}
    void SetMessageAllocatorFor_GetDatasetInputsSearchAddJob(
        ::grpc::MessageAllocator< ::clarifai::api::GetDatasetInputsSearchAddJobRequest, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(164);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::clarifai::api::GetDatasetInputsSearchAddJobRequest, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDatasetInputsSearchAddJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetInputsSearchAddJob(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* /*request*/, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDatasetInputsSearchAddJob(
      ::grpc::CallbackServerContext* /*context*/, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* /*request*/, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListConceptRelations<WithCallbackMethod_PostConceptRelations<WithCallbackMethod_DeleteConceptRelations<WithCallbackMethod_GetConceptCounts<WithCallbackMethod_GetConcept<WithCallbackMethod_ListConcepts<WithCallbackMethod_PostConceptsSearches<WithCallbackMethod_PostConcepts<WithCallbackMethod_PatchConcepts<WithCallbackMethod_GetConceptLanguage<WithCallbackMethod_ListConceptLanguages<WithCallbackMethod_PostConceptLanguages<WithCallbackMethod_PatchConceptLanguages<WithCallbackMethod_ListKnowledgeGraphs<WithCallbackMethod_PostKnowledgeGraphs<WithCallbackMethod_PostConceptMappingJobs<WithCallbackMethod_GetAnnotation<WithCallbackMethod_ListAnnotations<WithCallbackMethod_PostAnnotations<WithCallbackMethod_PatchAnnotations<WithCallbackMethod_PatchAnnotationsStatus<WithCallbackMethod_DeleteAnnotation<WithCallbackMethod_DeleteAnnotations<WithCallbackMethod_PatchAnnotationsSearches<WithCallbackMethod_PostAnnotationsSearches<WithCallbackMethod_GetInputCount<WithCallbackMethod_StreamInputs<WithCallbackMethod_GetInputSamples<WithCallbackMethod_GetInput<WithCallbackMethod_ListInputs<WithCallbackMethod_PostInputs<WithCallbackMethod_PatchInputs<WithCallbackMethod_DeleteInput<WithCallbackMethod_DeleteInputs<WithCallbackMethod_PatchInputsSearches<WithCallbackMethod_PostInputsSearches<WithCallbackMethod_PostModelOutputs<WithCallbackMethod_ListDatasets<WithCallbackMethod_GetDataset<WithCallbackMethod_PostDatasets<WithCallbackMethod_PatchDatasets<WithCallbackMethod_DeleteDatasets<WithCallbackMethod_ListDatasetInputs<WithCallbackMethod_GetDatasetInput<WithCallbackMethod_PostDatasetInputs<WithCallbackMethod_DeleteDatasetInputs<WithCallbackMethod_ListDatasetVersions<WithCallbackMethod_GetDatasetVersion<WithCallbackMethod_ListDatasetVersionMetricsGroups<WithCallbackMethod_PostDatasetVersions<WithCallbackMethod_PatchDatasetVersions<WithCallbackMethod_DeleteDatasetVersions<WithCallbackMethod_GetModelType<WithCallbackMethod_ListOpenSourceLicenses<WithCallbackMethod_ListModelTypes<WithCallbackMethod_GetModel<WithCallbackMethod_GetModelOutputInfo<WithCallbackMethod_ListModels<WithCallbackMethod_PostModelsSearches<WithCallbackMethod_PostModels<WithCallbackMethod_PatchModels<WithCallbackMethod_PatchModelIds<WithCallbackMethod_DeleteModel<WithCallbackMethod_DeleteModels<WithCallbackMethod_PatchModelToolkits<WithCallbackMethod_PatchModelUseCases<WithCallbackMethod_PatchModelLanguages<WithCallbackMethod_ListModelInputs<WithCallbackMethod_GetModelVersion<WithCallbackMethod_ListModelVersions<WithCallbackMethod_PostWorkflowVersionsUnPublish<WithCallbackMethod_PostWorkflowVersionsPublish<WithCallbackMethod_PostModelVersionsPublish<WithCallbackMethod_PostModelVersionsUnPublish<WithCallbackMethod_PostModelVersions<WithCallbackMethod_PatchModelVersions<WithCallbackMethod_DeleteModelVersion<WithCallbackMethod_GetModelVersionMetrics<WithCallbackMethod_PostModelVersionMetrics<WithCallbackMethod_ListModelReferences<WithCallbackMethod_GetModelVersionInputExample<WithCallbackMethod_ListModelVersionInputExamples<WithCallbackMethod_GetWorkflow<WithCallbackMethod_ListWorkflows<WithCallbackMethod_PostWorkflows<WithCallbackMethod_PatchWorkflows<WithCallbackMethod_DeleteWorkflow<WithCallbackMethod_DeleteWorkflows<WithCallbackMethod_PostWorkflowResults<WithCallbackMethod_PostWorkflowResultsSimilarity<WithCallbackMethod_ListWorkflowVersions<WithCallbackMethod_GetWorkflowVersion<WithCallbackMethod_DeleteWorkflowVersions<WithCallbackMethod_PatchWorkflowVersions<WithCallbackMethod_GetKey<WithCallbackMethod_ListKeys<WithCallbackMethod_ListAppKeys<WithCallbackMethod_DeleteKey<WithCallbackMethod_PostKeys<WithCallbackMethod_PatchKeys<WithCallbackMethod_MyScopes<WithCallbackMethod_MyScopesUser<WithCallbackMethod_MyScopesRoot<WithCallbackMethod_ListScopes<WithCallbackMethod_GetApp<WithCallbackMethod_ListApps<WithCallbackMethod_DeleteApp<WithCallbackMethod_PostApps<WithCallbackMethod_PatchApps<WithCallbackMethod_PatchApp<WithCallbackMethod_PatchAppsIds<WithCallbackMethod_PostAppsSearches<WithCallbackMethod_PostValidatePassword<WithCallbackMethod_GetSearch<WithCallbackMethod_ListSearches<WithCallbackMethod_PatchSearches<WithCallbackMethod_PostSearches<WithCallbackMethod_PostSearchesByID<WithCallbackMethod_PostAnnotationSearchMetrics<WithCallbackMethod_GetAnnotationSearchMetrics<WithCallbackMethod_ListAnnotationSearchMetrics<WithCallbackMethod_DeleteAnnotationSearchMetrics<WithCallbackMethod_DeleteSearch<WithCallbackMethod_ListAnnotationFilters<WithCallbackMethod_GetAnnotationFilter<WithCallbackMethod_PostAnnotationFilters<WithCallbackMethod_PatchAnnotationFilters<WithCallbackMethod_DeleteAnnotationFilters<WithCallbackMethod_ListStatusCodes<WithCallbackMethod_GetStatusCode<WithCallbackMethod_ListCollaborators<WithCallbackMethod_PostCollaborators<WithCallbackMethod_PatchCollaborators<WithCallbackMethod_DeleteCollaborators<WithCallbackMethod_ListCollaborations<WithCallbackMethod_PostAppDuplications<WithCallbackMethod_ListAppDuplications<WithCallbackMethod_GetAppDuplication<WithCallbackMethod_PostTasks<WithCallbackMethod_GetTaskAnnotationCount<WithCallbackMethod_GetTaskInputCount<WithCallbackMethod_GetTask<WithCallbackMethod_ListTasks<WithCallbackMethod_PatchTasks<WithCallbackMethod_DeleteTasks<WithCallbackMethod_PostLabelOrders<WithCallbackMethod_GetLabelOrder<WithCallbackMethod_ListLabelOrders<WithCallbackMethod_PatchLabelOrders<WithCallbackMethod_DeleteLabelOrders<WithCallbackMethod_PostCollectors<WithCallbackMethod_GetCollector<WithCallbackMethod_ListCollectors<WithCallbackMethod_PatchCollectors<WithCallbackMethod_DeleteCollectors<WithCallbackMethod_PostStatValues<WithCallbackMethod_PostStatValuesAggregate<WithCallbackMethod_PostTrendingMetricsView<WithCallbackMethod_ListTrendingMetricsViews<WithCallbackMethod_PostBulkOperations<WithCallbackMethod_ListBulkOperations<WithCallbackMethod_GetBulkOperation<WithCallbackMethod_CancelBulkOperations<WithCallbackMethod_DeleteBulkOperations<WithCallbackMethod_GetDatasetInputsSearchAddJob<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListConceptRelations() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostConceptRelations() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PostConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteConceptRelations() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteConceptRelationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConceptCounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConceptCounts() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetConceptCounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConceptCounts(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptCountsRequest* /*request*/, ::clarifai::api::MultiConceptCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConcept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConcept() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetConcept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConcept(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptRequest* /*request*/, ::clarifai::api::SingleConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListConcepts() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostConceptsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostConceptsSearches() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_PostConceptsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptsSearchesRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostConcepts() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_PostConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchConcepts() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PatchConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConceptLanguage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConceptLanguage() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetConceptLanguage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConceptLanguage(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptLanguageRequest* /*request*/, ::clarifai::api::SingleConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListConceptLanguages() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ListConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostConceptLanguages() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_PostConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchConceptLanguages() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_PatchConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListKnowledgeGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListKnowledgeGraphs() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ListKnowledgeGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKnowledgeGraphs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostKnowledgeGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostKnowledgeGraphs() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_PostKnowledgeGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostKnowledgeGraphs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostConceptMappingJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostConceptMappingJobs() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_PostConceptMappingJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptMappingJobs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptMappingJobsRequest* /*request*/, ::clarifai::api::MultiConceptMappingJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAnnotation() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotation(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationRequest* /*request*/, ::clarifai::api::SingleAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAnnotations() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_ListAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostAnnotations() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_PostAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchAnnotations() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_PatchAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchAnnotationsStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchAnnotationsStatus() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_PatchAnnotationsStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationsStatus(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsStatusRequest* /*request*/, ::clarifai::api::PatchAnnotationsStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAnnotation() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_DeleteAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotation(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAnnotations() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_DeleteAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchAnnotationsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchAnnotationsSearches() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_PatchAnnotationsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostAnnotationsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostAnnotationsSearches() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_PostAnnotationsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInputCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInputCount() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_GetInputCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputCountRequest* /*request*/, ::clarifai::api::SingleInputCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamInputs() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_StreamInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::StreamInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInputSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInputSamples() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_GetInputSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputSamples(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputSamplesRequest* /*request*/, ::clarifai::api::MultiInputAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInput() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_GetInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputRequest* /*request*/, ::clarifai::api::SingleInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListInputs() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_ListInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostInputs() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_PostInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchInputs() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_PatchInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteInput() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_DeleteInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteInputRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteInputs() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_DeleteInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchInputsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchInputsSearches() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_PatchInputsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchInputsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostInputsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostInputsSearches() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_PostInputsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostInputsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostModelOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostModelOutputs() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_PostModelOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelOutputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelOutputsRequest* /*request*/, ::clarifai::api::MultiOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDatasets() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_ListDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDataset() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetRequest* /*request*/, ::clarifai::api::SingleDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostDatasets() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_PostDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchDatasets() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_PatchDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDatasets() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_DeleteDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDatasetInputs() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_ListDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDatasetInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDatasetInput() {
      ::grpc::Service::MarkMethodGeneric(43);
    }
    ~WithGenericMethod_GetDatasetInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetInputRequest* /*request*/, ::clarifai::api::SingleDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostDatasetInputs() {
      ::grpc::Service::MarkMethodGeneric(44);
    }
    ~WithGenericMethod_PostDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDatasetInputs() {
      ::grpc::Service::MarkMethodGeneric(45);
    }
    ~WithGenericMethod_DeleteDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDatasetVersions() {
      ::grpc::Service::MarkMethodGeneric(46);
    }
    ~WithGenericMethod_ListDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDatasetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDatasetVersion() {
      ::grpc::Service::MarkMethodGeneric(47);
    }
    ~WithGenericMethod_GetDatasetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetVersionRequest* /*request*/, ::clarifai::api::SingleDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDatasetVersionMetricsGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDatasetVersionMetricsGroups() {
      ::grpc::Service::MarkMethodGeneric(48);
    }
    ~WithGenericMethod_ListDatasetVersionMetricsGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetVersionMetricsGroups(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostDatasetVersions() {
      ::grpc::Service::MarkMethodGeneric(49);
    }
    ~WithGenericMethod_PostDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchDatasetVersions() {
      ::grpc::Service::MarkMethodGeneric(50);
    }
    ~WithGenericMethod_PatchDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDatasetVersions() {
      ::grpc::Service::MarkMethodGeneric(51);
    }
    ~WithGenericMethod_DeleteDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelType() {
      ::grpc::Service::MarkMethodGeneric(52);
    }
    ~WithGenericMethod_GetModelType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelType(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelTypeRequest* /*request*/, ::clarifai::api::SingleModelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListOpenSourceLicenses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListOpenSourceLicenses() {
      ::grpc::Service::MarkMethodGeneric(53);
    }
    ~WithGenericMethod_ListOpenSourceLicenses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOpenSourceLicenses(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListOpenSourceLicensesRequest* /*request*/, ::clarifai::api::ListOpenSourceLicensesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListModelTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListModelTypes() {
      ::grpc::Service::MarkMethodGeneric(54);
    }
    ~WithGenericMethod_ListModelTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelTypes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelTypesRequest* /*request*/, ::clarifai::api::MultiModelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModel() {
      ::grpc::Service::MarkMethodGeneric(55);
    }
    ~WithGenericMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelOutputInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelOutputInfo() {
      ::grpc::Service::MarkMethodGeneric(56);
    }
    ~WithGenericMethod_GetModelOutputInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelOutputInfo(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListModels() {
      ::grpc::Service::MarkMethodGeneric(57);
    }
    ~WithGenericMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostModelsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostModelsSearches() {
      ::grpc::Service::MarkMethodGeneric(58);
    }
    ~WithGenericMethod_PostModelsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelsSearchesRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostModels() {
      ::grpc::Service::MarkMethodGeneric(59);
    }
    ~WithGenericMethod_PostModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchModels() {
      ::grpc::Service::MarkMethodGeneric(60);
    }
    ~WithGenericMethod_PatchModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchModelIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchModelIds() {
      ::grpc::Service::MarkMethodGeneric(61);
    }
    ~WithGenericMethod_PatchModelIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelIds(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelIdsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteModel() {
      ::grpc::Service::MarkMethodGeneric(62);
    }
    ~WithGenericMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteModels() {
      ::grpc::Service::MarkMethodGeneric(63);
    }
    ~WithGenericMethod_DeleteModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchModelToolkits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchModelToolkits() {
      ::grpc::Service::MarkMethodGeneric(64);
    }
    ~WithGenericMethod_PatchModelToolkits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelToolkits(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelToolkitsRequest* /*request*/, ::clarifai::api::MultiModelToolkitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchModelUseCases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchModelUseCases() {
      ::grpc::Service::MarkMethodGeneric(65);
    }
    ~WithGenericMethod_PatchModelUseCases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelUseCases(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelUseCasesRequest* /*request*/, ::clarifai::api::MultiModelUseCaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchModelLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchModelLanguages() {
      ::grpc::Service::MarkMethodGeneric(66);
    }
    ~WithGenericMethod_PatchModelLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelLanguagesRequest* /*request*/, ::clarifai::api::MultiModelLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListModelInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListModelInputs() {
      ::grpc::Service::MarkMethodGeneric(67);
    }
    ~WithGenericMethod_ListModelInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelVersion() {
      ::grpc::Service::MarkMethodGeneric(68);
    }
    ~WithGenericMethod_GetModelVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListModelVersions() {
      ::grpc::Service::MarkMethodGeneric(69);
    }
    ~WithGenericMethod_ListModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostWorkflowVersionsUnPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostWorkflowVersionsUnPublish() {
      ::grpc::Service::MarkMethodGeneric(70);
    }
    ~WithGenericMethod_PostWorkflowVersionsUnPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowVersionsUnPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostWorkflowVersionsPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostWorkflowVersionsPublish() {
      ::grpc::Service::MarkMethodGeneric(71);
    }
    ~WithGenericMethod_PostWorkflowVersionsPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowVersionsPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostModelVersionsPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostModelVersionsPublish() {
      ::grpc::Service::MarkMethodGeneric(72);
    }
    ~WithGenericMethod_PostModelVersionsPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionsPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostModelVersionsUnPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostModelVersionsUnPublish() {
      ::grpc::Service::MarkMethodGeneric(73);
    }
    ~WithGenericMethod_PostModelVersionsUnPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionsUnPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostModelVersions() {
      ::grpc::Service::MarkMethodGeneric(74);
    }
    ~WithGenericMethod_PostModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchModelVersions() {
      ::grpc::Service::MarkMethodGeneric(75);
    }
    ~WithGenericMethod_PatchModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteModelVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteModelVersion() {
      ::grpc::Service::MarkMethodGeneric(76);
    }
    ~WithGenericMethod_DeleteModelVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModelVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelVersionRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelVersionMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelVersionMetrics() {
      ::grpc::Service::MarkMethodGeneric(77);
    }
    ~WithGenericMethod_GetModelVersionMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersionMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostModelVersionMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostModelVersionMetrics() {
      ::grpc::Service::MarkMethodGeneric(78);
    }
    ~WithGenericMethod_PostModelVersionMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListModelReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListModelReferences() {
      ::grpc::Service::MarkMethodGeneric(79);
    }
    ~WithGenericMethod_ListModelReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelReferences(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelReferencesRequest* /*request*/, ::clarifai::api::MultiModelReferenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelVersionInputExample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelVersionInputExample() {
      ::grpc::Service::MarkMethodGeneric(80);
    }
    ~WithGenericMethod_GetModelVersionInputExample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersionInputExample(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionInputExampleRequest* /*request*/, ::clarifai::api::SingleModelVersionInputExampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListModelVersionInputExamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListModelVersionInputExamples() {
      ::grpc::Service::MarkMethodGeneric(81);
    }
    ~WithGenericMethod_ListModelVersionInputExamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelVersionInputExamples(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelVersionInputExamplesRequest* /*request*/, ::clarifai::api::MultiModelVersionInputExampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWorkflow() {
      ::grpc::Service::MarkMethodGeneric(82);
    }
    ~WithGenericMethod_GetWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflow(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetWorkflowRequest* /*request*/, ::clarifai::api::SingleWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListWorkflows() {
      ::grpc::Service::MarkMethodGeneric(83);
    }
    ~WithGenericMethod_ListWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostWorkflows() {
      ::grpc::Service::MarkMethodGeneric(84);
    }
    ~WithGenericMethod_PostWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchWorkflows() {
      ::grpc::Service::MarkMethodGeneric(85);
    }
    ~WithGenericMethod_PatchWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteWorkflow() {
      ::grpc::Service::MarkMethodGeneric(86);
    }
    ~WithGenericMethod_DeleteWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflow(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteWorkflows() {
      ::grpc::Service::MarkMethodGeneric(87);
    }
    ~WithGenericMethod_DeleteWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostWorkflowResults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostWorkflowResults() {
      ::grpc::Service::MarkMethodGeneric(88);
    }
    ~WithGenericMethod_PostWorkflowResults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowResults(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsRequest* /*request*/, ::clarifai::api::PostWorkflowResultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostWorkflowResultsSimilarity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostWorkflowResultsSimilarity() {
      ::grpc::Service::MarkMethodGeneric(89);
    }
    ~WithGenericMethod_PostWorkflowResultsSimilarity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowResultsSimilarity(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* /*request*/, ::clarifai::api::PostWorkflowResultsSimilarityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListWorkflowVersions() {
      ::grpc::Service::MarkMethodGeneric(90);
    }
    ~WithGenericMethod_ListWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWorkflowVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWorkflowVersion() {
      ::grpc::Service::MarkMethodGeneric(91);
    }
    ~WithGenericMethod_GetWorkflowVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflowVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetWorkflowVersionRequest* /*request*/, ::clarifai::api::SingleWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteWorkflowVersions() {
      ::grpc::Service::MarkMethodGeneric(92);
    }
    ~WithGenericMethod_DeleteWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchWorkflowVersions() {
      ::grpc::Service::MarkMethodGeneric(93);
    }
    ~WithGenericMethod_PatchWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetKey() {
      ::grpc::Service::MarkMethodGeneric(94);
    }
    ~WithGenericMethod_GetKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKey(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetKeyRequest* /*request*/, ::clarifai::api::SingleKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListKeys() {
      ::grpc::Service::MarkMethodGeneric(95);
    }
    ~WithGenericMethod_ListKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAppKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAppKeys() {
      ::grpc::Service::MarkMethodGeneric(96);
    }
    ~WithGenericMethod_ListAppKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAppKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteKey() {
      ::grpc::Service::MarkMethodGeneric(97);
    }
    ~WithGenericMethod_DeleteKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteKey(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteKeyRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostKeys() {
      ::grpc::Service::MarkMethodGeneric(98);
    }
    ~WithGenericMethod_PostKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchKeys() {
      ::grpc::Service::MarkMethodGeneric(99);
    }
    ~WithGenericMethod_PatchKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MyScopes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MyScopes() {
      ::grpc::Service::MarkMethodGeneric(100);
    }
    ~WithGenericMethod_MyScopes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopes(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesRequest* /*request*/, ::clarifai::api::MultiScopeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MyScopesUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MyScopesUser() {
      ::grpc::Service::MarkMethodGeneric(101);
    }
    ~WithGenericMethod_MyScopesUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopesUser(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesUserRequest* /*request*/, ::clarifai::api::MultiScopeUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MyScopesRoot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MyScopesRoot() {
      ::grpc::Service::MarkMethodGeneric(102);
    }
    ~WithGenericMethod_MyScopesRoot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopesRoot(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesRootRequest* /*request*/, ::clarifai::api::MultiScopeRootResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListScopes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListScopes() {
      ::grpc::Service::MarkMethodGeneric(103);
    }
    ~WithGenericMethod_ListScopes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScopes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListScopesRequest* /*request*/, ::clarifai::api::MultiScopeDepsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetApp() {
      ::grpc::Service::MarkMethodGeneric(104);
    }
    ~WithGenericMethod_GetApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListApps() {
      ::grpc::Service::MarkMethodGeneric(105);
    }
    ~WithGenericMethod_ListApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteApp() {
      ::grpc::Service::MarkMethodGeneric(106);
    }
    ~WithGenericMethod_DeleteApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAppRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostApps() {
      ::grpc::Service::MarkMethodGeneric(107);
    }
    ~WithGenericMethod_PostApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchApps() {
      ::grpc::Service::MarkMethodGeneric(108);
    }
    ~WithGenericMethod_PatchApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchApp() {
      ::grpc::Service::MarkMethodGeneric(109);
    }
    ~WithGenericMethod_PatchApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchAppsIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchAppsIds() {
      ::grpc::Service::MarkMethodGeneric(110);
    }
    ~WithGenericMethod_PatchAppsIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAppsIds(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppsIdsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostAppsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostAppsSearches() {
      ::grpc::Service::MarkMethodGeneric(111);
    }
    ~WithGenericMethod_PostAppsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAppsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppsSearchesRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostValidatePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostValidatePassword() {
      ::grpc::Service::MarkMethodGeneric(112);
    }
    ~WithGenericMethod_PostValidatePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostValidatePassword(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostValidatePasswordRequest* /*request*/, ::clarifai::api::SinglePasswordValidationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSearch() {
      ::grpc::Service::MarkMethodGeneric(113);
    }
    ~WithGenericMethod_GetSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSearch(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetSearchRequest* /*request*/, ::clarifai::api::SingleSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListSearches() {
      ::grpc::Service::MarkMethodGeneric(114);
    }
    ~WithGenericMethod_ListSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchSearches() {
      ::grpc::Service::MarkMethodGeneric(115);
    }
    ~WithGenericMethod_PatchSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostSearches() {
      ::grpc::Service::MarkMethodGeneric(116);
    }
    ~WithGenericMethod_PostSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostSearchesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostSearchesByID() {
      ::grpc::Service::MarkMethodGeneric(117);
    }
    ~WithGenericMethod_PostSearchesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostSearchesByID(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostSearchesByIDRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodGeneric(118);
    }
    ~WithGenericMethod_PostAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodGeneric(119);
    }
    ~WithGenericMethod_GetAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodGeneric(120);
    }
    ~WithGenericMethod_ListAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodGeneric(121);
    }
    ~WithGenericMethod_DeleteAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSearch() {
      ::grpc::Service::MarkMethodGeneric(122);
    }
    ~WithGenericMethod_DeleteSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSearch(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteSearchRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAnnotationFilters() {
      ::grpc::Service::MarkMethodGeneric(123);
    }
    ~WithGenericMethod_ListAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAnnotationFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAnnotationFilter() {
      ::grpc::Service::MarkMethodGeneric(124);
    }
    ~WithGenericMethod_GetAnnotationFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotationFilter(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationFilterRequest* /*request*/, ::clarifai::api::SingleAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostAnnotationFilters() {
      ::grpc::Service::MarkMethodGeneric(125);
    }
    ~WithGenericMethod_PostAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchAnnotationFilters() {
      ::grpc::Service::MarkMethodGeneric(126);
    }
    ~WithGenericMethod_PatchAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAnnotationFilters() {
      ::grpc::Service::MarkMethodGeneric(127);
    }
    ~WithGenericMethod_DeleteAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationFiltersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListStatusCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListStatusCodes() {
      ::grpc::Service::MarkMethodGeneric(128);
    }
    ~WithGenericMethod_ListStatusCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListStatusCodes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListStatusCodesRequest* /*request*/, ::clarifai::api::MultiStatusCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStatusCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStatusCode() {
      ::grpc::Service::MarkMethodGeneric(129);
    }
    ~WithGenericMethod_GetStatusCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatusCode(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetStatusCodeRequest* /*request*/, ::clarifai::api::SingleStatusCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListCollaborators() {
      ::grpc::Service::MarkMethodGeneric(130);
    }
    ~WithGenericMethod_ListCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostCollaborators() {
      ::grpc::Service::MarkMethodGeneric(131);
    }
    ~WithGenericMethod_PostCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchCollaborators() {
      ::grpc::Service::MarkMethodGeneric(132);
    }
    ~WithGenericMethod_PatchCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCollaborators() {
      ::grpc::Service::MarkMethodGeneric(133);
    }
    ~WithGenericMethod_DeleteCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteCollaboratorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCollaborations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListCollaborations() {
      ::grpc::Service::MarkMethodGeneric(134);
    }
    ~WithGenericMethod_ListCollaborations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollaborations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollaborationsRequest* /*request*/, ::clarifai::api::MultiCollaborationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostAppDuplications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostAppDuplications() {
      ::grpc::Service::MarkMethodGeneric(135);
    }
    ~WithGenericMethod_PostAppDuplications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAppDuplications(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAppDuplications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAppDuplications() {
      ::grpc::Service::MarkMethodGeneric(136);
    }
    ~WithGenericMethod_ListAppDuplications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAppDuplications(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAppDuplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAppDuplication() {
      ::grpc::Service::MarkMethodGeneric(137);
    }
    ~WithGenericMethod_GetAppDuplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAppDuplication(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAppDuplicationRequest* /*request*/, ::clarifai::api::SingleAppDuplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostTasks() {
      ::grpc::Service::MarkMethodGeneric(138);
    }
    ~WithGenericMethod_PostTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTaskAnnotationCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTaskAnnotationCount() {
      ::grpc::Service::MarkMethodGeneric(139);
    }
    ~WithGenericMethod_GetTaskAnnotationCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskAnnotationCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTaskInputCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTaskInputCount() {
      ::grpc::Service::MarkMethodGeneric(140);
    }
    ~WithGenericMethod_GetTaskInputCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskInputCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTask() {
      ::grpc::Service::MarkMethodGeneric(141);
    }
    ~WithGenericMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskRequest* /*request*/, ::clarifai::api::SingleTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTasks() {
      ::grpc::Service::MarkMethodGeneric(142);
    }
    ~WithGenericMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchTasks() {
      ::grpc::Service::MarkMethodGeneric(143);
    }
    ~WithGenericMethod_PatchTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTasks() {
      ::grpc::Service::MarkMethodGeneric(144);
    }
    ~WithGenericMethod_DeleteTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteTasksRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostLabelOrders() {
      ::grpc::Service::MarkMethodGeneric(145);
    }
    ~WithGenericMethod_PostLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLabelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLabelOrder() {
      ::grpc::Service::MarkMethodGeneric(146);
    }
    ~WithGenericMethod_GetLabelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelOrder(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetLabelOrderRequest* /*request*/, ::clarifai::api::SingleLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListLabelOrders() {
      ::grpc::Service::MarkMethodGeneric(147);
    }
    ~WithGenericMethod_ListLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchLabelOrders() {
      ::grpc::Service::MarkMethodGeneric(148);
    }
    ~WithGenericMethod_PatchLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteLabelOrders() {
      ::grpc::Service::MarkMethodGeneric(149);
    }
    ~WithGenericMethod_DeleteLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteLabelOrdersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostCollectors() {
      ::grpc::Service::MarkMethodGeneric(150);
    }
    ~WithGenericMethod_PostCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCollector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCollector() {
      ::grpc::Service::MarkMethodGeneric(151);
    }
    ~WithGenericMethod_GetCollector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollector(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetCollectorRequest* /*request*/, ::clarifai::api::SingleCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListCollectors() {
      ::grpc::Service::MarkMethodGeneric(152);
    }
    ~WithGenericMethod_ListCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PatchCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PatchCollectors() {
      ::grpc::Service::MarkMethodGeneric(153);
    }
    ~WithGenericMethod_PatchCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCollectors() {
      ::grpc::Service::MarkMethodGeneric(154);
    }
    ~WithGenericMethod_DeleteCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteCollectorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostStatValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostStatValues() {
      ::grpc::Service::MarkMethodGeneric(155);
    }
    ~WithGenericMethod_PostStatValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostStatValues(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostStatValuesRequest* /*request*/, ::clarifai::api::MultiStatValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostStatValuesAggregate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostStatValuesAggregate() {
      ::grpc::Service::MarkMethodGeneric(156);
    }
    ~WithGenericMethod_PostStatValuesAggregate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostStatValuesAggregate(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostStatValuesAggregateRequest* /*request*/, ::clarifai::api::MultiStatValueAggregateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostTrendingMetricsView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostTrendingMetricsView() {
      ::grpc::Service::MarkMethodGeneric(157);
    }
    ~WithGenericMethod_PostTrendingMetricsView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTrendingMetricsView(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostTrendingMetricsViewRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTrendingMetricsViews : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTrendingMetricsViews() {
      ::grpc::Service::MarkMethodGeneric(158);
    }
    ~WithGenericMethod_ListTrendingMetricsViews() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTrendingMetricsViews(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListTrendingMetricsViewsRequest* /*request*/, ::clarifai::api::MultiTrendingMetricsViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostBulkOperations() {
      ::grpc::Service::MarkMethodGeneric(159);
    }
    ~WithGenericMethod_PostBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListBulkOperations() {
      ::grpc::Service::MarkMethodGeneric(160);
    }
    ~WithGenericMethod_ListBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBulkOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBulkOperation() {
      ::grpc::Service::MarkMethodGeneric(161);
    }
    ~WithGenericMethod_GetBulkOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBulkOperation(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetBulkOperationRequest* /*request*/, ::clarifai::api::SingleBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelBulkOperations() {
      ::grpc::Service::MarkMethodGeneric(162);
    }
    ~WithGenericMethod_CancelBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::CancelBulkOperationRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteBulkOperations() {
      ::grpc::Service::MarkMethodGeneric(163);
    }
    ~WithGenericMethod_DeleteBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteBulkOperationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDatasetInputsSearchAddJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDatasetInputsSearchAddJob() {
      ::grpc::Service::MarkMethodGeneric(164);
    }
    ~WithGenericMethod_GetDatasetInputsSearchAddJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetInputsSearchAddJob(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* /*request*/, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListConceptRelations() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListConceptRelations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostConceptRelations() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PostConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostConceptRelations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteConceptRelations() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteConceptRelationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteConceptRelations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConceptCounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConceptCounts() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetConceptCounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConceptCounts(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptCountsRequest* /*request*/, ::clarifai::api::MultiConceptCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConceptCounts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConcept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConcept() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetConcept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConcept(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptRequest* /*request*/, ::clarifai::api::SingleConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConcept(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListConcepts() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListConcepts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostConceptsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostConceptsSearches() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_PostConceptsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptsSearchesRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostConceptsSearches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostConcepts() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_PostConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostConcepts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchConcepts() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_PatchConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchConcepts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConceptLanguage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConceptLanguage() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetConceptLanguage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConceptLanguage(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptLanguageRequest* /*request*/, ::clarifai::api::SingleConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConceptLanguage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListConceptLanguages() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ListConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListConceptLanguages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostConceptLanguages() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_PostConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostConceptLanguages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchConceptLanguages() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_PatchConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchConceptLanguages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListKnowledgeGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListKnowledgeGraphs() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ListKnowledgeGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKnowledgeGraphs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListKnowledgeGraphs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostKnowledgeGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostKnowledgeGraphs() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_PostKnowledgeGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostKnowledgeGraphs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostKnowledgeGraphs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostConceptMappingJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostConceptMappingJobs() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_PostConceptMappingJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptMappingJobs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptMappingJobsRequest* /*request*/, ::clarifai::api::MultiConceptMappingJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostConceptMappingJobs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAnnotation() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotation(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationRequest* /*request*/, ::clarifai::api::SingleAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnnotation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAnnotations() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_ListAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAnnotations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostAnnotations() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_PostAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAnnotations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchAnnotations() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_PatchAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchAnnotations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchAnnotationsStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchAnnotationsStatus() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_PatchAnnotationsStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationsStatus(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsStatusRequest* /*request*/, ::clarifai::api::PatchAnnotationsStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchAnnotationsStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAnnotation() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_DeleteAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotation(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAnnotation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAnnotations() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_DeleteAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAnnotations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchAnnotationsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchAnnotationsSearches() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_PatchAnnotationsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchAnnotationsSearches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostAnnotationsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostAnnotationsSearches() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_PostAnnotationsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAnnotationsSearches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInputCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInputCount() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_GetInputCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputCountRequest* /*request*/, ::clarifai::api::SingleInputCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInputCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamInputs() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_StreamInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::StreamInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamInputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInputSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInputSamples() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_GetInputSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputSamples(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputSamplesRequest* /*request*/, ::clarifai::api::MultiInputAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInputSamples(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInput() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_GetInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputRequest* /*request*/, ::clarifai::api::SingleInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListInputs() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_ListInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostInputs() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_PostInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostInputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchInputs() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_PatchInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchInputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteInput() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_DeleteInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteInputRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteInput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteInputs() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_DeleteInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteInputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchInputsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchInputsSearches() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_PatchInputsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchInputsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchInputsSearches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostInputsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostInputsSearches() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_PostInputsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostInputsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostInputsSearches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostModelOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostModelOutputs() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_PostModelOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelOutputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelOutputsRequest* /*request*/, ::clarifai::api::MultiOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModelOutputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDatasets() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_ListDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDatasets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDataset() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetRequest* /*request*/, ::clarifai::api::SingleDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostDatasets() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_PostDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostDatasets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchDatasets() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_PatchDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchDatasets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDatasets() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_DeleteDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDatasets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDatasetInputs() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_ListDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDatasetInputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDatasetInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDatasetInput() {
      ::grpc::Service::MarkMethodRaw(43);
    }
    ~WithRawMethod_GetDatasetInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetInputRequest* /*request*/, ::clarifai::api::SingleDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDatasetInput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostDatasetInputs() {
      ::grpc::Service::MarkMethodRaw(44);
    }
    ~WithRawMethod_PostDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostDatasetInputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDatasetInputs() {
      ::grpc::Service::MarkMethodRaw(45);
    }
    ~WithRawMethod_DeleteDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDatasetInputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDatasetVersions() {
      ::grpc::Service::MarkMethodRaw(46);
    }
    ~WithRawMethod_ListDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDatasetVersions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDatasetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDatasetVersion() {
      ::grpc::Service::MarkMethodRaw(47);
    }
    ~WithRawMethod_GetDatasetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetVersionRequest* /*request*/, ::clarifai::api::SingleDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDatasetVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDatasetVersionMetricsGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDatasetVersionMetricsGroups() {
      ::grpc::Service::MarkMethodRaw(48);
    }
    ~WithRawMethod_ListDatasetVersionMetricsGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetVersionMetricsGroups(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDatasetVersionMetricsGroups(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostDatasetVersions() {
      ::grpc::Service::MarkMethodRaw(49);
    }
    ~WithRawMethod_PostDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostDatasetVersions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchDatasetVersions() {
      ::grpc::Service::MarkMethodRaw(50);
    }
    ~WithRawMethod_PatchDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchDatasetVersions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDatasetVersions() {
      ::grpc::Service::MarkMethodRaw(51);
    }
    ~WithRawMethod_DeleteDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDatasetVersions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelType() {
      ::grpc::Service::MarkMethodRaw(52);
    }
    ~WithRawMethod_GetModelType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelType(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelTypeRequest* /*request*/, ::clarifai::api::SingleModelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(52, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListOpenSourceLicenses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListOpenSourceLicenses() {
      ::grpc::Service::MarkMethodRaw(53);
    }
    ~WithRawMethod_ListOpenSourceLicenses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOpenSourceLicenses(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListOpenSourceLicensesRequest* /*request*/, ::clarifai::api::ListOpenSourceLicensesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOpenSourceLicenses(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(53, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListModelTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListModelTypes() {
      ::grpc::Service::MarkMethodRaw(54);
    }
    ~WithRawMethod_ListModelTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelTypes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelTypesRequest* /*request*/, ::clarifai::api::MultiModelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModelTypes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(54, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModel() {
      ::grpc::Service::MarkMethodRaw(55);
    }
    ~WithRawMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(55, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelOutputInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelOutputInfo() {
      ::grpc::Service::MarkMethodRaw(56);
    }
    ~WithRawMethod_GetModelOutputInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelOutputInfo(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelOutputInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(56, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListModels() {
      ::grpc::Service::MarkMethodRaw(57);
    }
    ~WithRawMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(57, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostModelsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostModelsSearches() {
      ::grpc::Service::MarkMethodRaw(58);
    }
    ~WithRawMethod_PostModelsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelsSearchesRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModelsSearches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(58, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostModels() {
      ::grpc::Service::MarkMethodRaw(59);
    }
    ~WithRawMethod_PostModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(59, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchModels() {
      ::grpc::Service::MarkMethodRaw(60);
    }
    ~WithRawMethod_PatchModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(60, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchModelIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchModelIds() {
      ::grpc::Service::MarkMethodRaw(61);
    }
    ~WithRawMethod_PatchModelIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelIds(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelIdsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModelIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(61, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteModel() {
      ::grpc::Service::MarkMethodRaw(62);
    }
    ~WithRawMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(62, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteModels() {
      ::grpc::Service::MarkMethodRaw(63);
    }
    ~WithRawMethod_DeleteModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(63, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchModelToolkits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchModelToolkits() {
      ::grpc::Service::MarkMethodRaw(64);
    }
    ~WithRawMethod_PatchModelToolkits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelToolkits(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelToolkitsRequest* /*request*/, ::clarifai::api::MultiModelToolkitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModelToolkits(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(64, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchModelUseCases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchModelUseCases() {
      ::grpc::Service::MarkMethodRaw(65);
    }
    ~WithRawMethod_PatchModelUseCases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelUseCases(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelUseCasesRequest* /*request*/, ::clarifai::api::MultiModelUseCaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModelUseCases(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(65, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchModelLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchModelLanguages() {
      ::grpc::Service::MarkMethodRaw(66);
    }
    ~WithRawMethod_PatchModelLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelLanguagesRequest* /*request*/, ::clarifai::api::MultiModelLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModelLanguages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(66, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListModelInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListModelInputs() {
      ::grpc::Service::MarkMethodRaw(67);
    }
    ~WithRawMethod_ListModelInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModelInputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(67, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelVersion() {
      ::grpc::Service::MarkMethodRaw(68);
    }
    ~WithRawMethod_GetModelVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(68, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListModelVersions() {
      ::grpc::Service::MarkMethodRaw(69);
    }
    ~WithRawMethod_ListModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModelVersions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(69, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostWorkflowVersionsUnPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostWorkflowVersionsUnPublish() {
      ::grpc::Service::MarkMethodRaw(70);
    }
    ~WithRawMethod_PostWorkflowVersionsUnPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowVersionsUnPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostWorkflowVersionsUnPublish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(70, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostWorkflowVersionsPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostWorkflowVersionsPublish() {
      ::grpc::Service::MarkMethodRaw(71);
    }
    ~WithRawMethod_PostWorkflowVersionsPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowVersionsPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostWorkflowVersionsPublish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(71, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostModelVersionsPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostModelVersionsPublish() {
      ::grpc::Service::MarkMethodRaw(72);
    }
    ~WithRawMethod_PostModelVersionsPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionsPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModelVersionsPublish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(72, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostModelVersionsUnPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostModelVersionsUnPublish() {
      ::grpc::Service::MarkMethodRaw(73);
    }
    ~WithRawMethod_PostModelVersionsUnPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionsUnPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModelVersionsUnPublish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(73, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostModelVersions() {
      ::grpc::Service::MarkMethodRaw(74);
    }
    ~WithRawMethod_PostModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModelVersions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(74, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchModelVersions() {
      ::grpc::Service::MarkMethodRaw(75);
    }
    ~WithRawMethod_PatchModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchModelVersions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(75, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteModelVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteModelVersion() {
      ::grpc::Service::MarkMethodRaw(76);
    }
    ~WithRawMethod_DeleteModelVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModelVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelVersionRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteModelVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(76, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelVersionMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelVersionMetrics() {
      ::grpc::Service::MarkMethodRaw(77);
    }
    ~WithRawMethod_GetModelVersionMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersionMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelVersionMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(77, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostModelVersionMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostModelVersionMetrics() {
      ::grpc::Service::MarkMethodRaw(78);
    }
    ~WithRawMethod_PostModelVersionMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostModelVersionMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(78, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListModelReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListModelReferences() {
      ::grpc::Service::MarkMethodRaw(79);
    }
    ~WithRawMethod_ListModelReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelReferences(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelReferencesRequest* /*request*/, ::clarifai::api::MultiModelReferenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModelReferences(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(79, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelVersionInputExample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelVersionInputExample() {
      ::grpc::Service::MarkMethodRaw(80);
    }
    ~WithRawMethod_GetModelVersionInputExample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersionInputExample(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionInputExampleRequest* /*request*/, ::clarifai::api::SingleModelVersionInputExampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelVersionInputExample(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(80, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListModelVersionInputExamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListModelVersionInputExamples() {
      ::grpc::Service::MarkMethodRaw(81);
    }
    ~WithRawMethod_ListModelVersionInputExamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelVersionInputExamples(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelVersionInputExamplesRequest* /*request*/, ::clarifai::api::MultiModelVersionInputExampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListModelVersionInputExamples(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(81, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWorkflow() {
      ::grpc::Service::MarkMethodRaw(82);
    }
    ~WithRawMethod_GetWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflow(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetWorkflowRequest* /*request*/, ::clarifai::api::SingleWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkflow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(82, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListWorkflows() {
      ::grpc::Service::MarkMethodRaw(83);
    }
    ~WithRawMethod_ListWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWorkflows(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(83, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostWorkflows() {
      ::grpc::Service::MarkMethodRaw(84);
    }
    ~WithRawMethod_PostWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostWorkflows(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(84, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchWorkflows() {
      ::grpc::Service::MarkMethodRaw(85);
    }
    ~WithRawMethod_PatchWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchWorkflows(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(85, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteWorkflow() {
      ::grpc::Service::MarkMethodRaw(86);
    }
    ~WithRawMethod_DeleteWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflow(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteWorkflow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(86, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteWorkflows() {
      ::grpc::Service::MarkMethodRaw(87);
    }
    ~WithRawMethod_DeleteWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteWorkflows(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(87, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostWorkflowResults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostWorkflowResults() {
      ::grpc::Service::MarkMethodRaw(88);
    }
    ~WithRawMethod_PostWorkflowResults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowResults(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsRequest* /*request*/, ::clarifai::api::PostWorkflowResultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostWorkflowResults(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(88, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostWorkflowResultsSimilarity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostWorkflowResultsSimilarity() {
      ::grpc::Service::MarkMethodRaw(89);
    }
    ~WithRawMethod_PostWorkflowResultsSimilarity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowResultsSimilarity(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* /*request*/, ::clarifai::api::PostWorkflowResultsSimilarityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostWorkflowResultsSimilarity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(89, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListWorkflowVersions() {
      ::grpc::Service::MarkMethodRaw(90);
    }
    ~WithRawMethod_ListWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWorkflowVersions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(90, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWorkflowVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWorkflowVersion() {
      ::grpc::Service::MarkMethodRaw(91);
    }
    ~WithRawMethod_GetWorkflowVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflowVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetWorkflowVersionRequest* /*request*/, ::clarifai::api::SingleWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkflowVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(91, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteWorkflowVersions() {
      ::grpc::Service::MarkMethodRaw(92);
    }
    ~WithRawMethod_DeleteWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteWorkflowVersions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(92, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchWorkflowVersions() {
      ::grpc::Service::MarkMethodRaw(93);
    }
    ~WithRawMethod_PatchWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchWorkflowVersions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(93, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetKey() {
      ::grpc::Service::MarkMethodRaw(94);
    }
    ~WithRawMethod_GetKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKey(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetKeyRequest* /*request*/, ::clarifai::api::SingleKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(94, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListKeys() {
      ::grpc::Service::MarkMethodRaw(95);
    }
    ~WithRawMethod_ListKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListKeys(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(95, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAppKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAppKeys() {
      ::grpc::Service::MarkMethodRaw(96);
    }
    ~WithRawMethod_ListAppKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAppKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAppKeys(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(96, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteKey() {
      ::grpc::Service::MarkMethodRaw(97);
    }
    ~WithRawMethod_DeleteKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteKey(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteKeyRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(97, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostKeys() {
      ::grpc::Service::MarkMethodRaw(98);
    }
    ~WithRawMethod_PostKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostKeys(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(98, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchKeys() {
      ::grpc::Service::MarkMethodRaw(99);
    }
    ~WithRawMethod_PatchKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchKeys(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(99, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MyScopes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MyScopes() {
      ::grpc::Service::MarkMethodRaw(100);
    }
    ~WithRawMethod_MyScopes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopes(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesRequest* /*request*/, ::clarifai::api::MultiScopeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMyScopes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(100, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MyScopesUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MyScopesUser() {
      ::grpc::Service::MarkMethodRaw(101);
    }
    ~WithRawMethod_MyScopesUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopesUser(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesUserRequest* /*request*/, ::clarifai::api::MultiScopeUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMyScopesUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(101, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MyScopesRoot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MyScopesRoot() {
      ::grpc::Service::MarkMethodRaw(102);
    }
    ~WithRawMethod_MyScopesRoot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopesRoot(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesRootRequest* /*request*/, ::clarifai::api::MultiScopeRootResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMyScopesRoot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(102, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListScopes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListScopes() {
      ::grpc::Service::MarkMethodRaw(103);
    }
    ~WithRawMethod_ListScopes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScopes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListScopesRequest* /*request*/, ::clarifai::api::MultiScopeDepsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListScopes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(103, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetApp() {
      ::grpc::Service::MarkMethodRaw(104);
    }
    ~WithRawMethod_GetApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetApp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(104, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListApps() {
      ::grpc::Service::MarkMethodRaw(105);
    }
    ~WithRawMethod_ListApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListApps(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(105, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteApp() {
      ::grpc::Service::MarkMethodRaw(106);
    }
    ~WithRawMethod_DeleteApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAppRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteApp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(106, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostApps() {
      ::grpc::Service::MarkMethodRaw(107);
    }
    ~WithRawMethod_PostApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostApps(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(107, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchApps() {
      ::grpc::Service::MarkMethodRaw(108);
    }
    ~WithRawMethod_PatchApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchApps(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(108, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchApp() {
      ::grpc::Service::MarkMethodRaw(109);
    }
    ~WithRawMethod_PatchApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchApp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(109, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchAppsIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchAppsIds() {
      ::grpc::Service::MarkMethodRaw(110);
    }
    ~WithRawMethod_PatchAppsIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAppsIds(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppsIdsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchAppsIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(110, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostAppsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostAppsSearches() {
      ::grpc::Service::MarkMethodRaw(111);
    }
    ~WithRawMethod_PostAppsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAppsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppsSearchesRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAppsSearches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(111, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostValidatePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostValidatePassword() {
      ::grpc::Service::MarkMethodRaw(112);
    }
    ~WithRawMethod_PostValidatePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostValidatePassword(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostValidatePasswordRequest* /*request*/, ::clarifai::api::SinglePasswordValidationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostValidatePassword(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(112, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSearch() {
      ::grpc::Service::MarkMethodRaw(113);
    }
    ~WithRawMethod_GetSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSearch(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetSearchRequest* /*request*/, ::clarifai::api::SingleSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(113, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListSearches() {
      ::grpc::Service::MarkMethodRaw(114);
    }
    ~WithRawMethod_ListSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSearches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(114, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchSearches() {
      ::grpc::Service::MarkMethodRaw(115);
    }
    ~WithRawMethod_PatchSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchSearches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(115, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostSearches() {
      ::grpc::Service::MarkMethodRaw(116);
    }
    ~WithRawMethod_PostSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostSearches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(116, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostSearchesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostSearchesByID() {
      ::grpc::Service::MarkMethodRaw(117);
    }
    ~WithRawMethod_PostSearchesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostSearchesByID(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostSearchesByIDRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostSearchesByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(117, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodRaw(118);
    }
    ~WithRawMethod_PostAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAnnotationSearchMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(118, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodRaw(119);
    }
    ~WithRawMethod_GetAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnnotationSearchMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(119, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodRaw(120);
    }
    ~WithRawMethod_ListAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAnnotationSearchMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(120, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodRaw(121);
    }
    ~WithRawMethod_DeleteAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAnnotationSearchMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(121, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSearch() {
      ::grpc::Service::MarkMethodRaw(122);
    }
    ~WithRawMethod_DeleteSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSearch(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteSearchRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(122, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAnnotationFilters() {
      ::grpc::Service::MarkMethodRaw(123);
    }
    ~WithRawMethod_ListAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAnnotationFilters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(123, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAnnotationFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAnnotationFilter() {
      ::grpc::Service::MarkMethodRaw(124);
    }
    ~WithRawMethod_GetAnnotationFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotationFilter(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationFilterRequest* /*request*/, ::clarifai::api::SingleAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnnotationFilter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(124, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostAnnotationFilters() {
      ::grpc::Service::MarkMethodRaw(125);
    }
    ~WithRawMethod_PostAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAnnotationFilters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(125, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchAnnotationFilters() {
      ::grpc::Service::MarkMethodRaw(126);
    }
    ~WithRawMethod_PatchAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchAnnotationFilters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(126, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAnnotationFilters() {
      ::grpc::Service::MarkMethodRaw(127);
    }
    ~WithRawMethod_DeleteAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationFiltersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAnnotationFilters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(127, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListStatusCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListStatusCodes() {
      ::grpc::Service::MarkMethodRaw(128);
    }
    ~WithRawMethod_ListStatusCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListStatusCodes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListStatusCodesRequest* /*request*/, ::clarifai::api::MultiStatusCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListStatusCodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(128, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatusCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStatusCode() {
      ::grpc::Service::MarkMethodRaw(129);
    }
    ~WithRawMethod_GetStatusCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatusCode(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetStatusCodeRequest* /*request*/, ::clarifai::api::SingleStatusCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatusCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(129, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListCollaborators() {
      ::grpc::Service::MarkMethodRaw(130);
    }
    ~WithRawMethod_ListCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCollaborators(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(130, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostCollaborators() {
      ::grpc::Service::MarkMethodRaw(131);
    }
    ~WithRawMethod_PostCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostCollaborators(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(131, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchCollaborators() {
      ::grpc::Service::MarkMethodRaw(132);
    }
    ~WithRawMethod_PatchCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchCollaborators(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(132, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCollaborators() {
      ::grpc::Service::MarkMethodRaw(133);
    }
    ~WithRawMethod_DeleteCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteCollaboratorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCollaborators(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(133, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCollaborations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListCollaborations() {
      ::grpc::Service::MarkMethodRaw(134);
    }
    ~WithRawMethod_ListCollaborations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollaborations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollaborationsRequest* /*request*/, ::clarifai::api::MultiCollaborationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCollaborations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(134, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostAppDuplications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostAppDuplications() {
      ::grpc::Service::MarkMethodRaw(135);
    }
    ~WithRawMethod_PostAppDuplications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAppDuplications(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostAppDuplications(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(135, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAppDuplications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAppDuplications() {
      ::grpc::Service::MarkMethodRaw(136);
    }
    ~WithRawMethod_ListAppDuplications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAppDuplications(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAppDuplications(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(136, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAppDuplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAppDuplication() {
      ::grpc::Service::MarkMethodRaw(137);
    }
    ~WithRawMethod_GetAppDuplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAppDuplication(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAppDuplicationRequest* /*request*/, ::clarifai::api::SingleAppDuplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAppDuplication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(137, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostTasks() {
      ::grpc::Service::MarkMethodRaw(138);
    }
    ~WithRawMethod_PostTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostTasks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(138, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTaskAnnotationCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTaskAnnotationCount() {
      ::grpc::Service::MarkMethodRaw(139);
    }
    ~WithRawMethod_GetTaskAnnotationCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskAnnotationCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTaskAnnotationCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(139, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTaskInputCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTaskInputCount() {
      ::grpc::Service::MarkMethodRaw(140);
    }
    ~WithRawMethod_GetTaskInputCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskInputCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTaskInputCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(140, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTask() {
      ::grpc::Service::MarkMethodRaw(141);
    }
    ~WithRawMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskRequest* /*request*/, ::clarifai::api::SingleTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(141, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTasks() {
      ::grpc::Service::MarkMethodRaw(142);
    }
    ~WithRawMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTasks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(142, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchTasks() {
      ::grpc::Service::MarkMethodRaw(143);
    }
    ~WithRawMethod_PatchTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchTasks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(143, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTasks() {
      ::grpc::Service::MarkMethodRaw(144);
    }
    ~WithRawMethod_DeleteTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteTasksRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTasks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(144, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostLabelOrders() {
      ::grpc::Service::MarkMethodRaw(145);
    }
    ~WithRawMethod_PostLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostLabelOrders(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(145, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLabelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLabelOrder() {
      ::grpc::Service::MarkMethodRaw(146);
    }
    ~WithRawMethod_GetLabelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelOrder(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetLabelOrderRequest* /*request*/, ::clarifai::api::SingleLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLabelOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(146, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListLabelOrders() {
      ::grpc::Service::MarkMethodRaw(147);
    }
    ~WithRawMethod_ListLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLabelOrders(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(147, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchLabelOrders() {
      ::grpc::Service::MarkMethodRaw(148);
    }
    ~WithRawMethod_PatchLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchLabelOrders(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(148, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteLabelOrders() {
      ::grpc::Service::MarkMethodRaw(149);
    }
    ~WithRawMethod_DeleteLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteLabelOrdersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLabelOrders(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(149, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostCollectors() {
      ::grpc::Service::MarkMethodRaw(150);
    }
    ~WithRawMethod_PostCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostCollectors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(150, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCollector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCollector() {
      ::grpc::Service::MarkMethodRaw(151);
    }
    ~WithRawMethod_GetCollector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollector(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetCollectorRequest* /*request*/, ::clarifai::api::SingleCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCollector(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(151, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListCollectors() {
      ::grpc::Service::MarkMethodRaw(152);
    }
    ~WithRawMethod_ListCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCollectors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(152, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PatchCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PatchCollectors() {
      ::grpc::Service::MarkMethodRaw(153);
    }
    ~WithRawMethod_PatchCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPatchCollectors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(153, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCollectors() {
      ::grpc::Service::MarkMethodRaw(154);
    }
    ~WithRawMethod_DeleteCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteCollectorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCollectors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(154, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostStatValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostStatValues() {
      ::grpc::Service::MarkMethodRaw(155);
    }
    ~WithRawMethod_PostStatValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostStatValues(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostStatValuesRequest* /*request*/, ::clarifai::api::MultiStatValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostStatValues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(155, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostStatValuesAggregate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostStatValuesAggregate() {
      ::grpc::Service::MarkMethodRaw(156);
    }
    ~WithRawMethod_PostStatValuesAggregate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostStatValuesAggregate(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostStatValuesAggregateRequest* /*request*/, ::clarifai::api::MultiStatValueAggregateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostStatValuesAggregate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(156, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostTrendingMetricsView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostTrendingMetricsView() {
      ::grpc::Service::MarkMethodRaw(157);
    }
    ~WithRawMethod_PostTrendingMetricsView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTrendingMetricsView(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostTrendingMetricsViewRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostTrendingMetricsView(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(157, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTrendingMetricsViews : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTrendingMetricsViews() {
      ::grpc::Service::MarkMethodRaw(158);
    }
    ~WithRawMethod_ListTrendingMetricsViews() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTrendingMetricsViews(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListTrendingMetricsViewsRequest* /*request*/, ::clarifai::api::MultiTrendingMetricsViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTrendingMetricsViews(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(158, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostBulkOperations() {
      ::grpc::Service::MarkMethodRaw(159);
    }
    ~WithRawMethod_PostBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostBulkOperations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(159, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListBulkOperations() {
      ::grpc::Service::MarkMethodRaw(160);
    }
    ~WithRawMethod_ListBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListBulkOperations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(160, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBulkOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBulkOperation() {
      ::grpc::Service::MarkMethodRaw(161);
    }
    ~WithRawMethod_GetBulkOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBulkOperation(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetBulkOperationRequest* /*request*/, ::clarifai::api::SingleBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBulkOperation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(161, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelBulkOperations() {
      ::grpc::Service::MarkMethodRaw(162);
    }
    ~WithRawMethod_CancelBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::CancelBulkOperationRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelBulkOperations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(162, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteBulkOperations() {
      ::grpc::Service::MarkMethodRaw(163);
    }
    ~WithRawMethod_DeleteBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteBulkOperationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteBulkOperations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(163, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDatasetInputsSearchAddJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDatasetInputsSearchAddJob() {
      ::grpc::Service::MarkMethodRaw(164);
    }
    ~WithRawMethod_GetDatasetInputsSearchAddJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetInputsSearchAddJob(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* /*request*/, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDatasetInputsSearchAddJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(164, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListConceptRelations() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListConceptRelations(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListConceptRelations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostConceptRelations() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostConceptRelations(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostConceptRelations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteConceptRelations() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteConceptRelations(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteConceptRelationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteConceptRelations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetConceptCounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetConceptCounts() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConceptCounts(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetConceptCounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConceptCounts(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptCountsRequest* /*request*/, ::clarifai::api::MultiConceptCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConceptCounts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetConcept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetConcept() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConcept(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetConcept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConcept(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptRequest* /*request*/, ::clarifai::api::SingleConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConcept(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListConcepts() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListConcepts(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListConcepts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostConceptsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostConceptsSearches() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostConceptsSearches(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostConceptsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptsSearchesRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostConceptsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostConcepts() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostConcepts(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostConcepts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchConcepts() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchConcepts(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchConcepts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetConceptLanguage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetConceptLanguage() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConceptLanguage(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetConceptLanguage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConceptLanguage(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptLanguageRequest* /*request*/, ::clarifai::api::SingleConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConceptLanguage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListConceptLanguages() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListConceptLanguages(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListConceptLanguages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostConceptLanguages() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostConceptLanguages(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostConceptLanguages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchConceptLanguages() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchConceptLanguages(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchConceptLanguages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListKnowledgeGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListKnowledgeGraphs() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListKnowledgeGraphs(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListKnowledgeGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKnowledgeGraphs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListKnowledgeGraphs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostKnowledgeGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostKnowledgeGraphs() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostKnowledgeGraphs(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostKnowledgeGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostKnowledgeGraphs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostKnowledgeGraphs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostConceptMappingJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostConceptMappingJobs() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostConceptMappingJobs(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostConceptMappingJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostConceptMappingJobs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptMappingJobsRequest* /*request*/, ::clarifai::api::MultiConceptMappingJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostConceptMappingJobs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAnnotation() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAnnotation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotation(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationRequest* /*request*/, ::clarifai::api::SingleAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAnnotation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAnnotations() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAnnotations(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAnnotations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostAnnotations() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostAnnotations(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostAnnotations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchAnnotations() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchAnnotations(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchAnnotations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchAnnotationsStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchAnnotationsStatus() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchAnnotationsStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchAnnotationsStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationsStatus(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsStatusRequest* /*request*/, ::clarifai::api::PatchAnnotationsStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchAnnotationsStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteAnnotation() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAnnotation(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotation(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAnnotation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteAnnotations() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAnnotations(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAnnotations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchAnnotationsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchAnnotationsSearches() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchAnnotationsSearches(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchAnnotationsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchAnnotationsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostAnnotationsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostAnnotationsSearches() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostAnnotationsSearches(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostAnnotationsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostAnnotationsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInputCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInputCount() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInputCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInputCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputCountRequest* /*request*/, ::clarifai::api::SingleInputCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInputCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamInputs() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StreamInputs(context, request, response); }));
    }
    ~WithRawCallbackMethod_StreamInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::StreamInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StreamInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInputSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInputSamples() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInputSamples(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInputSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInputSamples(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputSamplesRequest* /*request*/, ::clarifai::api::MultiInputAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInputSamples(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInput() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInput(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputRequest* /*request*/, ::clarifai::api::SingleInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInput(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListInputs() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListInputs(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostInputs() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostInputs(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchInputs() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchInputs(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteInput() {
      ::grpc::Service::MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteInput(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteInputRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteInput(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteInputs() {
      ::grpc::Service::MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteInputs(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchInputsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchInputsSearches() {
      ::grpc::Service::MarkMethodRawCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchInputsSearches(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchInputsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchInputsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchInputsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostInputsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostInputsSearches() {
      ::grpc::Service::MarkMethodRawCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostInputsSearches(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostInputsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostInputsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostInputsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostModelOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostModelOutputs() {
      ::grpc::Service::MarkMethodRawCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostModelOutputs(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostModelOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelOutputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelOutputsRequest* /*request*/, ::clarifai::api::MultiOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModelOutputs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListDatasets() {
      ::grpc::Service::MarkMethodRawCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDatasets(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDatasets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDataset() {
      ::grpc::Service::MarkMethodRawCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDataset(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetRequest* /*request*/, ::clarifai::api::SingleDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDataset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostDatasets() {
      ::grpc::Service::MarkMethodRawCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostDatasets(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostDatasets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchDatasets() {
      ::grpc::Service::MarkMethodRawCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchDatasets(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchDatasets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteDatasets() {
      ::grpc::Service::MarkMethodRawCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDatasets(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDatasets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListDatasetInputs() {
      ::grpc::Service::MarkMethodRawCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDatasetInputs(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDatasetInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDatasetInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDatasetInput() {
      ::grpc::Service::MarkMethodRawCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDatasetInput(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDatasetInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetInputRequest* /*request*/, ::clarifai::api::SingleDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDatasetInput(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostDatasetInputs() {
      ::grpc::Service::MarkMethodRawCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostDatasetInputs(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostDatasetInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteDatasetInputs() {
      ::grpc::Service::MarkMethodRawCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDatasetInputs(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDatasetInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListDatasetVersions() {
      ::grpc::Service::MarkMethodRawCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDatasetVersions(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDatasetVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDatasetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDatasetVersion() {
      ::grpc::Service::MarkMethodRawCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDatasetVersion(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDatasetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetVersionRequest* /*request*/, ::clarifai::api::SingleDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDatasetVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListDatasetVersionMetricsGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListDatasetVersionMetricsGroups() {
      ::grpc::Service::MarkMethodRawCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDatasetVersionMetricsGroups(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListDatasetVersionMetricsGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDatasetVersionMetricsGroups(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDatasetVersionMetricsGroups(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostDatasetVersions() {
      ::grpc::Service::MarkMethodRawCallback(49,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostDatasetVersions(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostDatasetVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchDatasetVersions() {
      ::grpc::Service::MarkMethodRawCallback(50,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchDatasetVersions(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchDatasetVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteDatasetVersions() {
      ::grpc::Service::MarkMethodRawCallback(51,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDatasetVersions(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDatasetVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelType() {
      ::grpc::Service::MarkMethodRawCallback(52,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelType(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelType(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelTypeRequest* /*request*/, ::clarifai::api::SingleModelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListOpenSourceLicenses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListOpenSourceLicenses() {
      ::grpc::Service::MarkMethodRawCallback(53,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListOpenSourceLicenses(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListOpenSourceLicenses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOpenSourceLicenses(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListOpenSourceLicensesRequest* /*request*/, ::clarifai::api::ListOpenSourceLicensesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListOpenSourceLicenses(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListModelTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListModelTypes() {
      ::grpc::Service::MarkMethodRawCallback(54,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListModelTypes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListModelTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelTypes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelTypesRequest* /*request*/, ::clarifai::api::MultiModelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModelTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModel() {
      ::grpc::Service::MarkMethodRawCallback(55,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModel(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelOutputInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelOutputInfo() {
      ::grpc::Service::MarkMethodRawCallback(56,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelOutputInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelOutputInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelOutputInfo(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelOutputInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListModels() {
      ::grpc::Service::MarkMethodRawCallback(57,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostModelsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostModelsSearches() {
      ::grpc::Service::MarkMethodRawCallback(58,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostModelsSearches(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostModelsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelsSearchesRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModelsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostModels() {
      ::grpc::Service::MarkMethodRawCallback(59,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchModels() {
      ::grpc::Service::MarkMethodRawCallback(60,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchModelIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchModelIds() {
      ::grpc::Service::MarkMethodRawCallback(61,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchModelIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchModelIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelIds(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelIdsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModelIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteModel() {
      ::grpc::Service::MarkMethodRawCallback(62,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteModel(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteModel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteModels() {
      ::grpc::Service::MarkMethodRawCallback(63,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchModelToolkits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchModelToolkits() {
      ::grpc::Service::MarkMethodRawCallback(64,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchModelToolkits(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchModelToolkits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelToolkits(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelToolkitsRequest* /*request*/, ::clarifai::api::MultiModelToolkitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModelToolkits(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchModelUseCases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchModelUseCases() {
      ::grpc::Service::MarkMethodRawCallback(65,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchModelUseCases(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchModelUseCases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelUseCases(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelUseCasesRequest* /*request*/, ::clarifai::api::MultiModelUseCaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModelUseCases(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchModelLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchModelLanguages() {
      ::grpc::Service::MarkMethodRawCallback(66,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchModelLanguages(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchModelLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelLanguagesRequest* /*request*/, ::clarifai::api::MultiModelLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModelLanguages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListModelInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListModelInputs() {
      ::grpc::Service::MarkMethodRawCallback(67,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListModelInputs(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListModelInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModelInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelVersion() {
      ::grpc::Service::MarkMethodRawCallback(68,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelVersion(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListModelVersions() {
      ::grpc::Service::MarkMethodRawCallback(69,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListModelVersions(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModelVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostWorkflowVersionsUnPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostWorkflowVersionsUnPublish() {
      ::grpc::Service::MarkMethodRawCallback(70,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostWorkflowVersionsUnPublish(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostWorkflowVersionsUnPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowVersionsUnPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostWorkflowVersionsUnPublish(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostWorkflowVersionsPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostWorkflowVersionsPublish() {
      ::grpc::Service::MarkMethodRawCallback(71,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostWorkflowVersionsPublish(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostWorkflowVersionsPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowVersionsPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostWorkflowVersionsPublish(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostModelVersionsPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostModelVersionsPublish() {
      ::grpc::Service::MarkMethodRawCallback(72,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostModelVersionsPublish(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostModelVersionsPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionsPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModelVersionsPublish(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostModelVersionsUnPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostModelVersionsUnPublish() {
      ::grpc::Service::MarkMethodRawCallback(73,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostModelVersionsUnPublish(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostModelVersionsUnPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionsUnPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModelVersionsUnPublish(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostModelVersions() {
      ::grpc::Service::MarkMethodRawCallback(74,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostModelVersions(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModelVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchModelVersions() {
      ::grpc::Service::MarkMethodRawCallback(75,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchModelVersions(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchModelVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteModelVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteModelVersion() {
      ::grpc::Service::MarkMethodRawCallback(76,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteModelVersion(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteModelVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteModelVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelVersionRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteModelVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelVersionMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelVersionMetrics() {
      ::grpc::Service::MarkMethodRawCallback(77,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelVersionMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelVersionMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersionMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelVersionMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostModelVersionMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostModelVersionMetrics() {
      ::grpc::Service::MarkMethodRawCallback(78,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostModelVersionMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostModelVersionMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostModelVersionMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostModelVersionMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListModelReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListModelReferences() {
      ::grpc::Service::MarkMethodRawCallback(79,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListModelReferences(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListModelReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelReferences(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelReferencesRequest* /*request*/, ::clarifai::api::MultiModelReferenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModelReferences(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelVersionInputExample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelVersionInputExample() {
      ::grpc::Service::MarkMethodRawCallback(80,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelVersionInputExample(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelVersionInputExample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelVersionInputExample(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionInputExampleRequest* /*request*/, ::clarifai::api::SingleModelVersionInputExampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelVersionInputExample(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListModelVersionInputExamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListModelVersionInputExamples() {
      ::grpc::Service::MarkMethodRawCallback(81,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListModelVersionInputExamples(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListModelVersionInputExamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListModelVersionInputExamples(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelVersionInputExamplesRequest* /*request*/, ::clarifai::api::MultiModelVersionInputExampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListModelVersionInputExamples(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWorkflow() {
      ::grpc::Service::MarkMethodRawCallback(82,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWorkflow(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflow(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetWorkflowRequest* /*request*/, ::clarifai::api::SingleWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkflow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListWorkflows() {
      ::grpc::Service::MarkMethodRawCallback(83,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListWorkflows(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListWorkflows(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostWorkflows() {
      ::grpc::Service::MarkMethodRawCallback(84,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostWorkflows(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostWorkflows(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchWorkflows() {
      ::grpc::Service::MarkMethodRawCallback(85,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchWorkflows(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchWorkflows(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteWorkflow() {
      ::grpc::Service::MarkMethodRawCallback(86,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteWorkflow(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflow(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteWorkflow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteWorkflows() {
      ::grpc::Service::MarkMethodRawCallback(87,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteWorkflows(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteWorkflows(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostWorkflowResults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostWorkflowResults() {
      ::grpc::Service::MarkMethodRawCallback(88,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostWorkflowResults(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostWorkflowResults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowResults(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsRequest* /*request*/, ::clarifai::api::PostWorkflowResultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostWorkflowResults(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostWorkflowResultsSimilarity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostWorkflowResultsSimilarity() {
      ::grpc::Service::MarkMethodRawCallback(89,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostWorkflowResultsSimilarity(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostWorkflowResultsSimilarity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostWorkflowResultsSimilarity(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* /*request*/, ::clarifai::api::PostWorkflowResultsSimilarityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostWorkflowResultsSimilarity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListWorkflowVersions() {
      ::grpc::Service::MarkMethodRawCallback(90,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListWorkflowVersions(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListWorkflowVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWorkflowVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWorkflowVersion() {
      ::grpc::Service::MarkMethodRawCallback(91,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWorkflowVersion(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWorkflowVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflowVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetWorkflowVersionRequest* /*request*/, ::clarifai::api::SingleWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkflowVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteWorkflowVersions() {
      ::grpc::Service::MarkMethodRawCallback(92,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteWorkflowVersions(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteWorkflowVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchWorkflowVersions() {
      ::grpc::Service::MarkMethodRawCallback(93,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchWorkflowVersions(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchWorkflowVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetKey() {
      ::grpc::Service::MarkMethodRawCallback(94,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKey(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetKeyRequest* /*request*/, ::clarifai::api::SingleKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListKeys() {
      ::grpc::Service::MarkMethodRawCallback(95,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListKeys(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAppKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAppKeys() {
      ::grpc::Service::MarkMethodRawCallback(96,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAppKeys(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAppKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAppKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAppKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteKey() {
      ::grpc::Service::MarkMethodRawCallback(97,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteKey(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteKeyRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostKeys() {
      ::grpc::Service::MarkMethodRawCallback(98,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostKeys(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchKeys() {
      ::grpc::Service::MarkMethodRawCallback(99,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchKeys(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MyScopes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MyScopes() {
      ::grpc::Service::MarkMethodRawCallback(100,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MyScopes(context, request, response); }));
    }
    ~WithRawCallbackMethod_MyScopes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopes(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesRequest* /*request*/, ::clarifai::api::MultiScopeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MyScopes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MyScopesUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MyScopesUser() {
      ::grpc::Service::MarkMethodRawCallback(101,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MyScopesUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_MyScopesUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopesUser(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesUserRequest* /*request*/, ::clarifai::api::MultiScopeUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MyScopesUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MyScopesRoot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MyScopesRoot() {
      ::grpc::Service::MarkMethodRawCallback(102,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MyScopesRoot(context, request, response); }));
    }
    ~WithRawCallbackMethod_MyScopesRoot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyScopesRoot(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesRootRequest* /*request*/, ::clarifai::api::MultiScopeRootResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MyScopesRoot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListScopes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListScopes() {
      ::grpc::Service::MarkMethodRawCallback(103,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListScopes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListScopes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScopes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListScopesRequest* /*request*/, ::clarifai::api::MultiScopeDepsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListScopes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetApp() {
      ::grpc::Service::MarkMethodRawCallback(104,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetApp(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetApp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListApps() {
      ::grpc::Service::MarkMethodRawCallback(105,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListApps(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListApps(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteApp() {
      ::grpc::Service::MarkMethodRawCallback(106,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteApp(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAppRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteApp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostApps() {
      ::grpc::Service::MarkMethodRawCallback(107,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostApps(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostApps(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchApps() {
      ::grpc::Service::MarkMethodRawCallback(108,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchApps(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchApps(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchApp() {
      ::grpc::Service::MarkMethodRawCallback(109,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchApp(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchApp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchAppsIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchAppsIds() {
      ::grpc::Service::MarkMethodRawCallback(110,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchAppsIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchAppsIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAppsIds(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppsIdsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchAppsIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostAppsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostAppsSearches() {
      ::grpc::Service::MarkMethodRawCallback(111,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostAppsSearches(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostAppsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAppsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppsSearchesRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostAppsSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostValidatePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostValidatePassword() {
      ::grpc::Service::MarkMethodRawCallback(112,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostValidatePassword(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostValidatePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostValidatePassword(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostValidatePasswordRequest* /*request*/, ::clarifai::api::SinglePasswordValidationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostValidatePassword(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSearch() {
      ::grpc::Service::MarkMethodRawCallback(113,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSearch(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSearch(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetSearchRequest* /*request*/, ::clarifai::api::SingleSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSearch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListSearches() {
      ::grpc::Service::MarkMethodRawCallback(114,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListSearches(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchSearches() {
      ::grpc::Service::MarkMethodRawCallback(115,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchSearches(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostSearches() {
      ::grpc::Service::MarkMethodRawCallback(116,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostSearches(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostSearches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostSearchesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostSearchesByID() {
      ::grpc::Service::MarkMethodRawCallback(117,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostSearchesByID(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostSearchesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostSearchesByID(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostSearchesByIDRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostSearchesByID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodRawCallback(118,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostAnnotationSearchMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostAnnotationSearchMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodRawCallback(119,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAnnotationSearchMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAnnotationSearchMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodRawCallback(120,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAnnotationSearchMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAnnotationSearchMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodRawCallback(121,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAnnotationSearchMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAnnotationSearchMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSearch() {
      ::grpc::Service::MarkMethodRawCallback(122,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSearch(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSearch(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteSearchRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSearch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAnnotationFilters() {
      ::grpc::Service::MarkMethodRawCallback(123,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAnnotationFilters(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAnnotationFilters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAnnotationFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAnnotationFilter() {
      ::grpc::Service::MarkMethodRawCallback(124,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAnnotationFilter(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAnnotationFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnnotationFilter(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationFilterRequest* /*request*/, ::clarifai::api::SingleAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAnnotationFilter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostAnnotationFilters() {
      ::grpc::Service::MarkMethodRawCallback(125,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostAnnotationFilters(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostAnnotationFilters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchAnnotationFilters() {
      ::grpc::Service::MarkMethodRawCallback(126,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchAnnotationFilters(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchAnnotationFilters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteAnnotationFilters() {
      ::grpc::Service::MarkMethodRawCallback(127,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAnnotationFilters(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationFiltersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAnnotationFilters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListStatusCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListStatusCodes() {
      ::grpc::Service::MarkMethodRawCallback(128,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListStatusCodes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListStatusCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListStatusCodes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListStatusCodesRequest* /*request*/, ::clarifai::api::MultiStatusCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListStatusCodes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStatusCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStatusCode() {
      ::grpc::Service::MarkMethodRawCallback(129,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStatusCode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStatusCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatusCode(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetStatusCodeRequest* /*request*/, ::clarifai::api::SingleStatusCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStatusCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListCollaborators() {
      ::grpc::Service::MarkMethodRawCallback(130,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListCollaborators(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCollaborators(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostCollaborators() {
      ::grpc::Service::MarkMethodRawCallback(131,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostCollaborators(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostCollaborators(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchCollaborators() {
      ::grpc::Service::MarkMethodRawCallback(132,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchCollaborators(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchCollaborators(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteCollaborators() {
      ::grpc::Service::MarkMethodRawCallback(133,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCollaborators(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteCollaboratorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCollaborators(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListCollaborations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListCollaborations() {
      ::grpc::Service::MarkMethodRawCallback(134,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListCollaborations(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListCollaborations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollaborations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollaborationsRequest* /*request*/, ::clarifai::api::MultiCollaborationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCollaborations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostAppDuplications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostAppDuplications() {
      ::grpc::Service::MarkMethodRawCallback(135,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostAppDuplications(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostAppDuplications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostAppDuplications(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostAppDuplications(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAppDuplications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAppDuplications() {
      ::grpc::Service::MarkMethodRawCallback(136,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAppDuplications(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAppDuplications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAppDuplications(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAppDuplications(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAppDuplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAppDuplication() {
      ::grpc::Service::MarkMethodRawCallback(137,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAppDuplication(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAppDuplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAppDuplication(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAppDuplicationRequest* /*request*/, ::clarifai::api::SingleAppDuplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAppDuplication(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostTasks() {
      ::grpc::Service::MarkMethodRawCallback(138,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostTasks(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTaskAnnotationCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTaskAnnotationCount() {
      ::grpc::Service::MarkMethodRawCallback(139,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTaskAnnotationCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTaskAnnotationCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskAnnotationCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTaskAnnotationCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTaskInputCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTaskInputCount() {
      ::grpc::Service::MarkMethodRawCallback(140,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTaskInputCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTaskInputCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskInputCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTaskInputCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTask() {
      ::grpc::Service::MarkMethodRawCallback(141,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskRequest* /*request*/, ::clarifai::api::SingleTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListTasks() {
      ::grpc::Service::MarkMethodRawCallback(142,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTasks(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchTasks() {
      ::grpc::Service::MarkMethodRawCallback(143,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchTasks(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteTasks() {
      ::grpc::Service::MarkMethodRawCallback(144,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTasks(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteTasksRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostLabelOrders() {
      ::grpc::Service::MarkMethodRawCallback(145,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostLabelOrders(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostLabelOrders(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLabelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLabelOrder() {
      ::grpc::Service::MarkMethodRawCallback(146,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLabelOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLabelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelOrder(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetLabelOrderRequest* /*request*/, ::clarifai::api::SingleLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLabelOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListLabelOrders() {
      ::grpc::Service::MarkMethodRawCallback(147,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListLabelOrders(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListLabelOrders(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchLabelOrders() {
      ::grpc::Service::MarkMethodRawCallback(148,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchLabelOrders(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchLabelOrders(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteLabelOrders() {
      ::grpc::Service::MarkMethodRawCallback(149,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteLabelOrders(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteLabelOrdersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteLabelOrders(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostCollectors() {
      ::grpc::Service::MarkMethodRawCallback(150,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostCollectors(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostCollectors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCollector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCollector() {
      ::grpc::Service::MarkMethodRawCallback(151,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCollector(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCollector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollector(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetCollectorRequest* /*request*/, ::clarifai::api::SingleCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCollector(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListCollectors() {
      ::grpc::Service::MarkMethodRawCallback(152,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListCollectors(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCollectors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PatchCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PatchCollectors() {
      ::grpc::Service::MarkMethodRawCallback(153,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PatchCollectors(context, request, response); }));
    }
    ~WithRawCallbackMethod_PatchCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PatchCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PatchCollectors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteCollectors() {
      ::grpc::Service::MarkMethodRawCallback(154,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCollectors(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteCollectorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCollectors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostStatValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostStatValues() {
      ::grpc::Service::MarkMethodRawCallback(155,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostStatValues(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostStatValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostStatValues(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostStatValuesRequest* /*request*/, ::clarifai::api::MultiStatValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostStatValues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostStatValuesAggregate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostStatValuesAggregate() {
      ::grpc::Service::MarkMethodRawCallback(156,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostStatValuesAggregate(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostStatValuesAggregate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostStatValuesAggregate(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostStatValuesAggregateRequest* /*request*/, ::clarifai::api::MultiStatValueAggregateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostStatValuesAggregate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostTrendingMetricsView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostTrendingMetricsView() {
      ::grpc::Service::MarkMethodRawCallback(157,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostTrendingMetricsView(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostTrendingMetricsView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTrendingMetricsView(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostTrendingMetricsViewRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostTrendingMetricsView(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListTrendingMetricsViews : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListTrendingMetricsViews() {
      ::grpc::Service::MarkMethodRawCallback(158,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTrendingMetricsViews(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListTrendingMetricsViews() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTrendingMetricsViews(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListTrendingMetricsViewsRequest* /*request*/, ::clarifai::api::MultiTrendingMetricsViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTrendingMetricsViews(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostBulkOperations() {
      ::grpc::Service::MarkMethodRawCallback(159,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostBulkOperations(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostBulkOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListBulkOperations() {
      ::grpc::Service::MarkMethodRawCallback(160,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListBulkOperations(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListBulkOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBulkOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBulkOperation() {
      ::grpc::Service::MarkMethodRawCallback(161,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBulkOperation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBulkOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBulkOperation(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetBulkOperationRequest* /*request*/, ::clarifai::api::SingleBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBulkOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelBulkOperations() {
      ::grpc::Service::MarkMethodRawCallback(162,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelBulkOperations(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::CancelBulkOperationRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelBulkOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteBulkOperations() {
      ::grpc::Service::MarkMethodRawCallback(163,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteBulkOperations(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteBulkOperationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteBulkOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDatasetInputsSearchAddJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDatasetInputsSearchAddJob() {
      ::grpc::Service::MarkMethodRawCallback(164,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDatasetInputsSearchAddJob(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDatasetInputsSearchAddJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDatasetInputsSearchAddJob(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* /*request*/, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDatasetInputsSearchAddJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListConceptRelations() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListConceptRelationsRequest, ::clarifai::api::MultiConceptRelationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListConceptRelationsRequest, ::clarifai::api::MultiConceptRelationResponse>* streamer) {
                       return this->StreamedListConceptRelations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListConceptRelations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListConceptRelationsRequest,::clarifai::api::MultiConceptRelationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostConceptRelations() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostConceptRelationsRequest, ::clarifai::api::MultiConceptRelationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostConceptRelationsRequest, ::clarifai::api::MultiConceptRelationResponse>* streamer) {
                       return this->StreamedPostConceptRelations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptRelationsRequest* /*request*/, ::clarifai::api::MultiConceptRelationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostConceptRelations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostConceptRelationsRequest,::clarifai::api::MultiConceptRelationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteConceptRelations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteConceptRelations() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteConceptRelationsRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteConceptRelationsRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteConceptRelations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteConceptRelations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteConceptRelations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteConceptRelationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteConceptRelations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteConceptRelationsRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConceptCounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConceptCounts() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetConceptCountsRequest, ::clarifai::api::MultiConceptCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetConceptCountsRequest, ::clarifai::api::MultiConceptCountResponse>* streamer) {
                       return this->StreamedGetConceptCounts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetConceptCounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConceptCounts(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptCountsRequest* /*request*/, ::clarifai::api::MultiConceptCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConceptCounts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetConceptCountsRequest,::clarifai::api::MultiConceptCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConcept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConcept() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetConceptRequest, ::clarifai::api::SingleConceptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetConceptRequest, ::clarifai::api::SingleConceptResponse>* streamer) {
                       return this->StreamedGetConcept(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetConcept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConcept(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptRequest* /*request*/, ::clarifai::api::SingleConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConcept(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetConceptRequest,::clarifai::api::SingleConceptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListConcepts() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListConceptsRequest, ::clarifai::api::MultiConceptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListConceptsRequest, ::clarifai::api::MultiConceptResponse>* streamer) {
                       return this->StreamedListConcepts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListConcepts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListConceptsRequest,::clarifai::api::MultiConceptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostConceptsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostConceptsSearches() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostConceptsSearchesRequest, ::clarifai::api::MultiConceptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostConceptsSearchesRequest, ::clarifai::api::MultiConceptResponse>* streamer) {
                       return this->StreamedPostConceptsSearches(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostConceptsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostConceptsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptsSearchesRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostConceptsSearches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostConceptsSearchesRequest,::clarifai::api::MultiConceptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostConcepts() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostConceptsRequest, ::clarifai::api::MultiConceptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostConceptsRequest, ::clarifai::api::MultiConceptResponse>* streamer) {
                       return this->StreamedPostConcepts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostConcepts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostConceptsRequest,::clarifai::api::MultiConceptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchConcepts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchConcepts() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchConceptsRequest, ::clarifai::api::MultiConceptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchConceptsRequest, ::clarifai::api::MultiConceptResponse>* streamer) {
                       return this->StreamedPatchConcepts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchConcepts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchConcepts(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchConceptsRequest* /*request*/, ::clarifai::api::MultiConceptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchConcepts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchConceptsRequest,::clarifai::api::MultiConceptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConceptLanguage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConceptLanguage() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetConceptLanguageRequest, ::clarifai::api::SingleConceptLanguageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetConceptLanguageRequest, ::clarifai::api::SingleConceptLanguageResponse>* streamer) {
                       return this->StreamedGetConceptLanguage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetConceptLanguage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConceptLanguage(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetConceptLanguageRequest* /*request*/, ::clarifai::api::SingleConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConceptLanguage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetConceptLanguageRequest,::clarifai::api::SingleConceptLanguageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListConceptLanguages() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>* streamer) {
                       return this->StreamedListConceptLanguages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListConceptLanguages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListConceptLanguagesRequest,::clarifai::api::MultiConceptLanguageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostConceptLanguages() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>* streamer) {
                       return this->StreamedPostConceptLanguages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostConceptLanguages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostConceptLanguagesRequest,::clarifai::api::MultiConceptLanguageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchConceptLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchConceptLanguages() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>* streamer) {
                       return this->StreamedPatchConceptLanguages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchConceptLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchConceptLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchConceptLanguagesRequest* /*request*/, ::clarifai::api::MultiConceptLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchConceptLanguages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchConceptLanguagesRequest,::clarifai::api::MultiConceptLanguageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListKnowledgeGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListKnowledgeGraphs() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListKnowledgeGraphsRequest, ::clarifai::api::MultiKnowledgeGraphResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListKnowledgeGraphsRequest, ::clarifai::api::MultiKnowledgeGraphResponse>* streamer) {
                       return this->StreamedListKnowledgeGraphs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListKnowledgeGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListKnowledgeGraphs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListKnowledgeGraphs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListKnowledgeGraphsRequest,::clarifai::api::MultiKnowledgeGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostKnowledgeGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostKnowledgeGraphs() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostKnowledgeGraphsRequest, ::clarifai::api::MultiKnowledgeGraphResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostKnowledgeGraphsRequest, ::clarifai::api::MultiKnowledgeGraphResponse>* streamer) {
                       return this->StreamedPostKnowledgeGraphs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostKnowledgeGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostKnowledgeGraphs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostKnowledgeGraphsRequest* /*request*/, ::clarifai::api::MultiKnowledgeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostKnowledgeGraphs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostKnowledgeGraphsRequest,::clarifai::api::MultiKnowledgeGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostConceptMappingJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostConceptMappingJobs() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostConceptMappingJobsRequest, ::clarifai::api::MultiConceptMappingJobResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostConceptMappingJobsRequest, ::clarifai::api::MultiConceptMappingJobResponse>* streamer) {
                       return this->StreamedPostConceptMappingJobs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostConceptMappingJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostConceptMappingJobs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostConceptMappingJobsRequest* /*request*/, ::clarifai::api::MultiConceptMappingJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostConceptMappingJobs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostConceptMappingJobsRequest,::clarifai::api::MultiConceptMappingJobResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAnnotation() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetAnnotationRequest, ::clarifai::api::SingleAnnotationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetAnnotationRequest, ::clarifai::api::SingleAnnotationResponse>* streamer) {
                       return this->StreamedGetAnnotation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAnnotation(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationRequest* /*request*/, ::clarifai::api::SingleAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAnnotation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetAnnotationRequest,::clarifai::api::SingleAnnotationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAnnotations() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>* streamer) {
                       return this->StreamedListAnnotations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAnnotations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListAnnotationsRequest,::clarifai::api::MultiAnnotationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostAnnotations() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>* streamer) {
                       return this->StreamedPostAnnotations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostAnnotations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostAnnotationsRequest,::clarifai::api::MultiAnnotationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchAnnotations() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>* streamer) {
                       return this->StreamedPatchAnnotations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsRequest* /*request*/, ::clarifai::api::MultiAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchAnnotations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchAnnotationsRequest,::clarifai::api::MultiAnnotationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchAnnotationsStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchAnnotationsStatus() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchAnnotationsStatusRequest, ::clarifai::api::PatchAnnotationsStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchAnnotationsStatusRequest, ::clarifai::api::PatchAnnotationsStatusResponse>* streamer) {
                       return this->StreamedPatchAnnotationsStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchAnnotationsStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchAnnotationsStatus(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsStatusRequest* /*request*/, ::clarifai::api::PatchAnnotationsStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchAnnotationsStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchAnnotationsStatusRequest,::clarifai::api::PatchAnnotationsStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAnnotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAnnotation() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteAnnotationRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteAnnotationRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteAnnotation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAnnotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAnnotation(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAnnotation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteAnnotationRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAnnotations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAnnotations() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteAnnotationsRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteAnnotationsRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteAnnotations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAnnotations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAnnotations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAnnotations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteAnnotationsRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchAnnotationsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchAnnotationsSearches() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchAnnotationsSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchAnnotationsSearchesRequest, ::clarifai::api::MultiSearchResponse>* streamer) {
                       return this->StreamedPatchAnnotationsSearches(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchAnnotationsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchAnnotationsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchAnnotationsSearches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchAnnotationsSearchesRequest,::clarifai::api::MultiSearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostAnnotationsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostAnnotationsSearches() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostAnnotationsSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostAnnotationsSearchesRequest, ::clarifai::api::MultiSearchResponse>* streamer) {
                       return this->StreamedPostAnnotationsSearches(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostAnnotationsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostAnnotationsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostAnnotationsSearches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostAnnotationsSearchesRequest,::clarifai::api::MultiSearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInputCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInputCount() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetInputCountRequest, ::clarifai::api::SingleInputCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetInputCountRequest, ::clarifai::api::SingleInputCountResponse>* streamer) {
                       return this->StreamedGetInputCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInputCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInputCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputCountRequest* /*request*/, ::clarifai::api::SingleInputCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInputCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetInputCountRequest,::clarifai::api::SingleInputCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StreamInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StreamInputs() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::StreamInputsRequest, ::clarifai::api::MultiInputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::StreamInputsRequest, ::clarifai::api::MultiInputResponse>* streamer) {
                       return this->StreamedStreamInputs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StreamInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::StreamInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStreamInputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::StreamInputsRequest,::clarifai::api::MultiInputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInputSamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInputSamples() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetInputSamplesRequest, ::clarifai::api::MultiInputAnnotationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetInputSamplesRequest, ::clarifai::api::MultiInputAnnotationResponse>* streamer) {
                       return this->StreamedGetInputSamples(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInputSamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInputSamples(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputSamplesRequest* /*request*/, ::clarifai::api::MultiInputAnnotationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInputSamples(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetInputSamplesRequest,::clarifai::api::MultiInputAnnotationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInput() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetInputRequest, ::clarifai::api::SingleInputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetInputRequest, ::clarifai::api::SingleInputResponse>* streamer) {
                       return this->StreamedGetInput(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetInputRequest* /*request*/, ::clarifai::api::SingleInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetInputRequest,::clarifai::api::SingleInputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListInputs() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListInputsRequest, ::clarifai::api::MultiInputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListInputsRequest, ::clarifai::api::MultiInputResponse>* streamer) {
                       return this->StreamedListInputs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListInputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListInputsRequest,::clarifai::api::MultiInputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostInputs() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostInputsRequest, ::clarifai::api::MultiInputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostInputsRequest, ::clarifai::api::MultiInputResponse>* streamer) {
                       return this->StreamedPostInputs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostInputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostInputsRequest,::clarifai::api::MultiInputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchInputs() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchInputsRequest, ::clarifai::api::MultiInputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchInputsRequest, ::clarifai::api::MultiInputResponse>* streamer) {
                       return this->StreamedPatchInputs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchInputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchInputsRequest,::clarifai::api::MultiInputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteInput() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteInputRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteInputRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteInput(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteInputRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteInput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteInputRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteInputs() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteInputsRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteInputsRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteInputs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteInputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteInputsRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchInputsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchInputsSearches() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchInputsSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchInputsSearchesRequest, ::clarifai::api::MultiSearchResponse>* streamer) {
                       return this->StreamedPatchInputsSearches(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchInputsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchInputsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchInputsSearches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchInputsSearchesRequest,::clarifai::api::MultiSearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostInputsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostInputsSearches() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostInputsSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostInputsSearchesRequest, ::clarifai::api::MultiSearchResponse>* streamer) {
                       return this->StreamedPostInputsSearches(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostInputsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostInputsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostInputsSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostInputsSearches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostInputsSearchesRequest,::clarifai::api::MultiSearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostModelOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostModelOutputs() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostModelOutputsRequest, ::clarifai::api::MultiOutputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostModelOutputsRequest, ::clarifai::api::MultiOutputResponse>* streamer) {
                       return this->StreamedPostModelOutputs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostModelOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostModelOutputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelOutputsRequest* /*request*/, ::clarifai::api::MultiOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostModelOutputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostModelOutputsRequest,::clarifai::api::MultiOutputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDatasets() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListDatasetsRequest, ::clarifai::api::MultiDatasetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListDatasetsRequest, ::clarifai::api::MultiDatasetResponse>* streamer) {
                       return this->StreamedListDatasets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDatasets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListDatasetsRequest,::clarifai::api::MultiDatasetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDataset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDataset() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetDatasetRequest, ::clarifai::api::SingleDatasetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetDatasetRequest, ::clarifai::api::SingleDatasetResponse>* streamer) {
                       return this->StreamedGetDataset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDataset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDataset(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetRequest* /*request*/, ::clarifai::api::SingleDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDataset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetDatasetRequest,::clarifai::api::SingleDatasetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostDatasets() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostDatasetsRequest, ::clarifai::api::MultiDatasetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostDatasetsRequest, ::clarifai::api::MultiDatasetResponse>* streamer) {
                       return this->StreamedPostDatasets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostDatasets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostDatasetsRequest,::clarifai::api::MultiDatasetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchDatasets() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchDatasetsRequest, ::clarifai::api::MultiDatasetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchDatasetsRequest, ::clarifai::api::MultiDatasetResponse>* streamer) {
                       return this->StreamedPatchDatasets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchDatasetsRequest* /*request*/, ::clarifai::api::MultiDatasetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchDatasets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchDatasetsRequest,::clarifai::api::MultiDatasetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDatasets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDatasets() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteDatasetsRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteDatasetsRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteDatasets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDatasets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDatasets(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDatasets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteDatasetsRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDatasetInputs() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListDatasetInputsRequest, ::clarifai::api::MultiDatasetInputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListDatasetInputsRequest, ::clarifai::api::MultiDatasetInputResponse>* streamer) {
                       return this->StreamedListDatasetInputs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDatasetInputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListDatasetInputsRequest,::clarifai::api::MultiDatasetInputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDatasetInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDatasetInput() {
      ::grpc::Service::MarkMethodStreamed(43,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetDatasetInputRequest, ::clarifai::api::SingleDatasetInputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetDatasetInputRequest, ::clarifai::api::SingleDatasetInputResponse>* streamer) {
                       return this->StreamedGetDatasetInput(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDatasetInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDatasetInput(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetInputRequest* /*request*/, ::clarifai::api::SingleDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDatasetInput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetDatasetInputRequest,::clarifai::api::SingleDatasetInputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostDatasetInputs() {
      ::grpc::Service::MarkMethodStreamed(44,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostDatasetInputsRequest, ::clarifai::api::MultiDatasetInputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostDatasetInputsRequest, ::clarifai::api::MultiDatasetInputResponse>* streamer) {
                       return this->StreamedPostDatasetInputs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetInputsRequest* /*request*/, ::clarifai::api::MultiDatasetInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostDatasetInputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostDatasetInputsRequest,::clarifai::api::MultiDatasetInputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDatasetInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDatasetInputs() {
      ::grpc::Service::MarkMethodStreamed(45,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteDatasetInputsRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteDatasetInputsRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteDatasetInputs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDatasetInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDatasetInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetInputsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDatasetInputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteDatasetInputsRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDatasetVersions() {
      ::grpc::Service::MarkMethodStreamed(46,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>* streamer) {
                       return this->StreamedListDatasetVersions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDatasetVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListDatasetVersionsRequest,::clarifai::api::MultiDatasetVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDatasetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDatasetVersion() {
      ::grpc::Service::MarkMethodStreamed(47,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetDatasetVersionRequest, ::clarifai::api::SingleDatasetVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetDatasetVersionRequest, ::clarifai::api::SingleDatasetVersionResponse>* streamer) {
                       return this->StreamedGetDatasetVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDatasetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDatasetVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetVersionRequest* /*request*/, ::clarifai::api::SingleDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDatasetVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetDatasetVersionRequest,::clarifai::api::SingleDatasetVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDatasetVersionMetricsGroups : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDatasetVersionMetricsGroups() {
      ::grpc::Service::MarkMethodStreamed(48,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListDatasetVersionMetricsGroupsRequest, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListDatasetVersionMetricsGroupsRequest, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse>* streamer) {
                       return this->StreamedListDatasetVersionMetricsGroups(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDatasetVersionMetricsGroups() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDatasetVersionMetricsGroups(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDatasetVersionMetricsGroups(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListDatasetVersionMetricsGroupsRequest,::clarifai::api::MultiDatasetVersionMetricsGroupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostDatasetVersions() {
      ::grpc::Service::MarkMethodStreamed(49,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>* streamer) {
                       return this->StreamedPostDatasetVersions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostDatasetVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostDatasetVersionsRequest,::clarifai::api::MultiDatasetVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchDatasetVersions() {
      ::grpc::Service::MarkMethodStreamed(50,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchDatasetVersionsRequest, ::clarifai::api::MultiDatasetVersionResponse>* streamer) {
                       return this->StreamedPatchDatasetVersions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchDatasetVersionsRequest* /*request*/, ::clarifai::api::MultiDatasetVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchDatasetVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchDatasetVersionsRequest,::clarifai::api::MultiDatasetVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDatasetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDatasetVersions() {
      ::grpc::Service::MarkMethodStreamed(51,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteDatasetVersionsRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteDatasetVersionsRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteDatasetVersions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDatasetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDatasetVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteDatasetVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDatasetVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteDatasetVersionsRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelType() {
      ::grpc::Service::MarkMethodStreamed(52,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetModelTypeRequest, ::clarifai::api::SingleModelTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetModelTypeRequest, ::clarifai::api::SingleModelTypeResponse>* streamer) {
                       return this->StreamedGetModelType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelType(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelTypeRequest* /*request*/, ::clarifai::api::SingleModelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetModelTypeRequest,::clarifai::api::SingleModelTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListOpenSourceLicenses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListOpenSourceLicenses() {
      ::grpc::Service::MarkMethodStreamed(53,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListOpenSourceLicensesRequest, ::clarifai::api::ListOpenSourceLicensesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListOpenSourceLicensesRequest, ::clarifai::api::ListOpenSourceLicensesResponse>* streamer) {
                       return this->StreamedListOpenSourceLicenses(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListOpenSourceLicenses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListOpenSourceLicenses(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListOpenSourceLicensesRequest* /*request*/, ::clarifai::api::ListOpenSourceLicensesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListOpenSourceLicenses(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListOpenSourceLicensesRequest,::clarifai::api::ListOpenSourceLicensesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListModelTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListModelTypes() {
      ::grpc::Service::MarkMethodStreamed(54,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListModelTypesRequest, ::clarifai::api::MultiModelTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListModelTypesRequest, ::clarifai::api::MultiModelTypeResponse>* streamer) {
                       return this->StreamedListModelTypes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListModelTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListModelTypes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelTypesRequest* /*request*/, ::clarifai::api::MultiModelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListModelTypes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListModelTypesRequest,::clarifai::api::MultiModelTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModel() {
      ::grpc::Service::MarkMethodStreamed(55,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetModelRequest, ::clarifai::api::SingleModelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetModelRequest, ::clarifai::api::SingleModelResponse>* streamer) {
                       return this->StreamedGetModel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModel(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetModelRequest,::clarifai::api::SingleModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelOutputInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelOutputInfo() {
      ::grpc::Service::MarkMethodStreamed(56,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetModelRequest, ::clarifai::api::SingleModelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetModelRequest, ::clarifai::api::SingleModelResponse>* streamer) {
                       return this->StreamedGetModelOutputInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelOutputInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelOutputInfo(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelOutputInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetModelRequest,::clarifai::api::SingleModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListModels() {
      ::grpc::Service::MarkMethodStreamed(57,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListModelsRequest, ::clarifai::api::MultiModelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListModelsRequest, ::clarifai::api::MultiModelResponse>* streamer) {
                       return this->StreamedListModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListModelsRequest,::clarifai::api::MultiModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostModelsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostModelsSearches() {
      ::grpc::Service::MarkMethodStreamed(58,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostModelsSearchesRequest, ::clarifai::api::MultiModelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostModelsSearchesRequest, ::clarifai::api::MultiModelResponse>* streamer) {
                       return this->StreamedPostModelsSearches(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostModelsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostModelsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelsSearchesRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostModelsSearches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostModelsSearchesRequest,::clarifai::api::MultiModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostModels() {
      ::grpc::Service::MarkMethodStreamed(59,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostModelsRequest, ::clarifai::api::SingleModelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostModelsRequest, ::clarifai::api::SingleModelResponse>* streamer) {
                       return this->StreamedPostModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostModelsRequest,::clarifai::api::SingleModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchModels() {
      ::grpc::Service::MarkMethodStreamed(60,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchModelsRequest, ::clarifai::api::MultiModelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchModelsRequest, ::clarifai::api::MultiModelResponse>* streamer) {
                       return this->StreamedPatchModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchModelsRequest,::clarifai::api::MultiModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchModelIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchModelIds() {
      ::grpc::Service::MarkMethodStreamed(61,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchModelIdsRequest, ::clarifai::api::MultiModelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchModelIdsRequest, ::clarifai::api::MultiModelResponse>* streamer) {
                       return this->StreamedPatchModelIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchModelIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchModelIds(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelIdsRequest* /*request*/, ::clarifai::api::MultiModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchModelIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchModelIdsRequest,::clarifai::api::MultiModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteModel() {
      ::grpc::Service::MarkMethodStreamed(62,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteModelRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteModelRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteModel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteModel(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteModelRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteModels() {
      ::grpc::Service::MarkMethodStreamed(63,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteModelsRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteModelsRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteModels(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteModelsRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchModelToolkits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchModelToolkits() {
      ::grpc::Service::MarkMethodStreamed(64,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchModelToolkitsRequest, ::clarifai::api::MultiModelToolkitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchModelToolkitsRequest, ::clarifai::api::MultiModelToolkitResponse>* streamer) {
                       return this->StreamedPatchModelToolkits(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchModelToolkits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchModelToolkits(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelToolkitsRequest* /*request*/, ::clarifai::api::MultiModelToolkitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchModelToolkits(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchModelToolkitsRequest,::clarifai::api::MultiModelToolkitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchModelUseCases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchModelUseCases() {
      ::grpc::Service::MarkMethodStreamed(65,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchModelUseCasesRequest, ::clarifai::api::MultiModelUseCaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchModelUseCasesRequest, ::clarifai::api::MultiModelUseCaseResponse>* streamer) {
                       return this->StreamedPatchModelUseCases(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchModelUseCases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchModelUseCases(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelUseCasesRequest* /*request*/, ::clarifai::api::MultiModelUseCaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchModelUseCases(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchModelUseCasesRequest,::clarifai::api::MultiModelUseCaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchModelLanguages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchModelLanguages() {
      ::grpc::Service::MarkMethodStreamed(66,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchModelLanguagesRequest, ::clarifai::api::MultiModelLanguageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchModelLanguagesRequest, ::clarifai::api::MultiModelLanguageResponse>* streamer) {
                       return this->StreamedPatchModelLanguages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchModelLanguages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchModelLanguages(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelLanguagesRequest* /*request*/, ::clarifai::api::MultiModelLanguageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchModelLanguages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchModelLanguagesRequest,::clarifai::api::MultiModelLanguageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListModelInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListModelInputs() {
      ::grpc::Service::MarkMethodStreamed(67,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListModelInputsRequest, ::clarifai::api::MultiInputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListModelInputsRequest, ::clarifai::api::MultiInputResponse>* streamer) {
                       return this->StreamedListModelInputs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListModelInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListModelInputs(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelInputsRequest* /*request*/, ::clarifai::api::MultiInputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListModelInputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListModelInputsRequest,::clarifai::api::MultiInputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelVersion() {
      ::grpc::Service::MarkMethodStreamed(68,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetModelVersionRequest, ::clarifai::api::SingleModelVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetModelVersionRequest, ::clarifai::api::SingleModelVersionResponse>* streamer) {
                       return this->StreamedGetModelVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetModelVersionRequest,::clarifai::api::SingleModelVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListModelVersions() {
      ::grpc::Service::MarkMethodStreamed(69,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListModelVersionsRequest, ::clarifai::api::MultiModelVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListModelVersionsRequest, ::clarifai::api::MultiModelVersionResponse>* streamer) {
                       return this->StreamedListModelVersions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListModelVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListModelVersionsRequest,::clarifai::api::MultiModelVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostWorkflowVersionsUnPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostWorkflowVersionsUnPublish() {
      ::grpc::Service::MarkMethodStreamed(70,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostWorkflowVersionsUnPublishRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostWorkflowVersionsUnPublishRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedPostWorkflowVersionsUnPublish(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostWorkflowVersionsUnPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostWorkflowVersionsUnPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostWorkflowVersionsUnPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostWorkflowVersionsUnPublishRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostWorkflowVersionsPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostWorkflowVersionsPublish() {
      ::grpc::Service::MarkMethodStreamed(71,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostWorkflowVersionsPublishRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostWorkflowVersionsPublishRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedPostWorkflowVersionsPublish(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostWorkflowVersionsPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostWorkflowVersionsPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostWorkflowVersionsPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostWorkflowVersionsPublishRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostModelVersionsPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostModelVersionsPublish() {
      ::grpc::Service::MarkMethodStreamed(72,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostModelVersionsPublishRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostModelVersionsPublishRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedPostModelVersionsPublish(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostModelVersionsPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostModelVersionsPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostModelVersionsPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostModelVersionsPublishRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostModelVersionsUnPublish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostModelVersionsUnPublish() {
      ::grpc::Service::MarkMethodStreamed(73,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostModelVersionsUnPublishRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostModelVersionsUnPublishRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedPostModelVersionsUnPublish(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostModelVersionsUnPublish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostModelVersionsUnPublish(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsUnPublishRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostModelVersionsUnPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostModelVersionsUnPublishRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostModelVersions() {
      ::grpc::Service::MarkMethodStreamed(74,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostModelVersionsRequest, ::clarifai::api::SingleModelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostModelVersionsRequest, ::clarifai::api::SingleModelResponse>* streamer) {
                       return this->StreamedPostModelVersions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionsRequest* /*request*/, ::clarifai::api::SingleModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostModelVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostModelVersionsRequest,::clarifai::api::SingleModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchModelVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchModelVersions() {
      ::grpc::Service::MarkMethodStreamed(75,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchModelVersionsRequest, ::clarifai::api::MultiModelVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchModelVersionsRequest, ::clarifai::api::MultiModelVersionResponse>* streamer) {
                       return this->StreamedPatchModelVersions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchModelVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchModelVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchModelVersionsRequest* /*request*/, ::clarifai::api::MultiModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchModelVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchModelVersionsRequest,::clarifai::api::MultiModelVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteModelVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteModelVersion() {
      ::grpc::Service::MarkMethodStreamed(76,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteModelVersionRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteModelVersionRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteModelVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteModelVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteModelVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteModelVersionRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteModelVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteModelVersionRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelVersionMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelVersionMetrics() {
      ::grpc::Service::MarkMethodStreamed(77,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetModelVersionMetricsRequest, ::clarifai::api::SingleModelVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetModelVersionMetricsRequest, ::clarifai::api::SingleModelVersionResponse>* streamer) {
                       return this->StreamedGetModelVersionMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelVersionMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelVersionMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelVersionMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetModelVersionMetricsRequest,::clarifai::api::SingleModelVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostModelVersionMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostModelVersionMetrics() {
      ::grpc::Service::MarkMethodStreamed(78,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostModelVersionMetricsRequest, ::clarifai::api::SingleModelVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostModelVersionMetricsRequest, ::clarifai::api::SingleModelVersionResponse>* streamer) {
                       return this->StreamedPostModelVersionMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostModelVersionMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostModelVersionMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostModelVersionMetricsRequest* /*request*/, ::clarifai::api::SingleModelVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostModelVersionMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostModelVersionMetricsRequest,::clarifai::api::SingleModelVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListModelReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListModelReferences() {
      ::grpc::Service::MarkMethodStreamed(79,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListModelReferencesRequest, ::clarifai::api::MultiModelReferenceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListModelReferencesRequest, ::clarifai::api::MultiModelReferenceResponse>* streamer) {
                       return this->StreamedListModelReferences(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListModelReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListModelReferences(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelReferencesRequest* /*request*/, ::clarifai::api::MultiModelReferenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListModelReferences(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListModelReferencesRequest,::clarifai::api::MultiModelReferenceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelVersionInputExample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelVersionInputExample() {
      ::grpc::Service::MarkMethodStreamed(80,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetModelVersionInputExampleRequest, ::clarifai::api::SingleModelVersionInputExampleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetModelVersionInputExampleRequest, ::clarifai::api::SingleModelVersionInputExampleResponse>* streamer) {
                       return this->StreamedGetModelVersionInputExample(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelVersionInputExample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelVersionInputExample(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetModelVersionInputExampleRequest* /*request*/, ::clarifai::api::SingleModelVersionInputExampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelVersionInputExample(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetModelVersionInputExampleRequest,::clarifai::api::SingleModelVersionInputExampleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListModelVersionInputExamples : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListModelVersionInputExamples() {
      ::grpc::Service::MarkMethodStreamed(81,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListModelVersionInputExamplesRequest, ::clarifai::api::MultiModelVersionInputExampleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListModelVersionInputExamplesRequest, ::clarifai::api::MultiModelVersionInputExampleResponse>* streamer) {
                       return this->StreamedListModelVersionInputExamples(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListModelVersionInputExamples() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListModelVersionInputExamples(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListModelVersionInputExamplesRequest* /*request*/, ::clarifai::api::MultiModelVersionInputExampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListModelVersionInputExamples(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListModelVersionInputExamplesRequest,::clarifai::api::MultiModelVersionInputExampleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWorkflow() {
      ::grpc::Service::MarkMethodStreamed(82,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetWorkflowRequest, ::clarifai::api::SingleWorkflowResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetWorkflowRequest, ::clarifai::api::SingleWorkflowResponse>* streamer) {
                       return this->StreamedGetWorkflow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWorkflow(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetWorkflowRequest* /*request*/, ::clarifai::api::SingleWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWorkflow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetWorkflowRequest,::clarifai::api::SingleWorkflowResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListWorkflows() {
      ::grpc::Service::MarkMethodStreamed(83,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>* streamer) {
                       return this->StreamedListWorkflows(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListWorkflows(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListWorkflowsRequest,::clarifai::api::MultiWorkflowResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostWorkflows() {
      ::grpc::Service::MarkMethodStreamed(84,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>* streamer) {
                       return this->StreamedPostWorkflows(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostWorkflows(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostWorkflowsRequest,::clarifai::api::MultiWorkflowResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchWorkflows() {
      ::grpc::Service::MarkMethodStreamed(85,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>* streamer) {
                       return this->StreamedPatchWorkflows(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchWorkflowsRequest* /*request*/, ::clarifai::api::MultiWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchWorkflows(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchWorkflowsRequest,::clarifai::api::MultiWorkflowResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteWorkflow() {
      ::grpc::Service::MarkMethodStreamed(86,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteWorkflowRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteWorkflowRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteWorkflow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteWorkflow(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteWorkflow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteWorkflowRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteWorkflows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteWorkflows() {
      ::grpc::Service::MarkMethodStreamed(87,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteWorkflowsRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteWorkflowsRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteWorkflows(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteWorkflows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteWorkflows(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteWorkflows(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteWorkflowsRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostWorkflowResults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostWorkflowResults() {
      ::grpc::Service::MarkMethodStreamed(88,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostWorkflowResultsRequest, ::clarifai::api::PostWorkflowResultsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostWorkflowResultsRequest, ::clarifai::api::PostWorkflowResultsResponse>* streamer) {
                       return this->StreamedPostWorkflowResults(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostWorkflowResults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostWorkflowResults(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsRequest* /*request*/, ::clarifai::api::PostWorkflowResultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostWorkflowResults(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostWorkflowResultsRequest,::clarifai::api::PostWorkflowResultsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostWorkflowResultsSimilarity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostWorkflowResultsSimilarity() {
      ::grpc::Service::MarkMethodStreamed(89,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostWorkflowResultsSimilarityRequest, ::clarifai::api::PostWorkflowResultsSimilarityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostWorkflowResultsSimilarityRequest, ::clarifai::api::PostWorkflowResultsSimilarityResponse>* streamer) {
                       return this->StreamedPostWorkflowResultsSimilarity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostWorkflowResultsSimilarity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostWorkflowResultsSimilarity(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* /*request*/, ::clarifai::api::PostWorkflowResultsSimilarityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostWorkflowResultsSimilarity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostWorkflowResultsSimilarityRequest,::clarifai::api::PostWorkflowResultsSimilarityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListWorkflowVersions() {
      ::grpc::Service::MarkMethodStreamed(90,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListWorkflowVersionsRequest, ::clarifai::api::MultiWorkflowVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListWorkflowVersionsRequest, ::clarifai::api::MultiWorkflowVersionResponse>* streamer) {
                       return this->StreamedListWorkflowVersions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListWorkflowVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListWorkflowVersionsRequest,::clarifai::api::MultiWorkflowVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWorkflowVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWorkflowVersion() {
      ::grpc::Service::MarkMethodStreamed(91,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetWorkflowVersionRequest, ::clarifai::api::SingleWorkflowVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetWorkflowVersionRequest, ::clarifai::api::SingleWorkflowVersionResponse>* streamer) {
                       return this->StreamedGetWorkflowVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWorkflowVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWorkflowVersion(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetWorkflowVersionRequest* /*request*/, ::clarifai::api::SingleWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWorkflowVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetWorkflowVersionRequest,::clarifai::api::SingleWorkflowVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteWorkflowVersions() {
      ::grpc::Service::MarkMethodStreamed(92,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteWorkflowVersionsRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteWorkflowVersionsRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteWorkflowVersions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteWorkflowVersionsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteWorkflowVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteWorkflowVersionsRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchWorkflowVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchWorkflowVersions() {
      ::grpc::Service::MarkMethodStreamed(93,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchWorkflowVersionsRequest, ::clarifai::api::MultiWorkflowVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchWorkflowVersionsRequest, ::clarifai::api::MultiWorkflowVersionResponse>* streamer) {
                       return this->StreamedPatchWorkflowVersions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchWorkflowVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchWorkflowVersions(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchWorkflowVersionsRequest* /*request*/, ::clarifai::api::MultiWorkflowVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchWorkflowVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchWorkflowVersionsRequest,::clarifai::api::MultiWorkflowVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetKey() {
      ::grpc::Service::MarkMethodStreamed(94,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetKeyRequest, ::clarifai::api::SingleKeyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetKeyRequest, ::clarifai::api::SingleKeyResponse>* streamer) {
                       return this->StreamedGetKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetKey(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetKeyRequest* /*request*/, ::clarifai::api::SingleKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetKeyRequest,::clarifai::api::SingleKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListKeys() {
      ::grpc::Service::MarkMethodStreamed(95,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListKeysRequest, ::clarifai::api::MultiKeyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListKeysRequest, ::clarifai::api::MultiKeyResponse>* streamer) {
                       return this->StreamedListKeys(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListKeys(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListKeysRequest,::clarifai::api::MultiKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAppKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAppKeys() {
      ::grpc::Service::MarkMethodStreamed(96,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListAppKeysRequest, ::clarifai::api::MultiKeyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListAppKeysRequest, ::clarifai::api::MultiKeyResponse>* streamer) {
                       return this->StreamedListAppKeys(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAppKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAppKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAppKeys(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListAppKeysRequest,::clarifai::api::MultiKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteKey() {
      ::grpc::Service::MarkMethodStreamed(97,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteKeyRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteKeyRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteKey(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteKeyRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteKeyRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostKeys() {
      ::grpc::Service::MarkMethodStreamed(98,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostKeysRequest, ::clarifai::api::MultiKeyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostKeysRequest, ::clarifai::api::MultiKeyResponse>* streamer) {
                       return this->StreamedPostKeys(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostKeys(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostKeysRequest,::clarifai::api::MultiKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchKeys() {
      ::grpc::Service::MarkMethodStreamed(99,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchKeysRequest, ::clarifai::api::MultiKeyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchKeysRequest, ::clarifai::api::MultiKeyResponse>* streamer) {
                       return this->StreamedPatchKeys(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchKeys(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchKeysRequest* /*request*/, ::clarifai::api::MultiKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchKeys(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchKeysRequest,::clarifai::api::MultiKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MyScopes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MyScopes() {
      ::grpc::Service::MarkMethodStreamed(100,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::MyScopesRequest, ::clarifai::api::MultiScopeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::MyScopesRequest, ::clarifai::api::MultiScopeResponse>* streamer) {
                       return this->StreamedMyScopes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MyScopes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MyScopes(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesRequest* /*request*/, ::clarifai::api::MultiScopeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMyScopes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::MyScopesRequest,::clarifai::api::MultiScopeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MyScopesUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MyScopesUser() {
      ::grpc::Service::MarkMethodStreamed(101,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::MyScopesUserRequest, ::clarifai::api::MultiScopeUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::MyScopesUserRequest, ::clarifai::api::MultiScopeUserResponse>* streamer) {
                       return this->StreamedMyScopesUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MyScopesUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MyScopesUser(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesUserRequest* /*request*/, ::clarifai::api::MultiScopeUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMyScopesUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::MyScopesUserRequest,::clarifai::api::MultiScopeUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MyScopesRoot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MyScopesRoot() {
      ::grpc::Service::MarkMethodStreamed(102,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::MyScopesRootRequest, ::clarifai::api::MultiScopeRootResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::MyScopesRootRequest, ::clarifai::api::MultiScopeRootResponse>* streamer) {
                       return this->StreamedMyScopesRoot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MyScopesRoot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MyScopesRoot(::grpc::ServerContext* /*context*/, const ::clarifai::api::MyScopesRootRequest* /*request*/, ::clarifai::api::MultiScopeRootResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMyScopesRoot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::MyScopesRootRequest,::clarifai::api::MultiScopeRootResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListScopes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListScopes() {
      ::grpc::Service::MarkMethodStreamed(103,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListScopesRequest, ::clarifai::api::MultiScopeDepsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListScopesRequest, ::clarifai::api::MultiScopeDepsResponse>* streamer) {
                       return this->StreamedListScopes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListScopes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListScopes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListScopesRequest* /*request*/, ::clarifai::api::MultiScopeDepsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListScopes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListScopesRequest,::clarifai::api::MultiScopeDepsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetApp() {
      ::grpc::Service::MarkMethodStreamed(104,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetAppRequest, ::clarifai::api::SingleAppResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetAppRequest, ::clarifai::api::SingleAppResponse>* streamer) {
                       return this->StreamedGetApp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetApp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetAppRequest,::clarifai::api::SingleAppResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListApps() {
      ::grpc::Service::MarkMethodStreamed(105,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListAppsRequest, ::clarifai::api::MultiAppResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListAppsRequest, ::clarifai::api::MultiAppResponse>* streamer) {
                       return this->StreamedListApps(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListApps(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListAppsRequest,::clarifai::api::MultiAppResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteApp() {
      ::grpc::Service::MarkMethodStreamed(106,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteAppRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteAppRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteApp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAppRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteApp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteAppRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostApps() {
      ::grpc::Service::MarkMethodStreamed(107,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostAppsRequest, ::clarifai::api::MultiAppResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostAppsRequest, ::clarifai::api::MultiAppResponse>* streamer) {
                       return this->StreamedPostApps(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostApps(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostAppsRequest,::clarifai::api::MultiAppResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchApps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchApps() {
      ::grpc::Service::MarkMethodStreamed(108,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchAppsRequest, ::clarifai::api::MultiAppResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchAppsRequest, ::clarifai::api::MultiAppResponse>* streamer) {
                       return this->StreamedPatchApps(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchApps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchApps(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchApps(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchAppsRequest,::clarifai::api::MultiAppResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchApp() {
      ::grpc::Service::MarkMethodStreamed(109,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchAppRequest, ::clarifai::api::SingleAppResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchAppRequest, ::clarifai::api::SingleAppResponse>* streamer) {
                       return this->StreamedPatchApp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchApp(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppRequest* /*request*/, ::clarifai::api::SingleAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchApp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchAppRequest,::clarifai::api::SingleAppResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchAppsIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchAppsIds() {
      ::grpc::Service::MarkMethodStreamed(110,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchAppsIdsRequest, ::clarifai::api::MultiAppResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchAppsIdsRequest, ::clarifai::api::MultiAppResponse>* streamer) {
                       return this->StreamedPatchAppsIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchAppsIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchAppsIds(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAppsIdsRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchAppsIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchAppsIdsRequest,::clarifai::api::MultiAppResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostAppsSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostAppsSearches() {
      ::grpc::Service::MarkMethodStreamed(111,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostAppsSearchesRequest, ::clarifai::api::MultiAppResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostAppsSearchesRequest, ::clarifai::api::MultiAppResponse>* streamer) {
                       return this->StreamedPostAppsSearches(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostAppsSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostAppsSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppsSearchesRequest* /*request*/, ::clarifai::api::MultiAppResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostAppsSearches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostAppsSearchesRequest,::clarifai::api::MultiAppResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostValidatePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostValidatePassword() {
      ::grpc::Service::MarkMethodStreamed(112,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostValidatePasswordRequest, ::clarifai::api::SinglePasswordValidationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostValidatePasswordRequest, ::clarifai::api::SinglePasswordValidationResponse>* streamer) {
                       return this->StreamedPostValidatePassword(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostValidatePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostValidatePassword(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostValidatePasswordRequest* /*request*/, ::clarifai::api::SinglePasswordValidationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostValidatePassword(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostValidatePasswordRequest,::clarifai::api::SinglePasswordValidationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSearch() {
      ::grpc::Service::MarkMethodStreamed(113,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetSearchRequest, ::clarifai::api::SingleSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetSearchRequest, ::clarifai::api::SingleSearchResponse>* streamer) {
                       return this->StreamedGetSearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSearch(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetSearchRequest* /*request*/, ::clarifai::api::SingleSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetSearchRequest,::clarifai::api::SingleSearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListSearches() {
      ::grpc::Service::MarkMethodStreamed(114,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListSearchesRequest, ::clarifai::api::MultiSearchResponse>* streamer) {
                       return this->StreamedListSearches(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSearches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListSearchesRequest,::clarifai::api::MultiSearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchSearches() {
      ::grpc::Service::MarkMethodStreamed(115,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchSearchesRequest, ::clarifai::api::MultiSearchResponse>* streamer) {
                       return this->StreamedPatchSearches(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchSearches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchSearchesRequest,::clarifai::api::MultiSearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostSearches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostSearches() {
      ::grpc::Service::MarkMethodStreamed(116,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostSearchesRequest, ::clarifai::api::MultiSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostSearchesRequest, ::clarifai::api::MultiSearchResponse>* streamer) {
                       return this->StreamedPostSearches(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostSearches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostSearches(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostSearchesRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostSearches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostSearchesRequest,::clarifai::api::MultiSearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostSearchesByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostSearchesByID() {
      ::grpc::Service::MarkMethodStreamed(117,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostSearchesByIDRequest, ::clarifai::api::MultiSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostSearchesByIDRequest, ::clarifai::api::MultiSearchResponse>* streamer) {
                       return this->StreamedPostSearchesByID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostSearchesByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostSearchesByID(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostSearchesByIDRequest* /*request*/, ::clarifai::api::MultiSearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostSearchesByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostSearchesByIDRequest,::clarifai::api::MultiSearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodStreamed(118,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>* streamer) {
                       return this->StreamedPostAnnotationSearchMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostAnnotationSearchMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostAnnotationSearchMetricsRequest,::clarifai::api::MultiAnnotationSearchMetricsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodStreamed(119,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>* streamer) {
                       return this->StreamedGetAnnotationSearchMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAnnotationSearchMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetAnnotationSearchMetricsRequest,::clarifai::api::MultiAnnotationSearchMetricsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodStreamed(120,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>* streamer) {
                       return this->StreamedListAnnotationSearchMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::MultiAnnotationSearchMetricsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAnnotationSearchMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListAnnotationSearchMetricsRequest,::clarifai::api::MultiAnnotationSearchMetricsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAnnotationSearchMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAnnotationSearchMetrics() {
      ::grpc::Service::MarkMethodStreamed(121,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteAnnotationSearchMetricsRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteAnnotationSearchMetricsRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteAnnotationSearchMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAnnotationSearchMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAnnotationSearchMetrics(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAnnotationSearchMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteAnnotationSearchMetricsRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSearch() {
      ::grpc::Service::MarkMethodStreamed(122,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteSearchRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteSearchRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteSearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSearch(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteSearchRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteSearchRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAnnotationFilters() {
      ::grpc::Service::MarkMethodStreamed(123,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>* streamer) {
                       return this->StreamedListAnnotationFilters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAnnotationFilters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListAnnotationFiltersRequest,::clarifai::api::MultiAnnotationFilterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAnnotationFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAnnotationFilter() {
      ::grpc::Service::MarkMethodStreamed(124,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetAnnotationFilterRequest, ::clarifai::api::SingleAnnotationFilterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetAnnotationFilterRequest, ::clarifai::api::SingleAnnotationFilterResponse>* streamer) {
                       return this->StreamedGetAnnotationFilter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAnnotationFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAnnotationFilter(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAnnotationFilterRequest* /*request*/, ::clarifai::api::SingleAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAnnotationFilter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetAnnotationFilterRequest,::clarifai::api::SingleAnnotationFilterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostAnnotationFilters() {
      ::grpc::Service::MarkMethodStreamed(125,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>* streamer) {
                       return this->StreamedPostAnnotationFilters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostAnnotationFilters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostAnnotationFiltersRequest,::clarifai::api::MultiAnnotationFilterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchAnnotationFilters() {
      ::grpc::Service::MarkMethodStreamed(126,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchAnnotationFiltersRequest, ::clarifai::api::MultiAnnotationFilterResponse>* streamer) {
                       return this->StreamedPatchAnnotationFilters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchAnnotationFiltersRequest* /*request*/, ::clarifai::api::MultiAnnotationFilterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchAnnotationFilters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchAnnotationFiltersRequest,::clarifai::api::MultiAnnotationFilterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAnnotationFilters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAnnotationFilters() {
      ::grpc::Service::MarkMethodStreamed(127,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteAnnotationFiltersRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteAnnotationFiltersRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteAnnotationFilters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAnnotationFilters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAnnotationFilters(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteAnnotationFiltersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAnnotationFilters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteAnnotationFiltersRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListStatusCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListStatusCodes() {
      ::grpc::Service::MarkMethodStreamed(128,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListStatusCodesRequest, ::clarifai::api::MultiStatusCodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListStatusCodesRequest, ::clarifai::api::MultiStatusCodeResponse>* streamer) {
                       return this->StreamedListStatusCodes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListStatusCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListStatusCodes(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListStatusCodesRequest* /*request*/, ::clarifai::api::MultiStatusCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListStatusCodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListStatusCodesRequest,::clarifai::api::MultiStatusCodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatusCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStatusCode() {
      ::grpc::Service::MarkMethodStreamed(129,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetStatusCodeRequest, ::clarifai::api::SingleStatusCodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetStatusCodeRequest, ::clarifai::api::SingleStatusCodeResponse>* streamer) {
                       return this->StreamedGetStatusCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStatusCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatusCode(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetStatusCodeRequest* /*request*/, ::clarifai::api::SingleStatusCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatusCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetStatusCodeRequest,::clarifai::api::SingleStatusCodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListCollaborators() {
      ::grpc::Service::MarkMethodStreamed(130,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>* streamer) {
                       return this->StreamedListCollaborators(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCollaborators(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListCollaboratorsRequest,::clarifai::api::MultiCollaboratorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostCollaborators() {
      ::grpc::Service::MarkMethodStreamed(131,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>* streamer) {
                       return this->StreamedPostCollaborators(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostCollaborators(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostCollaboratorsRequest,::clarifai::api::MultiCollaboratorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchCollaborators() {
      ::grpc::Service::MarkMethodStreamed(132,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>* streamer) {
                       return this->StreamedPatchCollaborators(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchCollaboratorsRequest* /*request*/, ::clarifai::api::MultiCollaboratorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchCollaborators(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchCollaboratorsRequest,::clarifai::api::MultiCollaboratorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCollaborators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCollaborators() {
      ::grpc::Service::MarkMethodStreamed(133,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteCollaboratorsRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteCollaboratorsRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteCollaborators(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCollaborators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCollaborators(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteCollaboratorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCollaborators(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteCollaboratorsRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCollaborations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListCollaborations() {
      ::grpc::Service::MarkMethodStreamed(134,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListCollaborationsRequest, ::clarifai::api::MultiCollaborationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListCollaborationsRequest, ::clarifai::api::MultiCollaborationsResponse>* streamer) {
                       return this->StreamedListCollaborations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListCollaborations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCollaborations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollaborationsRequest* /*request*/, ::clarifai::api::MultiCollaborationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCollaborations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListCollaborationsRequest,::clarifai::api::MultiCollaborationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostAppDuplications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostAppDuplications() {
      ::grpc::Service::MarkMethodStreamed(135,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostAppDuplicationsRequest, ::clarifai::api::MultiAppDuplicationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostAppDuplicationsRequest, ::clarifai::api::MultiAppDuplicationsResponse>* streamer) {
                       return this->StreamedPostAppDuplications(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostAppDuplications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostAppDuplications(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostAppDuplications(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostAppDuplicationsRequest,::clarifai::api::MultiAppDuplicationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAppDuplications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAppDuplications() {
      ::grpc::Service::MarkMethodStreamed(136,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListAppDuplicationsRequest, ::clarifai::api::MultiAppDuplicationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListAppDuplicationsRequest, ::clarifai::api::MultiAppDuplicationsResponse>* streamer) {
                       return this->StreamedListAppDuplications(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAppDuplications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAppDuplications(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListAppDuplicationsRequest* /*request*/, ::clarifai::api::MultiAppDuplicationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAppDuplications(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListAppDuplicationsRequest,::clarifai::api::MultiAppDuplicationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAppDuplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAppDuplication() {
      ::grpc::Service::MarkMethodStreamed(137,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetAppDuplicationRequest, ::clarifai::api::SingleAppDuplicationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetAppDuplicationRequest, ::clarifai::api::SingleAppDuplicationResponse>* streamer) {
                       return this->StreamedGetAppDuplication(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAppDuplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAppDuplication(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetAppDuplicationRequest* /*request*/, ::clarifai::api::SingleAppDuplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAppDuplication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetAppDuplicationRequest,::clarifai::api::SingleAppDuplicationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostTasks() {
      ::grpc::Service::MarkMethodStreamed(138,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostTasksRequest, ::clarifai::api::MultiTaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostTasksRequest, ::clarifai::api::MultiTaskResponse>* streamer) {
                       return this->StreamedPostTasks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostTasks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostTasksRequest,::clarifai::api::MultiTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTaskAnnotationCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTaskAnnotationCount() {
      ::grpc::Service::MarkMethodStreamed(139,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetTaskCountRequest, ::clarifai::api::SingleTaskCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetTaskCountRequest, ::clarifai::api::SingleTaskCountResponse>* streamer) {
                       return this->StreamedGetTaskAnnotationCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTaskAnnotationCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTaskAnnotationCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTaskAnnotationCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetTaskCountRequest,::clarifai::api::SingleTaskCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTaskInputCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTaskInputCount() {
      ::grpc::Service::MarkMethodStreamed(140,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetTaskCountRequest, ::clarifai::api::SingleTaskCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetTaskCountRequest, ::clarifai::api::SingleTaskCountResponse>* streamer) {
                       return this->StreamedGetTaskInputCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTaskInputCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTaskInputCount(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskCountRequest* /*request*/, ::clarifai::api::SingleTaskCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTaskInputCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetTaskCountRequest,::clarifai::api::SingleTaskCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTask() {
      ::grpc::Service::MarkMethodStreamed(141,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetTaskRequest, ::clarifai::api::SingleTaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetTaskRequest, ::clarifai::api::SingleTaskResponse>* streamer) {
                       return this->StreamedGetTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetTaskRequest* /*request*/, ::clarifai::api::SingleTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetTaskRequest,::clarifai::api::SingleTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTasks() {
      ::grpc::Service::MarkMethodStreamed(142,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListTasksRequest, ::clarifai::api::MultiTaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListTasksRequest, ::clarifai::api::MultiTaskResponse>* streamer) {
                       return this->StreamedListTasks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTasks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListTasksRequest,::clarifai::api::MultiTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchTasks() {
      ::grpc::Service::MarkMethodStreamed(143,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchTasksRequest, ::clarifai::api::MultiTaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchTasksRequest, ::clarifai::api::MultiTaskResponse>* streamer) {
                       return this->StreamedPatchTasks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchTasksRequest* /*request*/, ::clarifai::api::MultiTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchTasks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchTasksRequest,::clarifai::api::MultiTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTasks() {
      ::grpc::Service::MarkMethodStreamed(144,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteTasksRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteTasksRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteTasks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTasks(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteTasksRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTasks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteTasksRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostLabelOrders() {
      ::grpc::Service::MarkMethodStreamed(145,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>* streamer) {
                       return this->StreamedPostLabelOrders(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostLabelOrders(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostLabelOrdersRequest,::clarifai::api::MultiLabelOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLabelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLabelOrder() {
      ::grpc::Service::MarkMethodStreamed(146,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetLabelOrderRequest, ::clarifai::api::SingleLabelOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetLabelOrderRequest, ::clarifai::api::SingleLabelOrderResponse>* streamer) {
                       return this->StreamedGetLabelOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLabelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLabelOrder(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetLabelOrderRequest* /*request*/, ::clarifai::api::SingleLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLabelOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetLabelOrderRequest,::clarifai::api::SingleLabelOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListLabelOrders() {
      ::grpc::Service::MarkMethodStreamed(147,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>* streamer) {
                       return this->StreamedListLabelOrders(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListLabelOrders(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListLabelOrdersRequest,::clarifai::api::MultiLabelOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchLabelOrders() {
      ::grpc::Service::MarkMethodStreamed(148,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchLabelOrdersRequest, ::clarifai::api::MultiLabelOrderResponse>* streamer) {
                       return this->StreamedPatchLabelOrders(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchLabelOrdersRequest* /*request*/, ::clarifai::api::MultiLabelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchLabelOrders(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchLabelOrdersRequest,::clarifai::api::MultiLabelOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteLabelOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteLabelOrders() {
      ::grpc::Service::MarkMethodStreamed(149,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteLabelOrdersRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteLabelOrdersRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteLabelOrders(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteLabelOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteLabelOrders(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteLabelOrdersRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteLabelOrders(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteLabelOrdersRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostCollectors() {
      ::grpc::Service::MarkMethodStreamed(150,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostCollectorsRequest, ::clarifai::api::MultiCollectorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostCollectorsRequest, ::clarifai::api::MultiCollectorResponse>* streamer) {
                       return this->StreamedPostCollectors(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostCollectors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostCollectorsRequest,::clarifai::api::MultiCollectorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCollector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCollector() {
      ::grpc::Service::MarkMethodStreamed(151,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetCollectorRequest, ::clarifai::api::SingleCollectorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetCollectorRequest, ::clarifai::api::SingleCollectorResponse>* streamer) {
                       return this->StreamedGetCollector(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCollector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCollector(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetCollectorRequest* /*request*/, ::clarifai::api::SingleCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCollector(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetCollectorRequest,::clarifai::api::SingleCollectorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListCollectors() {
      ::grpc::Service::MarkMethodStreamed(152,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListCollectorsRequest, ::clarifai::api::MultiCollectorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListCollectorsRequest, ::clarifai::api::MultiCollectorResponse>* streamer) {
                       return this->StreamedListCollectors(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCollectors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListCollectorsRequest,::clarifai::api::MultiCollectorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PatchCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PatchCollectors() {
      ::grpc::Service::MarkMethodStreamed(153,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PatchCollectorsRequest, ::clarifai::api::MultiCollectorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PatchCollectorsRequest, ::clarifai::api::MultiCollectorResponse>* streamer) {
                       return this->StreamedPatchCollectors(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PatchCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PatchCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::PatchCollectorsRequest* /*request*/, ::clarifai::api::MultiCollectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPatchCollectors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PatchCollectorsRequest,::clarifai::api::MultiCollectorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCollectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCollectors() {
      ::grpc::Service::MarkMethodStreamed(154,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteCollectorsRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteCollectorsRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteCollectors(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCollectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCollectors(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteCollectorsRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCollectors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteCollectorsRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostStatValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostStatValues() {
      ::grpc::Service::MarkMethodStreamed(155,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostStatValuesRequest, ::clarifai::api::MultiStatValueResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostStatValuesRequest, ::clarifai::api::MultiStatValueResponse>* streamer) {
                       return this->StreamedPostStatValues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostStatValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostStatValues(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostStatValuesRequest* /*request*/, ::clarifai::api::MultiStatValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostStatValues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostStatValuesRequest,::clarifai::api::MultiStatValueResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostStatValuesAggregate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostStatValuesAggregate() {
      ::grpc::Service::MarkMethodStreamed(156,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostStatValuesAggregateRequest, ::clarifai::api::MultiStatValueAggregateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostStatValuesAggregateRequest, ::clarifai::api::MultiStatValueAggregateResponse>* streamer) {
                       return this->StreamedPostStatValuesAggregate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostStatValuesAggregate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostStatValuesAggregate(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostStatValuesAggregateRequest* /*request*/, ::clarifai::api::MultiStatValueAggregateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostStatValuesAggregate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostStatValuesAggregateRequest,::clarifai::api::MultiStatValueAggregateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostTrendingMetricsView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostTrendingMetricsView() {
      ::grpc::Service::MarkMethodStreamed(157,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostTrendingMetricsViewRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostTrendingMetricsViewRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedPostTrendingMetricsView(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostTrendingMetricsView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostTrendingMetricsView(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostTrendingMetricsViewRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostTrendingMetricsView(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostTrendingMetricsViewRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTrendingMetricsViews : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTrendingMetricsViews() {
      ::grpc::Service::MarkMethodStreamed(158,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListTrendingMetricsViewsRequest, ::clarifai::api::MultiTrendingMetricsViewResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListTrendingMetricsViewsRequest, ::clarifai::api::MultiTrendingMetricsViewResponse>* streamer) {
                       return this->StreamedListTrendingMetricsViews(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTrendingMetricsViews() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTrendingMetricsViews(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListTrendingMetricsViewsRequest* /*request*/, ::clarifai::api::MultiTrendingMetricsViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTrendingMetricsViews(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListTrendingMetricsViewsRequest,::clarifai::api::MultiTrendingMetricsViewResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostBulkOperations() {
      ::grpc::Service::MarkMethodStreamed(159,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::PostBulkOperationsRequest, ::clarifai::api::MultiBulkOperationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::PostBulkOperationsRequest, ::clarifai::api::MultiBulkOperationsResponse>* streamer) {
                       return this->StreamedPostBulkOperations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::PostBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostBulkOperations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::PostBulkOperationsRequest,::clarifai::api::MultiBulkOperationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListBulkOperations() {
      ::grpc::Service::MarkMethodStreamed(160,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::ListBulkOperationsRequest, ::clarifai::api::MultiBulkOperationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::ListBulkOperationsRequest, ::clarifai::api::MultiBulkOperationsResponse>* streamer) {
                       return this->StreamedListBulkOperations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::ListBulkOperationsRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListBulkOperations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::ListBulkOperationsRequest,::clarifai::api::MultiBulkOperationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBulkOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBulkOperation() {
      ::grpc::Service::MarkMethodStreamed(161,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetBulkOperationRequest, ::clarifai::api::SingleBulkOperationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetBulkOperationRequest, ::clarifai::api::SingleBulkOperationsResponse>* streamer) {
                       return this->StreamedGetBulkOperation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBulkOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBulkOperation(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetBulkOperationRequest* /*request*/, ::clarifai::api::SingleBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBulkOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetBulkOperationRequest,::clarifai::api::SingleBulkOperationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelBulkOperations() {
      ::grpc::Service::MarkMethodStreamed(162,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::CancelBulkOperationRequest, ::clarifai::api::MultiBulkOperationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::CancelBulkOperationRequest, ::clarifai::api::MultiBulkOperationsResponse>* streamer) {
                       return this->StreamedCancelBulkOperations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::CancelBulkOperationRequest* /*request*/, ::clarifai::api::MultiBulkOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelBulkOperations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::CancelBulkOperationRequest,::clarifai::api::MultiBulkOperationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteBulkOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteBulkOperations() {
      ::grpc::Service::MarkMethodStreamed(163,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::DeleteBulkOperationRequest, ::clarifai::api::status::BaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::DeleteBulkOperationRequest, ::clarifai::api::status::BaseResponse>* streamer) {
                       return this->StreamedDeleteBulkOperations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteBulkOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteBulkOperations(::grpc::ServerContext* /*context*/, const ::clarifai::api::DeleteBulkOperationRequest* /*request*/, ::clarifai::api::status::BaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteBulkOperations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::DeleteBulkOperationRequest,::clarifai::api::status::BaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDatasetInputsSearchAddJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDatasetInputsSearchAddJob() {
      ::grpc::Service::MarkMethodStreamed(164,
        new ::grpc::internal::StreamedUnaryHandler<
          ::clarifai::api::GetDatasetInputsSearchAddJobRequest, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::clarifai::api::GetDatasetInputsSearchAddJobRequest, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse>* streamer) {
                       return this->StreamedGetDatasetInputsSearchAddJob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDatasetInputsSearchAddJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDatasetInputsSearchAddJob(::grpc::ServerContext* /*context*/, const ::clarifai::api::GetDatasetInputsSearchAddJobRequest* /*request*/, ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDatasetInputsSearchAddJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::clarifai::api::GetDatasetInputsSearchAddJobRequest,::clarifai::api::SingleDatasetInputsSearchAddJobResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListConceptRelations<WithStreamedUnaryMethod_PostConceptRelations<WithStreamedUnaryMethod_DeleteConceptRelations<WithStreamedUnaryMethod_GetConceptCounts<WithStreamedUnaryMethod_GetConcept<WithStreamedUnaryMethod_ListConcepts<WithStreamedUnaryMethod_PostConceptsSearches<WithStreamedUnaryMethod_PostConcepts<WithStreamedUnaryMethod_PatchConcepts<WithStreamedUnaryMethod_GetConceptLanguage<WithStreamedUnaryMethod_ListConceptLanguages<WithStreamedUnaryMethod_PostConceptLanguages<WithStreamedUnaryMethod_PatchConceptLanguages<WithStreamedUnaryMethod_ListKnowledgeGraphs<WithStreamedUnaryMethod_PostKnowledgeGraphs<WithStreamedUnaryMethod_PostConceptMappingJobs<WithStreamedUnaryMethod_GetAnnotation<WithStreamedUnaryMethod_ListAnnotations<WithStreamedUnaryMethod_PostAnnotations<WithStreamedUnaryMethod_PatchAnnotations<WithStreamedUnaryMethod_PatchAnnotationsStatus<WithStreamedUnaryMethod_DeleteAnnotation<WithStreamedUnaryMethod_DeleteAnnotations<WithStreamedUnaryMethod_PatchAnnotationsSearches<WithStreamedUnaryMethod_PostAnnotationsSearches<WithStreamedUnaryMethod_GetInputCount<WithStreamedUnaryMethod_StreamInputs<WithStreamedUnaryMethod_GetInputSamples<WithStreamedUnaryMethod_GetInput<WithStreamedUnaryMethod_ListInputs<WithStreamedUnaryMethod_PostInputs<WithStreamedUnaryMethod_PatchInputs<WithStreamedUnaryMethod_DeleteInput<WithStreamedUnaryMethod_DeleteInputs<WithStreamedUnaryMethod_PatchInputsSearches<WithStreamedUnaryMethod_PostInputsSearches<WithStreamedUnaryMethod_PostModelOutputs<WithStreamedUnaryMethod_ListDatasets<WithStreamedUnaryMethod_GetDataset<WithStreamedUnaryMethod_PostDatasets<WithStreamedUnaryMethod_PatchDatasets<WithStreamedUnaryMethod_DeleteDatasets<WithStreamedUnaryMethod_ListDatasetInputs<WithStreamedUnaryMethod_GetDatasetInput<WithStreamedUnaryMethod_PostDatasetInputs<WithStreamedUnaryMethod_DeleteDatasetInputs<WithStreamedUnaryMethod_ListDatasetVersions<WithStreamedUnaryMethod_GetDatasetVersion<WithStreamedUnaryMethod_ListDatasetVersionMetricsGroups<WithStreamedUnaryMethod_PostDatasetVersions<WithStreamedUnaryMethod_PatchDatasetVersions<WithStreamedUnaryMethod_DeleteDatasetVersions<WithStreamedUnaryMethod_GetModelType<WithStreamedUnaryMethod_ListOpenSourceLicenses<WithStreamedUnaryMethod_ListModelTypes<WithStreamedUnaryMethod_GetModel<WithStreamedUnaryMethod_GetModelOutputInfo<WithStreamedUnaryMethod_ListModels<WithStreamedUnaryMethod_PostModelsSearches<WithStreamedUnaryMethod_PostModels<WithStreamedUnaryMethod_PatchModels<WithStreamedUnaryMethod_PatchModelIds<WithStreamedUnaryMethod_DeleteModel<WithStreamedUnaryMethod_DeleteModels<WithStreamedUnaryMethod_PatchModelToolkits<WithStreamedUnaryMethod_PatchModelUseCases<WithStreamedUnaryMethod_PatchModelLanguages<WithStreamedUnaryMethod_ListModelInputs<WithStreamedUnaryMethod_GetModelVersion<WithStreamedUnaryMethod_ListModelVersions<WithStreamedUnaryMethod_PostWorkflowVersionsUnPublish<WithStreamedUnaryMethod_PostWorkflowVersionsPublish<WithStreamedUnaryMethod_PostModelVersionsPublish<WithStreamedUnaryMethod_PostModelVersionsUnPublish<WithStreamedUnaryMethod_PostModelVersions<WithStreamedUnaryMethod_PatchModelVersions<WithStreamedUnaryMethod_DeleteModelVersion<WithStreamedUnaryMethod_GetModelVersionMetrics<WithStreamedUnaryMethod_PostModelVersionMetrics<WithStreamedUnaryMethod_ListModelReferences<WithStreamedUnaryMethod_GetModelVersionInputExample<WithStreamedUnaryMethod_ListModelVersionInputExamples<WithStreamedUnaryMethod_GetWorkflow<WithStreamedUnaryMethod_ListWorkflows<WithStreamedUnaryMethod_PostWorkflows<WithStreamedUnaryMethod_PatchWorkflows<WithStreamedUnaryMethod_DeleteWorkflow<WithStreamedUnaryMethod_DeleteWorkflows<WithStreamedUnaryMethod_PostWorkflowResults<WithStreamedUnaryMethod_PostWorkflowResultsSimilarity<WithStreamedUnaryMethod_ListWorkflowVersions<WithStreamedUnaryMethod_GetWorkflowVersion<WithStreamedUnaryMethod_DeleteWorkflowVersions<WithStreamedUnaryMethod_PatchWorkflowVersions<WithStreamedUnaryMethod_GetKey<WithStreamedUnaryMethod_ListKeys<WithStreamedUnaryMethod_ListAppKeys<WithStreamedUnaryMethod_DeleteKey<WithStreamedUnaryMethod_PostKeys<WithStreamedUnaryMethod_PatchKeys<WithStreamedUnaryMethod_MyScopes<WithStreamedUnaryMethod_MyScopesUser<WithStreamedUnaryMethod_MyScopesRoot<WithStreamedUnaryMethod_ListScopes<WithStreamedUnaryMethod_GetApp<WithStreamedUnaryMethod_ListApps<WithStreamedUnaryMethod_DeleteApp<WithStreamedUnaryMethod_PostApps<WithStreamedUnaryMethod_PatchApps<WithStreamedUnaryMethod_PatchApp<WithStreamedUnaryMethod_PatchAppsIds<WithStreamedUnaryMethod_PostAppsSearches<WithStreamedUnaryMethod_PostValidatePassword<WithStreamedUnaryMethod_GetSearch<WithStreamedUnaryMethod_ListSearches<WithStreamedUnaryMethod_PatchSearches<WithStreamedUnaryMethod_PostSearches<WithStreamedUnaryMethod_PostSearchesByID<WithStreamedUnaryMethod_PostAnnotationSearchMetrics<WithStreamedUnaryMethod_GetAnnotationSearchMetrics<WithStreamedUnaryMethod_ListAnnotationSearchMetrics<WithStreamedUnaryMethod_DeleteAnnotationSearchMetrics<WithStreamedUnaryMethod_DeleteSearch<WithStreamedUnaryMethod_ListAnnotationFilters<WithStreamedUnaryMethod_GetAnnotationFilter<WithStreamedUnaryMethod_PostAnnotationFilters<WithStreamedUnaryMethod_PatchAnnotationFilters<WithStreamedUnaryMethod_DeleteAnnotationFilters<WithStreamedUnaryMethod_ListStatusCodes<WithStreamedUnaryMethod_GetStatusCode<WithStreamedUnaryMethod_ListCollaborators<WithStreamedUnaryMethod_PostCollaborators<WithStreamedUnaryMethod_PatchCollaborators<WithStreamedUnaryMethod_DeleteCollaborators<WithStreamedUnaryMethod_ListCollaborations<WithStreamedUnaryMethod_PostAppDuplications<WithStreamedUnaryMethod_ListAppDuplications<WithStreamedUnaryMethod_GetAppDuplication<WithStreamedUnaryMethod_PostTasks<WithStreamedUnaryMethod_GetTaskAnnotationCount<WithStreamedUnaryMethod_GetTaskInputCount<WithStreamedUnaryMethod_GetTask<WithStreamedUnaryMethod_ListTasks<WithStreamedUnaryMethod_PatchTasks<WithStreamedUnaryMethod_DeleteTasks<WithStreamedUnaryMethod_PostLabelOrders<WithStreamedUnaryMethod_GetLabelOrder<WithStreamedUnaryMethod_ListLabelOrders<WithStreamedUnaryMethod_PatchLabelOrders<WithStreamedUnaryMethod_DeleteLabelOrders<WithStreamedUnaryMethod_PostCollectors<WithStreamedUnaryMethod_GetCollector<WithStreamedUnaryMethod_ListCollectors<WithStreamedUnaryMethod_PatchCollectors<WithStreamedUnaryMethod_DeleteCollectors<WithStreamedUnaryMethod_PostStatValues<WithStreamedUnaryMethod_PostStatValuesAggregate<WithStreamedUnaryMethod_PostTrendingMetricsView<WithStreamedUnaryMethod_ListTrendingMetricsViews<WithStreamedUnaryMethod_PostBulkOperations<WithStreamedUnaryMethod_ListBulkOperations<WithStreamedUnaryMethod_GetBulkOperation<WithStreamedUnaryMethod_CancelBulkOperations<WithStreamedUnaryMethod_DeleteBulkOperations<WithStreamedUnaryMethod_GetDatasetInputsSearchAddJob<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListConceptRelations<WithStreamedUnaryMethod_PostConceptRelations<WithStreamedUnaryMethod_DeleteConceptRelations<WithStreamedUnaryMethod_GetConceptCounts<WithStreamedUnaryMethod_GetConcept<WithStreamedUnaryMethod_ListConcepts<WithStreamedUnaryMethod_PostConceptsSearches<WithStreamedUnaryMethod_PostConcepts<WithStreamedUnaryMethod_PatchConcepts<WithStreamedUnaryMethod_GetConceptLanguage<WithStreamedUnaryMethod_ListConceptLanguages<WithStreamedUnaryMethod_PostConceptLanguages<WithStreamedUnaryMethod_PatchConceptLanguages<WithStreamedUnaryMethod_ListKnowledgeGraphs<WithStreamedUnaryMethod_PostKnowledgeGraphs<WithStreamedUnaryMethod_PostConceptMappingJobs<WithStreamedUnaryMethod_GetAnnotation<WithStreamedUnaryMethod_ListAnnotations<WithStreamedUnaryMethod_PostAnnotations<WithStreamedUnaryMethod_PatchAnnotations<WithStreamedUnaryMethod_PatchAnnotationsStatus<WithStreamedUnaryMethod_DeleteAnnotation<WithStreamedUnaryMethod_DeleteAnnotations<WithStreamedUnaryMethod_PatchAnnotationsSearches<WithStreamedUnaryMethod_PostAnnotationsSearches<WithStreamedUnaryMethod_GetInputCount<WithStreamedUnaryMethod_StreamInputs<WithStreamedUnaryMethod_GetInputSamples<WithStreamedUnaryMethod_GetInput<WithStreamedUnaryMethod_ListInputs<WithStreamedUnaryMethod_PostInputs<WithStreamedUnaryMethod_PatchInputs<WithStreamedUnaryMethod_DeleteInput<WithStreamedUnaryMethod_DeleteInputs<WithStreamedUnaryMethod_PatchInputsSearches<WithStreamedUnaryMethod_PostInputsSearches<WithStreamedUnaryMethod_PostModelOutputs<WithStreamedUnaryMethod_ListDatasets<WithStreamedUnaryMethod_GetDataset<WithStreamedUnaryMethod_PostDatasets<WithStreamedUnaryMethod_PatchDatasets<WithStreamedUnaryMethod_DeleteDatasets<WithStreamedUnaryMethod_ListDatasetInputs<WithStreamedUnaryMethod_GetDatasetInput<WithStreamedUnaryMethod_PostDatasetInputs<WithStreamedUnaryMethod_DeleteDatasetInputs<WithStreamedUnaryMethod_ListDatasetVersions<WithStreamedUnaryMethod_GetDatasetVersion<WithStreamedUnaryMethod_ListDatasetVersionMetricsGroups<WithStreamedUnaryMethod_PostDatasetVersions<WithStreamedUnaryMethod_PatchDatasetVersions<WithStreamedUnaryMethod_DeleteDatasetVersions<WithStreamedUnaryMethod_GetModelType<WithStreamedUnaryMethod_ListOpenSourceLicenses<WithStreamedUnaryMethod_ListModelTypes<WithStreamedUnaryMethod_GetModel<WithStreamedUnaryMethod_GetModelOutputInfo<WithStreamedUnaryMethod_ListModels<WithStreamedUnaryMethod_PostModelsSearches<WithStreamedUnaryMethod_PostModels<WithStreamedUnaryMethod_PatchModels<WithStreamedUnaryMethod_PatchModelIds<WithStreamedUnaryMethod_DeleteModel<WithStreamedUnaryMethod_DeleteModels<WithStreamedUnaryMethod_PatchModelToolkits<WithStreamedUnaryMethod_PatchModelUseCases<WithStreamedUnaryMethod_PatchModelLanguages<WithStreamedUnaryMethod_ListModelInputs<WithStreamedUnaryMethod_GetModelVersion<WithStreamedUnaryMethod_ListModelVersions<WithStreamedUnaryMethod_PostWorkflowVersionsUnPublish<WithStreamedUnaryMethod_PostWorkflowVersionsPublish<WithStreamedUnaryMethod_PostModelVersionsPublish<WithStreamedUnaryMethod_PostModelVersionsUnPublish<WithStreamedUnaryMethod_PostModelVersions<WithStreamedUnaryMethod_PatchModelVersions<WithStreamedUnaryMethod_DeleteModelVersion<WithStreamedUnaryMethod_GetModelVersionMetrics<WithStreamedUnaryMethod_PostModelVersionMetrics<WithStreamedUnaryMethod_ListModelReferences<WithStreamedUnaryMethod_GetModelVersionInputExample<WithStreamedUnaryMethod_ListModelVersionInputExamples<WithStreamedUnaryMethod_GetWorkflow<WithStreamedUnaryMethod_ListWorkflows<WithStreamedUnaryMethod_PostWorkflows<WithStreamedUnaryMethod_PatchWorkflows<WithStreamedUnaryMethod_DeleteWorkflow<WithStreamedUnaryMethod_DeleteWorkflows<WithStreamedUnaryMethod_PostWorkflowResults<WithStreamedUnaryMethod_PostWorkflowResultsSimilarity<WithStreamedUnaryMethod_ListWorkflowVersions<WithStreamedUnaryMethod_GetWorkflowVersion<WithStreamedUnaryMethod_DeleteWorkflowVersions<WithStreamedUnaryMethod_PatchWorkflowVersions<WithStreamedUnaryMethod_GetKey<WithStreamedUnaryMethod_ListKeys<WithStreamedUnaryMethod_ListAppKeys<WithStreamedUnaryMethod_DeleteKey<WithStreamedUnaryMethod_PostKeys<WithStreamedUnaryMethod_PatchKeys<WithStreamedUnaryMethod_MyScopes<WithStreamedUnaryMethod_MyScopesUser<WithStreamedUnaryMethod_MyScopesRoot<WithStreamedUnaryMethod_ListScopes<WithStreamedUnaryMethod_GetApp<WithStreamedUnaryMethod_ListApps<WithStreamedUnaryMethod_DeleteApp<WithStreamedUnaryMethod_PostApps<WithStreamedUnaryMethod_PatchApps<WithStreamedUnaryMethod_PatchApp<WithStreamedUnaryMethod_PatchAppsIds<WithStreamedUnaryMethod_PostAppsSearches<WithStreamedUnaryMethod_PostValidatePassword<WithStreamedUnaryMethod_GetSearch<WithStreamedUnaryMethod_ListSearches<WithStreamedUnaryMethod_PatchSearches<WithStreamedUnaryMethod_PostSearches<WithStreamedUnaryMethod_PostSearchesByID<WithStreamedUnaryMethod_PostAnnotationSearchMetrics<WithStreamedUnaryMethod_GetAnnotationSearchMetrics<WithStreamedUnaryMethod_ListAnnotationSearchMetrics<WithStreamedUnaryMethod_DeleteAnnotationSearchMetrics<WithStreamedUnaryMethod_DeleteSearch<WithStreamedUnaryMethod_ListAnnotationFilters<WithStreamedUnaryMethod_GetAnnotationFilter<WithStreamedUnaryMethod_PostAnnotationFilters<WithStreamedUnaryMethod_PatchAnnotationFilters<WithStreamedUnaryMethod_DeleteAnnotationFilters<WithStreamedUnaryMethod_ListStatusCodes<WithStreamedUnaryMethod_GetStatusCode<WithStreamedUnaryMethod_ListCollaborators<WithStreamedUnaryMethod_PostCollaborators<WithStreamedUnaryMethod_PatchCollaborators<WithStreamedUnaryMethod_DeleteCollaborators<WithStreamedUnaryMethod_ListCollaborations<WithStreamedUnaryMethod_PostAppDuplications<WithStreamedUnaryMethod_ListAppDuplications<WithStreamedUnaryMethod_GetAppDuplication<WithStreamedUnaryMethod_PostTasks<WithStreamedUnaryMethod_GetTaskAnnotationCount<WithStreamedUnaryMethod_GetTaskInputCount<WithStreamedUnaryMethod_GetTask<WithStreamedUnaryMethod_ListTasks<WithStreamedUnaryMethod_PatchTasks<WithStreamedUnaryMethod_DeleteTasks<WithStreamedUnaryMethod_PostLabelOrders<WithStreamedUnaryMethod_GetLabelOrder<WithStreamedUnaryMethod_ListLabelOrders<WithStreamedUnaryMethod_PatchLabelOrders<WithStreamedUnaryMethod_DeleteLabelOrders<WithStreamedUnaryMethod_PostCollectors<WithStreamedUnaryMethod_GetCollector<WithStreamedUnaryMethod_ListCollectors<WithStreamedUnaryMethod_PatchCollectors<WithStreamedUnaryMethod_DeleteCollectors<WithStreamedUnaryMethod_PostStatValues<WithStreamedUnaryMethod_PostStatValuesAggregate<WithStreamedUnaryMethod_PostTrendingMetricsView<WithStreamedUnaryMethod_ListTrendingMetricsViews<WithStreamedUnaryMethod_PostBulkOperations<WithStreamedUnaryMethod_ListBulkOperations<WithStreamedUnaryMethod_GetBulkOperation<WithStreamedUnaryMethod_CancelBulkOperations<WithStreamedUnaryMethod_DeleteBulkOperations<WithStreamedUnaryMethod_GetDatasetInputsSearchAddJob<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace api
}  // namespace clarifai


#endif  // GRPC_proto_2fclarifai_2fapi_2fservice_2eproto__INCLUDED
