// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/utils/test_proto.proto

#include "proto/clarifai/api/utils/test_proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace clarifai {
namespace api {
namespace utils {
constexpr TestProto::TestProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0)
  , _oneof_case_{}{}
struct TestProtoDefaultTypeInternal {
  constexpr TestProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestProtoDefaultTypeInternal() {}
  union {
    TestProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestProtoDefaultTypeInternal _TestProto_default_instance_;
constexpr TestProto2::TestProto2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flip_(false){}
struct TestProto2DefaultTypeInternal {
  constexpr TestProto2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestProto2DefaultTypeInternal() {}
  union {
    TestProto2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestProto2DefaultTypeInternal _TestProto2_default_instance_;
}  // namespace utils
}  // namespace api
}  // namespace clarifai
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto = nullptr;

const uint32_t TableStruct_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::utils::TestProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::utils::TestProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::utils::TestProto, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::utils::TestProto, message_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::utils::TestProto, value_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::utils::TestProto, image_bytes_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::utils::TestProto, one_of_field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::utils::TestProto2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::utils::TestProto2, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::utils::TestProto2, flip_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::clarifai::api::utils::TestProto)},
  { 14, -1, -1, sizeof(::clarifai::api::utils::TestProto2)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::utils::_TestProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::utils::_TestProto2_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)proto/clarifai/api/utils/test_proto.pr"
  "oto\022\022clarifai.api.utils\032)proto/clarifai/"
  "api/utils/extensions.proto\"\345\001\n\tTestProto"
  "\022\n\n\002id\030\001 \001(\t\022(\n\007message\030\002 \001(\tB\027\200\265\030\001\212\265\030\017p"
  "rotos are cool\022\026\n\005value\030\003 \001(\001B\007\325\265\030\000\000\200\?\022\023"
  "\n\013image_bytes\030\004 \001(\014\022\026\n\014string_oneof\030\005 \001("
  "\tH\000\022\024\n\nbool_oneof\030\006 \001(\010H\000\0227\n\rmessage_one"
  "of\030\007 \001(\0132\036.clarifai.api.utils.TestProto2"
  "H\000B\016\n\014one_of_field\"&\n\nTestProto2\022\n\n\002id\030\001"
  " \001(\t\022\014\n\004flip\030\002 \001(\010Be\n\033com.clarifai.grpc."
  "api.utilsP\001Z=github.com/Clarifai/clarifa"
  "i-go-grpc/proto/clarifai/api/utils\242\002\004CAI"
  "Pb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto_deps[1] = {
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fextensions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto = {
  false, false, 489, descriptor_table_protodef_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto, "proto/clarifai/api/utils/test_proto.proto", 
  &descriptor_table_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto_once, descriptor_table_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto, file_level_enum_descriptors_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto, file_level_service_descriptors_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto_getter() {
  return &descriptor_table_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto(&descriptor_table_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto);
namespace clarifai {
namespace api {
namespace utils {

// ===================================================================

class TestProto::_Internal {
 public:
  static const ::clarifai::api::utils::TestProto2& message_oneof(const TestProto* msg);
};

const ::clarifai::api::utils::TestProto2&
TestProto::_Internal::message_oneof(const TestProto* msg) {
  return *msg->one_of_field_.message_oneof_;
}
void TestProto::set_allocated_message_oneof(::clarifai::api::utils::TestProto2* message_oneof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_one_of_field();
  if (message_oneof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::clarifai::api::utils::TestProto2>::GetOwningArena(message_oneof);
    if (message_arena != submessage_arena) {
      message_oneof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_oneof, submessage_arena);
    }
    set_has_message_oneof();
    one_of_field_.message_oneof_ = message_oneof;
  }
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.utils.TestProto.message_oneof)
}
TestProto::TestProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.utils.TestProto)
}
TestProto::TestProto(const TestProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  image_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_bytes().empty()) {
    image_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_bytes(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  clear_has_one_of_field();
  switch (from.one_of_field_case()) {
    case kStringOneof: {
      _internal_set_string_oneof(from._internal_string_oneof());
      break;
    }
    case kBoolOneof: {
      _internal_set_bool_oneof(from._internal_bool_oneof());
      break;
    }
    case kMessageOneof: {
      _internal_mutable_message_oneof()->::clarifai::api::utils::TestProto2::MergeFrom(from._internal_message_oneof());
      break;
    }
    case ONE_OF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.utils.TestProto)
}

inline void TestProto::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = 0;
clear_has_one_of_field();
}

TestProto::~TestProto() {
  // @@protoc_insertion_point(destructor:clarifai.api.utils.TestProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TestProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_one_of_field()) {
    clear_one_of_field();
  }
}

void TestProto::ArenaDtor(void* object) {
  TestProto* _this = reinterpret_cast< TestProto* >(object);
  (void)_this;
}
void TestProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestProto::clear_one_of_field() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.utils.TestProto)
  switch (one_of_field_case()) {
    case kStringOneof: {
      one_of_field_.string_oneof_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kBoolOneof: {
      // No need to clear
      break;
    }
    case kMessageOneof: {
      if (GetArenaForAllocation() == nullptr) {
        delete one_of_field_.message_oneof_;
      }
      break;
    }
    case ONE_OF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONE_OF_FIELD_NOT_SET;
}


void TestProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.utils.TestProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  message_.ClearToEmpty();
  image_bytes_.ClearToEmpty();
  value_ = 0;
  clear_one_of_field();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.utils.TestProto.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_moretags) = "protos are cool"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.utils.TestProto.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double value = 3 [(.clarifai.api.utils.cl_default_float) = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bytes image_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_image_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string string_oneof = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_string_oneof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.utils.TestProto.string_oneof"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool_oneof = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_bool_oneof(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.utils.TestProto2 message_oneof = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_oneof(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.utils.TestProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.utils.TestProto.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string message = 2 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_moretags) = "protos are cool"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.utils.TestProto.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // double value = 3 [(.clarifai.api.utils.cl_default_float) = 1];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_value(), target);
  }

  // bytes image_bytes = 4;
  if (!this->_internal_image_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_image_bytes(), target);
  }

  // string string_oneof = 5;
  if (_internal_has_string_oneof()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_oneof().data(), static_cast<int>(this->_internal_string_oneof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.utils.TestProto.string_oneof");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_string_oneof(), target);
  }

  // bool bool_oneof = 6;
  if (_internal_has_bool_oneof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_bool_oneof(), target);
  }

  // .clarifai.api.utils.TestProto2 message_oneof = 7;
  if (_internal_has_message_oneof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::message_oneof(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.utils.TestProto)
  return target;
}

size_t TestProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.utils.TestProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string message = 2 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_moretags) = "protos are cool"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bytes image_bytes = 4;
  if (!this->_internal_image_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image_bytes());
  }

  // double value = 3 [(.clarifai.api.utils.cl_default_float) = 1];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  switch (one_of_field_case()) {
    // string string_oneof = 5;
    case kStringOneof: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_oneof());
      break;
    }
    // bool bool_oneof = 6;
    case kBoolOneof: {
      total_size += 1 + 1;
      break;
    }
    // .clarifai.api.utils.TestProto2 message_oneof = 7;
    case kMessageOneof: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *one_of_field_.message_oneof_);
      break;
    }
    case ONE_OF_FIELD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestProto::GetClassData() const { return &_class_data_; }

void TestProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestProto *>(to)->MergeFrom(
      static_cast<const TestProto &>(from));
}


void TestProto::MergeFrom(const TestProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.utils.TestProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_image_bytes().empty()) {
    _internal_set_image_bytes(from._internal_image_bytes());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _internal_set_value(from._internal_value());
  }
  switch (from.one_of_field_case()) {
    case kStringOneof: {
      _internal_set_string_oneof(from._internal_string_oneof());
      break;
    }
    case kBoolOneof: {
      _internal_set_bool_oneof(from._internal_bool_oneof());
      break;
    }
    case kMessageOneof: {
      _internal_mutable_message_oneof()->::clarifai::api::utils::TestProto2::MergeFrom(from._internal_message_oneof());
      break;
    }
    case ONE_OF_FIELD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestProto::CopyFrom(const TestProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.utils.TestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestProto::IsInitialized() const {
  return true;
}

void TestProto::InternalSwap(TestProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_bytes_, lhs_arena,
      &other->image_bytes_, rhs_arena
  );
  swap(value_, other->value_);
  swap(one_of_field_, other->one_of_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto[0]);
}

// ===================================================================

class TestProto2::_Internal {
 public:
};

TestProto2::TestProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.utils.TestProto2)
}
TestProto2::TestProto2(const TestProto2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  flip_ = from.flip_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.utils.TestProto2)
}

inline void TestProto2::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
flip_ = false;
}

TestProto2::~TestProto2() {
  // @@protoc_insertion_point(destructor:clarifai.api.utils.TestProto2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TestProto2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestProto2::ArenaDtor(void* object) {
  TestProto2* _this = reinterpret_cast< TestProto2* >(object);
  (void)_this;
}
void TestProto2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestProto2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestProto2::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.utils.TestProto2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  flip_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestProto2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.utils.TestProto2.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestProto2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.utils.TestProto2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.utils.TestProto2.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bool flip = 2;
  if (this->_internal_flip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_flip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.utils.TestProto2)
  return target;
}

size_t TestProto2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.utils.TestProto2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool flip = 2;
  if (this->_internal_flip() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestProto2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestProto2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestProto2::GetClassData() const { return &_class_data_; }

void TestProto2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestProto2 *>(to)->MergeFrom(
      static_cast<const TestProto2 &>(from));
}


void TestProto2::MergeFrom(const TestProto2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.utils.TestProto2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_flip() != 0) {
    _internal_set_flip(from._internal_flip());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestProto2::CopyFrom(const TestProto2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.utils.TestProto2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestProto2::IsInitialized() const {
  return true;
}

void TestProto2::InternalSwap(TestProto2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(flip_, other->flip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestProto2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2futils_2ftest_5fproto_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace utils
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::api::utils::TestProto* Arena::CreateMaybeMessage< ::clarifai::api::utils::TestProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::utils::TestProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::utils::TestProto2* Arena::CreateMaybeMessage< ::clarifai::api::utils::TestProto2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::utils::TestProto2 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
