// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/resources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fapi_2fresources_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fapi_2fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/clarifai/api/status/status.pb.h"
#include "proto/clarifai/api/utils/extensions.pb.h"
#include "proto/clarifai/auth/util/extension.pb.h"
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fclarifai_2fapi_2fresources_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[117]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto;
namespace clarifai {
namespace api {
class APIPostModelOutputsCollectorSource;
class APIPostModelOutputsCollectorSourceDefaultTypeInternal;
extern APIPostModelOutputsCollectorSourceDefaultTypeInternal _APIPostModelOutputsCollectorSource_default_instance_;
class AiAssistParameters;
class AiAssistParametersDefaultTypeInternal;
extern AiAssistParametersDefaultTypeInternal _AiAssistParameters_default_instance_;
class And;
class AndDefaultTypeInternal;
extern AndDefaultTypeInternal _And_default_instance_;
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
class AnnotationSearchMetrics;
class AnnotationSearchMetricsDefaultTypeInternal;
extern AnnotationSearchMetricsDefaultTypeInternal _AnnotationSearchMetrics_default_instance_;
class App;
class AppDefaultTypeInternal;
extern AppDefaultTypeInternal _App_default_instance_;
class AppDuplication;
class AppDuplicationDefaultTypeInternal;
extern AppDuplicationDefaultTypeInternal _AppDuplication_default_instance_;
class AppDuplicationFilters;
class AppDuplicationFiltersDefaultTypeInternal;
extern AppDuplicationFiltersDefaultTypeInternal _AppDuplicationFilters_default_instance_;
class AppQuery;
class AppQueryDefaultTypeInternal;
extern AppQueryDefaultTypeInternal _AppQuery_default_instance_;
class Audio;
class AudioDefaultTypeInternal;
extern AudioDefaultTypeInternal _Audio_default_instance_;
class BinaryMetrics;
class BinaryMetricsDefaultTypeInternal;
extern BinaryMetricsDefaultTypeInternal _BinaryMetrics_default_instance_;
class BoundingBox;
class BoundingBoxDefaultTypeInternal;
extern BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class Collaboration;
class CollaborationDefaultTypeInternal;
extern CollaborationDefaultTypeInternal _Collaboration_default_instance_;
class Collaborator;
class CollaboratorDefaultTypeInternal;
extern CollaboratorDefaultTypeInternal _Collaborator_default_instance_;
class Collector;
class CollectorDefaultTypeInternal;
extern CollectorDefaultTypeInternal _Collector_default_instance_;
class CollectorSource;
class CollectorSourceDefaultTypeInternal;
extern CollectorSourceDefaultTypeInternal _CollectorSource_default_instance_;
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Concept;
class ConceptDefaultTypeInternal;
extern ConceptDefaultTypeInternal _Concept_default_instance_;
class ConceptCount;
class ConceptCountDefaultTypeInternal;
extern ConceptCountDefaultTypeInternal _ConceptCount_default_instance_;
class ConceptLanguage;
class ConceptLanguageDefaultTypeInternal;
extern ConceptLanguageDefaultTypeInternal _ConceptLanguage_default_instance_;
class ConceptMappingJob;
class ConceptMappingJobDefaultTypeInternal;
extern ConceptMappingJobDefaultTypeInternal _ConceptMappingJob_default_instance_;
class ConceptQuery;
class ConceptQueryDefaultTypeInternal;
extern ConceptQueryDefaultTypeInternal _ConceptQuery_default_instance_;
class ConceptRelation;
class ConceptRelationDefaultTypeInternal;
extern ConceptRelationDefaultTypeInternal _ConceptRelation_default_instance_;
class ConceptTypeCount;
class ConceptTypeCountDefaultTypeInternal;
extern ConceptTypeCountDefaultTypeInternal _ConceptTypeCount_default_instance_;
class ConfusionMatrix;
class ConfusionMatrixDefaultTypeInternal;
extern ConfusionMatrixDefaultTypeInternal _ConfusionMatrix_default_instance_;
class ConfusionMatrixEntry;
class ConfusionMatrixEntryDefaultTypeInternal;
extern ConfusionMatrixEntryDefaultTypeInternal _ConfusionMatrixEntry_default_instance_;
class CooccurrenceMatrix;
class CooccurrenceMatrixDefaultTypeInternal;
extern CooccurrenceMatrixDefaultTypeInternal _CooccurrenceMatrix_default_instance_;
class CooccurrenceMatrixEntry;
class CooccurrenceMatrixEntryDefaultTypeInternal;
extern CooccurrenceMatrixEntryDefaultTypeInternal _CooccurrenceMatrixEntry_default_instance_;
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class DetailConceptCount;
class DetailConceptCountDefaultTypeInternal;
extern DetailConceptCountDefaultTypeInternal _DetailConceptCount_default_instance_;
class EmailAddress;
class EmailAddressDefaultTypeInternal;
extern EmailAddressDefaultTypeInternal _EmailAddress_default_instance_;
class Embedding;
class EmbeddingDefaultTypeInternal;
extern EmbeddingDefaultTypeInternal _Embedding_default_instance_;
class EndpointDeps;
class EndpointDepsDefaultTypeInternal;
extern EndpointDepsDefaultTypeInternal _EndpointDeps_default_instance_;
class EvalMetrics;
class EvalMetricsDefaultTypeInternal;
extern EvalMetricsDefaultTypeInternal _EvalMetrics_default_instance_;
class EvalTestSetEntry;
class EvalTestSetEntryDefaultTypeInternal;
extern EvalTestSetEntryDefaultTypeInternal _EvalTestSetEntry_default_instance_;
class FieldsValue;
class FieldsValueDefaultTypeInternal;
extern FieldsValueDefaultTypeInternal _FieldsValue_default_instance_;
class Filter;
class FilterDefaultTypeInternal;
extern FilterDefaultTypeInternal _Filter_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class FrameInfo;
class FrameInfoDefaultTypeInternal;
extern FrameInfoDefaultTypeInternal _FrameInfo_default_instance_;
class Geo;
class GeoDefaultTypeInternal;
extern GeoDefaultTypeInternal _Geo_default_instance_;
class GeoBoxedPoint;
class GeoBoxedPointDefaultTypeInternal;
extern GeoBoxedPointDefaultTypeInternal _GeoBoxedPoint_default_instance_;
class GeoLimit;
class GeoLimitDefaultTypeInternal;
extern GeoLimitDefaultTypeInternal _GeoLimit_default_instance_;
class GeoPoint;
class GeoPointDefaultTypeInternal;
extern GeoPointDefaultTypeInternal _GeoPoint_default_instance_;
class Hit;
class HitDefaultTypeInternal;
extern HitDefaultTypeInternal _Hit_default_instance_;
class HostedURL;
class HostedURLDefaultTypeInternal;
extern HostedURLDefaultTypeInternal _HostedURL_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Input;
class InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class InputCount;
class InputCountDefaultTypeInternal;
extern InputCountDefaultTypeInternal _InputCount_default_instance_;
class InputInfo;
class InputInfoDefaultTypeInternal;
extern InputInfoDefaultTypeInternal _InputInfo_default_instance_;
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class KnowledgeGraph;
class KnowledgeGraphDefaultTypeInternal;
extern KnowledgeGraphDefaultTypeInternal _KnowledgeGraph_default_instance_;
class LOPQEvalResult;
class LOPQEvalResultDefaultTypeInternal;
extern LOPQEvalResultDefaultTypeInternal _LOPQEvalResult_default_instance_;
class LabelCount;
class LabelCountDefaultTypeInternal;
extern LabelCountDefaultTypeInternal _LabelCount_default_instance_;
class LabelDistribution;
class LabelDistributionDefaultTypeInternal;
extern LabelDistributionDefaultTypeInternal _LabelDistribution_default_instance_;
class LossCurveEntry;
class LossCurveEntryDefaultTypeInternal;
extern LossCurveEntryDefaultTypeInternal _LossCurveEntry_default_instance_;
class Mask;
class MaskDefaultTypeInternal;
extern MaskDefaultTypeInternal _Mask_default_instance_;
class MetricsSummary;
class MetricsSummaryDefaultTypeInternal;
extern MetricsSummaryDefaultTypeInternal _MetricsSummary_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class ModelQuery;
class ModelQueryDefaultTypeInternal;
extern ModelQueryDefaultTypeInternal _ModelQuery_default_instance_;
class ModelReference;
class ModelReferenceDefaultTypeInternal;
extern ModelReferenceDefaultTypeInternal _ModelReference_default_instance_;
class ModelType;
class ModelTypeDefaultTypeInternal;
extern ModelTypeDefaultTypeInternal _ModelType_default_instance_;
class ModelTypeEnumOption;
class ModelTypeEnumOptionDefaultTypeInternal;
extern ModelTypeEnumOptionDefaultTypeInternal _ModelTypeEnumOption_default_instance_;
class ModelTypeField;
class ModelTypeFieldDefaultTypeInternal;
extern ModelTypeFieldDefaultTypeInternal _ModelTypeField_default_instance_;
class ModelTypeRangeInfo;
class ModelTypeRangeInfoDefaultTypeInternal;
extern ModelTypeRangeInfoDefaultTypeInternal _ModelTypeRangeInfo_default_instance_;
class ModelVersion;
class ModelVersionDefaultTypeInternal;
extern ModelVersionDefaultTypeInternal _ModelVersion_default_instance_;
class ModelVersionInputExample;
class ModelVersionInputExampleDefaultTypeInternal;
extern ModelVersionInputExampleDefaultTypeInternal _ModelVersionInputExample_default_instance_;
class NodeInput;
class NodeInputDefaultTypeInternal;
extern NodeInputDefaultTypeInternal _NodeInput_default_instance_;
class Output;
class OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class OutputConfig;
class OutputConfigDefaultTypeInternal;
extern OutputConfigDefaultTypeInternal _OutputConfig_default_instance_;
class OutputInfo;
class OutputInfoDefaultTypeInternal;
extern OutputInfoDefaultTypeInternal _OutputInfo_default_instance_;
class Password;
class PasswordDefaultTypeInternal;
extern PasswordDefaultTypeInternal _Password_default_instance_;
class PasswordViolations;
class PasswordViolationsDefaultTypeInternal;
extern PasswordViolationsDefaultTypeInternal _PasswordViolations_default_instance_;
class PatchAction;
class PatchActionDefaultTypeInternal;
extern PatchActionDefaultTypeInternal _PatchAction_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class PrecisionRecallCurve;
class PrecisionRecallCurveDefaultTypeInternal;
extern PrecisionRecallCurveDefaultTypeInternal _PrecisionRecallCurve_default_instance_;
class PretrainedModelConfig;
class PretrainedModelConfigDefaultTypeInternal;
extern PretrainedModelConfigDefaultTypeInternal _PretrainedModelConfig_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class ROC;
class ROCDefaultTypeInternal;
extern ROCDefaultTypeInternal _ROC_default_instance_;
class Rank;
class RankDefaultTypeInternal;
extern RankDefaultTypeInternal _Rank_default_instance_;
class Region;
class RegionDefaultTypeInternal;
extern RegionDefaultTypeInternal _Region_default_instance_;
class RegionInfo;
class RegionInfoDefaultTypeInternal;
extern RegionInfoDefaultTypeInternal _RegionInfo_default_instance_;
class ScopeDeps;
class ScopeDepsDefaultTypeInternal;
extern ScopeDepsDefaultTypeInternal _ScopeDeps_default_instance_;
class Search;
class SearchDefaultTypeInternal;
extern SearchDefaultTypeInternal _Search_default_instance_;
class StatValue;
class StatValueDefaultTypeInternal;
extern StatValueDefaultTypeInternal _StatValue_default_instance_;
class StatValueAggregate;
class StatValueAggregateDefaultTypeInternal;
extern StatValueAggregateDefaultTypeInternal _StatValueAggregate_default_instance_;
class StatValueAggregateQuery;
class StatValueAggregateQueryDefaultTypeInternal;
extern StatValueAggregateQueryDefaultTypeInternal _StatValueAggregateQuery_default_instance_;
class StatValueAggregateResult;
class StatValueAggregateResultDefaultTypeInternal;
extern StatValueAggregateResultDefaultTypeInternal _StatValueAggregateResult_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskAIAssistant;
class TaskAIAssistantDefaultTypeInternal;
extern TaskAIAssistantDefaultTypeInternal _TaskAIAssistant_default_instance_;
class TaskInputSource;
class TaskInputSourceDefaultTypeInternal;
extern TaskInputSourceDefaultTypeInternal _TaskInputSource_default_instance_;
class TaskReview;
class TaskReviewDefaultTypeInternal;
extern TaskReviewDefaultTypeInternal _TaskReview_default_instance_;
class TaskReviewConsensusStrategyInfo;
class TaskReviewConsensusStrategyInfoDefaultTypeInternal;
extern TaskReviewConsensusStrategyInfoDefaultTypeInternal _TaskReviewConsensusStrategyInfo_default_instance_;
class TaskReviewManualStrategyInfo;
class TaskReviewManualStrategyInfoDefaultTypeInternal;
extern TaskReviewManualStrategyInfoDefaultTypeInternal _TaskReviewManualStrategyInfo_default_instance_;
class TaskStatusCountPerUser;
class TaskStatusCountPerUserDefaultTypeInternal;
extern TaskStatusCountPerUserDefaultTypeInternal _TaskStatusCountPerUser_default_instance_;
class TaskWorker;
class TaskWorkerDefaultTypeInternal;
extern TaskWorkerDefaultTypeInternal _TaskWorker_default_instance_;
class TaskWorkerPartitionedStrategyInfo;
class TaskWorkerPartitionedStrategyInfoDefaultTypeInternal;
extern TaskWorkerPartitionedStrategyInfoDefaultTypeInternal _TaskWorkerPartitionedStrategyInfo_default_instance_;
class Text;
class TextDefaultTypeInternal;
extern TextDefaultTypeInternal _Text_default_instance_;
class TimeRange;
class TimeRangeDefaultTypeInternal;
extern TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
class Track;
class TrackDefaultTypeInternal;
extern TrackDefaultTypeInternal _Track_default_instance_;
class Track_TrackInfo;
class Track_TrackInfoDefaultTypeInternal;
extern Track_TrackInfoDefaultTypeInternal _Track_TrackInfo_default_instance_;
class TrackerMetrics;
class TrackerMetricsDefaultTypeInternal;
extern TrackerMetricsDefaultTypeInternal _TrackerMetrics_default_instance_;
class TrainInfo;
class TrainInfoDefaultTypeInternal;
extern TrainInfoDefaultTypeInternal _TrainInfo_default_instance_;
class TrainStats;
class TrainStatsDefaultTypeInternal;
extern TrainStatsDefaultTypeInternal _TrainStats_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserAppIDSet;
class UserAppIDSetDefaultTypeInternal;
extern UserAppIDSetDefaultTypeInternal _UserAppIDSet_default_instance_;
class UserDetail;
class UserDetailDefaultTypeInternal;
extern UserDetailDefaultTypeInternal _UserDetail_default_instance_;
class Video;
class VideoDefaultTypeInternal;
extern VideoDefaultTypeInternal _Video_default_instance_;
class Visibility;
class VisibilityDefaultTypeInternal;
extern VisibilityDefaultTypeInternal _Visibility_default_instance_;
class W3C;
class W3CDefaultTypeInternal;
extern W3CDefaultTypeInternal _W3C_default_instance_;
class Workflow;
class WorkflowDefaultTypeInternal;
extern WorkflowDefaultTypeInternal _Workflow_default_instance_;
class WorkflowNode;
class WorkflowNodeDefaultTypeInternal;
extern WorkflowNodeDefaultTypeInternal _WorkflowNode_default_instance_;
class WorkflowResult;
class WorkflowResultDefaultTypeInternal;
extern WorkflowResultDefaultTypeInternal _WorkflowResult_default_instance_;
class WorkflowResultsSimilarity;
class WorkflowResultsSimilarityDefaultTypeInternal;
extern WorkflowResultsSimilarityDefaultTypeInternal _WorkflowResultsSimilarity_default_instance_;
class WorkflowState;
class WorkflowStateDefaultTypeInternal;
extern WorkflowStateDefaultTypeInternal _WorkflowState_default_instance_;
class WorkflowVersion;
class WorkflowVersionDefaultTypeInternal;
extern WorkflowVersionDefaultTypeInternal _WorkflowVersion_default_instance_;
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> ::clarifai::api::APIPostModelOutputsCollectorSource* Arena::CreateMaybeMessage<::clarifai::api::APIPostModelOutputsCollectorSource>(Arena*);
template<> ::clarifai::api::AiAssistParameters* Arena::CreateMaybeMessage<::clarifai::api::AiAssistParameters>(Arena*);
template<> ::clarifai::api::And* Arena::CreateMaybeMessage<::clarifai::api::And>(Arena*);
template<> ::clarifai::api::Annotation* Arena::CreateMaybeMessage<::clarifai::api::Annotation>(Arena*);
template<> ::clarifai::api::AnnotationSearchMetrics* Arena::CreateMaybeMessage<::clarifai::api::AnnotationSearchMetrics>(Arena*);
template<> ::clarifai::api::App* Arena::CreateMaybeMessage<::clarifai::api::App>(Arena*);
template<> ::clarifai::api::AppDuplication* Arena::CreateMaybeMessage<::clarifai::api::AppDuplication>(Arena*);
template<> ::clarifai::api::AppDuplicationFilters* Arena::CreateMaybeMessage<::clarifai::api::AppDuplicationFilters>(Arena*);
template<> ::clarifai::api::AppQuery* Arena::CreateMaybeMessage<::clarifai::api::AppQuery>(Arena*);
template<> ::clarifai::api::Audio* Arena::CreateMaybeMessage<::clarifai::api::Audio>(Arena*);
template<> ::clarifai::api::BinaryMetrics* Arena::CreateMaybeMessage<::clarifai::api::BinaryMetrics>(Arena*);
template<> ::clarifai::api::BoundingBox* Arena::CreateMaybeMessage<::clarifai::api::BoundingBox>(Arena*);
template<> ::clarifai::api::Cluster* Arena::CreateMaybeMessage<::clarifai::api::Cluster>(Arena*);
template<> ::clarifai::api::Collaboration* Arena::CreateMaybeMessage<::clarifai::api::Collaboration>(Arena*);
template<> ::clarifai::api::Collaborator* Arena::CreateMaybeMessage<::clarifai::api::Collaborator>(Arena*);
template<> ::clarifai::api::Collector* Arena::CreateMaybeMessage<::clarifai::api::Collector>(Arena*);
template<> ::clarifai::api::CollectorSource* Arena::CreateMaybeMessage<::clarifai::api::CollectorSource>(Arena*);
template<> ::clarifai::api::Color* Arena::CreateMaybeMessage<::clarifai::api::Color>(Arena*);
template<> ::clarifai::api::Concept* Arena::CreateMaybeMessage<::clarifai::api::Concept>(Arena*);
template<> ::clarifai::api::ConceptCount* Arena::CreateMaybeMessage<::clarifai::api::ConceptCount>(Arena*);
template<> ::clarifai::api::ConceptLanguage* Arena::CreateMaybeMessage<::clarifai::api::ConceptLanguage>(Arena*);
template<> ::clarifai::api::ConceptMappingJob* Arena::CreateMaybeMessage<::clarifai::api::ConceptMappingJob>(Arena*);
template<> ::clarifai::api::ConceptQuery* Arena::CreateMaybeMessage<::clarifai::api::ConceptQuery>(Arena*);
template<> ::clarifai::api::ConceptRelation* Arena::CreateMaybeMessage<::clarifai::api::ConceptRelation>(Arena*);
template<> ::clarifai::api::ConceptTypeCount* Arena::CreateMaybeMessage<::clarifai::api::ConceptTypeCount>(Arena*);
template<> ::clarifai::api::ConfusionMatrix* Arena::CreateMaybeMessage<::clarifai::api::ConfusionMatrix>(Arena*);
template<> ::clarifai::api::ConfusionMatrixEntry* Arena::CreateMaybeMessage<::clarifai::api::ConfusionMatrixEntry>(Arena*);
template<> ::clarifai::api::CooccurrenceMatrix* Arena::CreateMaybeMessage<::clarifai::api::CooccurrenceMatrix>(Arena*);
template<> ::clarifai::api::CooccurrenceMatrixEntry* Arena::CreateMaybeMessage<::clarifai::api::CooccurrenceMatrixEntry>(Arena*);
template<> ::clarifai::api::Data* Arena::CreateMaybeMessage<::clarifai::api::Data>(Arena*);
template<> ::clarifai::api::DetailConceptCount* Arena::CreateMaybeMessage<::clarifai::api::DetailConceptCount>(Arena*);
template<> ::clarifai::api::EmailAddress* Arena::CreateMaybeMessage<::clarifai::api::EmailAddress>(Arena*);
template<> ::clarifai::api::Embedding* Arena::CreateMaybeMessage<::clarifai::api::Embedding>(Arena*);
template<> ::clarifai::api::EndpointDeps* Arena::CreateMaybeMessage<::clarifai::api::EndpointDeps>(Arena*);
template<> ::clarifai::api::EvalMetrics* Arena::CreateMaybeMessage<::clarifai::api::EvalMetrics>(Arena*);
template<> ::clarifai::api::EvalTestSetEntry* Arena::CreateMaybeMessage<::clarifai::api::EvalTestSetEntry>(Arena*);
template<> ::clarifai::api::FieldsValue* Arena::CreateMaybeMessage<::clarifai::api::FieldsValue>(Arena*);
template<> ::clarifai::api::Filter* Arena::CreateMaybeMessage<::clarifai::api::Filter>(Arena*);
template<> ::clarifai::api::Frame* Arena::CreateMaybeMessage<::clarifai::api::Frame>(Arena*);
template<> ::clarifai::api::FrameInfo* Arena::CreateMaybeMessage<::clarifai::api::FrameInfo>(Arena*);
template<> ::clarifai::api::Geo* Arena::CreateMaybeMessage<::clarifai::api::Geo>(Arena*);
template<> ::clarifai::api::GeoBoxedPoint* Arena::CreateMaybeMessage<::clarifai::api::GeoBoxedPoint>(Arena*);
template<> ::clarifai::api::GeoLimit* Arena::CreateMaybeMessage<::clarifai::api::GeoLimit>(Arena*);
template<> ::clarifai::api::GeoPoint* Arena::CreateMaybeMessage<::clarifai::api::GeoPoint>(Arena*);
template<> ::clarifai::api::Hit* Arena::CreateMaybeMessage<::clarifai::api::Hit>(Arena*);
template<> ::clarifai::api::HostedURL* Arena::CreateMaybeMessage<::clarifai::api::HostedURL>(Arena*);
template<> ::clarifai::api::Image* Arena::CreateMaybeMessage<::clarifai::api::Image>(Arena*);
template<> ::clarifai::api::Input* Arena::CreateMaybeMessage<::clarifai::api::Input>(Arena*);
template<> ::clarifai::api::InputCount* Arena::CreateMaybeMessage<::clarifai::api::InputCount>(Arena*);
template<> ::clarifai::api::InputInfo* Arena::CreateMaybeMessage<::clarifai::api::InputInfo>(Arena*);
template<> ::clarifai::api::Key* Arena::CreateMaybeMessage<::clarifai::api::Key>(Arena*);
template<> ::clarifai::api::KnowledgeGraph* Arena::CreateMaybeMessage<::clarifai::api::KnowledgeGraph>(Arena*);
template<> ::clarifai::api::LOPQEvalResult* Arena::CreateMaybeMessage<::clarifai::api::LOPQEvalResult>(Arena*);
template<> ::clarifai::api::LabelCount* Arena::CreateMaybeMessage<::clarifai::api::LabelCount>(Arena*);
template<> ::clarifai::api::LabelDistribution* Arena::CreateMaybeMessage<::clarifai::api::LabelDistribution>(Arena*);
template<> ::clarifai::api::LossCurveEntry* Arena::CreateMaybeMessage<::clarifai::api::LossCurveEntry>(Arena*);
template<> ::clarifai::api::Mask* Arena::CreateMaybeMessage<::clarifai::api::Mask>(Arena*);
template<> ::clarifai::api::MetricsSummary* Arena::CreateMaybeMessage<::clarifai::api::MetricsSummary>(Arena*);
template<> ::clarifai::api::Model* Arena::CreateMaybeMessage<::clarifai::api::Model>(Arena*);
template<> ::clarifai::api::ModelQuery* Arena::CreateMaybeMessage<::clarifai::api::ModelQuery>(Arena*);
template<> ::clarifai::api::ModelReference* Arena::CreateMaybeMessage<::clarifai::api::ModelReference>(Arena*);
template<> ::clarifai::api::ModelType* Arena::CreateMaybeMessage<::clarifai::api::ModelType>(Arena*);
template<> ::clarifai::api::ModelTypeEnumOption* Arena::CreateMaybeMessage<::clarifai::api::ModelTypeEnumOption>(Arena*);
template<> ::clarifai::api::ModelTypeField* Arena::CreateMaybeMessage<::clarifai::api::ModelTypeField>(Arena*);
template<> ::clarifai::api::ModelTypeRangeInfo* Arena::CreateMaybeMessage<::clarifai::api::ModelTypeRangeInfo>(Arena*);
template<> ::clarifai::api::ModelVersion* Arena::CreateMaybeMessage<::clarifai::api::ModelVersion>(Arena*);
template<> ::clarifai::api::ModelVersionInputExample* Arena::CreateMaybeMessage<::clarifai::api::ModelVersionInputExample>(Arena*);
template<> ::clarifai::api::NodeInput* Arena::CreateMaybeMessage<::clarifai::api::NodeInput>(Arena*);
template<> ::clarifai::api::Output* Arena::CreateMaybeMessage<::clarifai::api::Output>(Arena*);
template<> ::clarifai::api::OutputConfig* Arena::CreateMaybeMessage<::clarifai::api::OutputConfig>(Arena*);
template<> ::clarifai::api::OutputInfo* Arena::CreateMaybeMessage<::clarifai::api::OutputInfo>(Arena*);
template<> ::clarifai::api::Password* Arena::CreateMaybeMessage<::clarifai::api::Password>(Arena*);
template<> ::clarifai::api::PasswordViolations* Arena::CreateMaybeMessage<::clarifai::api::PasswordViolations>(Arena*);
template<> ::clarifai::api::PatchAction* Arena::CreateMaybeMessage<::clarifai::api::PatchAction>(Arena*);
template<> ::clarifai::api::Point* Arena::CreateMaybeMessage<::clarifai::api::Point>(Arena*);
template<> ::clarifai::api::Polygon* Arena::CreateMaybeMessage<::clarifai::api::Polygon>(Arena*);
template<> ::clarifai::api::PrecisionRecallCurve* Arena::CreateMaybeMessage<::clarifai::api::PrecisionRecallCurve>(Arena*);
template<> ::clarifai::api::PretrainedModelConfig* Arena::CreateMaybeMessage<::clarifai::api::PretrainedModelConfig>(Arena*);
template<> ::clarifai::api::Query* Arena::CreateMaybeMessage<::clarifai::api::Query>(Arena*);
template<> ::clarifai::api::ROC* Arena::CreateMaybeMessage<::clarifai::api::ROC>(Arena*);
template<> ::clarifai::api::Rank* Arena::CreateMaybeMessage<::clarifai::api::Rank>(Arena*);
template<> ::clarifai::api::Region* Arena::CreateMaybeMessage<::clarifai::api::Region>(Arena*);
template<> ::clarifai::api::RegionInfo* Arena::CreateMaybeMessage<::clarifai::api::RegionInfo>(Arena*);
template<> ::clarifai::api::ScopeDeps* Arena::CreateMaybeMessage<::clarifai::api::ScopeDeps>(Arena*);
template<> ::clarifai::api::Search* Arena::CreateMaybeMessage<::clarifai::api::Search>(Arena*);
template<> ::clarifai::api::StatValue* Arena::CreateMaybeMessage<::clarifai::api::StatValue>(Arena*);
template<> ::clarifai::api::StatValueAggregate* Arena::CreateMaybeMessage<::clarifai::api::StatValueAggregate>(Arena*);
template<> ::clarifai::api::StatValueAggregateQuery* Arena::CreateMaybeMessage<::clarifai::api::StatValueAggregateQuery>(Arena*);
template<> ::clarifai::api::StatValueAggregateResult* Arena::CreateMaybeMessage<::clarifai::api::StatValueAggregateResult>(Arena*);
template<> ::clarifai::api::Task* Arena::CreateMaybeMessage<::clarifai::api::Task>(Arena*);
template<> ::clarifai::api::TaskAIAssistant* Arena::CreateMaybeMessage<::clarifai::api::TaskAIAssistant>(Arena*);
template<> ::clarifai::api::TaskInputSource* Arena::CreateMaybeMessage<::clarifai::api::TaskInputSource>(Arena*);
template<> ::clarifai::api::TaskReview* Arena::CreateMaybeMessage<::clarifai::api::TaskReview>(Arena*);
template<> ::clarifai::api::TaskReviewConsensusStrategyInfo* Arena::CreateMaybeMessage<::clarifai::api::TaskReviewConsensusStrategyInfo>(Arena*);
template<> ::clarifai::api::TaskReviewManualStrategyInfo* Arena::CreateMaybeMessage<::clarifai::api::TaskReviewManualStrategyInfo>(Arena*);
template<> ::clarifai::api::TaskStatusCountPerUser* Arena::CreateMaybeMessage<::clarifai::api::TaskStatusCountPerUser>(Arena*);
template<> ::clarifai::api::TaskWorker* Arena::CreateMaybeMessage<::clarifai::api::TaskWorker>(Arena*);
template<> ::clarifai::api::TaskWorkerPartitionedStrategyInfo* Arena::CreateMaybeMessage<::clarifai::api::TaskWorkerPartitionedStrategyInfo>(Arena*);
template<> ::clarifai::api::Text* Arena::CreateMaybeMessage<::clarifai::api::Text>(Arena*);
template<> ::clarifai::api::TimeRange* Arena::CreateMaybeMessage<::clarifai::api::TimeRange>(Arena*);
template<> ::clarifai::api::Track* Arena::CreateMaybeMessage<::clarifai::api::Track>(Arena*);
template<> ::clarifai::api::Track_TrackInfo* Arena::CreateMaybeMessage<::clarifai::api::Track_TrackInfo>(Arena*);
template<> ::clarifai::api::TrackerMetrics* Arena::CreateMaybeMessage<::clarifai::api::TrackerMetrics>(Arena*);
template<> ::clarifai::api::TrainInfo* Arena::CreateMaybeMessage<::clarifai::api::TrainInfo>(Arena*);
template<> ::clarifai::api::TrainStats* Arena::CreateMaybeMessage<::clarifai::api::TrainStats>(Arena*);
template<> ::clarifai::api::User* Arena::CreateMaybeMessage<::clarifai::api::User>(Arena*);
template<> ::clarifai::api::UserAppIDSet* Arena::CreateMaybeMessage<::clarifai::api::UserAppIDSet>(Arena*);
template<> ::clarifai::api::UserDetail* Arena::CreateMaybeMessage<::clarifai::api::UserDetail>(Arena*);
template<> ::clarifai::api::Video* Arena::CreateMaybeMessage<::clarifai::api::Video>(Arena*);
template<> ::clarifai::api::Visibility* Arena::CreateMaybeMessage<::clarifai::api::Visibility>(Arena*);
template<> ::clarifai::api::W3C* Arena::CreateMaybeMessage<::clarifai::api::W3C>(Arena*);
template<> ::clarifai::api::Workflow* Arena::CreateMaybeMessage<::clarifai::api::Workflow>(Arena*);
template<> ::clarifai::api::WorkflowNode* Arena::CreateMaybeMessage<::clarifai::api::WorkflowNode>(Arena*);
template<> ::clarifai::api::WorkflowResult* Arena::CreateMaybeMessage<::clarifai::api::WorkflowResult>(Arena*);
template<> ::clarifai::api::WorkflowResultsSimilarity* Arena::CreateMaybeMessage<::clarifai::api::WorkflowResultsSimilarity>(Arena*);
template<> ::clarifai::api::WorkflowState* Arena::CreateMaybeMessage<::clarifai::api::WorkflowState>(Arena*);
template<> ::clarifai::api::WorkflowVersion* Arena::CreateMaybeMessage<::clarifai::api::WorkflowVersion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clarifai {
namespace api {

enum ModelTypeField_ModelTypeFieldType : int {
  ModelTypeField_ModelTypeFieldType_INVALID_MODEL_TYPE_FIELD_TYPE = 0,
  ModelTypeField_ModelTypeFieldType_BOOLEAN = 1,
  ModelTypeField_ModelTypeFieldType_STRING = 2,
  ModelTypeField_ModelTypeFieldType_NUMBER = 3,
  ModelTypeField_ModelTypeFieldType_ARRAY_OF_CONCEPTS = 4,
  ModelTypeField_ModelTypeFieldType_ARRAY_OF_CONCEPTS_WITH_THRESHOLD = 5,
  ModelTypeField_ModelTypeFieldType_RANGE = 7,
  ModelTypeField_ModelTypeFieldType_ENUM = 8,
  ModelTypeField_ModelTypeFieldType_COLLABORATORS = 9,
  ModelTypeField_ModelTypeFieldType_JSON = 10,
  ModelTypeField_ModelTypeFieldType_ARRAY_OF_NUMBERS = 11,
  ModelTypeField_ModelTypeFieldType_WORKFLOW_EMBED_MODELS = 12,
  ModelTypeField_ModelTypeFieldType_ARRAY_OF_STRINGS = 13,
  ModelTypeField_ModelTypeFieldType_ModelTypeField_ModelTypeFieldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ModelTypeField_ModelTypeFieldType_ModelTypeField_ModelTypeFieldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ModelTypeField_ModelTypeFieldType_IsValid(int value);
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField_ModelTypeFieldType_ModelTypeFieldType_MIN = ModelTypeField_ModelTypeFieldType_INVALID_MODEL_TYPE_FIELD_TYPE;
constexpr ModelTypeField_ModelTypeFieldType ModelTypeField_ModelTypeFieldType_ModelTypeFieldType_MAX = ModelTypeField_ModelTypeFieldType_ARRAY_OF_STRINGS;
constexpr int ModelTypeField_ModelTypeFieldType_ModelTypeFieldType_ARRAYSIZE = ModelTypeField_ModelTypeFieldType_ModelTypeFieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelTypeField_ModelTypeFieldType_descriptor();
template<typename T>
inline const std::string& ModelTypeField_ModelTypeFieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModelTypeField_ModelTypeFieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModelTypeField_ModelTypeFieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModelTypeField_ModelTypeFieldType_descriptor(), enum_t_value);
}
inline bool ModelTypeField_ModelTypeFieldType_Parse(
    const std::string& name, ModelTypeField_ModelTypeFieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModelTypeField_ModelTypeFieldType>(
    ModelTypeField_ModelTypeFieldType_descriptor(), name, value);
}
enum Task_TaskType : int {
  Task_TaskType_TYPE_NOT_SET = 0,
  Task_TaskType_CONCEPTS_CLASSIFICATION = 1,
  Task_TaskType_BOUNDING_BOX_DETECTION = 2,
  Task_TaskType_POLYGON_DETECTION = 3,
  Task_TaskType_Task_TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Task_TaskType_Task_TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Task_TaskType_IsValid(int value);
constexpr Task_TaskType Task_TaskType_TaskType_MIN = Task_TaskType_TYPE_NOT_SET;
constexpr Task_TaskType Task_TaskType_TaskType_MAX = Task_TaskType_POLYGON_DETECTION;
constexpr int Task_TaskType_TaskType_ARRAYSIZE = Task_TaskType_TaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_TaskType_descriptor();
template<typename T>
inline const std::string& Task_TaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Task_TaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Task_TaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Task_TaskType_descriptor(), enum_t_value);
}
inline bool Task_TaskType_Parse(
    const std::string& name, Task_TaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Task_TaskType>(
    Task_TaskType_descriptor(), name, value);
}
enum TaskWorker_TaskWorkerStrategy : int {
  TaskWorker_TaskWorkerStrategy_WORKER_STRATEGY_NOT_SET = 0,
  TaskWorker_TaskWorkerStrategy_PARTITIONED = 2,
  TaskWorker_TaskWorkerStrategy_FULL = 3,
  TaskWorker_TaskWorkerStrategy_TaskWorker_TaskWorkerStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TaskWorker_TaskWorkerStrategy_TaskWorker_TaskWorkerStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TaskWorker_TaskWorkerStrategy_IsValid(int value);
constexpr TaskWorker_TaskWorkerStrategy TaskWorker_TaskWorkerStrategy_TaskWorkerStrategy_MIN = TaskWorker_TaskWorkerStrategy_WORKER_STRATEGY_NOT_SET;
constexpr TaskWorker_TaskWorkerStrategy TaskWorker_TaskWorkerStrategy_TaskWorkerStrategy_MAX = TaskWorker_TaskWorkerStrategy_FULL;
constexpr int TaskWorker_TaskWorkerStrategy_TaskWorkerStrategy_ARRAYSIZE = TaskWorker_TaskWorkerStrategy_TaskWorkerStrategy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskWorker_TaskWorkerStrategy_descriptor();
template<typename T>
inline const std::string& TaskWorker_TaskWorkerStrategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskWorker_TaskWorkerStrategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskWorker_TaskWorkerStrategy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskWorker_TaskWorkerStrategy_descriptor(), enum_t_value);
}
inline bool TaskWorker_TaskWorkerStrategy_Parse(
    const std::string& name, TaskWorker_TaskWorkerStrategy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskWorker_TaskWorkerStrategy>(
    TaskWorker_TaskWorkerStrategy_descriptor(), name, value);
}
enum TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy : int {
  TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_PARTITIONED_WORKER_STRATEGY_NOT_SET = 0,
  TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_EVENLY = 1,
  TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_WEIGHTED = 2,
  TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_IsValid(int value);
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_TaskWorkerPartitionedStrategy_MIN = TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_PARTITIONED_WORKER_STRATEGY_NOT_SET;
constexpr TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_TaskWorkerPartitionedStrategy_MAX = TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_WEIGHTED;
constexpr int TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_TaskWorkerPartitionedStrategy_ARRAYSIZE = TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_TaskWorkerPartitionedStrategy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_descriptor();
template<typename T>
inline const std::string& TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_descriptor(), enum_t_value);
}
inline bool TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_Parse(
    const std::string& name, TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy>(
    TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_descriptor(), name, value);
}
enum TaskInputSource_TaskInputSourceType : int {
  TaskInputSource_TaskInputSourceType_INPUT_SOURCE_TYPE_NOT_SET = 0,
  TaskInputSource_TaskInputSourceType_ALL_INPUTS = 1,
  TaskInputSource_TaskInputSourceType_SAVED_SEARCH = 2,
  TaskInputSource_TaskInputSourceType_TaskInputSource_TaskInputSourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TaskInputSource_TaskInputSourceType_TaskInputSource_TaskInputSourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TaskInputSource_TaskInputSourceType_IsValid(int value);
constexpr TaskInputSource_TaskInputSourceType TaskInputSource_TaskInputSourceType_TaskInputSourceType_MIN = TaskInputSource_TaskInputSourceType_INPUT_SOURCE_TYPE_NOT_SET;
constexpr TaskInputSource_TaskInputSourceType TaskInputSource_TaskInputSourceType_TaskInputSourceType_MAX = TaskInputSource_TaskInputSourceType_SAVED_SEARCH;
constexpr int TaskInputSource_TaskInputSourceType_TaskInputSourceType_ARRAYSIZE = TaskInputSource_TaskInputSourceType_TaskInputSourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskInputSource_TaskInputSourceType_descriptor();
template<typename T>
inline const std::string& TaskInputSource_TaskInputSourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskInputSource_TaskInputSourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskInputSource_TaskInputSourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskInputSource_TaskInputSourceType_descriptor(), enum_t_value);
}
inline bool TaskInputSource_TaskInputSourceType_Parse(
    const std::string& name, TaskInputSource_TaskInputSourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskInputSource_TaskInputSourceType>(
    TaskInputSource_TaskInputSourceType_descriptor(), name, value);
}
enum TaskReview_TaskReviewStrategy : int {
  TaskReview_TaskReviewStrategy_TASK_REVIEW_STRATEGY_NOT_SET = 0,
  TaskReview_TaskReviewStrategy_NONE = 1,
  TaskReview_TaskReviewStrategy_MANUAL = 2,
  TaskReview_TaskReviewStrategy_CONSENSUS = 3,
  TaskReview_TaskReviewStrategy_TaskReview_TaskReviewStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TaskReview_TaskReviewStrategy_TaskReview_TaskReviewStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TaskReview_TaskReviewStrategy_IsValid(int value);
constexpr TaskReview_TaskReviewStrategy TaskReview_TaskReviewStrategy_TaskReviewStrategy_MIN = TaskReview_TaskReviewStrategy_TASK_REVIEW_STRATEGY_NOT_SET;
constexpr TaskReview_TaskReviewStrategy TaskReview_TaskReviewStrategy_TaskReviewStrategy_MAX = TaskReview_TaskReviewStrategy_CONSENSUS;
constexpr int TaskReview_TaskReviewStrategy_TaskReviewStrategy_ARRAYSIZE = TaskReview_TaskReviewStrategy_TaskReviewStrategy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskReview_TaskReviewStrategy_descriptor();
template<typename T>
inline const std::string& TaskReview_TaskReviewStrategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskReview_TaskReviewStrategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskReview_TaskReviewStrategy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskReview_TaskReviewStrategy_descriptor(), enum_t_value);
}
inline bool TaskReview_TaskReviewStrategy_Parse(
    const std::string& name, TaskReview_TaskReviewStrategy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskReview_TaskReviewStrategy>(
    TaskReview_TaskReviewStrategy_descriptor(), name, value);
}
enum Visibility_Gettable : int {
  Visibility_Gettable_UNKNOWN_VISIBILITY = 0,
  Visibility_Gettable_PRIVATE = 10,
  Visibility_Gettable_ORG = 30,
  Visibility_Gettable_PUBLIC = 50,
  Visibility_Gettable_Visibility_Gettable_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Visibility_Gettable_Visibility_Gettable_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Visibility_Gettable_IsValid(int value);
constexpr Visibility_Gettable Visibility_Gettable_Gettable_MIN = Visibility_Gettable_UNKNOWN_VISIBILITY;
constexpr Visibility_Gettable Visibility_Gettable_Gettable_MAX = Visibility_Gettable_PUBLIC;
constexpr int Visibility_Gettable_Gettable_ARRAYSIZE = Visibility_Gettable_Gettable_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visibility_Gettable_descriptor();
template<typename T>
inline const std::string& Visibility_Gettable_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Visibility_Gettable>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Visibility_Gettable_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Visibility_Gettable_descriptor(), enum_t_value);
}
inline bool Visibility_Gettable_Parse(
    const std::string& name, Visibility_Gettable* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Visibility_Gettable>(
    Visibility_Gettable_descriptor(), name, value);
}
enum ExpirationAction : int {
  EXPIRATION_ACTION_NOT_SET = 0,
  DELAY = 1,
  EXPIRY = 2,
  ExpirationAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ExpirationAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ExpirationAction_IsValid(int value);
constexpr ExpirationAction ExpirationAction_MIN = EXPIRATION_ACTION_NOT_SET;
constexpr ExpirationAction ExpirationAction_MAX = EXPIRY;
constexpr int ExpirationAction_ARRAYSIZE = ExpirationAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExpirationAction_descriptor();
template<typename T>
inline const std::string& ExpirationAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExpirationAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExpirationAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExpirationAction_descriptor(), enum_t_value);
}
inline bool ExpirationAction_Parse(
    const std::string& name, ExpirationAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExpirationAction>(
    ExpirationAction_descriptor(), name, value);
}
enum LicenseScope : int {
  LICENSE_SCOPE_NOT_SET = 0,
  PREDICT = 1,
  TRAIN = 2,
  SEARCH = 3,
  LicenseScope_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LicenseScope_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LicenseScope_IsValid(int value);
constexpr LicenseScope LicenseScope_MIN = LICENSE_SCOPE_NOT_SET;
constexpr LicenseScope LicenseScope_MAX = SEARCH;
constexpr int LicenseScope_ARRAYSIZE = LicenseScope_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LicenseScope_descriptor();
template<typename T>
inline const std::string& LicenseScope_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LicenseScope>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LicenseScope_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LicenseScope_descriptor(), enum_t_value);
}
inline bool LicenseScope_Parse(
    const std::string& name, LicenseScope* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LicenseScope>(
    LicenseScope_descriptor(), name, value);
}
enum ValueComparator : int {
  CONCEPT_THRESHOLD_NOT_SET = 0,
  GREATER_THAN = 1,
  GREATER_THAN_OR_EQUAL = 2,
  LESS_THAN = 3,
  LESS_THAN_OR_EQUAL = 4,
  EQUAL = 5,
  ValueComparator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ValueComparator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ValueComparator_IsValid(int value);
constexpr ValueComparator ValueComparator_MIN = CONCEPT_THRESHOLD_NOT_SET;
constexpr ValueComparator ValueComparator_MAX = EQUAL;
constexpr int ValueComparator_ARRAYSIZE = ValueComparator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValueComparator_descriptor();
template<typename T>
inline const std::string& ValueComparator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ValueComparator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ValueComparator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ValueComparator_descriptor(), enum_t_value);
}
inline bool ValueComparator_Parse(
    const std::string& name, ValueComparator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ValueComparator>(
    ValueComparator_descriptor(), name, value);
}
enum EvaluationType : int {
  Classification = 0,
  Detection = 1,
  EvaluationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EvaluationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EvaluationType_IsValid(int value);
constexpr EvaluationType EvaluationType_MIN = Classification;
constexpr EvaluationType EvaluationType_MAX = Detection;
constexpr int EvaluationType_ARRAYSIZE = EvaluationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EvaluationType_descriptor();
template<typename T>
inline const std::string& EvaluationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EvaluationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EvaluationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EvaluationType_descriptor(), enum_t_value);
}
inline bool EvaluationType_Parse(
    const std::string& name, EvaluationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EvaluationType>(
    EvaluationType_descriptor(), name, value);
}
enum APIEventType : int {
  API_EVENT_TYPE_NOT_SET = 0,
  ON_PREM_PREDICT = 1,
  ON_PREM_TRAIN = 2,
  ON_PREM_SEARCH = 3,
  APIEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  APIEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool APIEventType_IsValid(int value);
constexpr APIEventType APIEventType_MIN = API_EVENT_TYPE_NOT_SET;
constexpr APIEventType APIEventType_MAX = ON_PREM_SEARCH;
constexpr int APIEventType_ARRAYSIZE = APIEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APIEventType_descriptor();
template<typename T>
inline const std::string& APIEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, APIEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function APIEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    APIEventType_descriptor(), enum_t_value);
}
inline bool APIEventType_Parse(
    const std::string& name, APIEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<APIEventType>(
    APIEventType_descriptor(), name, value);
}
enum UsageIntervalType : int {
  undef = 0,
  day = 1,
  month = 2,
  year = 3,
  UsageIntervalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UsageIntervalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UsageIntervalType_IsValid(int value);
constexpr UsageIntervalType UsageIntervalType_MIN = undef;
constexpr UsageIntervalType UsageIntervalType_MAX = year;
constexpr int UsageIntervalType_ARRAYSIZE = UsageIntervalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsageIntervalType_descriptor();
template<typename T>
inline const std::string& UsageIntervalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UsageIntervalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UsageIntervalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UsageIntervalType_descriptor(), enum_t_value);
}
inline bool UsageIntervalType_Parse(
    const std::string& name, UsageIntervalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UsageIntervalType>(
    UsageIntervalType_descriptor(), name, value);
}
enum RoleType : int {
  TEAM = 0,
  ORG = 1,
  RoleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RoleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RoleType_IsValid(int value);
constexpr RoleType RoleType_MIN = TEAM;
constexpr RoleType RoleType_MAX = ORG;
constexpr int RoleType_ARRAYSIZE = RoleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleType_descriptor();
template<typename T>
inline const std::string& RoleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoleType_descriptor(), enum_t_value);
}
inline bool RoleType_Parse(
    const std::string& name, RoleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoleType>(
    RoleType_descriptor(), name, value);
}
enum StatValueAggType : int {
  SUM = 0,
  AVG = 1,
  StatValueAggType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StatValueAggType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatValueAggType_IsValid(int value);
constexpr StatValueAggType StatValueAggType_MIN = SUM;
constexpr StatValueAggType StatValueAggType_MAX = AVG;
constexpr int StatValueAggType_ARRAYSIZE = StatValueAggType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatValueAggType_descriptor();
template<typename T>
inline const std::string& StatValueAggType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatValueAggType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatValueAggType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatValueAggType_descriptor(), enum_t_value);
}
inline bool StatValueAggType_Parse(
    const std::string& name, StatValueAggType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatValueAggType>(
    StatValueAggType_descriptor(), name, value);
}
enum StatTimeAggType : int {
  NO_TIME_AGG = 0,
  YEAR = 1,
  MONTH = 2,
  WEEK = 3,
  DAY = 4,
  HOUR = 5,
  MINUTE = 6,
  StatTimeAggType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StatTimeAggType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatTimeAggType_IsValid(int value);
constexpr StatTimeAggType StatTimeAggType_MIN = NO_TIME_AGG;
constexpr StatTimeAggType StatTimeAggType_MAX = MINUTE;
constexpr int StatTimeAggType_ARRAYSIZE = StatTimeAggType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatTimeAggType_descriptor();
template<typename T>
inline const std::string& StatTimeAggType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatTimeAggType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatTimeAggType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatTimeAggType_descriptor(), enum_t_value);
}
inline bool StatTimeAggType_Parse(
    const std::string& name, StatTimeAggType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatTimeAggType>(
    StatTimeAggType_descriptor(), name, value);
}
// ===================================================================

class Annotation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Annotation) */ {
 public:
  Annotation();
  virtual ~Annotation();

  Annotation(const Annotation& from);
  Annotation(Annotation&& from) noexcept
    : Annotation() {
    *this = ::std::move(from);
  }

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Annotation& operator=(Annotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Annotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Annotation& a, Annotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Annotation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Annotation* New() const final {
    return CreateMaybeMessage<Annotation>(nullptr);
  }

  Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Annotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Annotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kInputIdFieldNumber = 2,
    kEmbedModelVersionIdFieldNumber = 14,
    kUserIdFieldNumber = 15,
    kModelVersionIdFieldNumber = 16,
    kTaskIdFieldNumber = 19,
    kDataFieldNumber = 3,
    kStatusFieldNumber = 7,
    kCreatedAtFieldNumber = 8,
    kModifiedAtFieldNumber = 9,
    kAnnotationInfoFieldNumber = 13,
    kConsensusInfoFieldNumber = 18,
    kTrustedFieldNumber = 10,
    kInputLevelFieldNumber = 17,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string input_id = 2;
  void clear_input_id();
  const std::string& input_id() const;
  void set_input_id(const std::string& value);
  void set_input_id(std::string&& value);
  void set_input_id(const char* value);
  void set_input_id(const char* value, size_t size);
  std::string* mutable_input_id();
  std::string* release_input_id();
  void set_allocated_input_id(std::string* input_id);
  private:
  const std::string& _internal_input_id() const;
  void _internal_set_input_id(const std::string& value);
  std::string* _internal_mutable_input_id();
  public:

  // string embed_model_version_id = 14 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_embed_model_version_id();
  PROTOBUF_DEPRECATED const std::string& embed_model_version_id() const;
  PROTOBUF_DEPRECATED void set_embed_model_version_id(const std::string& value);
  PROTOBUF_DEPRECATED void set_embed_model_version_id(std::string&& value);
  PROTOBUF_DEPRECATED void set_embed_model_version_id(const char* value);
  PROTOBUF_DEPRECATED void set_embed_model_version_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_embed_model_version_id();
  PROTOBUF_DEPRECATED std::string* release_embed_model_version_id();
  PROTOBUF_DEPRECATED void set_allocated_embed_model_version_id(std::string* embed_model_version_id);
  private:
  const std::string& _internal_embed_model_version_id() const;
  void _internal_set_embed_model_version_id(const std::string& value);
  std::string* _internal_mutable_embed_model_version_id();
  public:

  // string user_id = 15;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string model_version_id = 16;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  void set_model_version_id(const std::string& value);
  void set_model_version_id(std::string&& value);
  void set_model_version_id(const char* value);
  void set_model_version_id(const char* value, size_t size);
  std::string* mutable_model_version_id();
  std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);
  private:
  const std::string& _internal_model_version_id() const;
  void _internal_set_model_version_id(const std::string& value);
  std::string* _internal_mutable_model_version_id();
  public:

  // string task_id = 19;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // .clarifai.api.Data data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:

  // .clarifai.api.status.Status status = 7;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .google.protobuf.Timestamp created_at = 8;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .google.protobuf.Timestamp modified_at = 9;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:

  // .google.protobuf.Struct annotation_info = 13;
  bool has_annotation_info() const;
  private:
  bool _internal_has_annotation_info() const;
  public:
  void clear_annotation_info();
  const PROTOBUF_NAMESPACE_ID::Struct& annotation_info() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_annotation_info();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_annotation_info();
  void set_allocated_annotation_info(PROTOBUF_NAMESPACE_ID::Struct* annotation_info);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_annotation_info() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_annotation_info();
  public:

  // .google.protobuf.Struct consensus_info = 18;
  bool has_consensus_info() const;
  private:
  bool _internal_has_consensus_info() const;
  public:
  void clear_consensus_info();
  const PROTOBUF_NAMESPACE_ID::Struct& consensus_info() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_consensus_info();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_consensus_info();
  void set_allocated_consensus_info(PROTOBUF_NAMESPACE_ID::Struct* consensus_info);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_consensus_info() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_consensus_info();
  public:

  // bool trusted = 10 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_trusted();
  PROTOBUF_DEPRECATED bool trusted() const;
  PROTOBUF_DEPRECATED void set_trusted(bool value);
  private:
  bool _internal_trusted() const;
  void _internal_set_trusted(bool value);
  public:

  // bool input_level = 17;
  void clear_input_level();
  bool input_level() const;
  void set_input_level(bool value);
  private:
  bool _internal_input_level() const;
  void _internal_set_input_level(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Annotation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr embed_model_version_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::clarifai::api::Data* data_;
  ::clarifai::api::status::Status* status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  PROTOBUF_NAMESPACE_ID::Struct* annotation_info_;
  PROTOBUF_NAMESPACE_ID::Struct* consensus_info_;
  bool trusted_;
  bool input_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class App :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.App) */ {
 public:
  App();
  virtual ~App();

  App(const App& from);
  App(App&& from) noexcept
    : App() {
    *this = ::std::move(from);
  }

  inline App& operator=(const App& from) {
    CopyFrom(from);
    return *this;
  }
  inline App& operator=(App&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const App& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const App* internal_default_instance() {
    return reinterpret_cast<const App*>(
               &_App_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(App& a, App& b) {
    a.Swap(&b);
  }
  inline void Swap(App* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline App* New() const final {
    return CreateMaybeMessage<App>(nullptr);
  }

  App* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<App>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const App& from);
  void MergeFrom(const App& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(App* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.App";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDefaultLanguageFieldNumber = 3,
    kDefaultWorkflowIdFieldNumber = 4,
    kUserIdFieldNumber = 5,
    kDescriptionFieldNumber = 14,
    kCreatedAtFieldNumber = 6,
    kMetadataFieldNumber = 13,
    kVisibilityFieldNumber = 16,
    kModifiedAtFieldNumber = 17,
    kLegalConsentStatusFieldNumber = 7,
    kSampleMsFieldNumber = 15,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string default_language = 3;
  void clear_default_language();
  const std::string& default_language() const;
  void set_default_language(const std::string& value);
  void set_default_language(std::string&& value);
  void set_default_language(const char* value);
  void set_default_language(const char* value, size_t size);
  std::string* mutable_default_language();
  std::string* release_default_language();
  void set_allocated_default_language(std::string* default_language);
  private:
  const std::string& _internal_default_language() const;
  void _internal_set_default_language(const std::string& value);
  std::string* _internal_mutable_default_language();
  public:

  // string default_workflow_id = 4;
  void clear_default_workflow_id();
  const std::string& default_workflow_id() const;
  void set_default_workflow_id(const std::string& value);
  void set_default_workflow_id(std::string&& value);
  void set_default_workflow_id(const char* value);
  void set_default_workflow_id(const char* value, size_t size);
  std::string* mutable_default_workflow_id();
  std::string* release_default_workflow_id();
  void set_allocated_default_workflow_id(std::string* default_workflow_id);
  private:
  const std::string& _internal_default_workflow_id() const;
  void _internal_set_default_workflow_id(const std::string& value);
  std::string* _internal_mutable_default_workflow_id();
  public:

  // string user_id = 5;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string description = 14;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .google.protobuf.Struct metadata = 13;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:

  // .clarifai.api.Visibility visibility = 16;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  const ::clarifai::api::Visibility& visibility() const;
  ::clarifai::api::Visibility* release_visibility();
  ::clarifai::api::Visibility* mutable_visibility();
  void set_allocated_visibility(::clarifai::api::Visibility* visibility);
  private:
  const ::clarifai::api::Visibility& _internal_visibility() const;
  ::clarifai::api::Visibility* _internal_mutable_visibility();
  public:

  // .google.protobuf.Timestamp modified_at = 17;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:

  // uint32 legal_consent_status = 7;
  void clear_legal_consent_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 legal_consent_status() const;
  void set_legal_consent_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_legal_consent_status() const;
  void _internal_set_legal_consent_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sample_ms = 15;
  void clear_sample_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_ms() const;
  void set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_ms() const;
  void _internal_set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.App)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_workflow_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  ::clarifai::api::Visibility* visibility_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  ::PROTOBUF_NAMESPACE_ID::uint32 legal_consent_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AppQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.AppQuery) */ {
 public:
  AppQuery();
  virtual ~AppQuery();

  AppQuery(const AppQuery& from);
  AppQuery(AppQuery&& from) noexcept
    : AppQuery() {
    *this = ::std::move(from);
  }

  inline AppQuery& operator=(const AppQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppQuery& operator=(AppQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppQuery* internal_default_instance() {
    return reinterpret_cast<const AppQuery*>(
               &_AppQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppQuery& a, AppQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(AppQuery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppQuery* New() const final {
    return CreateMaybeMessage<AppQuery>(nullptr);
  }

  AppQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppQuery& from);
  void MergeFrom(const AppQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.AppQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.AppQuery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Collaborator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Collaborator) */ {
 public:
  Collaborator();
  virtual ~Collaborator();

  Collaborator(const Collaborator& from);
  Collaborator(Collaborator&& from) noexcept
    : Collaborator() {
    *this = ::std::move(from);
  }

  inline Collaborator& operator=(const Collaborator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collaborator& operator=(Collaborator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collaborator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collaborator* internal_default_instance() {
    return reinterpret_cast<const Collaborator*>(
               &_Collaborator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Collaborator& a, Collaborator& b) {
    a.Swap(&b);
  }
  inline void Swap(Collaborator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collaborator* New() const final {
    return CreateMaybeMessage<Collaborator>(nullptr);
  }

  Collaborator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collaborator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collaborator& from);
  void MergeFrom(const Collaborator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collaborator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Collaborator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 4,
    kEndpointsFieldNumber = 5,
    kIdFieldNumber = 1,
    kAppFieldNumber = 2,
    kUserFieldNumber = 3,
    kCreatedAtFieldNumber = 6,
    kModifiedAtFieldNumber = 7,
    kDeletedAtFieldNumber = 8,
  };
  // repeated string scopes = 4;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated string endpoints = 5;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.App app = 2;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const ::clarifai::api::App& app() const;
  ::clarifai::api::App* release_app();
  ::clarifai::api::App* mutable_app();
  void set_allocated_app(::clarifai::api::App* app);
  private:
  const ::clarifai::api::App& _internal_app() const;
  ::clarifai::api::App* _internal_mutable_app();
  public:

  // .clarifai.api.User user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::clarifai::api::User& user() const;
  ::clarifai::api::User* release_user();
  ::clarifai::api::User* mutable_user();
  void set_allocated_user(::clarifai::api::User* user);
  private:
  const ::clarifai::api::User& _internal_user() const;
  ::clarifai::api::User* _internal_mutable_user();
  public:

  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .google.protobuf.Timestamp modified_at = 7;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:

  // .google.protobuf.Timestamp deleted_at = 8;
  bool has_deleted_at() const;
  private:
  bool _internal_has_deleted_at() const;
  public:
  void clear_deleted_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_deleted_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_deleted_at();
  void set_allocated_deleted_at(PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_deleted_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_deleted_at();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Collaborator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::App* app_;
  ::clarifai::api::User* user_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Collaboration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Collaboration) */ {
 public:
  Collaboration();
  virtual ~Collaboration();

  Collaboration(const Collaboration& from);
  Collaboration(Collaboration&& from) noexcept
    : Collaboration() {
    *this = ::std::move(from);
  }

  inline Collaboration& operator=(const Collaboration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collaboration& operator=(Collaboration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collaboration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collaboration* internal_default_instance() {
    return reinterpret_cast<const Collaboration*>(
               &_Collaboration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Collaboration& a, Collaboration& b) {
    a.Swap(&b);
  }
  inline void Swap(Collaboration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collaboration* New() const final {
    return CreateMaybeMessage<Collaboration>(nullptr);
  }

  Collaboration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collaboration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collaboration& from);
  void MergeFrom(const Collaboration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collaboration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Collaboration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 3,
    kEndpointsFieldNumber = 4,
    kAppFieldNumber = 1,
    kAppOwnerFieldNumber = 2,
    kCreatedAtFieldNumber = 5,
  };
  // repeated string scopes = 3;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated string endpoints = 4;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // .clarifai.api.App app = 1;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const ::clarifai::api::App& app() const;
  ::clarifai::api::App* release_app();
  ::clarifai::api::App* mutable_app();
  void set_allocated_app(::clarifai::api::App* app);
  private:
  const ::clarifai::api::App& _internal_app() const;
  ::clarifai::api::App* _internal_mutable_app();
  public:

  // .clarifai.api.User app_owner = 2;
  bool has_app_owner() const;
  private:
  bool _internal_has_app_owner() const;
  public:
  void clear_app_owner();
  const ::clarifai::api::User& app_owner() const;
  ::clarifai::api::User* release_app_owner();
  ::clarifai::api::User* mutable_app_owner();
  void set_allocated_app_owner(::clarifai::api::User* app_owner);
  private:
  const ::clarifai::api::User& _internal_app_owner() const;
  ::clarifai::api::User* _internal_mutable_app_owner();
  public:

  // .google.protobuf.Timestamp created_at = 5;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Collaboration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  ::clarifai::api::App* app_;
  ::clarifai::api::User* app_owner_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Audio :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Audio) */ {
 public:
  Audio();
  virtual ~Audio();

  Audio(const Audio& from);
  Audio(Audio&& from) noexcept
    : Audio() {
    *this = ::std::move(from);
  }

  inline Audio& operator=(const Audio& from) {
    CopyFrom(from);
    return *this;
  }
  inline Audio& operator=(Audio&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Audio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Audio* internal_default_instance() {
    return reinterpret_cast<const Audio*>(
               &_Audio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Audio& a, Audio& b) {
    a.Swap(&b);
  }
  inline void Swap(Audio* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Audio* New() const final {
    return CreateMaybeMessage<Audio>(nullptr);
  }

  Audio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Audio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Audio& from);
  void MergeFrom(const Audio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Audio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Audio";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kBase64FieldNumber = 2,
    kHostedFieldNumber = 5,
    kAllowDuplicateUrlFieldNumber = 4,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes base64 = 2;
  void clear_base64();
  const std::string& base64() const;
  void set_base64(const std::string& value);
  void set_base64(std::string&& value);
  void set_base64(const char* value);
  void set_base64(const void* value, size_t size);
  std::string* mutable_base64();
  std::string* release_base64();
  void set_allocated_base64(std::string* base64);
  private:
  const std::string& _internal_base64() const;
  void _internal_set_base64(const std::string& value);
  std::string* _internal_mutable_base64();
  public:

  // .clarifai.api.HostedURL hosted = 5;
  bool has_hosted() const;
  private:
  bool _internal_has_hosted() const;
  public:
  void clear_hosted();
  const ::clarifai::api::HostedURL& hosted() const;
  ::clarifai::api::HostedURL* release_hosted();
  ::clarifai::api::HostedURL* mutable_hosted();
  void set_allocated_hosted(::clarifai::api::HostedURL* hosted);
  private:
  const ::clarifai::api::HostedURL& _internal_hosted() const;
  ::clarifai::api::HostedURL* _internal_mutable_hosted();
  public:

  // bool allow_duplicate_url = 4;
  void clear_allow_duplicate_url();
  bool allow_duplicate_url() const;
  void set_allow_duplicate_url(bool value);
  private:
  bool _internal_allow_duplicate_url() const;
  void _internal_set_allow_duplicate_url(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Audio)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base64_;
  ::clarifai::api::HostedURL* hosted_;
  bool allow_duplicate_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Track_TrackInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Track.TrackInfo) */ {
 public:
  Track_TrackInfo();
  virtual ~Track_TrackInfo();

  Track_TrackInfo(const Track_TrackInfo& from);
  Track_TrackInfo(Track_TrackInfo&& from) noexcept
    : Track_TrackInfo() {
    *this = ::std::move(from);
  }

  inline Track_TrackInfo& operator=(const Track_TrackInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Track_TrackInfo& operator=(Track_TrackInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Track_TrackInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Track_TrackInfo* internal_default_instance() {
    return reinterpret_cast<const Track_TrackInfo*>(
               &_Track_TrackInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Track_TrackInfo& a, Track_TrackInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Track_TrackInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Track_TrackInfo* New() const final {
    return CreateMaybeMessage<Track_TrackInfo>(nullptr);
  }

  Track_TrackInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Track_TrackInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Track_TrackInfo& from);
  void MergeFrom(const Track_TrackInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Track_TrackInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Track.TrackInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kNumFramesFieldNumber = 1,
    kQualityFieldNumber = 4,
  };
  // .google.protobuf.Timestamp begin_time = 2;
  bool has_begin_time() const;
  private:
  bool _internal_has_begin_time() const;
  public:
  void clear_begin_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& begin_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_begin_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_begin_time();
  void set_allocated_begin_time(PROTOBUF_NAMESPACE_ID::Timestamp* begin_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_begin_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_begin_time();
  public:

  // .google.protobuf.Timestamp end_time = 3;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:

  // uint32 num_frames = 1;
  void clear_num_frames();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_frames() const;
  void set_num_frames(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_frames() const;
  void _internal_set_num_frames(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float quality = 4;
  void clear_quality();
  float quality() const;
  void set_quality(float value);
  private:
  float _internal_quality() const;
  void _internal_set_quality(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Track.TrackInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* begin_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_frames_;
  float quality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Track :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Track) */ {
 public:
  Track();
  virtual ~Track();

  Track(const Track& from);
  Track(Track&& from) noexcept
    : Track() {
    *this = ::std::move(from);
  }

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  inline Track& operator=(Track&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Track& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Track* internal_default_instance() {
    return reinterpret_cast<const Track*>(
               &_Track_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Track& a, Track& b) {
    a.Swap(&b);
  }
  inline void Swap(Track* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Track* New() const final {
    return CreateMaybeMessage<Track>(nullptr);
  }

  Track* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Track>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Track* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Track";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Track_TrackInfo TrackInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDataFieldNumber = 2,
    kTrackInfoFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:

  // .clarifai.api.Track.TrackInfo track_info = 3;
  bool has_track_info() const;
  private:
  bool _internal_has_track_info() const;
  public:
  void clear_track_info();
  const ::clarifai::api::Track_TrackInfo& track_info() const;
  ::clarifai::api::Track_TrackInfo* release_track_info();
  ::clarifai::api::Track_TrackInfo* mutable_track_info();
  void set_allocated_track_info(::clarifai::api::Track_TrackInfo* track_info);
  private:
  const ::clarifai::api::Track_TrackInfo& _internal_track_info() const;
  ::clarifai::api::Track_TrackInfo* _internal_mutable_track_info();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Track)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::Data* data_;
  ::clarifai::api::Track_TrackInfo* track_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Cluster :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Cluster) */ {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);
  Cluster(Cluster&& from) noexcept
    : Cluster() {
    *this = ::std::move(from);
  }

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cluster& operator=(Cluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Cluster& a, Cluster& b) {
    a.Swap(&b);
  }
  inline void Swap(Cluster* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cluster* New() const final {
    return CreateMaybeMessage<Cluster>(nullptr);
  }

  Cluster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cluster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cluster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Cluster";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitsFieldNumber = 4,
    kProjectionFieldNumber = 5,
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kScoreFieldNumber = 3,
  };
  // repeated .clarifai.api.Hit hits = 4;
  int hits_size() const;
  private:
  int _internal_hits_size() const;
  public:
  void clear_hits();
  ::clarifai::api::Hit* mutable_hits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >*
      mutable_hits();
  private:
  const ::clarifai::api::Hit& _internal_hits(int index) const;
  ::clarifai::api::Hit* _internal_add_hits();
  public:
  const ::clarifai::api::Hit& hits(int index) const;
  ::clarifai::api::Hit* add_hits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >&
      hits() const;

  // repeated float projection = 5;
  int projection_size() const;
  private:
  int _internal_projection_size() const;
  public:
  void clear_projection();
  private:
  float _internal_projection(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_projection() const;
  void _internal_add_projection(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_projection();
  public:
  float projection(int index) const;
  void set_projection(int index, float value);
  void add_projection(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      projection() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_projection();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float score = 3;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Cluster)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit > hits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > projection_;
  mutable std::atomic<int> _projection_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Color :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Color";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawHexFieldNumber = 1,
    kW3CFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string raw_hex = 1;
  void clear_raw_hex();
  const std::string& raw_hex() const;
  void set_raw_hex(const std::string& value);
  void set_raw_hex(std::string&& value);
  void set_raw_hex(const char* value);
  void set_raw_hex(const char* value, size_t size);
  std::string* mutable_raw_hex();
  std::string* release_raw_hex();
  void set_allocated_raw_hex(std::string* raw_hex);
  private:
  const std::string& _internal_raw_hex() const;
  void _internal_set_raw_hex(const std::string& value);
  std::string* _internal_mutable_raw_hex();
  public:

  // .clarifai.api.W3C w3c = 2;
  bool has_w3c() const;
  private:
  bool _internal_has_w3c() const;
  public:
  void clear_w3c();
  const ::clarifai::api::W3C& w3c() const;
  ::clarifai::api::W3C* release_w3c();
  ::clarifai::api::W3C* mutable_w3c();
  void set_allocated_w3c(::clarifai::api::W3C* w3c);
  private:
  const ::clarifai::api::W3C& _internal_w3c() const;
  ::clarifai::api::W3C* _internal_mutable_w3c();
  public:

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Color)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_hex_;
  ::clarifai::api::W3C* w3c_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class W3C :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.W3C) */ {
 public:
  W3C();
  virtual ~W3C();

  W3C(const W3C& from);
  W3C(W3C&& from) noexcept
    : W3C() {
    *this = ::std::move(from);
  }

  inline W3C& operator=(const W3C& from) {
    CopyFrom(from);
    return *this;
  }
  inline W3C& operator=(W3C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const W3C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const W3C* internal_default_instance() {
    return reinterpret_cast<const W3C*>(
               &_W3C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(W3C& a, W3C& b) {
    a.Swap(&b);
  }
  inline void Swap(W3C* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline W3C* New() const final {
    return CreateMaybeMessage<W3C>(nullptr);
  }

  W3C* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<W3C>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const W3C& from);
  void MergeFrom(const W3C& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(W3C* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.W3C";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHexFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string hex = 1;
  void clear_hex();
  const std::string& hex() const;
  void set_hex(const std::string& value);
  void set_hex(std::string&& value);
  void set_hex(const char* value);
  void set_hex(const char* value, size_t size);
  std::string* mutable_hex();
  std::string* release_hex();
  void set_allocated_hex(std::string* hex);
  private:
  const std::string& _internal_hex() const;
  void _internal_set_hex(const std::string& value);
  std::string* _internal_mutable_hex();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.W3C)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class UserAppIDSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.UserAppIDSet) */ {
 public:
  UserAppIDSet();
  virtual ~UserAppIDSet();

  UserAppIDSet(const UserAppIDSet& from);
  UserAppIDSet(UserAppIDSet&& from) noexcept
    : UserAppIDSet() {
    *this = ::std::move(from);
  }

  inline UserAppIDSet& operator=(const UserAppIDSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAppIDSet& operator=(UserAppIDSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserAppIDSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAppIDSet* internal_default_instance() {
    return reinterpret_cast<const UserAppIDSet*>(
               &_UserAppIDSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UserAppIDSet& a, UserAppIDSet& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAppIDSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAppIDSet* New() const final {
    return CreateMaybeMessage<UserAppIDSet>(nullptr);
  }

  UserAppIDSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAppIDSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAppIDSet& from);
  void MergeFrom(const UserAppIDSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAppIDSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.UserAppIDSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.UserAppIDSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class PatchAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PatchAction) */ {
 public:
  PatchAction();
  virtual ~PatchAction();

  PatchAction(const PatchAction& from);
  PatchAction(PatchAction&& from) noexcept
    : PatchAction() {
    *this = ::std::move(from);
  }

  inline PatchAction& operator=(const PatchAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchAction& operator=(PatchAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchAction* internal_default_instance() {
    return reinterpret_cast<const PatchAction*>(
               &_PatchAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PatchAction& a, PatchAction& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchAction* New() const final {
    return CreateMaybeMessage<PatchAction>(nullptr);
  }

  PatchAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchAction& from);
  void MergeFrom(const PatchAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PatchAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
    kMergeConflictResolutionFieldNumber = 2,
    kPathFieldNumber = 3,
  };
  // string op = 1;
  void clear_op();
  const std::string& op() const;
  void set_op(const std::string& value);
  void set_op(std::string&& value);
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  std::string* mutable_op();
  std::string* release_op();
  void set_allocated_op(std::string* op);
  private:
  const std::string& _internal_op() const;
  void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // string merge_conflict_resolution = 2;
  void clear_merge_conflict_resolution();
  const std::string& merge_conflict_resolution() const;
  void set_merge_conflict_resolution(const std::string& value);
  void set_merge_conflict_resolution(std::string&& value);
  void set_merge_conflict_resolution(const char* value);
  void set_merge_conflict_resolution(const char* value, size_t size);
  std::string* mutable_merge_conflict_resolution();
  std::string* release_merge_conflict_resolution();
  void set_allocated_merge_conflict_resolution(std::string* merge_conflict_resolution);
  private:
  const std::string& _internal_merge_conflict_resolution() const;
  void _internal_set_merge_conflict_resolution(const std::string& value);
  std::string* _internal_mutable_merge_conflict_resolution();
  public:

  // string path = 3;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PatchAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merge_conflict_resolution_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Concept :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Concept) */ {
 public:
  Concept();
  virtual ~Concept();

  Concept(const Concept& from);
  Concept(Concept&& from) noexcept
    : Concept() {
    *this = ::std::move(from);
  }

  inline Concept& operator=(const Concept& from) {
    CopyFrom(from);
    return *this;
  }
  inline Concept& operator=(Concept&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Concept& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Concept* internal_default_instance() {
    return reinterpret_cast<const Concept*>(
               &_Concept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Concept& a, Concept& b) {
    a.Swap(&b);
  }
  inline void Swap(Concept* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Concept* New() const final {
    return CreateMaybeMessage<Concept>(nullptr);
  }

  Concept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Concept>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Concept& from);
  void MergeFrom(const Concept& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Concept* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Concept";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kLanguageFieldNumber = 5,
    kAppIdFieldNumber = 6,
    kDefinitionFieldNumber = 7,
    kVocabIdFieldNumber = 8,
    kUserIdFieldNumber = 10,
    kCreatedAtFieldNumber = 4,
    kVisibilityFieldNumber = 9,
    kValueFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string language = 5;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string app_id = 6;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string definition = 7;
  void clear_definition();
  const std::string& definition() const;
  void set_definition(const std::string& value);
  void set_definition(std::string&& value);
  void set_definition(const char* value);
  void set_definition(const char* value, size_t size);
  std::string* mutable_definition();
  std::string* release_definition();
  void set_allocated_definition(std::string* definition);
  private:
  const std::string& _internal_definition() const;
  void _internal_set_definition(const std::string& value);
  std::string* _internal_mutable_definition();
  public:

  // string vocab_id = 8;
  void clear_vocab_id();
  const std::string& vocab_id() const;
  void set_vocab_id(const std::string& value);
  void set_vocab_id(std::string&& value);
  void set_vocab_id(const char* value);
  void set_vocab_id(const char* value, size_t size);
  std::string* mutable_vocab_id();
  std::string* release_vocab_id();
  void set_allocated_vocab_id(std::string* vocab_id);
  private:
  const std::string& _internal_vocab_id() const;
  void _internal_set_vocab_id(const std::string& value);
  std::string* _internal_mutable_vocab_id();
  public:

  // string user_id = 10;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .clarifai.api.Visibility visibility = 9;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  const ::clarifai::api::Visibility& visibility() const;
  ::clarifai::api::Visibility* release_visibility();
  ::clarifai::api::Visibility* mutable_visibility();
  void set_allocated_visibility(::clarifai::api::Visibility* visibility);
  private:
  const ::clarifai::api::Visibility& _internal_visibility() const;
  ::clarifai::api::Visibility* _internal_mutable_visibility();
  public:

  // float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Concept)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr definition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vocab_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::clarifai::api::Visibility* visibility_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptCount) */ {
 public:
  ConceptCount();
  virtual ~ConceptCount();

  ConceptCount(const ConceptCount& from);
  ConceptCount(ConceptCount&& from) noexcept
    : ConceptCount() {
    *this = ::std::move(from);
  }

  inline ConceptCount& operator=(const ConceptCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptCount& operator=(ConceptCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptCount* internal_default_instance() {
    return reinterpret_cast<const ConceptCount*>(
               &_ConceptCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ConceptCount& a, ConceptCount& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptCount* New() const final {
    return CreateMaybeMessage<ConceptCount>(nullptr);
  }

  ConceptCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptCount& from);
  void MergeFrom(const ConceptCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kConceptTypeCountFieldNumber = 3,
    kDetailConceptCountFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .clarifai.api.ConceptTypeCount concept_type_count = 3;
  bool has_concept_type_count() const;
  private:
  bool _internal_has_concept_type_count() const;
  public:
  void clear_concept_type_count();
  const ::clarifai::api::ConceptTypeCount& concept_type_count() const;
  ::clarifai::api::ConceptTypeCount* release_concept_type_count();
  ::clarifai::api::ConceptTypeCount* mutable_concept_type_count();
  void set_allocated_concept_type_count(::clarifai::api::ConceptTypeCount* concept_type_count);
  private:
  const ::clarifai::api::ConceptTypeCount& _internal_concept_type_count() const;
  ::clarifai::api::ConceptTypeCount* _internal_mutable_concept_type_count();
  public:

  // .clarifai.api.DetailConceptCount detail_concept_count = 4;
  bool has_detail_concept_count() const;
  private:
  bool _internal_has_detail_concept_count() const;
  public:
  void clear_detail_concept_count();
  const ::clarifai::api::DetailConceptCount& detail_concept_count() const;
  ::clarifai::api::DetailConceptCount* release_detail_concept_count();
  ::clarifai::api::DetailConceptCount* mutable_detail_concept_count();
  void set_allocated_detail_concept_count(::clarifai::api::DetailConceptCount* detail_concept_count);
  private:
  const ::clarifai::api::DetailConceptCount& _internal_detail_concept_count() const;
  ::clarifai::api::DetailConceptCount* _internal_mutable_detail_concept_count();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::clarifai::api::ConceptTypeCount* concept_type_count_;
  ::clarifai::api::DetailConceptCount* detail_concept_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptTypeCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptTypeCount) */ {
 public:
  ConceptTypeCount();
  virtual ~ConceptTypeCount();

  ConceptTypeCount(const ConceptTypeCount& from);
  ConceptTypeCount(ConceptTypeCount&& from) noexcept
    : ConceptTypeCount() {
    *this = ::std::move(from);
  }

  inline ConceptTypeCount& operator=(const ConceptTypeCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptTypeCount& operator=(ConceptTypeCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptTypeCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptTypeCount* internal_default_instance() {
    return reinterpret_cast<const ConceptTypeCount*>(
               &_ConceptTypeCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ConceptTypeCount& a, ConceptTypeCount& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptTypeCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptTypeCount* New() const final {
    return CreateMaybeMessage<ConceptTypeCount>(nullptr);
  }

  ConceptTypeCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptTypeCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptTypeCount& from);
  void MergeFrom(const ConceptTypeCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptTypeCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptTypeCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositiveFieldNumber = 1,
    kNegativeFieldNumber = 2,
  };
  // uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_positive();
  ::PROTOBUF_NAMESPACE_ID::uint32 positive() const;
  void set_positive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_positive() const;
  void _internal_set_positive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_negative();
  ::PROTOBUF_NAMESPACE_ID::uint32 negative() const;
  void set_negative(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_negative() const;
  void _internal_set_negative(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptTypeCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 positive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 negative_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class DetailConceptCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.DetailConceptCount) */ {
 public:
  DetailConceptCount();
  virtual ~DetailConceptCount();

  DetailConceptCount(const DetailConceptCount& from);
  DetailConceptCount(DetailConceptCount&& from) noexcept
    : DetailConceptCount() {
    *this = ::std::move(from);
  }

  inline DetailConceptCount& operator=(const DetailConceptCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailConceptCount& operator=(DetailConceptCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailConceptCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailConceptCount* internal_default_instance() {
    return reinterpret_cast<const DetailConceptCount*>(
               &_DetailConceptCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DetailConceptCount& a, DetailConceptCount& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailConceptCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailConceptCount* New() const final {
    return CreateMaybeMessage<DetailConceptCount>(nullptr);
  }

  DetailConceptCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailConceptCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailConceptCount& from);
  void MergeFrom(const DetailConceptCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailConceptCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.DetailConceptCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessedFieldNumber = 1,
    kToProcessFieldNumber = 2,
    kErrorsFieldNumber = 3,
    kProcessingFieldNumber = 4,
  };
  // .clarifai.api.ConceptTypeCount processed = 1;
  bool has_processed() const;
  private:
  bool _internal_has_processed() const;
  public:
  void clear_processed();
  const ::clarifai::api::ConceptTypeCount& processed() const;
  ::clarifai::api::ConceptTypeCount* release_processed();
  ::clarifai::api::ConceptTypeCount* mutable_processed();
  void set_allocated_processed(::clarifai::api::ConceptTypeCount* processed);
  private:
  const ::clarifai::api::ConceptTypeCount& _internal_processed() const;
  ::clarifai::api::ConceptTypeCount* _internal_mutable_processed();
  public:

  // .clarifai.api.ConceptTypeCount to_process = 2;
  bool has_to_process() const;
  private:
  bool _internal_has_to_process() const;
  public:
  void clear_to_process();
  const ::clarifai::api::ConceptTypeCount& to_process() const;
  ::clarifai::api::ConceptTypeCount* release_to_process();
  ::clarifai::api::ConceptTypeCount* mutable_to_process();
  void set_allocated_to_process(::clarifai::api::ConceptTypeCount* to_process);
  private:
  const ::clarifai::api::ConceptTypeCount& _internal_to_process() const;
  ::clarifai::api::ConceptTypeCount* _internal_mutable_to_process();
  public:

  // .clarifai.api.ConceptTypeCount errors = 3;
  bool has_errors() const;
  private:
  bool _internal_has_errors() const;
  public:
  void clear_errors();
  const ::clarifai::api::ConceptTypeCount& errors() const;
  ::clarifai::api::ConceptTypeCount* release_errors();
  ::clarifai::api::ConceptTypeCount* mutable_errors();
  void set_allocated_errors(::clarifai::api::ConceptTypeCount* errors);
  private:
  const ::clarifai::api::ConceptTypeCount& _internal_errors() const;
  ::clarifai::api::ConceptTypeCount* _internal_mutable_errors();
  public:

  // .clarifai.api.ConceptTypeCount processing = 4;
  bool has_processing() const;
  private:
  bool _internal_has_processing() const;
  public:
  void clear_processing();
  const ::clarifai::api::ConceptTypeCount& processing() const;
  ::clarifai::api::ConceptTypeCount* release_processing();
  ::clarifai::api::ConceptTypeCount* mutable_processing();
  void set_allocated_processing(::clarifai::api::ConceptTypeCount* processing);
  private:
  const ::clarifai::api::ConceptTypeCount& _internal_processing() const;
  ::clarifai::api::ConceptTypeCount* _internal_mutable_processing();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.DetailConceptCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::ConceptTypeCount* processed_;
  ::clarifai::api::ConceptTypeCount* to_process_;
  ::clarifai::api::ConceptTypeCount* errors_;
  ::clarifai::api::ConceptTypeCount* processing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptQuery) */ {
 public:
  ConceptQuery();
  virtual ~ConceptQuery();

  ConceptQuery(const ConceptQuery& from);
  ConceptQuery(ConceptQuery&& from) noexcept
    : ConceptQuery() {
    *this = ::std::move(from);
  }

  inline ConceptQuery& operator=(const ConceptQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptQuery& operator=(ConceptQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptQuery* internal_default_instance() {
    return reinterpret_cast<const ConceptQuery*>(
               &_ConceptQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ConceptQuery& a, ConceptQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptQuery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptQuery* New() const final {
    return CreateMaybeMessage<ConceptQuery>(nullptr);
  }

  ConceptQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptQuery& from);
  void MergeFrom(const ConceptQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLanguageFieldNumber = 2,
    kWorkflowIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string language = 2;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string workflow_id = 3;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  void set_workflow_id(const std::string& value);
  void set_workflow_id(std::string&& value);
  void set_workflow_id(const char* value);
  void set_workflow_id(const char* value, size_t size);
  std::string* mutable_workflow_id();
  std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptQuery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptRelation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptRelation) */ {
 public:
  ConceptRelation();
  virtual ~ConceptRelation();

  ConceptRelation(const ConceptRelation& from);
  ConceptRelation(ConceptRelation&& from) noexcept
    : ConceptRelation() {
    *this = ::std::move(from);
  }

  inline ConceptRelation& operator=(const ConceptRelation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptRelation& operator=(ConceptRelation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptRelation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptRelation* internal_default_instance() {
    return reinterpret_cast<const ConceptRelation*>(
               &_ConceptRelation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ConceptRelation& a, ConceptRelation& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptRelation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptRelation* New() const final {
    return CreateMaybeMessage<ConceptRelation>(nullptr);
  }

  ConceptRelation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptRelation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptRelation& from);
  void MergeFrom(const ConceptRelation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptRelation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptRelation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPredicateFieldNumber = 4,
    kKnowledgeGraphIdFieldNumber = 5,
    kSubjectConceptFieldNumber = 2,
    kObjectConceptFieldNumber = 3,
    kVisibilityFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string predicate = 4;
  void clear_predicate();
  const std::string& predicate() const;
  void set_predicate(const std::string& value);
  void set_predicate(std::string&& value);
  void set_predicate(const char* value);
  void set_predicate(const char* value, size_t size);
  std::string* mutable_predicate();
  std::string* release_predicate();
  void set_allocated_predicate(std::string* predicate);
  private:
  const std::string& _internal_predicate() const;
  void _internal_set_predicate(const std::string& value);
  std::string* _internal_mutable_predicate();
  public:

  // string knowledge_graph_id = 5;
  void clear_knowledge_graph_id();
  const std::string& knowledge_graph_id() const;
  void set_knowledge_graph_id(const std::string& value);
  void set_knowledge_graph_id(std::string&& value);
  void set_knowledge_graph_id(const char* value);
  void set_knowledge_graph_id(const char* value, size_t size);
  std::string* mutable_knowledge_graph_id();
  std::string* release_knowledge_graph_id();
  void set_allocated_knowledge_graph_id(std::string* knowledge_graph_id);
  private:
  const std::string& _internal_knowledge_graph_id() const;
  void _internal_set_knowledge_graph_id(const std::string& value);
  std::string* _internal_mutable_knowledge_graph_id();
  public:

  // .clarifai.api.Concept subject_concept = 2;
  bool has_subject_concept() const;
  private:
  bool _internal_has_subject_concept() const;
  public:
  void clear_subject_concept();
  const ::clarifai::api::Concept& subject_concept() const;
  ::clarifai::api::Concept* release_subject_concept();
  ::clarifai::api::Concept* mutable_subject_concept();
  void set_allocated_subject_concept(::clarifai::api::Concept* subject_concept);
  private:
  const ::clarifai::api::Concept& _internal_subject_concept() const;
  ::clarifai::api::Concept* _internal_mutable_subject_concept();
  public:

  // .clarifai.api.Concept object_concept = 3;
  bool has_object_concept() const;
  private:
  bool _internal_has_object_concept() const;
  public:
  void clear_object_concept();
  const ::clarifai::api::Concept& object_concept() const;
  ::clarifai::api::Concept* release_object_concept();
  ::clarifai::api::Concept* mutable_object_concept();
  void set_allocated_object_concept(::clarifai::api::Concept* object_concept);
  private:
  const ::clarifai::api::Concept& _internal_object_concept() const;
  ::clarifai::api::Concept* _internal_mutable_object_concept();
  public:

  // .clarifai.api.Visibility visibility = 6;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  const ::clarifai::api::Visibility& visibility() const;
  ::clarifai::api::Visibility* release_visibility();
  ::clarifai::api::Visibility* mutable_visibility();
  void set_allocated_visibility(::clarifai::api::Visibility* visibility);
  private:
  const ::clarifai::api::Visibility& _internal_visibility() const;
  ::clarifai::api::Visibility* _internal_mutable_visibility();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptRelation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predicate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr knowledge_graph_id_;
  ::clarifai::api::Concept* subject_concept_;
  ::clarifai::api::Concept* object_concept_;
  ::clarifai::api::Visibility* visibility_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class KnowledgeGraph :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.KnowledgeGraph) */ {
 public:
  KnowledgeGraph();
  virtual ~KnowledgeGraph();

  KnowledgeGraph(const KnowledgeGraph& from);
  KnowledgeGraph(KnowledgeGraph&& from) noexcept
    : KnowledgeGraph() {
    *this = ::std::move(from);
  }

  inline KnowledgeGraph& operator=(const KnowledgeGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline KnowledgeGraph& operator=(KnowledgeGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KnowledgeGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KnowledgeGraph* internal_default_instance() {
    return reinterpret_cast<const KnowledgeGraph*>(
               &_KnowledgeGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(KnowledgeGraph& a, KnowledgeGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(KnowledgeGraph* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KnowledgeGraph* New() const final {
    return CreateMaybeMessage<KnowledgeGraph>(nullptr);
  }

  KnowledgeGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KnowledgeGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KnowledgeGraph& from);
  void MergeFrom(const KnowledgeGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KnowledgeGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.KnowledgeGraph";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kExamplesAppIdFieldNumber = 4,
    kSampledExamplesAppIdFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string examples_app_id = 4;
  void clear_examples_app_id();
  const std::string& examples_app_id() const;
  void set_examples_app_id(const std::string& value);
  void set_examples_app_id(std::string&& value);
  void set_examples_app_id(const char* value);
  void set_examples_app_id(const char* value, size_t size);
  std::string* mutable_examples_app_id();
  std::string* release_examples_app_id();
  void set_allocated_examples_app_id(std::string* examples_app_id);
  private:
  const std::string& _internal_examples_app_id() const;
  void _internal_set_examples_app_id(const std::string& value);
  std::string* _internal_mutable_examples_app_id();
  public:

  // string sampled_examples_app_id = 5;
  void clear_sampled_examples_app_id();
  const std::string& sampled_examples_app_id() const;
  void set_sampled_examples_app_id(const std::string& value);
  void set_sampled_examples_app_id(std::string&& value);
  void set_sampled_examples_app_id(const char* value);
  void set_sampled_examples_app_id(const char* value, size_t size);
  std::string* mutable_sampled_examples_app_id();
  std::string* release_sampled_examples_app_id();
  void set_allocated_sampled_examples_app_id(std::string* sampled_examples_app_id);
  private:
  const std::string& _internal_sampled_examples_app_id() const;
  void _internal_set_sampled_examples_app_id(const std::string& value);
  std::string* _internal_mutable_sampled_examples_app_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.KnowledgeGraph)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr examples_app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sampled_examples_app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptMappingJob :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptMappingJob) */ {
 public:
  ConceptMappingJob();
  virtual ~ConceptMappingJob();

  ConceptMappingJob(const ConceptMappingJob& from);
  ConceptMappingJob(ConceptMappingJob&& from) noexcept
    : ConceptMappingJob() {
    *this = ::std::move(from);
  }

  inline ConceptMappingJob& operator=(const ConceptMappingJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptMappingJob& operator=(ConceptMappingJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptMappingJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptMappingJob* internal_default_instance() {
    return reinterpret_cast<const ConceptMappingJob*>(
               &_ConceptMappingJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ConceptMappingJob& a, ConceptMappingJob& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptMappingJob* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptMappingJob* New() const final {
    return CreateMaybeMessage<ConceptMappingJob>(nullptr);
  }

  ConceptMappingJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptMappingJob>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptMappingJob& from);
  void MergeFrom(const ConceptMappingJob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptMappingJob* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptMappingJob";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdsFieldNumber = 2,
    kKnowledgeGraphIdFieldNumber = 1,
  };
  // repeated string concept_ids = 2;
  int concept_ids_size() const;
  private:
  int _internal_concept_ids_size() const;
  public:
  void clear_concept_ids();
  const std::string& concept_ids(int index) const;
  std::string* mutable_concept_ids(int index);
  void set_concept_ids(int index, const std::string& value);
  void set_concept_ids(int index, std::string&& value);
  void set_concept_ids(int index, const char* value);
  void set_concept_ids(int index, const char* value, size_t size);
  std::string* add_concept_ids();
  void add_concept_ids(const std::string& value);
  void add_concept_ids(std::string&& value);
  void add_concept_ids(const char* value);
  void add_concept_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& concept_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_concept_ids();
  private:
  const std::string& _internal_concept_ids(int index) const;
  std::string* _internal_add_concept_ids();
  public:

  // string knowledge_graph_id = 1;
  void clear_knowledge_graph_id();
  const std::string& knowledge_graph_id() const;
  void set_knowledge_graph_id(const std::string& value);
  void set_knowledge_graph_id(std::string&& value);
  void set_knowledge_graph_id(const char* value);
  void set_knowledge_graph_id(const char* value, size_t size);
  std::string* mutable_knowledge_graph_id();
  std::string* release_knowledge_graph_id();
  void set_allocated_knowledge_graph_id(std::string* knowledge_graph_id);
  private:
  const std::string& _internal_knowledge_graph_id() const;
  void _internal_set_knowledge_graph_id(const std::string& value);
  std::string* _internal_mutable_knowledge_graph_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptMappingJob)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> concept_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr knowledge_graph_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConceptLanguage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConceptLanguage) */ {
 public:
  ConceptLanguage();
  virtual ~ConceptLanguage();

  ConceptLanguage(const ConceptLanguage& from);
  ConceptLanguage(ConceptLanguage&& from) noexcept
    : ConceptLanguage() {
    *this = ::std::move(from);
  }

  inline ConceptLanguage& operator=(const ConceptLanguage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConceptLanguage& operator=(ConceptLanguage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConceptLanguage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptLanguage* internal_default_instance() {
    return reinterpret_cast<const ConceptLanguage*>(
               &_ConceptLanguage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ConceptLanguage& a, ConceptLanguage& b) {
    a.Swap(&b);
  }
  inline void Swap(ConceptLanguage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConceptLanguage* New() const final {
    return CreateMaybeMessage<ConceptLanguage>(nullptr);
  }

  ConceptLanguage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConceptLanguage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConceptLanguage& from);
  void MergeFrom(const ConceptLanguage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptLanguage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConceptLanguage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDefinitionFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string definition = 3;
  void clear_definition();
  const std::string& definition() const;
  void set_definition(const std::string& value);
  void set_definition(std::string&& value);
  void set_definition(const char* value);
  void set_definition(const char* value, size_t size);
  std::string* mutable_definition();
  std::string* release_definition();
  void set_allocated_definition(std::string* definition);
  private:
  const std::string& _internal_definition() const;
  void _internal_set_definition(const std::string& value);
  std::string* _internal_mutable_definition();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConceptLanguage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr definition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(nullptr);
  }

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptsFieldNumber = 3,
    kColorsFieldNumber = 7,
    kClustersFieldNumber = 8,
    kEmbeddingsFieldNumber = 9,
    kRegionsFieldNumber = 11,
    kFramesFieldNumber = 12,
    kTracksFieldNumber = 15,
    kImageFieldNumber = 1,
    kVideoFieldNumber = 2,
    kMetadataFieldNumber = 5,
    kGeoFieldNumber = 6,
    kTextFieldNumber = 13,
    kAudioFieldNumber = 14,
  };
  // repeated .clarifai.api.Concept concepts = 3;
  int concepts_size() const;
  private:
  int _internal_concepts_size() const;
  public:
  void clear_concepts();
  ::clarifai::api::Concept* mutable_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_concepts();
  private:
  const ::clarifai::api::Concept& _internal_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_concepts();
  public:
  const ::clarifai::api::Concept& concepts(int index) const;
  ::clarifai::api::Concept* add_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      concepts() const;

  // repeated .clarifai.api.Color colors = 7;
  int colors_size() const;
  private:
  int _internal_colors_size() const;
  public:
  void clear_colors();
  ::clarifai::api::Color* mutable_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Color >*
      mutable_colors();
  private:
  const ::clarifai::api::Color& _internal_colors(int index) const;
  ::clarifai::api::Color* _internal_add_colors();
  public:
  const ::clarifai::api::Color& colors(int index) const;
  ::clarifai::api::Color* add_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Color >&
      colors() const;

  // repeated .clarifai.api.Cluster clusters = 8;
  int clusters_size() const;
  private:
  int _internal_clusters_size() const;
  public:
  void clear_clusters();
  ::clarifai::api::Cluster* mutable_clusters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster >*
      mutable_clusters();
  private:
  const ::clarifai::api::Cluster& _internal_clusters(int index) const;
  ::clarifai::api::Cluster* _internal_add_clusters();
  public:
  const ::clarifai::api::Cluster& clusters(int index) const;
  ::clarifai::api::Cluster* add_clusters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster >&
      clusters() const;

  // repeated .clarifai.api.Embedding embeddings = 9;
  int embeddings_size() const;
  private:
  int _internal_embeddings_size() const;
  public:
  void clear_embeddings();
  ::clarifai::api::Embedding* mutable_embeddings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Embedding >*
      mutable_embeddings();
  private:
  const ::clarifai::api::Embedding& _internal_embeddings(int index) const;
  ::clarifai::api::Embedding* _internal_add_embeddings();
  public:
  const ::clarifai::api::Embedding& embeddings(int index) const;
  ::clarifai::api::Embedding* add_embeddings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Embedding >&
      embeddings() const;

  // repeated .clarifai.api.Region regions = 11;
  int regions_size() const;
  private:
  int _internal_regions_size() const;
  public:
  void clear_regions();
  ::clarifai::api::Region* mutable_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Region >*
      mutable_regions();
  private:
  const ::clarifai::api::Region& _internal_regions(int index) const;
  ::clarifai::api::Region* _internal_add_regions();
  public:
  const ::clarifai::api::Region& regions(int index) const;
  ::clarifai::api::Region* add_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Region >&
      regions() const;

  // repeated .clarifai.api.Frame frames = 12;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::clarifai::api::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Frame >*
      mutable_frames();
  private:
  const ::clarifai::api::Frame& _internal_frames(int index) const;
  ::clarifai::api::Frame* _internal_add_frames();
  public:
  const ::clarifai::api::Frame& frames(int index) const;
  ::clarifai::api::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Frame >&
      frames() const;

  // repeated .clarifai.api.Track tracks = 15;
  int tracks_size() const;
  private:
  int _internal_tracks_size() const;
  public:
  void clear_tracks();
  ::clarifai::api::Track* mutable_tracks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Track >*
      mutable_tracks();
  private:
  const ::clarifai::api::Track& _internal_tracks(int index) const;
  ::clarifai::api::Track* _internal_add_tracks();
  public:
  const ::clarifai::api::Track& tracks(int index) const;
  ::clarifai::api::Track* add_tracks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Track >&
      tracks() const;

  // .clarifai.api.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::clarifai::api::Image& image() const;
  ::clarifai::api::Image* release_image();
  ::clarifai::api::Image* mutable_image();
  void set_allocated_image(::clarifai::api::Image* image);
  private:
  const ::clarifai::api::Image& _internal_image() const;
  ::clarifai::api::Image* _internal_mutable_image();
  public:

  // .clarifai.api.Video video = 2;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::clarifai::api::Video& video() const;
  ::clarifai::api::Video* release_video();
  ::clarifai::api::Video* mutable_video();
  void set_allocated_video(::clarifai::api::Video* video);
  private:
  const ::clarifai::api::Video& _internal_video() const;
  ::clarifai::api::Video* _internal_mutable_video();
  public:

  // .google.protobuf.Struct metadata = 5;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:

  // .clarifai.api.Geo geo = 6;
  bool has_geo() const;
  private:
  bool _internal_has_geo() const;
  public:
  void clear_geo();
  const ::clarifai::api::Geo& geo() const;
  ::clarifai::api::Geo* release_geo();
  ::clarifai::api::Geo* mutable_geo();
  void set_allocated_geo(::clarifai::api::Geo* geo);
  private:
  const ::clarifai::api::Geo& _internal_geo() const;
  ::clarifai::api::Geo* _internal_mutable_geo();
  public:

  // .clarifai.api.Text text = 13;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::clarifai::api::Text& text() const;
  ::clarifai::api::Text* release_text();
  ::clarifai::api::Text* mutable_text();
  void set_allocated_text(::clarifai::api::Text* text);
  private:
  const ::clarifai::api::Text& _internal_text() const;
  ::clarifai::api::Text* _internal_mutable_text();
  public:

  // .clarifai.api.Audio audio = 14;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::clarifai::api::Audio& audio() const;
  ::clarifai::api::Audio* release_audio();
  ::clarifai::api::Audio* mutable_audio();
  void set_allocated_audio(::clarifai::api::Audio* audio);
  private:
  const ::clarifai::api::Audio& _internal_audio() const;
  ::clarifai::api::Audio* _internal_mutable_audio();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > concepts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Color > colors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster > clusters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Embedding > embeddings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Region > regions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Frame > frames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Track > tracks_;
  ::clarifai::api::Image* image_;
  ::clarifai::api::Video* video_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  ::clarifai::api::Geo* geo_;
  ::clarifai::api::Text* text_;
  ::clarifai::api::Audio* audio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Region :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Region) */ {
 public:
  Region();
  virtual ~Region();

  Region(const Region& from);
  Region(Region&& from) noexcept
    : Region() {
    *this = ::std::move(from);
  }

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }
  inline Region& operator=(Region&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Region& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Region* internal_default_instance() {
    return reinterpret_cast<const Region*>(
               &_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Region& a, Region& b) {
    a.Swap(&b);
  }
  inline void Swap(Region* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Region* New() const final {
    return CreateMaybeMessage<Region>(nullptr);
  }

  Region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Region>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Region& from);
  void MergeFrom(const Region& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Region* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Region";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTrackIdFieldNumber = 5,
    kRegionInfoFieldNumber = 2,
    kDataFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string track_id = 5;
  void clear_track_id();
  const std::string& track_id() const;
  void set_track_id(const std::string& value);
  void set_track_id(std::string&& value);
  void set_track_id(const char* value);
  void set_track_id(const char* value, size_t size);
  std::string* mutable_track_id();
  std::string* release_track_id();
  void set_allocated_track_id(std::string* track_id);
  private:
  const std::string& _internal_track_id() const;
  void _internal_set_track_id(const std::string& value);
  std::string* _internal_mutable_track_id();
  public:

  // .clarifai.api.RegionInfo region_info = 2;
  bool has_region_info() const;
  private:
  bool _internal_has_region_info() const;
  public:
  void clear_region_info();
  const ::clarifai::api::RegionInfo& region_info() const;
  ::clarifai::api::RegionInfo* release_region_info();
  ::clarifai::api::RegionInfo* mutable_region_info();
  void set_allocated_region_info(::clarifai::api::RegionInfo* region_info);
  private:
  const ::clarifai::api::RegionInfo& _internal_region_info() const;
  ::clarifai::api::RegionInfo* _internal_mutable_region_info();
  public:

  // .clarifai.api.Data data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:

  // float value = 4;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Region)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_id_;
  ::clarifai::api::RegionInfo* region_info_;
  ::clarifai::api::Data* data_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class RegionInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.RegionInfo) */ {
 public:
  RegionInfo();
  virtual ~RegionInfo();

  RegionInfo(const RegionInfo& from);
  RegionInfo(RegionInfo&& from) noexcept
    : RegionInfo() {
    *this = ::std::move(from);
  }

  inline RegionInfo& operator=(const RegionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionInfo& operator=(RegionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionInfo* internal_default_instance() {
    return reinterpret_cast<const RegionInfo*>(
               &_RegionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(RegionInfo& a, RegionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionInfo* New() const final {
    return CreateMaybeMessage<RegionInfo>(nullptr);
  }

  RegionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionInfo& from);
  void MergeFrom(const RegionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.RegionInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundingBoxFieldNumber = 1,
    kMaskFieldNumber = 4,
    kPolygonFieldNumber = 5,
    kPointFieldNumber = 6,
  };
  // .clarifai.api.BoundingBox bounding_box = 1;
  bool has_bounding_box() const;
  private:
  bool _internal_has_bounding_box() const;
  public:
  void clear_bounding_box();
  const ::clarifai::api::BoundingBox& bounding_box() const;
  ::clarifai::api::BoundingBox* release_bounding_box();
  ::clarifai::api::BoundingBox* mutable_bounding_box();
  void set_allocated_bounding_box(::clarifai::api::BoundingBox* bounding_box);
  private:
  const ::clarifai::api::BoundingBox& _internal_bounding_box() const;
  ::clarifai::api::BoundingBox* _internal_mutable_bounding_box();
  public:

  // .clarifai.api.Mask mask = 4;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const ::clarifai::api::Mask& mask() const;
  ::clarifai::api::Mask* release_mask();
  ::clarifai::api::Mask* mutable_mask();
  void set_allocated_mask(::clarifai::api::Mask* mask);
  private:
  const ::clarifai::api::Mask& _internal_mask() const;
  ::clarifai::api::Mask* _internal_mutable_mask();
  public:

  // .clarifai.api.Polygon polygon = 5;
  bool has_polygon() const;
  private:
  bool _internal_has_polygon() const;
  public:
  void clear_polygon();
  const ::clarifai::api::Polygon& polygon() const;
  ::clarifai::api::Polygon* release_polygon();
  ::clarifai::api::Polygon* mutable_polygon();
  void set_allocated_polygon(::clarifai::api::Polygon* polygon);
  private:
  const ::clarifai::api::Polygon& _internal_polygon() const;
  ::clarifai::api::Polygon* _internal_mutable_polygon();
  public:

  // .clarifai.api.Point point = 6;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::clarifai::api::Point& point() const;
  ::clarifai::api::Point* release_point();
  ::clarifai::api::Point* mutable_point();
  void set_allocated_point(::clarifai::api::Point* point);
  private:
  const ::clarifai::api::Point& _internal_point() const;
  ::clarifai::api::Point* _internal_mutable_point();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.RegionInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::BoundingBox* bounding_box_;
  ::clarifai::api::Mask* mask_;
  ::clarifai::api::Polygon* polygon_;
  ::clarifai::api::Point* point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.BoundingBox) */ {
 public:
  BoundingBox();
  virtual ~BoundingBox();

  BoundingBox(const BoundingBox& from);
  BoundingBox(BoundingBox&& from) noexcept
    : BoundingBox() {
    *this = ::std::move(from);
  }

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox& operator=(BoundingBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundingBox* internal_default_instance() {
    return reinterpret_cast<const BoundingBox*>(
               &_BoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BoundingBox& a, BoundingBox& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox* New() const final {
    return CreateMaybeMessage<BoundingBox>(nullptr);
  }

  BoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.BoundingBox";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopRowFieldNumber = 1,
    kLeftColFieldNumber = 2,
    kBottomRowFieldNumber = 3,
    kRightColFieldNumber = 4,
  };
  // float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_top_row();
  float top_row() const;
  void set_top_row(float value);
  private:
  float _internal_top_row() const;
  void _internal_set_top_row(float value);
  public:

  // float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_left_col();
  float left_col() const;
  void set_left_col(float value);
  private:
  float _internal_left_col() const;
  void _internal_set_left_col(float value);
  public:

  // float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_bottom_row();
  float bottom_row() const;
  void set_bottom_row(float value);
  private:
  float _internal_bottom_row() const;
  void _internal_set_bottom_row(float value);
  public:

  // float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_right_col();
  float right_col() const;
  void set_right_col(float value);
  private:
  float _internal_right_col() const;
  void _internal_set_right_col(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.BoundingBox)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float top_row_;
  float left_col_;
  float bottom_row_;
  float right_col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class FrameInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.FrameInfo) */ {
 public:
  FrameInfo();
  virtual ~FrameInfo();

  FrameInfo(const FrameInfo& from);
  FrameInfo(FrameInfo&& from) noexcept
    : FrameInfo() {
    *this = ::std::move(from);
  }

  inline FrameInfo& operator=(const FrameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameInfo& operator=(FrameInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameInfo* internal_default_instance() {
    return reinterpret_cast<const FrameInfo*>(
               &_FrameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(FrameInfo& a, FrameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameInfo* New() const final {
    return CreateMaybeMessage<FrameInfo>(nullptr);
  }

  FrameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameInfo& from);
  void MergeFrom(const FrameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.FrameInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.FrameInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 3,
    kFrameInfoFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.FrameInfo frame_info = 1;
  bool has_frame_info() const;
  private:
  bool _internal_has_frame_info() const;
  public:
  void clear_frame_info();
  const ::clarifai::api::FrameInfo& frame_info() const;
  ::clarifai::api::FrameInfo* release_frame_info();
  ::clarifai::api::FrameInfo* mutable_frame_info();
  void set_allocated_frame_info(::clarifai::api::FrameInfo* frame_info);
  private:
  const ::clarifai::api::FrameInfo& _internal_frame_info() const;
  ::clarifai::api::FrameInfo* _internal_mutable_frame_info();
  public:

  // .clarifai.api.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Frame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::FrameInfo* frame_info_;
  ::clarifai::api::Data* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Mask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Mask) */ {
 public:
  Mask();
  virtual ~Mask();

  Mask(const Mask& from);
  Mask(Mask&& from) noexcept
    : Mask() {
    *this = ::std::move(from);
  }

  inline Mask& operator=(const Mask& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mask& operator=(Mask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mask* internal_default_instance() {
    return reinterpret_cast<const Mask*>(
               &_Mask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Mask& a, Mask& b) {
    a.Swap(&b);
  }
  inline void Swap(Mask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mask* New() const final {
    return CreateMaybeMessage<Mask>(nullptr);
  }

  Mask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mask& from);
  void MergeFrom(const Mask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Mask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
    kImageFieldNumber = 2,
  };
  // .clarifai.api.Color color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::clarifai::api::Color& color() const;
  ::clarifai::api::Color* release_color();
  ::clarifai::api::Color* mutable_color();
  void set_allocated_color(::clarifai::api::Color* color);
  private:
  const ::clarifai::api::Color& _internal_color() const;
  ::clarifai::api::Color* _internal_mutable_color();
  public:

  // .clarifai.api.Image image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::clarifai::api::Image& image() const;
  ::clarifai::api::Image* release_image();
  ::clarifai::api::Image* mutable_image();
  void set_allocated_image(::clarifai::api::Image* image);
  private:
  const ::clarifai::api::Image& _internal_image() const;
  ::clarifai::api::Image* _internal_mutable_image();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Mask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::Color* color_;
  ::clarifai::api::Image* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Polygon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Polygon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .clarifai.api.Point points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::clarifai::api::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Point >*
      mutable_points();
  private:
  const ::clarifai::api::Point& _internal_points(int index) const;
  ::clarifai::api::Point* _internal_add_points();
  public:
  const ::clarifai::api::Point& points(int index) const;
  ::clarifai::api::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Point >&
      points() const;

  // @@protoc_insertion_point(class_scope:clarifai.api.Polygon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Point > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_row();
  float row() const;
  void set_row(float value);
  private:
  float _internal_row() const;
  void _internal_set_row(float value);
  public:

  // float col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_col();
  float col() const;
  void set_col(float value);
  private:
  float _internal_col() const;
  void _internal_set_col(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Point)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float row_;
  float col_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Embedding :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Embedding) */ {
 public:
  Embedding();
  virtual ~Embedding();

  Embedding(const Embedding& from);
  Embedding(Embedding&& from) noexcept
    : Embedding() {
    *this = ::std::move(from);
  }

  inline Embedding& operator=(const Embedding& from) {
    CopyFrom(from);
    return *this;
  }
  inline Embedding& operator=(Embedding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Embedding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Embedding* internal_default_instance() {
    return reinterpret_cast<const Embedding*>(
               &_Embedding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Embedding& a, Embedding& b) {
    a.Swap(&b);
  }
  inline void Swap(Embedding* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Embedding* New() const final {
    return CreateMaybeMessage<Embedding>(nullptr);
  }

  Embedding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Embedding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Embedding& from);
  void MergeFrom(const Embedding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Embedding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Embedding";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
    kNumDimensionsFieldNumber = 2,
  };
  // repeated float vector = 1 [packed = true];
  int vector_size() const;
  private:
  int _internal_vector_size() const;
  public:
  void clear_vector();
  private:
  float _internal_vector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vector() const;
  void _internal_add_vector(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vector();
  public:
  float vector(int index) const;
  void set_vector(int index, float value);
  void add_vector(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vector();

  // uint32 num_dimensions = 2;
  void clear_num_dimensions();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_dimensions() const;
  void set_num_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_dimensions() const;
  void _internal_set_num_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Embedding)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vector_;
  mutable std::atomic<int> _vector_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_dimensions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class GeoPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GeoPoint) */ {
 public:
  GeoPoint();
  virtual ~GeoPoint();

  GeoPoint(const GeoPoint& from);
  GeoPoint(GeoPoint&& from) noexcept
    : GeoPoint() {
    *this = ::std::move(from);
  }

  inline GeoPoint& operator=(const GeoPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoPoint& operator=(GeoPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoPoint* internal_default_instance() {
    return reinterpret_cast<const GeoPoint*>(
               &_GeoPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GeoPoint& a, GeoPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoPoint* New() const final {
    return CreateMaybeMessage<GeoPoint>(nullptr);
  }

  GeoPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoPoint& from);
  void MergeFrom(const GeoPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GeoPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
  };
  // float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GeoPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float longitude_;
  float latitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class GeoLimit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GeoLimit) */ {
 public:
  GeoLimit();
  virtual ~GeoLimit();

  GeoLimit(const GeoLimit& from);
  GeoLimit(GeoLimit&& from) noexcept
    : GeoLimit() {
    *this = ::std::move(from);
  }

  inline GeoLimit& operator=(const GeoLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoLimit& operator=(GeoLimit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoLimit* internal_default_instance() {
    return reinterpret_cast<const GeoLimit*>(
               &_GeoLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GeoLimit& a, GeoLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoLimit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoLimit* New() const final {
    return CreateMaybeMessage<GeoLimit>(nullptr);
  }

  GeoLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoLimit& from);
  void MergeFrom(const GeoLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GeoLimit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GeoLimit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class GeoBoxedPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.GeoBoxedPoint) */ {
 public:
  GeoBoxedPoint();
  virtual ~GeoBoxedPoint();

  GeoBoxedPoint(const GeoBoxedPoint& from);
  GeoBoxedPoint(GeoBoxedPoint&& from) noexcept
    : GeoBoxedPoint() {
    *this = ::std::move(from);
  }

  inline GeoBoxedPoint& operator=(const GeoBoxedPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoBoxedPoint& operator=(GeoBoxedPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoBoxedPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoBoxedPoint* internal_default_instance() {
    return reinterpret_cast<const GeoBoxedPoint*>(
               &_GeoBoxedPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GeoBoxedPoint& a, GeoBoxedPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoBoxedPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoBoxedPoint* New() const final {
    return CreateMaybeMessage<GeoBoxedPoint>(nullptr);
  }

  GeoBoxedPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoBoxedPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoBoxedPoint& from);
  void MergeFrom(const GeoBoxedPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoBoxedPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.GeoBoxedPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeoPointFieldNumber = 1,
  };
  // .clarifai.api.GeoPoint geo_point = 1;
  bool has_geo_point() const;
  private:
  bool _internal_has_geo_point() const;
  public:
  void clear_geo_point();
  const ::clarifai::api::GeoPoint& geo_point() const;
  ::clarifai::api::GeoPoint* release_geo_point();
  ::clarifai::api::GeoPoint* mutable_geo_point();
  void set_allocated_geo_point(::clarifai::api::GeoPoint* geo_point);
  private:
  const ::clarifai::api::GeoPoint& _internal_geo_point() const;
  ::clarifai::api::GeoPoint* _internal_mutable_geo_point();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.GeoBoxedPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::GeoPoint* geo_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Geo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Geo) */ {
 public:
  Geo();
  virtual ~Geo();

  Geo(const Geo& from);
  Geo(Geo&& from) noexcept
    : Geo() {
    *this = ::std::move(from);
  }

  inline Geo& operator=(const Geo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geo& operator=(Geo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geo* internal_default_instance() {
    return reinterpret_cast<const Geo*>(
               &_Geo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Geo& a, Geo& b) {
    a.Swap(&b);
  }
  inline void Swap(Geo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geo* New() const final {
    return CreateMaybeMessage<Geo>(nullptr);
  }

  Geo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geo& from);
  void MergeFrom(const Geo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Geo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeoBoxFieldNumber = 3,
    kGeoPointFieldNumber = 1,
    kGeoLimitFieldNumber = 2,
  };
  // repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
  int geo_box_size() const;
  private:
  int _internal_geo_box_size() const;
  public:
  void clear_geo_box();
  ::clarifai::api::GeoBoxedPoint* mutable_geo_box(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::GeoBoxedPoint >*
      mutable_geo_box();
  private:
  const ::clarifai::api::GeoBoxedPoint& _internal_geo_box(int index) const;
  ::clarifai::api::GeoBoxedPoint* _internal_add_geo_box();
  public:
  const ::clarifai::api::GeoBoxedPoint& geo_box(int index) const;
  ::clarifai::api::GeoBoxedPoint* add_geo_box();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::GeoBoxedPoint >&
      geo_box() const;

  // .clarifai.api.GeoPoint geo_point = 1;
  bool has_geo_point() const;
  private:
  bool _internal_has_geo_point() const;
  public:
  void clear_geo_point();
  const ::clarifai::api::GeoPoint& geo_point() const;
  ::clarifai::api::GeoPoint* release_geo_point();
  ::clarifai::api::GeoPoint* mutable_geo_point();
  void set_allocated_geo_point(::clarifai::api::GeoPoint* geo_point);
  private:
  const ::clarifai::api::GeoPoint& _internal_geo_point() const;
  ::clarifai::api::GeoPoint* _internal_mutable_geo_point();
  public:

  // .clarifai.api.GeoLimit geo_limit = 2;
  bool has_geo_limit() const;
  private:
  bool _internal_has_geo_limit() const;
  public:
  void clear_geo_limit();
  const ::clarifai::api::GeoLimit& geo_limit() const;
  ::clarifai::api::GeoLimit* release_geo_limit();
  ::clarifai::api::GeoLimit* mutable_geo_limit();
  void set_allocated_geo_limit(::clarifai::api::GeoLimit* geo_limit);
  private:
  const ::clarifai::api::GeoLimit& _internal_geo_limit() const;
  ::clarifai::api::GeoLimit* _internal_mutable_geo_limit();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Geo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::GeoBoxedPoint > geo_box_;
  ::clarifai::api::GeoPoint* geo_point_;
  ::clarifai::api::GeoLimit* geo_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Image :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kBase64FieldNumber = 2,
    kHostedFieldNumber = 5,
    kAllowDuplicateUrlFieldNumber = 4,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes base64 = 2;
  void clear_base64();
  const std::string& base64() const;
  void set_base64(const std::string& value);
  void set_base64(std::string&& value);
  void set_base64(const char* value);
  void set_base64(const void* value, size_t size);
  std::string* mutable_base64();
  std::string* release_base64();
  void set_allocated_base64(std::string* base64);
  private:
  const std::string& _internal_base64() const;
  void _internal_set_base64(const std::string& value);
  std::string* _internal_mutable_base64();
  public:

  // .clarifai.api.HostedURL hosted = 5;
  bool has_hosted() const;
  private:
  bool _internal_has_hosted() const;
  public:
  void clear_hosted();
  const ::clarifai::api::HostedURL& hosted() const;
  ::clarifai::api::HostedURL* release_hosted();
  ::clarifai::api::HostedURL* mutable_hosted();
  void set_allocated_hosted(::clarifai::api::HostedURL* hosted);
  private:
  const ::clarifai::api::HostedURL& _internal_hosted() const;
  ::clarifai::api::HostedURL* _internal_mutable_hosted();
  public:

  // bool allow_duplicate_url = 4;
  void clear_allow_duplicate_url();
  bool allow_duplicate_url() const;
  void set_allow_duplicate_url(bool value);
  private:
  bool _internal_allow_duplicate_url() const;
  void _internal_set_allow_duplicate_url(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Image)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base64_;
  ::clarifai::api::HostedURL* hosted_;
  bool allow_duplicate_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class HostedURL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.HostedURL) */ {
 public:
  HostedURL();
  virtual ~HostedURL();

  HostedURL(const HostedURL& from);
  HostedURL(HostedURL&& from) noexcept
    : HostedURL() {
    *this = ::std::move(from);
  }

  inline HostedURL& operator=(const HostedURL& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostedURL& operator=(HostedURL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostedURL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostedURL* internal_default_instance() {
    return reinterpret_cast<const HostedURL*>(
               &_HostedURL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(HostedURL& a, HostedURL& b) {
    a.Swap(&b);
  }
  inline void Swap(HostedURL* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostedURL* New() const final {
    return CreateMaybeMessage<HostedURL>(nullptr);
  }

  HostedURL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostedURL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostedURL& from);
  void MergeFrom(const HostedURL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostedURL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.HostedURL";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizesFieldNumber = 3,
    kPrefixFieldNumber = 1,
    kSuffixFieldNumber = 2,
    kCrossoriginFieldNumber = 4,
  };
  // repeated string sizes = 3;
  int sizes_size() const;
  private:
  int _internal_sizes_size() const;
  public:
  void clear_sizes();
  const std::string& sizes(int index) const;
  std::string* mutable_sizes(int index);
  void set_sizes(int index, const std::string& value);
  void set_sizes(int index, std::string&& value);
  void set_sizes(int index, const char* value);
  void set_sizes(int index, const char* value, size_t size);
  std::string* add_sizes();
  void add_sizes(const std::string& value);
  void add_sizes(std::string&& value);
  void add_sizes(const char* value);
  void add_sizes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sizes();
  private:
  const std::string& _internal_sizes(int index) const;
  std::string* _internal_add_sizes();
  public:

  // string prefix = 1;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // string suffix = 2;
  void clear_suffix();
  const std::string& suffix() const;
  void set_suffix(const std::string& value);
  void set_suffix(std::string&& value);
  void set_suffix(const char* value);
  void set_suffix(const char* value, size_t size);
  std::string* mutable_suffix();
  std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // string crossorigin = 4;
  void clear_crossorigin();
  const std::string& crossorigin() const;
  void set_crossorigin(const std::string& value);
  void set_crossorigin(std::string&& value);
  void set_crossorigin(const char* value);
  void set_crossorigin(const char* value, size_t size);
  std::string* mutable_crossorigin();
  std::string* release_crossorigin();
  void set_allocated_crossorigin(std::string* crossorigin);
  private:
  const std::string& _internal_crossorigin() const;
  void _internal_set_crossorigin(const std::string& value);
  std::string* _internal_mutable_crossorigin();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.HostedURL)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sizes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crossorigin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Input :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Input) */ {
 public:
  Input();
  virtual ~Input();

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return CreateMaybeMessage<Input>(nullptr);
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Input";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDataFieldNumber = 2,
    kCreatedAtFieldNumber = 4,
    kModifiedAtFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .google.protobuf.Timestamp modified_at = 5;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:

  // .clarifai.api.status.Status status = 6;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Input)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::Data* data_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class InputCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.InputCount) */ {
 public:
  InputCount();
  virtual ~InputCount();

  InputCount(const InputCount& from);
  InputCount(InputCount&& from) noexcept
    : InputCount() {
    *this = ::std::move(from);
  }

  inline InputCount& operator=(const InputCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputCount& operator=(InputCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputCount* internal_default_instance() {
    return reinterpret_cast<const InputCount*>(
               &_InputCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(InputCount& a, InputCount& b) {
    a.Swap(&b);
  }
  inline void Swap(InputCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputCount* New() const final {
    return CreateMaybeMessage<InputCount>(nullptr);
  }

  InputCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputCount& from);
  void MergeFrom(const InputCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.InputCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessedFieldNumber = 1,
    kToProcessFieldNumber = 2,
    kErrorsFieldNumber = 3,
    kProcessingFieldNumber = 4,
    kReindexedFieldNumber = 5,
    kToReindexFieldNumber = 6,
    kReindexErrorsFieldNumber = 7,
    kReindexingFieldNumber = 8,
  };
  // uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_processed();
  ::PROTOBUF_NAMESPACE_ID::uint32 processed() const;
  void set_processed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_processed() const;
  void _internal_set_processed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_to_process();
  ::PROTOBUF_NAMESPACE_ID::uint32 to_process() const;
  void set_to_process(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to_process() const;
  void _internal_set_to_process(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_errors();
  ::PROTOBUF_NAMESPACE_ID::uint32 errors() const;
  void set_errors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errors() const;
  void _internal_set_errors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_processing();
  ::PROTOBUF_NAMESPACE_ID::uint32 processing() const;
  void set_processing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_processing() const;
  void _internal_set_processing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_reindexed();
  ::PROTOBUF_NAMESPACE_ID::uint32 reindexed() const;
  void set_reindexed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reindexed() const;
  void _internal_set_reindexed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_to_reindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 to_reindex() const;
  void set_to_reindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to_reindex() const;
  void _internal_set_to_reindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_reindex_errors();
  ::PROTOBUF_NAMESPACE_ID::uint32 reindex_errors() const;
  void set_reindex_errors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reindex_errors() const;
  void _internal_set_reindex_errors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_reindexing();
  ::PROTOBUF_NAMESPACE_ID::uint32 reindexing() const;
  void set_reindexing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reindexing() const;
  void _internal_set_reindexing(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.InputCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 processed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_process_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errors_;
  ::PROTOBUF_NAMESPACE_ID::uint32 processing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reindexed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_reindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reindex_errors_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reindexing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class WorkflowResultsSimilarity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.WorkflowResultsSimilarity) */ {
 public:
  WorkflowResultsSimilarity();
  virtual ~WorkflowResultsSimilarity();

  WorkflowResultsSimilarity(const WorkflowResultsSimilarity& from);
  WorkflowResultsSimilarity(WorkflowResultsSimilarity&& from) noexcept
    : WorkflowResultsSimilarity() {
    *this = ::std::move(from);
  }

  inline WorkflowResultsSimilarity& operator=(const WorkflowResultsSimilarity& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowResultsSimilarity& operator=(WorkflowResultsSimilarity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowResultsSimilarity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowResultsSimilarity* internal_default_instance() {
    return reinterpret_cast<const WorkflowResultsSimilarity*>(
               &_WorkflowResultsSimilarity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(WorkflowResultsSimilarity& a, WorkflowResultsSimilarity& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowResultsSimilarity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowResultsSimilarity* New() const final {
    return CreateMaybeMessage<WorkflowResultsSimilarity>(nullptr);
  }

  WorkflowResultsSimilarity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowResultsSimilarity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowResultsSimilarity& from);
  void MergeFrom(const WorkflowResultsSimilarity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowResultsSimilarity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.WorkflowResultsSimilarity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolResultsFieldNumber = 2,
    kProbeInputFieldNumber = 1,
  };
  // repeated .clarifai.api.Hit pool_results = 2;
  int pool_results_size() const;
  private:
  int _internal_pool_results_size() const;
  public:
  void clear_pool_results();
  ::clarifai::api::Hit* mutable_pool_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >*
      mutable_pool_results();
  private:
  const ::clarifai::api::Hit& _internal_pool_results(int index) const;
  ::clarifai::api::Hit* _internal_add_pool_results();
  public:
  const ::clarifai::api::Hit& pool_results(int index) const;
  ::clarifai::api::Hit* add_pool_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >&
      pool_results() const;

  // .clarifai.api.Input probe_input = 1;
  bool has_probe_input() const;
  private:
  bool _internal_has_probe_input() const;
  public:
  void clear_probe_input();
  const ::clarifai::api::Input& probe_input() const;
  ::clarifai::api::Input* release_probe_input();
  ::clarifai::api::Input* mutable_probe_input();
  void set_allocated_probe_input(::clarifai::api::Input* probe_input);
  private:
  const ::clarifai::api::Input& _internal_probe_input() const;
  ::clarifai::api::Input* _internal_mutable_probe_input();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.WorkflowResultsSimilarity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit > pool_results_;
  ::clarifai::api::Input* probe_input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Key :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline Key& operator=(Key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }
  inline void Swap(Key* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Key* New() const final {
    return CreateMaybeMessage<Key>(nullptr);
  }

  Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Key";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 3,
    kAppsFieldNumber = 4,
    kEndpointsFieldNumber = 7,
    kAuthorizedIdpIdsFieldNumber = 9,
    kIdFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kTypeFieldNumber = 8,
    kCreatedAtFieldNumber = 5,
    kExpiresAtFieldNumber = 6,
  };
  // repeated string scopes = 3;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated .clarifai.api.App apps = 4;
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::clarifai::api::App* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
      mutable_apps();
  private:
  const ::clarifai::api::App& _internal_apps(int index) const;
  ::clarifai::api::App* _internal_add_apps();
  public:
  const ::clarifai::api::App& apps(int index) const;
  ::clarifai::api::App* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
      apps() const;

  // repeated string endpoints = 7;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // repeated string authorized_idp_ids = 9;
  int authorized_idp_ids_size() const;
  private:
  int _internal_authorized_idp_ids_size() const;
  public:
  void clear_authorized_idp_ids();
  const std::string& authorized_idp_ids(int index) const;
  std::string* mutable_authorized_idp_ids(int index);
  void set_authorized_idp_ids(int index, const std::string& value);
  void set_authorized_idp_ids(int index, std::string&& value);
  void set_authorized_idp_ids(int index, const char* value);
  void set_authorized_idp_ids(int index, const char* value, size_t size);
  std::string* add_authorized_idp_ids();
  void add_authorized_idp_ids(const std::string& value);
  void add_authorized_idp_ids(std::string&& value);
  void add_authorized_idp_ids(const char* value);
  void add_authorized_idp_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& authorized_idp_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_authorized_idp_ids();
  private:
  const std::string& _internal_authorized_idp_ids(int index) const;
  std::string* _internal_add_authorized_idp_ids();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string type = 8;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .google.protobuf.Timestamp created_at = 5;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .google.protobuf.Timestamp expires_at = 6;
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expires_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expires_at();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Key)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App > apps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> authorized_idp_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expires_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Model :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model& operator=(Model&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }
  inline void Swap(Model* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const final {
    return CreateMaybeMessage<Model>(nullptr);
  }

  Model* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Model";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kAppIdFieldNumber = 4,
    kDisplayNameFieldNumber = 7,
    kUserIdFieldNumber = 9,
    kModelTypeIdFieldNumber = 14,
    kDescriptionFieldNumber = 16,
    kCreatedAtFieldNumber = 3,
    kOutputInfoFieldNumber = 5,
    kModelVersionFieldNumber = 6,
    kInputInfoFieldNumber = 12,
    kTrainInfoFieldNumber = 13,
    kVisibilityFieldNumber = 15,
    kMetadataFieldNumber = 17,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string display_name = 7;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string user_id = 9;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string model_type_id = 14;
  void clear_model_type_id();
  const std::string& model_type_id() const;
  void set_model_type_id(const std::string& value);
  void set_model_type_id(std::string&& value);
  void set_model_type_id(const char* value);
  void set_model_type_id(const char* value, size_t size);
  std::string* mutable_model_type_id();
  std::string* release_model_type_id();
  void set_allocated_model_type_id(std::string* model_type_id);
  private:
  const std::string& _internal_model_type_id() const;
  void _internal_set_model_type_id(const std::string& value);
  std::string* _internal_mutable_model_type_id();
  public:

  // string description = 16;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .clarifai.api.OutputInfo output_info = 5;
  bool has_output_info() const;
  private:
  bool _internal_has_output_info() const;
  public:
  void clear_output_info();
  const ::clarifai::api::OutputInfo& output_info() const;
  ::clarifai::api::OutputInfo* release_output_info();
  ::clarifai::api::OutputInfo* mutable_output_info();
  void set_allocated_output_info(::clarifai::api::OutputInfo* output_info);
  private:
  const ::clarifai::api::OutputInfo& _internal_output_info() const;
  ::clarifai::api::OutputInfo* _internal_mutable_output_info();
  public:

  // .clarifai.api.ModelVersion model_version = 6;
  bool has_model_version() const;
  private:
  bool _internal_has_model_version() const;
  public:
  void clear_model_version();
  const ::clarifai::api::ModelVersion& model_version() const;
  ::clarifai::api::ModelVersion* release_model_version();
  ::clarifai::api::ModelVersion* mutable_model_version();
  void set_allocated_model_version(::clarifai::api::ModelVersion* model_version);
  private:
  const ::clarifai::api::ModelVersion& _internal_model_version() const;
  ::clarifai::api::ModelVersion* _internal_mutable_model_version();
  public:

  // .clarifai.api.InputInfo input_info = 12;
  bool has_input_info() const;
  private:
  bool _internal_has_input_info() const;
  public:
  void clear_input_info();
  const ::clarifai::api::InputInfo& input_info() const;
  ::clarifai::api::InputInfo* release_input_info();
  ::clarifai::api::InputInfo* mutable_input_info();
  void set_allocated_input_info(::clarifai::api::InputInfo* input_info);
  private:
  const ::clarifai::api::InputInfo& _internal_input_info() const;
  ::clarifai::api::InputInfo* _internal_mutable_input_info();
  public:

  // .clarifai.api.TrainInfo train_info = 13;
  bool has_train_info() const;
  private:
  bool _internal_has_train_info() const;
  public:
  void clear_train_info();
  const ::clarifai::api::TrainInfo& train_info() const;
  ::clarifai::api::TrainInfo* release_train_info();
  ::clarifai::api::TrainInfo* mutable_train_info();
  void set_allocated_train_info(::clarifai::api::TrainInfo* train_info);
  private:
  const ::clarifai::api::TrainInfo& _internal_train_info() const;
  ::clarifai::api::TrainInfo* _internal_mutable_train_info();
  public:

  // .clarifai.api.Visibility visibility = 15;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  const ::clarifai::api::Visibility& visibility() const;
  ::clarifai::api::Visibility* release_visibility();
  ::clarifai::api::Visibility* mutable_visibility();
  void set_allocated_visibility(::clarifai::api::Visibility* visibility);
  private:
  const ::clarifai::api::Visibility& _internal_visibility() const;
  ::clarifai::api::Visibility* _internal_mutable_visibility();
  public:

  // .google.protobuf.Struct metadata = 17;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Model)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::clarifai::api::OutputInfo* output_info_;
  ::clarifai::api::ModelVersion* model_version_;
  ::clarifai::api::InputInfo* input_info_;
  ::clarifai::api::TrainInfo* train_info_;
  ::clarifai::api::Visibility* visibility_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ModelReference :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ModelReference) */ {
 public:
  ModelReference();
  virtual ~ModelReference();

  ModelReference(const ModelReference& from);
  ModelReference(ModelReference&& from) noexcept
    : ModelReference() {
    *this = ::std::move(from);
  }

  inline ModelReference& operator=(const ModelReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelReference& operator=(ModelReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelReference* internal_default_instance() {
    return reinterpret_cast<const ModelReference*>(
               &_ModelReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ModelReference& a, ModelReference& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelReference* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelReference* New() const final {
    return CreateMaybeMessage<ModelReference>(nullptr);
  }

  ModelReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelReference& from);
  void MergeFrom(const ModelReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ModelReference";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kModelIdFieldNumber = 2,
    kUrlFieldNumber = 3,
    kNameFieldNumber = 4,
    kMetadataFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string url = 3;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct metadata = 5;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ModelReference)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ModelVersionInputExample :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ModelVersionInputExample) */ {
 public:
  ModelVersionInputExample();
  virtual ~ModelVersionInputExample();

  ModelVersionInputExample(const ModelVersionInputExample& from);
  ModelVersionInputExample(ModelVersionInputExample&& from) noexcept
    : ModelVersionInputExample() {
    *this = ::std::move(from);
  }

  inline ModelVersionInputExample& operator=(const ModelVersionInputExample& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelVersionInputExample& operator=(ModelVersionInputExample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelVersionInputExample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelVersionInputExample* internal_default_instance() {
    return reinterpret_cast<const ModelVersionInputExample*>(
               &_ModelVersionInputExample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ModelVersionInputExample& a, ModelVersionInputExample& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelVersionInputExample* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelVersionInputExample* New() const final {
    return CreateMaybeMessage<ModelVersionInputExample>(nullptr);
  }

  ModelVersionInputExample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelVersionInputExample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelVersionInputExample& from);
  void MergeFrom(const ModelVersionInputExample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelVersionInputExample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ModelVersionInputExample";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kModelIdFieldNumber = 2,
    kModelVersionIdFieldNumber = 3,
    kNameFieldNumber = 5,
    kDescriptionFieldNumber = 6,
    kDataFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string model_id = 2;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string model_version_id = 3;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  void set_model_version_id(const std::string& value);
  void set_model_version_id(std::string&& value);
  void set_model_version_id(const char* value);
  void set_model_version_id(const char* value, size_t size);
  std::string* mutable_model_version_id();
  std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);
  private:
  const std::string& _internal_model_version_id() const;
  void _internal_set_model_version_id(const std::string& value);
  std::string* _internal_mutable_model_version_id();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 6;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .clarifai.api.Data data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ModelVersionInputExample)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::clarifai::api::Data* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class OutputInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.OutputInfo) */ {
 public:
  OutputInfo();
  virtual ~OutputInfo();

  OutputInfo(const OutputInfo& from);
  OutputInfo(OutputInfo&& from) noexcept
    : OutputInfo() {
    *this = ::std::move(from);
  }

  inline OutputInfo& operator=(const OutputInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputInfo& operator=(OutputInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputInfo* internal_default_instance() {
    return reinterpret_cast<const OutputInfo*>(
               &_OutputInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(OutputInfo& a, OutputInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputInfo* New() const final {
    return CreateMaybeMessage<OutputInfo>(nullptr);
  }

  OutputInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputInfo& from);
  void MergeFrom(const OutputInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.OutputInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kTypeFieldNumber = 4,
    kTypeExtFieldNumber = 5,
    kDataFieldNumber = 1,
    kOutputConfigFieldNumber = 2,
    kFieldsMapFieldNumber = 6,
    kParamsFieldNumber = 7,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string type = 4;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string type_ext = 5;
  void clear_type_ext();
  const std::string& type_ext() const;
  void set_type_ext(const std::string& value);
  void set_type_ext(std::string&& value);
  void set_type_ext(const char* value);
  void set_type_ext(const char* value, size_t size);
  std::string* mutable_type_ext();
  std::string* release_type_ext();
  void set_allocated_type_ext(std::string* type_ext);
  private:
  const std::string& _internal_type_ext() const;
  void _internal_set_type_ext(const std::string& value);
  std::string* _internal_mutable_type_ext();
  public:

  // .clarifai.api.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:

  // .clarifai.api.OutputConfig output_config = 2;
  bool has_output_config() const;
  private:
  bool _internal_has_output_config() const;
  public:
  void clear_output_config();
  const ::clarifai::api::OutputConfig& output_config() const;
  ::clarifai::api::OutputConfig* release_output_config();
  ::clarifai::api::OutputConfig* mutable_output_config();
  void set_allocated_output_config(::clarifai::api::OutputConfig* output_config);
  private:
  const ::clarifai::api::OutputConfig& _internal_output_config() const;
  ::clarifai::api::OutputConfig* _internal_mutable_output_config();
  public:

  // .google.protobuf.Struct fields_map = 6;
  bool has_fields_map() const;
  private:
  bool _internal_has_fields_map() const;
  public:
  void clear_fields_map();
  const PROTOBUF_NAMESPACE_ID::Struct& fields_map() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_fields_map();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_fields_map();
  void set_allocated_fields_map(PROTOBUF_NAMESPACE_ID::Struct* fields_map);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_fields_map() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_fields_map();
  public:

  // .google.protobuf.Struct params = 7;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const PROTOBUF_NAMESPACE_ID::Struct& params() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_params();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_params();
  void set_allocated_params(PROTOBUF_NAMESPACE_ID::Struct* params);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_params() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_params();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.OutputInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_ext_;
  ::clarifai::api::Data* data_;
  ::clarifai::api::OutputConfig* output_config_;
  PROTOBUF_NAMESPACE_ID::Struct* fields_map_;
  PROTOBUF_NAMESPACE_ID::Struct* params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class InputInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.InputInfo) */ {
 public:
  InputInfo();
  virtual ~InputInfo();

  InputInfo(const InputInfo& from);
  InputInfo(InputInfo&& from) noexcept
    : InputInfo() {
    *this = ::std::move(from);
  }

  inline InputInfo& operator=(const InputInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputInfo& operator=(InputInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputInfo* internal_default_instance() {
    return reinterpret_cast<const InputInfo*>(
               &_InputInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(InputInfo& a, InputInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InputInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputInfo* New() const final {
    return CreateMaybeMessage<InputInfo>(nullptr);
  }

  InputInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputInfo& from);
  void MergeFrom(const InputInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.InputInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsMapFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // .google.protobuf.Struct fields_map = 1;
  bool has_fields_map() const;
  private:
  bool _internal_has_fields_map() const;
  public:
  void clear_fields_map();
  const PROTOBUF_NAMESPACE_ID::Struct& fields_map() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_fields_map();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_fields_map();
  void set_allocated_fields_map(PROTOBUF_NAMESPACE_ID::Struct* fields_map);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_fields_map() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_fields_map();
  public:

  // .google.protobuf.Struct params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const PROTOBUF_NAMESPACE_ID::Struct& params() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_params();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_params();
  void set_allocated_params(PROTOBUF_NAMESPACE_ID::Struct* params);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_params() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_params();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.InputInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Struct* fields_map_;
  PROTOBUF_NAMESPACE_ID::Struct* params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TrainInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TrainInfo) */ {
 public:
  TrainInfo();
  virtual ~TrainInfo();

  TrainInfo(const TrainInfo& from);
  TrainInfo(TrainInfo&& from) noexcept
    : TrainInfo() {
    *this = ::std::move(from);
  }

  inline TrainInfo& operator=(const TrainInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainInfo& operator=(TrainInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainInfo* internal_default_instance() {
    return reinterpret_cast<const TrainInfo*>(
               &_TrainInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(TrainInfo& a, TrainInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainInfo* New() const final {
    return CreateMaybeMessage<TrainInfo>(nullptr);
  }

  TrainInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainInfo& from);
  void MergeFrom(const TrainInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TrainInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .google.protobuf.Struct params = 1;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const PROTOBUF_NAMESPACE_ID::Struct& params() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_params();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_params();
  void set_allocated_params(PROTOBUF_NAMESPACE_ID::Struct* params);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_params() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_params();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.TrainInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Struct* params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class OutputConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.OutputConfig) */ {
 public:
  OutputConfig();
  virtual ~OutputConfig();

  OutputConfig(const OutputConfig& from);
  OutputConfig(OutputConfig&& from) noexcept
    : OutputConfig() {
    *this = ::std::move(from);
  }

  inline OutputConfig& operator=(const OutputConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputConfig& operator=(OutputConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputConfig* internal_default_instance() {
    return reinterpret_cast<const OutputConfig*>(
               &_OutputConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(OutputConfig& a, OutputConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputConfig* New() const final {
    return CreateMaybeMessage<OutputConfig>(nullptr);
  }

  OutputConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputConfig& from);
  void MergeFrom(const OutputConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.OutputConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectConceptsFieldNumber = 8,
    kExistingModelIdFieldNumber = 3,
    kLanguageFieldNumber = 4,
    kHyperParametersFieldNumber = 5,
    kEmbedModelVersionIdFieldNumber = 14,
    kHyperParamsFieldNumber = 13,
    kModelMetadataFieldNumber = 17,
    kMaxConceptsFieldNumber = 6,
    kConceptsMutuallyExclusiveFieldNumber = 1,
    kClosedEnvironmentFieldNumber = 2,
    kFailOnMissingPositiveExamplesFieldNumber = 15,
    kMinValueFieldNumber = 7,
    kTrainingTimeoutFieldNumber = 9,
    kSampleMsFieldNumber = 10,
  };
  // repeated .clarifai.api.Concept select_concepts = 8;
  int select_concepts_size() const;
  private:
  int _internal_select_concepts_size() const;
  public:
  void clear_select_concepts();
  ::clarifai::api::Concept* mutable_select_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_select_concepts();
  private:
  const ::clarifai::api::Concept& _internal_select_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_select_concepts();
  public:
  const ::clarifai::api::Concept& select_concepts(int index) const;
  ::clarifai::api::Concept* add_select_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      select_concepts() const;

  // string existing_model_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_existing_model_id();
  PROTOBUF_DEPRECATED const std::string& existing_model_id() const;
  PROTOBUF_DEPRECATED void set_existing_model_id(const std::string& value);
  PROTOBUF_DEPRECATED void set_existing_model_id(std::string&& value);
  PROTOBUF_DEPRECATED void set_existing_model_id(const char* value);
  PROTOBUF_DEPRECATED void set_existing_model_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_existing_model_id();
  PROTOBUF_DEPRECATED std::string* release_existing_model_id();
  PROTOBUF_DEPRECATED void set_allocated_existing_model_id(std::string* existing_model_id);
  private:
  const std::string& _internal_existing_model_id() const;
  void _internal_set_existing_model_id(const std::string& value);
  std::string* _internal_mutable_existing_model_id();
  public:

  // string language = 4;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string hyper_parameters = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_hyper_parameters();
  PROTOBUF_DEPRECATED const std::string& hyper_parameters() const;
  PROTOBUF_DEPRECATED void set_hyper_parameters(const std::string& value);
  PROTOBUF_DEPRECATED void set_hyper_parameters(std::string&& value);
  PROTOBUF_DEPRECATED void set_hyper_parameters(const char* value);
  PROTOBUF_DEPRECATED void set_hyper_parameters(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_hyper_parameters();
  PROTOBUF_DEPRECATED std::string* release_hyper_parameters();
  PROTOBUF_DEPRECATED void set_allocated_hyper_parameters(std::string* hyper_parameters);
  private:
  const std::string& _internal_hyper_parameters() const;
  void _internal_set_hyper_parameters(const std::string& value);
  std::string* _internal_mutable_hyper_parameters();
  public:

  // string embed_model_version_id = 14;
  void clear_embed_model_version_id();
  const std::string& embed_model_version_id() const;
  void set_embed_model_version_id(const std::string& value);
  void set_embed_model_version_id(std::string&& value);
  void set_embed_model_version_id(const char* value);
  void set_embed_model_version_id(const char* value, size_t size);
  std::string* mutable_embed_model_version_id();
  std::string* release_embed_model_version_id();
  void set_allocated_embed_model_version_id(std::string* embed_model_version_id);
  private:
  const std::string& _internal_embed_model_version_id() const;
  void _internal_set_embed_model_version_id(const std::string& value);
  std::string* _internal_mutable_embed_model_version_id();
  public:

  // .google.protobuf.Struct hyper_params = 13;
  bool has_hyper_params() const;
  private:
  bool _internal_has_hyper_params() const;
  public:
  void clear_hyper_params();
  const PROTOBUF_NAMESPACE_ID::Struct& hyper_params() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_hyper_params();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_hyper_params();
  void set_allocated_hyper_params(PROTOBUF_NAMESPACE_ID::Struct* hyper_params);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_hyper_params() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_hyper_params();
  public:

  // .google.protobuf.Struct model_metadata = 17 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_model_metadata() const;
  private:
  bool _internal_has_model_metadata() const;
  public:
  PROTOBUF_DEPRECATED void clear_model_metadata();
  PROTOBUF_DEPRECATED const PROTOBUF_NAMESPACE_ID::Struct& model_metadata() const;
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Struct* release_model_metadata();
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Struct* mutable_model_metadata();
  PROTOBUF_DEPRECATED void set_allocated_model_metadata(PROTOBUF_NAMESPACE_ID::Struct* model_metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_model_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_model_metadata();
  public:

  // uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_max_concepts();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_concepts() const;
  void set_max_concepts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_concepts() const;
  void _internal_set_max_concepts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool concepts_mutually_exclusive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_concepts_mutually_exclusive();
  bool concepts_mutually_exclusive() const;
  void set_concepts_mutually_exclusive(bool value);
  private:
  bool _internal_concepts_mutually_exclusive() const;
  void _internal_set_concepts_mutually_exclusive(bool value);
  public:

  // bool closed_environment = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_closed_environment();
  bool closed_environment() const;
  void set_closed_environment(bool value);
  private:
  bool _internal_closed_environment() const;
  void _internal_set_closed_environment(bool value);
  public:

  // bool fail_on_missing_positive_examples = 15;
  void clear_fail_on_missing_positive_examples();
  bool fail_on_missing_positive_examples() const;
  void set_fail_on_missing_positive_examples(bool value);
  private:
  bool _internal_fail_on_missing_positive_examples() const;
  void _internal_set_fail_on_missing_positive_examples(bool value);
  public:

  // float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_min_value();
  float min_value() const;
  void set_min_value(float value);
  private:
  float _internal_min_value() const;
  void _internal_set_min_value(float value);
  public:

  // uint32 training_timeout = 9;
  void clear_training_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 training_timeout() const;
  void set_training_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_training_timeout() const;
  void _internal_set_training_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sample_ms = 10;
  void clear_sample_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_ms() const;
  void set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_ms() const;
  void _internal_set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.OutputConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > select_concepts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr existing_model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hyper_parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr embed_model_version_id_;
  PROTOBUF_NAMESPACE_ID::Struct* hyper_params_;
  PROTOBUF_NAMESPACE_ID::Struct* model_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_concepts_;
  bool concepts_mutually_exclusive_;
  bool closed_environment_;
  bool fail_on_missing_positive_examples_;
  float min_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 training_timeout_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ModelType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ModelType) */ {
 public:
  ModelType();
  virtual ~ModelType();

  ModelType(const ModelType& from);
  ModelType(ModelType&& from) noexcept
    : ModelType() {
    *this = ::std::move(from);
  }

  inline ModelType& operator=(const ModelType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelType& operator=(ModelType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelType* internal_default_instance() {
    return reinterpret_cast<const ModelType*>(
               &_ModelType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ModelType& a, ModelType& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelType* New() const final {
    return CreateMaybeMessage<ModelType>(nullptr);
  }

  ModelType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelType& from);
  void MergeFrom(const ModelType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ModelType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldsFieldNumber = 5,
    kOutputFieldsFieldNumber = 6,
    kModelTypeFieldsFieldNumber = 11,
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kTypeFieldNumber = 4,
    kExpectedPretrainedInputFieldsFieldNumber = 14,
    kExpectedPretrainedOutputFieldsFieldNumber = 15,
    kTrainableFieldNumber = 8,
    kCreatableFieldNumber = 9,
    kInternalOnlyFieldNumber = 10,
    kRequiresSequentialFramesFieldNumber = 12,
    kEvaluableFieldNumber = 13,
  };
  // repeated string input_fields = 5;
  int input_fields_size() const;
  private:
  int _internal_input_fields_size() const;
  public:
  void clear_input_fields();
  const std::string& input_fields(int index) const;
  std::string* mutable_input_fields(int index);
  void set_input_fields(int index, const std::string& value);
  void set_input_fields(int index, std::string&& value);
  void set_input_fields(int index, const char* value);
  void set_input_fields(int index, const char* value, size_t size);
  std::string* add_input_fields();
  void add_input_fields(const std::string& value);
  void add_input_fields(std::string&& value);
  void add_input_fields(const char* value);
  void add_input_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_fields();
  private:
  const std::string& _internal_input_fields(int index) const;
  std::string* _internal_add_input_fields();
  public:

  // repeated string output_fields = 6;
  int output_fields_size() const;
  private:
  int _internal_output_fields_size() const;
  public:
  void clear_output_fields();
  const std::string& output_fields(int index) const;
  std::string* mutable_output_fields(int index);
  void set_output_fields(int index, const std::string& value);
  void set_output_fields(int index, std::string&& value);
  void set_output_fields(int index, const char* value);
  void set_output_fields(int index, const char* value, size_t size);
  std::string* add_output_fields();
  void add_output_fields(const std::string& value);
  void add_output_fields(std::string&& value);
  void add_output_fields(const char* value);
  void add_output_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_fields();
  private:
  const std::string& _internal_output_fields(int index) const;
  std::string* _internal_add_output_fields();
  public:

  // repeated .clarifai.api.ModelTypeField model_type_fields = 11;
  int model_type_fields_size() const;
  private:
  int _internal_model_type_fields_size() const;
  public:
  void clear_model_type_fields();
  ::clarifai::api::ModelTypeField* mutable_model_type_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeField >*
      mutable_model_type_fields();
  private:
  const ::clarifai::api::ModelTypeField& _internal_model_type_fields(int index) const;
  ::clarifai::api::ModelTypeField* _internal_add_model_type_fields();
  public:
  const ::clarifai::api::ModelTypeField& model_type_fields(int index) const;
  ::clarifai::api::ModelTypeField* add_model_type_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeField >&
      model_type_fields() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string type = 4;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .google.protobuf.Struct expected_pretrained_input_fields = 14;
  bool has_expected_pretrained_input_fields() const;
  private:
  bool _internal_has_expected_pretrained_input_fields() const;
  public:
  void clear_expected_pretrained_input_fields();
  const PROTOBUF_NAMESPACE_ID::Struct& expected_pretrained_input_fields() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_expected_pretrained_input_fields();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_expected_pretrained_input_fields();
  void set_allocated_expected_pretrained_input_fields(PROTOBUF_NAMESPACE_ID::Struct* expected_pretrained_input_fields);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_expected_pretrained_input_fields() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_expected_pretrained_input_fields();
  public:

  // .google.protobuf.Struct expected_pretrained_output_fields = 15;
  bool has_expected_pretrained_output_fields() const;
  private:
  bool _internal_has_expected_pretrained_output_fields() const;
  public:
  void clear_expected_pretrained_output_fields();
  const PROTOBUF_NAMESPACE_ID::Struct& expected_pretrained_output_fields() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_expected_pretrained_output_fields();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_expected_pretrained_output_fields();
  void set_allocated_expected_pretrained_output_fields(PROTOBUF_NAMESPACE_ID::Struct* expected_pretrained_output_fields);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_expected_pretrained_output_fields() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_expected_pretrained_output_fields();
  public:

  // bool trainable = 8;
  void clear_trainable();
  bool trainable() const;
  void set_trainable(bool value);
  private:
  bool _internal_trainable() const;
  void _internal_set_trainable(bool value);
  public:

  // bool creatable = 9;
  void clear_creatable();
  bool creatable() const;
  void set_creatable(bool value);
  private:
  bool _internal_creatable() const;
  void _internal_set_creatable(bool value);
  public:

  // bool internal_only = 10;
  void clear_internal_only();
  bool internal_only() const;
  void set_internal_only(bool value);
  private:
  bool _internal_internal_only() const;
  void _internal_set_internal_only(bool value);
  public:

  // bool requires_sequential_frames = 12;
  void clear_requires_sequential_frames();
  bool requires_sequential_frames() const;
  void set_requires_sequential_frames(bool value);
  private:
  bool _internal_requires_sequential_frames() const;
  void _internal_set_requires_sequential_frames(bool value);
  public:

  // bool evaluable = 13;
  void clear_evaluable();
  bool evaluable() const;
  void set_evaluable(bool value);
  private:
  bool _internal_evaluable() const;
  void _internal_set_evaluable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ModelType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeField > model_type_fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  PROTOBUF_NAMESPACE_ID::Struct* expected_pretrained_input_fields_;
  PROTOBUF_NAMESPACE_ID::Struct* expected_pretrained_output_fields_;
  bool trainable_;
  bool creatable_;
  bool internal_only_;
  bool requires_sequential_frames_;
  bool evaluable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ModelTypeField :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ModelTypeField) */ {
 public:
  ModelTypeField();
  virtual ~ModelTypeField();

  ModelTypeField(const ModelTypeField& from);
  ModelTypeField(ModelTypeField&& from) noexcept
    : ModelTypeField() {
    *this = ::std::move(from);
  }

  inline ModelTypeField& operator=(const ModelTypeField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelTypeField& operator=(ModelTypeField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelTypeField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelTypeField* internal_default_instance() {
    return reinterpret_cast<const ModelTypeField*>(
               &_ModelTypeField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ModelTypeField& a, ModelTypeField& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelTypeField* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelTypeField* New() const final {
    return CreateMaybeMessage<ModelTypeField>(nullptr);
  }

  ModelTypeField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelTypeField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelTypeField& from);
  void MergeFrom(const ModelTypeField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelTypeField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ModelTypeField";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ModelTypeField_ModelTypeFieldType ModelTypeFieldType;
  static constexpr ModelTypeFieldType INVALID_MODEL_TYPE_FIELD_TYPE =
    ModelTypeField_ModelTypeFieldType_INVALID_MODEL_TYPE_FIELD_TYPE;
  static constexpr ModelTypeFieldType BOOLEAN =
    ModelTypeField_ModelTypeFieldType_BOOLEAN;
  static constexpr ModelTypeFieldType STRING =
    ModelTypeField_ModelTypeFieldType_STRING;
  static constexpr ModelTypeFieldType NUMBER =
    ModelTypeField_ModelTypeFieldType_NUMBER;
  static constexpr ModelTypeFieldType ARRAY_OF_CONCEPTS =
    ModelTypeField_ModelTypeFieldType_ARRAY_OF_CONCEPTS;
  static constexpr ModelTypeFieldType ARRAY_OF_CONCEPTS_WITH_THRESHOLD =
    ModelTypeField_ModelTypeFieldType_ARRAY_OF_CONCEPTS_WITH_THRESHOLD;
  static constexpr ModelTypeFieldType RANGE =
    ModelTypeField_ModelTypeFieldType_RANGE;
  static constexpr ModelTypeFieldType ENUM =
    ModelTypeField_ModelTypeFieldType_ENUM;
  static constexpr ModelTypeFieldType COLLABORATORS =
    ModelTypeField_ModelTypeFieldType_COLLABORATORS;
  static constexpr ModelTypeFieldType JSON =
    ModelTypeField_ModelTypeFieldType_JSON;
  static constexpr ModelTypeFieldType ARRAY_OF_NUMBERS =
    ModelTypeField_ModelTypeFieldType_ARRAY_OF_NUMBERS;
  static constexpr ModelTypeFieldType WORKFLOW_EMBED_MODELS =
    ModelTypeField_ModelTypeFieldType_WORKFLOW_EMBED_MODELS;
  static constexpr ModelTypeFieldType ARRAY_OF_STRINGS =
    ModelTypeField_ModelTypeFieldType_ARRAY_OF_STRINGS;
  static inline bool ModelTypeFieldType_IsValid(int value) {
    return ModelTypeField_ModelTypeFieldType_IsValid(value);
  }
  static constexpr ModelTypeFieldType ModelTypeFieldType_MIN =
    ModelTypeField_ModelTypeFieldType_ModelTypeFieldType_MIN;
  static constexpr ModelTypeFieldType ModelTypeFieldType_MAX =
    ModelTypeField_ModelTypeFieldType_ModelTypeFieldType_MAX;
  static constexpr int ModelTypeFieldType_ARRAYSIZE =
    ModelTypeField_ModelTypeFieldType_ModelTypeFieldType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ModelTypeFieldType_descriptor() {
    return ModelTypeField_ModelTypeFieldType_descriptor();
  }
  template<typename T>
  static inline const std::string& ModelTypeFieldType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModelTypeFieldType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModelTypeFieldType_Name.");
    return ModelTypeField_ModelTypeFieldType_Name(enum_t_value);
  }
  static inline bool ModelTypeFieldType_Parse(const std::string& name,
      ModelTypeFieldType* value) {
    return ModelTypeField_ModelTypeFieldType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModelTypeEnumOptionsFieldNumber = 6,
    kPathFieldNumber = 1,
    kDescriptionFieldNumber = 4,
    kPlaceholderFieldNumber = 5,
    kDefaultValueFieldNumber = 3,
    kModelTypeRangeInfoFieldNumber = 9,
    kFieldTypeFieldNumber = 2,
    kInternalOnlyFieldNumber = 7,
    kRequiredFieldNumber = 8,
  };
  // repeated .clarifai.api.ModelTypeEnumOption model_type_enum_options = 6;
  int model_type_enum_options_size() const;
  private:
  int _internal_model_type_enum_options_size() const;
  public:
  void clear_model_type_enum_options();
  ::clarifai::api::ModelTypeEnumOption* mutable_model_type_enum_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeEnumOption >*
      mutable_model_type_enum_options();
  private:
  const ::clarifai::api::ModelTypeEnumOption& _internal_model_type_enum_options(int index) const;
  ::clarifai::api::ModelTypeEnumOption* _internal_add_model_type_enum_options();
  public:
  const ::clarifai::api::ModelTypeEnumOption& model_type_enum_options(int index) const;
  ::clarifai::api::ModelTypeEnumOption* add_model_type_enum_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeEnumOption >&
      model_type_enum_options() const;

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string placeholder = 5;
  void clear_placeholder();
  const std::string& placeholder() const;
  void set_placeholder(const std::string& value);
  void set_placeholder(std::string&& value);
  void set_placeholder(const char* value);
  void set_placeholder(const char* value, size_t size);
  std::string* mutable_placeholder();
  std::string* release_placeholder();
  void set_allocated_placeholder(std::string* placeholder);
  private:
  const std::string& _internal_placeholder() const;
  void _internal_set_placeholder(const std::string& value);
  std::string* _internal_mutable_placeholder();
  public:

  // .google.protobuf.Value default_value = 3;
  bool has_default_value() const;
  private:
  bool _internal_has_default_value() const;
  public:
  void clear_default_value();
  const PROTOBUF_NAMESPACE_ID::Value& default_value() const;
  PROTOBUF_NAMESPACE_ID::Value* release_default_value();
  PROTOBUF_NAMESPACE_ID::Value* mutable_default_value();
  void set_allocated_default_value(PROTOBUF_NAMESPACE_ID::Value* default_value);
  private:
  const PROTOBUF_NAMESPACE_ID::Value& _internal_default_value() const;
  PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_default_value();
  public:

  // .clarifai.api.ModelTypeRangeInfo model_type_range_info = 9;
  bool has_model_type_range_info() const;
  private:
  bool _internal_has_model_type_range_info() const;
  public:
  void clear_model_type_range_info();
  const ::clarifai::api::ModelTypeRangeInfo& model_type_range_info() const;
  ::clarifai::api::ModelTypeRangeInfo* release_model_type_range_info();
  ::clarifai::api::ModelTypeRangeInfo* mutable_model_type_range_info();
  void set_allocated_model_type_range_info(::clarifai::api::ModelTypeRangeInfo* model_type_range_info);
  private:
  const ::clarifai::api::ModelTypeRangeInfo& _internal_model_type_range_info() const;
  ::clarifai::api::ModelTypeRangeInfo* _internal_mutable_model_type_range_info();
  public:

  // .clarifai.api.ModelTypeField.ModelTypeFieldType field_type = 2;
  void clear_field_type();
  ::clarifai::api::ModelTypeField_ModelTypeFieldType field_type() const;
  void set_field_type(::clarifai::api::ModelTypeField_ModelTypeFieldType value);
  private:
  ::clarifai::api::ModelTypeField_ModelTypeFieldType _internal_field_type() const;
  void _internal_set_field_type(::clarifai::api::ModelTypeField_ModelTypeFieldType value);
  public:

  // bool internal_only = 7;
  void clear_internal_only();
  bool internal_only() const;
  void set_internal_only(bool value);
  private:
  bool _internal_internal_only() const;
  void _internal_set_internal_only(bool value);
  public:

  // bool required = 8;
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ModelTypeField)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeEnumOption > model_type_enum_options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placeholder_;
  PROTOBUF_NAMESPACE_ID::Value* default_value_;
  ::clarifai::api::ModelTypeRangeInfo* model_type_range_info_;
  int field_type_;
  bool internal_only_;
  bool required_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ModelTypeRangeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ModelTypeRangeInfo) */ {
 public:
  ModelTypeRangeInfo();
  virtual ~ModelTypeRangeInfo();

  ModelTypeRangeInfo(const ModelTypeRangeInfo& from);
  ModelTypeRangeInfo(ModelTypeRangeInfo&& from) noexcept
    : ModelTypeRangeInfo() {
    *this = ::std::move(from);
  }

  inline ModelTypeRangeInfo& operator=(const ModelTypeRangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelTypeRangeInfo& operator=(ModelTypeRangeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelTypeRangeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelTypeRangeInfo* internal_default_instance() {
    return reinterpret_cast<const ModelTypeRangeInfo*>(
               &_ModelTypeRangeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ModelTypeRangeInfo& a, ModelTypeRangeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelTypeRangeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelTypeRangeInfo* New() const final {
    return CreateMaybeMessage<ModelTypeRangeInfo>(nullptr);
  }

  ModelTypeRangeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelTypeRangeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelTypeRangeInfo& from);
  void MergeFrom(const ModelTypeRangeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelTypeRangeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ModelTypeRangeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kStepFieldNumber = 3,
  };
  // float min = 1;
  void clear_min();
  float min() const;
  void set_min(float value);
  private:
  float _internal_min() const;
  void _internal_set_min(float value);
  public:

  // float max = 2;
  void clear_max();
  float max() const;
  void set_max(float value);
  private:
  float _internal_max() const;
  void _internal_set_max(float value);
  public:

  // float step = 3;
  void clear_step();
  float step() const;
  void set_step(float value);
  private:
  float _internal_step() const;
  void _internal_set_step(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ModelTypeRangeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float min_;
  float max_;
  float step_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ModelTypeEnumOption :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ModelTypeEnumOption) */ {
 public:
  ModelTypeEnumOption();
  virtual ~ModelTypeEnumOption();

  ModelTypeEnumOption(const ModelTypeEnumOption& from);
  ModelTypeEnumOption(ModelTypeEnumOption&& from) noexcept
    : ModelTypeEnumOption() {
    *this = ::std::move(from);
  }

  inline ModelTypeEnumOption& operator=(const ModelTypeEnumOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelTypeEnumOption& operator=(ModelTypeEnumOption&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelTypeEnumOption& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelTypeEnumOption* internal_default_instance() {
    return reinterpret_cast<const ModelTypeEnumOption*>(
               &_ModelTypeEnumOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ModelTypeEnumOption& a, ModelTypeEnumOption& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelTypeEnumOption* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelTypeEnumOption* New() const final {
    return CreateMaybeMessage<ModelTypeEnumOption>(nullptr);
  }

  ModelTypeEnumOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelTypeEnumOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelTypeEnumOption& from);
  void MergeFrom(const ModelTypeEnumOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelTypeEnumOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ModelTypeEnumOption";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelTypeFieldsFieldNumber = 3,
    kIdFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kInternalOnlyFieldNumber = 4,
  };
  // repeated .clarifai.api.ModelTypeField model_type_fields = 3;
  int model_type_fields_size() const;
  private:
  int _internal_model_type_fields_size() const;
  public:
  void clear_model_type_fields();
  ::clarifai::api::ModelTypeField* mutable_model_type_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeField >*
      mutable_model_type_fields();
  private:
  const ::clarifai::api::ModelTypeField& _internal_model_type_fields(int index) const;
  ::clarifai::api::ModelTypeField* _internal_add_model_type_fields();
  public:
  const ::clarifai::api::ModelTypeField& model_type_fields(int index) const;
  ::clarifai::api::ModelTypeField* add_model_type_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeField >&
      model_type_fields() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bool internal_only = 4;
  void clear_internal_only();
  bool internal_only() const;
  void set_internal_only(bool value);
  private:
  bool _internal_internal_only() const;
  void _internal_set_internal_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ModelTypeEnumOption)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeField > model_type_fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool internal_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ModelQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ModelQuery) */ {
 public:
  ModelQuery();
  virtual ~ModelQuery();

  ModelQuery(const ModelQuery& from);
  ModelQuery(ModelQuery&& from) noexcept
    : ModelQuery() {
    *this = ::std::move(from);
  }

  inline ModelQuery& operator=(const ModelQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelQuery& operator=(ModelQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelQuery* internal_default_instance() {
    return reinterpret_cast<const ModelQuery*>(
               &_ModelQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ModelQuery& a, ModelQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelQuery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelQuery* New() const final {
    return CreateMaybeMessage<ModelQuery>(nullptr);
  }

  ModelQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelQuery& from);
  void MergeFrom(const ModelQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ModelQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kModelTypeIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_type();
  PROTOBUF_DEPRECATED const std::string& type() const;
  PROTOBUF_DEPRECATED void set_type(const std::string& value);
  PROTOBUF_DEPRECATED void set_type(std::string&& value);
  PROTOBUF_DEPRECATED void set_type(const char* value);
  PROTOBUF_DEPRECATED void set_type(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_type();
  PROTOBUF_DEPRECATED std::string* release_type();
  PROTOBUF_DEPRECATED void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string model_type_id = 3;
  void clear_model_type_id();
  const std::string& model_type_id() const;
  void set_model_type_id(const std::string& value);
  void set_model_type_id(std::string&& value);
  void set_model_type_id(const char* value);
  void set_model_type_id(const char* value, size_t size);
  std::string* mutable_model_type_id();
  std::string* release_model_type_id();
  void set_allocated_model_type_id(std::string* model_type_id);
  private:
  const std::string& _internal_model_type_id() const;
  void _internal_set_model_type_id(const std::string& value);
  std::string* _internal_mutable_model_type_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ModelQuery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ModelVersion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ModelVersion) */ {
 public:
  ModelVersion();
  virtual ~ModelVersion();

  ModelVersion(const ModelVersion& from);
  ModelVersion(ModelVersion&& from) noexcept
    : ModelVersion() {
    *this = ::std::move(from);
  }

  inline ModelVersion& operator=(const ModelVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelVersion& operator=(ModelVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelVersion* internal_default_instance() {
    return reinterpret_cast<const ModelVersion*>(
               &_ModelVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ModelVersion& a, ModelVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelVersion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelVersion* New() const final {
    return CreateMaybeMessage<ModelVersion>(nullptr);
  }

  ModelVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelVersion& from);
  void MergeFrom(const ModelVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ModelVersion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDescriptionFieldNumber = 11,
    kAppIdFieldNumber = 13,
    kUserIdFieldNumber = 14,
    kLicenseFieldNumber = 17,
    kCreatedAtFieldNumber = 2,
    kStatusFieldNumber = 3,
    kMetricsFieldNumber = 5,
    kCompletedAtFieldNumber = 10,
    kVisibilityFieldNumber = 12,
    kModifiedAtFieldNumber = 15,
    kMetadataFieldNumber = 16,
    kActiveConceptCountFieldNumber = 4,
    kTotalInputCountFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string description = 11;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string app_id = 13;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string user_id = 14;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string license = 17;
  void clear_license();
  const std::string& license() const;
  void set_license(const std::string& value);
  void set_license(std::string&& value);
  void set_license(const char* value);
  void set_license(const char* value, size_t size);
  std::string* mutable_license();
  std::string* release_license();
  void set_allocated_license(std::string* license);
  private:
  const std::string& _internal_license() const;
  void _internal_set_license(const std::string& value);
  std::string* _internal_mutable_license();
  public:

  // .google.protobuf.Timestamp created_at = 2;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .clarifai.api.status.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.EvalMetrics metrics = 5;
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;
  public:
  void clear_metrics();
  const ::clarifai::api::EvalMetrics& metrics() const;
  ::clarifai::api::EvalMetrics* release_metrics();
  ::clarifai::api::EvalMetrics* mutable_metrics();
  void set_allocated_metrics(::clarifai::api::EvalMetrics* metrics);
  private:
  const ::clarifai::api::EvalMetrics& _internal_metrics() const;
  ::clarifai::api::EvalMetrics* _internal_mutable_metrics();
  public:

  // .google.protobuf.Timestamp completed_at = 10;
  bool has_completed_at() const;
  private:
  bool _internal_has_completed_at() const;
  public:
  void clear_completed_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& completed_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_completed_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_completed_at();
  void set_allocated_completed_at(PROTOBUF_NAMESPACE_ID::Timestamp* completed_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_completed_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_completed_at();
  public:

  // .clarifai.api.Visibility visibility = 12;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  const ::clarifai::api::Visibility& visibility() const;
  ::clarifai::api::Visibility* release_visibility();
  ::clarifai::api::Visibility* mutable_visibility();
  void set_allocated_visibility(::clarifai::api::Visibility* visibility);
  private:
  const ::clarifai::api::Visibility& _internal_visibility() const;
  ::clarifai::api::Visibility* _internal_mutable_visibility();
  public:

  // .google.protobuf.Timestamp modified_at = 15;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:

  // .google.protobuf.Struct metadata = 16;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:

  // uint32 active_concept_count = 4;
  void clear_active_concept_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 active_concept_count() const;
  void set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_active_concept_count() const;
  void _internal_set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_input_count = 6;
  void clear_total_input_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_input_count() const;
  void set_total_input_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_input_count() const;
  void _internal_set_total_input_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ModelVersion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr license_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::EvalMetrics* metrics_;
  PROTOBUF_NAMESPACE_ID::Timestamp* completed_at_;
  ::clarifai::api::Visibility* visibility_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 active_concept_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_input_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class PretrainedModelConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PretrainedModelConfig) */ {
 public:
  PretrainedModelConfig();
  virtual ~PretrainedModelConfig();

  PretrainedModelConfig(const PretrainedModelConfig& from);
  PretrainedModelConfig(PretrainedModelConfig&& from) noexcept
    : PretrainedModelConfig() {
    *this = ::std::move(from);
  }

  inline PretrainedModelConfig& operator=(const PretrainedModelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PretrainedModelConfig& operator=(PretrainedModelConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PretrainedModelConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PretrainedModelConfig* internal_default_instance() {
    return reinterpret_cast<const PretrainedModelConfig*>(
               &_PretrainedModelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(PretrainedModelConfig& a, PretrainedModelConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PretrainedModelConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PretrainedModelConfig* New() const final {
    return CreateMaybeMessage<PretrainedModelConfig>(nullptr);
  }

  PretrainedModelConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PretrainedModelConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PretrainedModelConfig& from);
  void MergeFrom(const PretrainedModelConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PretrainedModelConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PretrainedModelConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDataProviderParamsFieldNumber = 5,
    kModelZipUrlFieldNumber = 6,
    kInputFieldsMapFieldNumber = 3,
    kOutputFieldsMapFieldNumber = 4,
    kOverwriteFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string data_provider_params = 5;
  void clear_data_provider_params();
  const std::string& data_provider_params() const;
  void set_data_provider_params(const std::string& value);
  void set_data_provider_params(std::string&& value);
  void set_data_provider_params(const char* value);
  void set_data_provider_params(const char* value, size_t size);
  std::string* mutable_data_provider_params();
  std::string* release_data_provider_params();
  void set_allocated_data_provider_params(std::string* data_provider_params);
  private:
  const std::string& _internal_data_provider_params() const;
  void _internal_set_data_provider_params(const std::string& value);
  std::string* _internal_mutable_data_provider_params();
  public:

  // string model_zip_url = 6;
  void clear_model_zip_url();
  const std::string& model_zip_url() const;
  void set_model_zip_url(const std::string& value);
  void set_model_zip_url(std::string&& value);
  void set_model_zip_url(const char* value);
  void set_model_zip_url(const char* value, size_t size);
  std::string* mutable_model_zip_url();
  std::string* release_model_zip_url();
  void set_allocated_model_zip_url(std::string* model_zip_url);
  private:
  const std::string& _internal_model_zip_url() const;
  void _internal_set_model_zip_url(const std::string& value);
  std::string* _internal_mutable_model_zip_url();
  public:

  // .google.protobuf.Struct input_fields_map = 3;
  bool has_input_fields_map() const;
  private:
  bool _internal_has_input_fields_map() const;
  public:
  void clear_input_fields_map();
  const PROTOBUF_NAMESPACE_ID::Struct& input_fields_map() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_input_fields_map();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_input_fields_map();
  void set_allocated_input_fields_map(PROTOBUF_NAMESPACE_ID::Struct* input_fields_map);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_input_fields_map() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_input_fields_map();
  public:

  // .google.protobuf.Struct output_fields_map = 4;
  bool has_output_fields_map() const;
  private:
  bool _internal_has_output_fields_map() const;
  public:
  void clear_output_fields_map();
  const PROTOBUF_NAMESPACE_ID::Struct& output_fields_map() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_output_fields_map();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_output_fields_map();
  void set_allocated_output_fields_map(PROTOBUF_NAMESPACE_ID::Struct* output_fields_map);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_output_fields_map() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_output_fields_map();
  public:

  // bool overwrite = 7;
  void clear_overwrite();
  bool overwrite() const;
  void set_overwrite(bool value);
  private:
  bool _internal_overwrite() const;
  void _internal_set_overwrite(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PretrainedModelConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_provider_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_zip_url_;
  PROTOBUF_NAMESPACE_ID::Struct* input_fields_map_;
  PROTOBUF_NAMESPACE_ID::Struct* output_fields_map_;
  bool overwrite_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TrainStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TrainStats) */ {
 public:
  TrainStats();
  virtual ~TrainStats();

  TrainStats(const TrainStats& from);
  TrainStats(TrainStats&& from) noexcept
    : TrainStats() {
    *this = ::std::move(from);
  }

  inline TrainStats& operator=(const TrainStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainStats& operator=(TrainStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainStats* internal_default_instance() {
    return reinterpret_cast<const TrainStats*>(
               &_TrainStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(TrainStats& a, TrainStats& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainStats* New() const final {
    return CreateMaybeMessage<TrainStats>(nullptr);
  }

  TrainStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainStats& from);
  void MergeFrom(const TrainStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TrainStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLossCurveFieldNumber = 1,
  };
  // repeated .clarifai.api.LossCurveEntry loss_curve = 1;
  int loss_curve_size() const;
  private:
  int _internal_loss_curve_size() const;
  public:
  void clear_loss_curve();
  ::clarifai::api::LossCurveEntry* mutable_loss_curve(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LossCurveEntry >*
      mutable_loss_curve();
  private:
  const ::clarifai::api::LossCurveEntry& _internal_loss_curve(int index) const;
  ::clarifai::api::LossCurveEntry* _internal_add_loss_curve();
  public:
  const ::clarifai::api::LossCurveEntry& loss_curve(int index) const;
  ::clarifai::api::LossCurveEntry* add_loss_curve();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LossCurveEntry >&
      loss_curve() const;

  // @@protoc_insertion_point(class_scope:clarifai.api.TrainStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LossCurveEntry > loss_curve_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LossCurveEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.LossCurveEntry) */ {
 public:
  LossCurveEntry();
  virtual ~LossCurveEntry();

  LossCurveEntry(const LossCurveEntry& from);
  LossCurveEntry(LossCurveEntry&& from) noexcept
    : LossCurveEntry() {
    *this = ::std::move(from);
  }

  inline LossCurveEntry& operator=(const LossCurveEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossCurveEntry& operator=(LossCurveEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LossCurveEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LossCurveEntry* internal_default_instance() {
    return reinterpret_cast<const LossCurveEntry*>(
               &_LossCurveEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(LossCurveEntry& a, LossCurveEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LossCurveEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LossCurveEntry* New() const final {
    return CreateMaybeMessage<LossCurveEntry>(nullptr);
  }

  LossCurveEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LossCurveEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LossCurveEntry& from);
  void MergeFrom(const LossCurveEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LossCurveEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.LossCurveEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpochFieldNumber = 1,
    kGlobalStepFieldNumber = 2,
    kCostFieldNumber = 3,
  };
  // uint32 epoch = 1;
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 global_step = 2;
  void clear_global_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 global_step() const;
  void set_global_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_global_step() const;
  void _internal_set_global_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float cost = 3;
  void clear_cost();
  float cost() const;
  void set_cost(float value);
  private:
  float _internal_cost() const;
  void _internal_set_cost(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.LossCurveEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 global_step_;
  float cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LabelCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.LabelCount) */ {
 public:
  LabelCount();
  virtual ~LabelCount();

  LabelCount(const LabelCount& from);
  LabelCount(LabelCount&& from) noexcept
    : LabelCount() {
    *this = ::std::move(from);
  }

  inline LabelCount& operator=(const LabelCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelCount& operator=(LabelCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelCount* internal_default_instance() {
    return reinterpret_cast<const LabelCount*>(
               &_LabelCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(LabelCount& a, LabelCount& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelCount* New() const final {
    return CreateMaybeMessage<LabelCount>(nullptr);
  }

  LabelCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelCount& from);
  void MergeFrom(const LabelCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.LabelCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptNameFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // string concept_name = 1;
  void clear_concept_name();
  const std::string& concept_name() const;
  void set_concept_name(const std::string& value);
  void set_concept_name(std::string&& value);
  void set_concept_name(const char* value);
  void set_concept_name(const char* value, size_t size);
  std::string* mutable_concept_name();
  std::string* release_concept_name();
  void set_allocated_concept_name(std::string* concept_name);
  private:
  const std::string& _internal_concept_name() const;
  void _internal_set_concept_name(const std::string& value);
  std::string* _internal_mutable_concept_name();
  public:

  // uint32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.LabelCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concept_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LabelDistribution :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.LabelDistribution) */ {
 public:
  LabelDistribution();
  virtual ~LabelDistribution();

  LabelDistribution(const LabelDistribution& from);
  LabelDistribution(LabelDistribution&& from) noexcept
    : LabelDistribution() {
    *this = ::std::move(from);
  }

  inline LabelDistribution& operator=(const LabelDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelDistribution& operator=(LabelDistribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelDistribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelDistribution* internal_default_instance() {
    return reinterpret_cast<const LabelDistribution*>(
               &_LabelDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(LabelDistribution& a, LabelDistribution& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelDistribution* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelDistribution* New() const final {
    return CreateMaybeMessage<LabelDistribution>(nullptr);
  }

  LabelDistribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelDistribution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelDistribution& from);
  void MergeFrom(const LabelDistribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelDistribution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.LabelDistribution";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositiveLabelCountsFieldNumber = 1,
  };
  // repeated .clarifai.api.LabelCount positive_label_counts = 1;
  int positive_label_counts_size() const;
  private:
  int _internal_positive_label_counts_size() const;
  public:
  void clear_positive_label_counts();
  ::clarifai::api::LabelCount* mutable_positive_label_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelCount >*
      mutable_positive_label_counts();
  private:
  const ::clarifai::api::LabelCount& _internal_positive_label_counts(int index) const;
  ::clarifai::api::LabelCount* _internal_add_positive_label_counts();
  public:
  const ::clarifai::api::LabelCount& positive_label_counts(int index) const;
  ::clarifai::api::LabelCount* add_positive_label_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelCount >&
      positive_label_counts() const;

  // @@protoc_insertion_point(class_scope:clarifai.api.LabelDistribution)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelCount > positive_label_counts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class CooccurrenceMatrixEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.CooccurrenceMatrixEntry) */ {
 public:
  CooccurrenceMatrixEntry();
  virtual ~CooccurrenceMatrixEntry();

  CooccurrenceMatrixEntry(const CooccurrenceMatrixEntry& from);
  CooccurrenceMatrixEntry(CooccurrenceMatrixEntry&& from) noexcept
    : CooccurrenceMatrixEntry() {
    *this = ::std::move(from);
  }

  inline CooccurrenceMatrixEntry& operator=(const CooccurrenceMatrixEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CooccurrenceMatrixEntry& operator=(CooccurrenceMatrixEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CooccurrenceMatrixEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CooccurrenceMatrixEntry* internal_default_instance() {
    return reinterpret_cast<const CooccurrenceMatrixEntry*>(
               &_CooccurrenceMatrixEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CooccurrenceMatrixEntry& a, CooccurrenceMatrixEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CooccurrenceMatrixEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CooccurrenceMatrixEntry* New() const final {
    return CreateMaybeMessage<CooccurrenceMatrixEntry>(nullptr);
  }

  CooccurrenceMatrixEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CooccurrenceMatrixEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CooccurrenceMatrixEntry& from);
  void MergeFrom(const CooccurrenceMatrixEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CooccurrenceMatrixEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.CooccurrenceMatrixEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // string row = 1;
  void clear_row();
  const std::string& row() const;
  void set_row(const std::string& value);
  void set_row(std::string&& value);
  void set_row(const char* value);
  void set_row(const char* value, size_t size);
  std::string* mutable_row();
  std::string* release_row();
  void set_allocated_row(std::string* row);
  private:
  const std::string& _internal_row() const;
  void _internal_set_row(const std::string& value);
  std::string* _internal_mutable_row();
  public:

  // string col = 2;
  void clear_col();
  const std::string& col() const;
  void set_col(const std::string& value);
  void set_col(std::string&& value);
  void set_col(const char* value);
  void set_col(const char* value, size_t size);
  std::string* mutable_col();
  std::string* release_col();
  void set_allocated_col(std::string* col);
  private:
  const std::string& _internal_col() const;
  void _internal_set_col(const std::string& value);
  std::string* _internal_mutable_col();
  public:

  // uint32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.CooccurrenceMatrixEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class CooccurrenceMatrix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.CooccurrenceMatrix) */ {
 public:
  CooccurrenceMatrix();
  virtual ~CooccurrenceMatrix();

  CooccurrenceMatrix(const CooccurrenceMatrix& from);
  CooccurrenceMatrix(CooccurrenceMatrix&& from) noexcept
    : CooccurrenceMatrix() {
    *this = ::std::move(from);
  }

  inline CooccurrenceMatrix& operator=(const CooccurrenceMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline CooccurrenceMatrix& operator=(CooccurrenceMatrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CooccurrenceMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CooccurrenceMatrix* internal_default_instance() {
    return reinterpret_cast<const CooccurrenceMatrix*>(
               &_CooccurrenceMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CooccurrenceMatrix& a, CooccurrenceMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(CooccurrenceMatrix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CooccurrenceMatrix* New() const final {
    return CreateMaybeMessage<CooccurrenceMatrix>(nullptr);
  }

  CooccurrenceMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CooccurrenceMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CooccurrenceMatrix& from);
  void MergeFrom(const CooccurrenceMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CooccurrenceMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.CooccurrenceMatrix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixFieldNumber = 1,
    kConceptIdsFieldNumber = 2,
  };
  // repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
  int matrix_size() const;
  private:
  int _internal_matrix_size() const;
  public:
  void clear_matrix();
  ::clarifai::api::CooccurrenceMatrixEntry* mutable_matrix(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CooccurrenceMatrixEntry >*
      mutable_matrix();
  private:
  const ::clarifai::api::CooccurrenceMatrixEntry& _internal_matrix(int index) const;
  ::clarifai::api::CooccurrenceMatrixEntry* _internal_add_matrix();
  public:
  const ::clarifai::api::CooccurrenceMatrixEntry& matrix(int index) const;
  ::clarifai::api::CooccurrenceMatrixEntry* add_matrix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CooccurrenceMatrixEntry >&
      matrix() const;

  // repeated string concept_ids = 2;
  int concept_ids_size() const;
  private:
  int _internal_concept_ids_size() const;
  public:
  void clear_concept_ids();
  const std::string& concept_ids(int index) const;
  std::string* mutable_concept_ids(int index);
  void set_concept_ids(int index, const std::string& value);
  void set_concept_ids(int index, std::string&& value);
  void set_concept_ids(int index, const char* value);
  void set_concept_ids(int index, const char* value, size_t size);
  std::string* add_concept_ids();
  void add_concept_ids(const std::string& value);
  void add_concept_ids(std::string&& value);
  void add_concept_ids(const char* value);
  void add_concept_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& concept_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_concept_ids();
  private:
  const std::string& _internal_concept_ids(int index) const;
  std::string* _internal_add_concept_ids();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.CooccurrenceMatrix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CooccurrenceMatrixEntry > matrix_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> concept_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConfusionMatrixEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConfusionMatrixEntry) */ {
 public:
  ConfusionMatrixEntry();
  virtual ~ConfusionMatrixEntry();

  ConfusionMatrixEntry(const ConfusionMatrixEntry& from);
  ConfusionMatrixEntry(ConfusionMatrixEntry&& from) noexcept
    : ConfusionMatrixEntry() {
    *this = ::std::move(from);
  }

  inline ConfusionMatrixEntry& operator=(const ConfusionMatrixEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfusionMatrixEntry& operator=(ConfusionMatrixEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfusionMatrixEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfusionMatrixEntry* internal_default_instance() {
    return reinterpret_cast<const ConfusionMatrixEntry*>(
               &_ConfusionMatrixEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ConfusionMatrixEntry& a, ConfusionMatrixEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfusionMatrixEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfusionMatrixEntry* New() const final {
    return CreateMaybeMessage<ConfusionMatrixEntry>(nullptr);
  }

  ConfusionMatrixEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfusionMatrixEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfusionMatrixEntry& from);
  void MergeFrom(const ConfusionMatrixEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfusionMatrixEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConfusionMatrixEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictedFieldNumber = 1,
    kActualFieldNumber = 2,
    kValueFieldNumber = 4,
  };
  // string predicted = 1;
  void clear_predicted();
  const std::string& predicted() const;
  void set_predicted(const std::string& value);
  void set_predicted(std::string&& value);
  void set_predicted(const char* value);
  void set_predicted(const char* value, size_t size);
  std::string* mutable_predicted();
  std::string* release_predicted();
  void set_allocated_predicted(std::string* predicted);
  private:
  const std::string& _internal_predicted() const;
  void _internal_set_predicted(const std::string& value);
  std::string* _internal_mutable_predicted();
  public:

  // string actual = 2;
  void clear_actual();
  const std::string& actual() const;
  void set_actual(const std::string& value);
  void set_actual(std::string&& value);
  void set_actual(const char* value);
  void set_actual(const char* value, size_t size);
  std::string* mutable_actual();
  std::string* release_actual();
  void set_allocated_actual(std::string* actual);
  private:
  const std::string& _internal_actual() const;
  void _internal_set_actual(const std::string& value);
  std::string* _internal_mutable_actual();
  public:

  // float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConfusionMatrixEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predicted_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actual_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConfusionMatrix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ConfusionMatrix) */ {
 public:
  ConfusionMatrix();
  virtual ~ConfusionMatrix();

  ConfusionMatrix(const ConfusionMatrix& from);
  ConfusionMatrix(ConfusionMatrix&& from) noexcept
    : ConfusionMatrix() {
    *this = ::std::move(from);
  }

  inline ConfusionMatrix& operator=(const ConfusionMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfusionMatrix& operator=(ConfusionMatrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfusionMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfusionMatrix* internal_default_instance() {
    return reinterpret_cast<const ConfusionMatrix*>(
               &_ConfusionMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ConfusionMatrix& a, ConfusionMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfusionMatrix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfusionMatrix* New() const final {
    return CreateMaybeMessage<ConfusionMatrix>(nullptr);
  }

  ConfusionMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfusionMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfusionMatrix& from);
  void MergeFrom(const ConfusionMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfusionMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ConfusionMatrix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixFieldNumber = 1,
    kConceptIdsFieldNumber = 2,
  };
  // repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
  int matrix_size() const;
  private:
  int _internal_matrix_size() const;
  public:
  void clear_matrix();
  ::clarifai::api::ConfusionMatrixEntry* mutable_matrix(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConfusionMatrixEntry >*
      mutable_matrix();
  private:
  const ::clarifai::api::ConfusionMatrixEntry& _internal_matrix(int index) const;
  ::clarifai::api::ConfusionMatrixEntry* _internal_add_matrix();
  public:
  const ::clarifai::api::ConfusionMatrixEntry& matrix(int index) const;
  ::clarifai::api::ConfusionMatrixEntry* add_matrix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConfusionMatrixEntry >&
      matrix() const;

  // repeated string concept_ids = 2;
  int concept_ids_size() const;
  private:
  int _internal_concept_ids_size() const;
  public:
  void clear_concept_ids();
  const std::string& concept_ids(int index) const;
  std::string* mutable_concept_ids(int index);
  void set_concept_ids(int index, const std::string& value);
  void set_concept_ids(int index, std::string&& value);
  void set_concept_ids(int index, const char* value);
  void set_concept_ids(int index, const char* value, size_t size);
  std::string* add_concept_ids();
  void add_concept_ids(const std::string& value);
  void add_concept_ids(std::string&& value);
  void add_concept_ids(const char* value);
  void add_concept_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& concept_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_concept_ids();
  private:
  const std::string& _internal_concept_ids(int index) const;
  std::string* _internal_add_concept_ids();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ConfusionMatrix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConfusionMatrixEntry > matrix_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> concept_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ROC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ROC) */ {
 public:
  ROC();
  virtual ~ROC();

  ROC(const ROC& from);
  ROC(ROC&& from) noexcept
    : ROC() {
    *this = ::std::move(from);
  }

  inline ROC& operator=(const ROC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROC& operator=(ROC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROC* internal_default_instance() {
    return reinterpret_cast<const ROC*>(
               &_ROC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(ROC& a, ROC& b) {
    a.Swap(&b);
  }
  inline void Swap(ROC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROC* New() const final {
    return CreateMaybeMessage<ROC>(nullptr);
  }

  ROC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROC& from);
  void MergeFrom(const ROC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ROC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFprFieldNumber = 1,
    kTprFieldNumber = 2,
    kThresholdsFieldNumber = 3,
    kFprPerImageFieldNumber = 4,
    kFprPerObjectFieldNumber = 5,
  };
  // repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int fpr_size() const;
  private:
  int _internal_fpr_size() const;
  public:
  void clear_fpr();
  private:
  float _internal_fpr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fpr() const;
  void _internal_add_fpr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fpr();
  public:
  float fpr(int index) const;
  void set_fpr(int index, float value);
  void add_fpr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpr();

  // repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int tpr_size() const;
  private:
  int _internal_tpr_size() const;
  public:
  void clear_tpr();
  private:
  float _internal_tpr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_tpr() const;
  void _internal_add_tpr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_tpr();
  public:
  float tpr(int index) const;
  void set_tpr(int index, float value);
  void add_tpr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpr();

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  private:
  float _internal_thresholds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_thresholds() const;
  void _internal_add_thresholds(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_thresholds();
  public:
  float thresholds(int index) const;
  void set_thresholds(int index, float value);
  void add_thresholds(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      thresholds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_thresholds();

  // repeated float fpr_per_image = 4;
  int fpr_per_image_size() const;
  private:
  int _internal_fpr_per_image_size() const;
  public:
  void clear_fpr_per_image();
  private:
  float _internal_fpr_per_image(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fpr_per_image() const;
  void _internal_add_fpr_per_image(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fpr_per_image();
  public:
  float fpr_per_image(int index) const;
  void set_fpr_per_image(int index, float value);
  void add_fpr_per_image(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpr_per_image() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpr_per_image();

  // repeated float fpr_per_object = 5;
  int fpr_per_object_size() const;
  private:
  int _internal_fpr_per_object_size() const;
  public:
  void clear_fpr_per_object();
  private:
  float _internal_fpr_per_object(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fpr_per_object() const;
  void _internal_add_fpr_per_object(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fpr_per_object();
  public:
  float fpr_per_object(int index) const;
  void set_fpr_per_object(int index, float value);
  void add_fpr_per_object(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpr_per_object() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpr_per_object();

  // @@protoc_insertion_point(class_scope:clarifai.api.ROC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpr_;
  mutable std::atomic<int> _fpr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpr_;
  mutable std::atomic<int> _tpr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > thresholds_;
  mutable std::atomic<int> _thresholds_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpr_per_image_;
  mutable std::atomic<int> _fpr_per_image_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpr_per_object_;
  mutable std::atomic<int> _fpr_per_object_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class PrecisionRecallCurve :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PrecisionRecallCurve) */ {
 public:
  PrecisionRecallCurve();
  virtual ~PrecisionRecallCurve();

  PrecisionRecallCurve(const PrecisionRecallCurve& from);
  PrecisionRecallCurve(PrecisionRecallCurve&& from) noexcept
    : PrecisionRecallCurve() {
    *this = ::std::move(from);
  }

  inline PrecisionRecallCurve& operator=(const PrecisionRecallCurve& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrecisionRecallCurve& operator=(PrecisionRecallCurve&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrecisionRecallCurve& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrecisionRecallCurve* internal_default_instance() {
    return reinterpret_cast<const PrecisionRecallCurve*>(
               &_PrecisionRecallCurve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(PrecisionRecallCurve& a, PrecisionRecallCurve& b) {
    a.Swap(&b);
  }
  inline void Swap(PrecisionRecallCurve* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrecisionRecallCurve* New() const final {
    return CreateMaybeMessage<PrecisionRecallCurve>(nullptr);
  }

  PrecisionRecallCurve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrecisionRecallCurve>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrecisionRecallCurve& from);
  void MergeFrom(const PrecisionRecallCurve& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrecisionRecallCurve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PrecisionRecallCurve";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecallFieldNumber = 1,
    kPrecisionFieldNumber = 2,
    kThresholdsFieldNumber = 3,
  };
  // repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int recall_size() const;
  private:
  int _internal_recall_size() const;
  public:
  void clear_recall();
  private:
  float _internal_recall(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_recall() const;
  void _internal_add_recall(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_recall();
  public:
  float recall(int index) const;
  void set_recall(int index, float value);
  void add_recall(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      recall() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_recall();

  // repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int precision_size() const;
  private:
  int _internal_precision_size() const;
  public:
  void clear_precision();
  private:
  float _internal_precision(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_precision() const;
  void _internal_add_precision(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_precision();
  public:
  float precision(int index) const;
  void set_precision(int index, float value);
  void add_precision(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      precision() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_precision();

  // repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  private:
  float _internal_thresholds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_thresholds() const;
  void _internal_add_thresholds(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_thresholds();
  public:
  float thresholds(int index) const;
  void set_thresholds(int index, float value);
  void add_thresholds(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      thresholds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_thresholds();

  // @@protoc_insertion_point(class_scope:clarifai.api.PrecisionRecallCurve)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > recall_;
  mutable std::atomic<int> _recall_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > precision_;
  mutable std::atomic<int> _precision_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > thresholds_;
  mutable std::atomic<int> _thresholds_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class BinaryMetrics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.BinaryMetrics) */ {
 public:
  BinaryMetrics();
  virtual ~BinaryMetrics();

  BinaryMetrics(const BinaryMetrics& from);
  BinaryMetrics(BinaryMetrics&& from) noexcept
    : BinaryMetrics() {
    *this = ::std::move(from);
  }

  inline BinaryMetrics& operator=(const BinaryMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryMetrics& operator=(BinaryMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BinaryMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryMetrics* internal_default_instance() {
    return reinterpret_cast<const BinaryMetrics*>(
               &_BinaryMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(BinaryMetrics& a, BinaryMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryMetrics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryMetrics* New() const final {
    return CreateMaybeMessage<BinaryMetrics>(nullptr);
  }

  BinaryMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinaryMetrics& from);
  void MergeFrom(const BinaryMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.BinaryMetrics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAreaNameFieldNumber = 10,
    kConceptFieldNumber = 6,
    kRocCurveFieldNumber = 7,
    kPrecisionRecallCurveFieldNumber = 8,
    kNumPosFieldNumber = 1,
    kNumNegFieldNumber = 2,
    kNumTotFieldNumber = 3,
    kRocAucFieldNumber = 4,
    kF1FieldNumber = 5,
    kAvgPrecisionFieldNumber = 9,
    kAreaMinFieldNumber = 11,
    kAreaMaxFieldNumber = 12,
    kIouFieldNumber = 13,
  };
  // string area_name = 10;
  void clear_area_name();
  const std::string& area_name() const;
  void set_area_name(const std::string& value);
  void set_area_name(std::string&& value);
  void set_area_name(const char* value);
  void set_area_name(const char* value, size_t size);
  std::string* mutable_area_name();
  std::string* release_area_name();
  void set_allocated_area_name(std::string* area_name);
  private:
  const std::string& _internal_area_name() const;
  void _internal_set_area_name(const std::string& value);
  std::string* _internal_mutable_area_name();
  public:

  // .clarifai.api.Concept concept = 6;
  bool has_concept() const;
  private:
  bool _internal_has_concept() const;
  public:
  void clear_concept();
  const ::clarifai::api::Concept& concept() const;
  ::clarifai::api::Concept* release_concept();
  ::clarifai::api::Concept* mutable_concept();
  void set_allocated_concept(::clarifai::api::Concept* concept);
  private:
  const ::clarifai::api::Concept& _internal_concept() const;
  ::clarifai::api::Concept* _internal_mutable_concept();
  public:

  // .clarifai.api.ROC roc_curve = 7;
  bool has_roc_curve() const;
  private:
  bool _internal_has_roc_curve() const;
  public:
  void clear_roc_curve();
  const ::clarifai::api::ROC& roc_curve() const;
  ::clarifai::api::ROC* release_roc_curve();
  ::clarifai::api::ROC* mutable_roc_curve();
  void set_allocated_roc_curve(::clarifai::api::ROC* roc_curve);
  private:
  const ::clarifai::api::ROC& _internal_roc_curve() const;
  ::clarifai::api::ROC* _internal_mutable_roc_curve();
  public:

  // .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
  bool has_precision_recall_curve() const;
  private:
  bool _internal_has_precision_recall_curve() const;
  public:
  void clear_precision_recall_curve();
  const ::clarifai::api::PrecisionRecallCurve& precision_recall_curve() const;
  ::clarifai::api::PrecisionRecallCurve* release_precision_recall_curve();
  ::clarifai::api::PrecisionRecallCurve* mutable_precision_recall_curve();
  void set_allocated_precision_recall_curve(::clarifai::api::PrecisionRecallCurve* precision_recall_curve);
  private:
  const ::clarifai::api::PrecisionRecallCurve& _internal_precision_recall_curve() const;
  ::clarifai::api::PrecisionRecallCurve* _internal_mutable_precision_recall_curve();
  public:

  // uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_num_pos();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pos() const;
  void set_num_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_pos() const;
  void _internal_set_num_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_num_neg();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_neg() const;
  void set_num_neg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_neg() const;
  void _internal_set_num_neg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_num_tot();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_tot() const;
  void set_num_tot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_tot() const;
  void _internal_set_num_tot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_roc_auc();
  float roc_auc() const;
  void set_roc_auc(float value);
  private:
  float _internal_roc_auc() const;
  void _internal_set_roc_auc(float value);
  public:

  // float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // float avg_precision = 9;
  void clear_avg_precision();
  float avg_precision() const;
  void set_avg_precision(float value);
  private:
  float _internal_avg_precision() const;
  void _internal_set_avg_precision(float value);
  public:

  // double area_min = 11;
  void clear_area_min();
  double area_min() const;
  void set_area_min(double value);
  private:
  double _internal_area_min() const;
  void _internal_set_area_min(double value);
  public:

  // double area_max = 12;
  void clear_area_max();
  double area_max() const;
  void set_area_max(double value);
  private:
  double _internal_area_max() const;
  void _internal_set_area_max(double value);
  public:

  // float iou = 13;
  void clear_iou();
  float iou() const;
  void set_iou(float value);
  private:
  float _internal_iou() const;
  void _internal_set_iou(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.BinaryMetrics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_name_;
  ::clarifai::api::Concept* concept_;
  ::clarifai::api::ROC* roc_curve_;
  ::clarifai::api::PrecisionRecallCurve* precision_recall_curve_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_neg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_tot_;
  float roc_auc_;
  float f1_;
  float avg_precision_;
  double area_min_;
  double area_max_;
  float iou_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TrackerMetrics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TrackerMetrics) */ {
 public:
  TrackerMetrics();
  virtual ~TrackerMetrics();

  TrackerMetrics(const TrackerMetrics& from);
  TrackerMetrics(TrackerMetrics&& from) noexcept
    : TrackerMetrics() {
    *this = ::std::move(from);
  }

  inline TrackerMetrics& operator=(const TrackerMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackerMetrics& operator=(TrackerMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackerMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackerMetrics* internal_default_instance() {
    return reinterpret_cast<const TrackerMetrics*>(
               &_TrackerMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(TrackerMetrics& a, TrackerMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackerMetrics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackerMetrics* New() const final {
    return CreateMaybeMessage<TrackerMetrics>(nullptr);
  }

  TrackerMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackerMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackerMetrics& from);
  void MergeFrom(const TrackerMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackerMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TrackerMetrics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiidFieldNumber = 5,
    kMotMotaFieldNumber = 1,
    kMotNumSwitchesFieldNumber = 2,
    kMorseFragFieldNumber = 3,
    kAvgPrecisionFieldNumber = 4,
    kUniqueSwitchRateFieldNumber = 6,
  };
  // string aiid = 5;
  void clear_aiid();
  const std::string& aiid() const;
  void set_aiid(const std::string& value);
  void set_aiid(std::string&& value);
  void set_aiid(const char* value);
  void set_aiid(const char* value, size_t size);
  std::string* mutable_aiid();
  std::string* release_aiid();
  void set_allocated_aiid(std::string* aiid);
  private:
  const std::string& _internal_aiid() const;
  void _internal_set_aiid(const std::string& value);
  std::string* _internal_mutable_aiid();
  public:

  // float mot_mota = 1;
  void clear_mot_mota();
  float mot_mota() const;
  void set_mot_mota(float value);
  private:
  float _internal_mot_mota() const;
  void _internal_set_mot_mota(float value);
  public:

  // int32 mot_num_switches = 2;
  void clear_mot_num_switches();
  ::PROTOBUF_NAMESPACE_ID::int32 mot_num_switches() const;
  void set_mot_num_switches(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mot_num_switches() const;
  void _internal_set_mot_num_switches(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float morse_frag = 3;
  void clear_morse_frag();
  float morse_frag() const;
  void set_morse_frag(float value);
  private:
  float _internal_morse_frag() const;
  void _internal_set_morse_frag(float value);
  public:

  // float avg_precision = 4;
  void clear_avg_precision();
  float avg_precision() const;
  void set_avg_precision(float value);
  private:
  float _internal_avg_precision() const;
  void _internal_set_avg_precision(float value);
  public:

  // float unique_switch_rate = 6;
  void clear_unique_switch_rate();
  float unique_switch_rate() const;
  void set_unique_switch_rate(float value);
  private:
  float _internal_unique_switch_rate() const;
  void _internal_set_unique_switch_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.TrackerMetrics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aiid_;
  float mot_mota_;
  ::PROTOBUF_NAMESPACE_ID::int32 mot_num_switches_;
  float morse_frag_;
  float avg_precision_;
  float unique_switch_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EvalTestSetEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.EvalTestSetEntry) */ {
 public:
  EvalTestSetEntry();
  virtual ~EvalTestSetEntry();

  EvalTestSetEntry(const EvalTestSetEntry& from);
  EvalTestSetEntry(EvalTestSetEntry&& from) noexcept
    : EvalTestSetEntry() {
    *this = ::std::move(from);
  }

  inline EvalTestSetEntry& operator=(const EvalTestSetEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvalTestSetEntry& operator=(EvalTestSetEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EvalTestSetEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvalTestSetEntry* internal_default_instance() {
    return reinterpret_cast<const EvalTestSetEntry*>(
               &_EvalTestSetEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(EvalTestSetEntry& a, EvalTestSetEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(EvalTestSetEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvalTestSetEntry* New() const final {
    return CreateMaybeMessage<EvalTestSetEntry>(nullptr);
  }

  EvalTestSetEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvalTestSetEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EvalTestSetEntry& from);
  void MergeFrom(const EvalTestSetEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvalTestSetEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.EvalTestSetEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictedConceptsFieldNumber = 3,
    kGroundTruthConceptsFieldNumber = 4,
    kIdFieldNumber = 1,
    kUrlFieldNumber = 2,
    kAnnotationFieldNumber = 5,
    kInputFieldNumber = 6,
  };
  // repeated .clarifai.api.Concept predicted_concepts = 3;
  int predicted_concepts_size() const;
  private:
  int _internal_predicted_concepts_size() const;
  public:
  void clear_predicted_concepts();
  ::clarifai::api::Concept* mutable_predicted_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_predicted_concepts();
  private:
  const ::clarifai::api::Concept& _internal_predicted_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_predicted_concepts();
  public:
  const ::clarifai::api::Concept& predicted_concepts(int index) const;
  ::clarifai::api::Concept* add_predicted_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      predicted_concepts() const;

  // repeated .clarifai.api.Concept ground_truth_concepts = 4;
  int ground_truth_concepts_size() const;
  private:
  int _internal_ground_truth_concepts_size() const;
  public:
  void clear_ground_truth_concepts();
  ::clarifai::api::Concept* mutable_ground_truth_concepts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
      mutable_ground_truth_concepts();
  private:
  const ::clarifai::api::Concept& _internal_ground_truth_concepts(int index) const;
  ::clarifai::api::Concept* _internal_add_ground_truth_concepts();
  public:
  const ::clarifai::api::Concept& ground_truth_concepts(int index) const;
  ::clarifai::api::Concept* add_ground_truth_concepts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
      ground_truth_concepts() const;

  // string id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_id();
  PROTOBUF_DEPRECATED const std::string& id() const;
  PROTOBUF_DEPRECATED void set_id(const std::string& value);
  PROTOBUF_DEPRECATED void set_id(std::string&& value);
  PROTOBUF_DEPRECATED void set_id(const char* value);
  PROTOBUF_DEPRECATED void set_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_id();
  PROTOBUF_DEPRECATED std::string* release_id();
  PROTOBUF_DEPRECATED void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string url = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_url();
  PROTOBUF_DEPRECATED const std::string& url() const;
  PROTOBUF_DEPRECATED void set_url(const std::string& value);
  PROTOBUF_DEPRECATED void set_url(std::string&& value);
  PROTOBUF_DEPRECATED void set_url(const char* value);
  PROTOBUF_DEPRECATED void set_url(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_url();
  PROTOBUF_DEPRECATED std::string* release_url();
  PROTOBUF_DEPRECATED void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // .clarifai.api.Annotation annotation = 5;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::clarifai::api::Annotation& annotation() const;
  ::clarifai::api::Annotation* release_annotation();
  ::clarifai::api::Annotation* mutable_annotation();
  void set_allocated_annotation(::clarifai::api::Annotation* annotation);
  private:
  const ::clarifai::api::Annotation& _internal_annotation() const;
  ::clarifai::api::Annotation* _internal_mutable_annotation();
  public:

  // .clarifai.api.Input input = 6;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.EvalTestSetEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > predicted_concepts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept > ground_truth_concepts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::clarifai::api::Annotation* annotation_;
  ::clarifai::api::Input* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LOPQEvalResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.LOPQEvalResult) */ {
 public:
  LOPQEvalResult();
  virtual ~LOPQEvalResult();

  LOPQEvalResult(const LOPQEvalResult& from);
  LOPQEvalResult(LOPQEvalResult&& from) noexcept
    : LOPQEvalResult() {
    *this = ::std::move(from);
  }

  inline LOPQEvalResult& operator=(const LOPQEvalResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOPQEvalResult& operator=(LOPQEvalResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOPQEvalResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOPQEvalResult* internal_default_instance() {
    return reinterpret_cast<const LOPQEvalResult*>(
               &_LOPQEvalResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(LOPQEvalResult& a, LOPQEvalResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LOPQEvalResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOPQEvalResult* New() const final {
    return CreateMaybeMessage<LOPQEvalResult>(nullptr);
  }

  LOPQEvalResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOPQEvalResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOPQEvalResult& from);
  void MergeFrom(const LOPQEvalResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOPQEvalResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.LOPQEvalResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKFieldNumber = 1,
    kRecallVsBruteForceFieldNumber = 2,
    kKendallTauVsBruteForceFieldNumber = 3,
    kMostFrequentCodePercentFieldNumber = 4,
    kLopqNdcgFieldNumber = 5,
    kBruteForceNdcgFieldNumber = 6,
  };
  // int32 k = 1;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_recall_vs_brute_force();
  float recall_vs_brute_force() const;
  void set_recall_vs_brute_force(float value);
  private:
  float _internal_recall_vs_brute_force() const;
  void _internal_set_recall_vs_brute_force(float value);
  public:

  // float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_kendall_tau_vs_brute_force();
  float kendall_tau_vs_brute_force() const;
  void set_kendall_tau_vs_brute_force(float value);
  private:
  float _internal_kendall_tau_vs_brute_force() const;
  void _internal_set_kendall_tau_vs_brute_force(float value);
  public:

  // float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_most_frequent_code_percent();
  float most_frequent_code_percent() const;
  void set_most_frequent_code_percent(float value);
  private:
  float _internal_most_frequent_code_percent() const;
  void _internal_set_most_frequent_code_percent(float value);
  public:

  // float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_lopq_ndcg();
  float lopq_ndcg() const;
  void set_lopq_ndcg(float value);
  private:
  float _internal_lopq_ndcg() const;
  void _internal_set_lopq_ndcg(float value);
  public:

  // float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_brute_force_ndcg();
  float brute_force_ndcg() const;
  void set_brute_force_ndcg(float value);
  private:
  float _internal_brute_force_ndcg() const;
  void _internal_set_brute_force_ndcg(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.LOPQEvalResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  float recall_vs_brute_force_;
  float kendall_tau_vs_brute_force_;
  float most_frequent_code_percent_;
  float lopq_ndcg_;
  float brute_force_ndcg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class MetricsSummary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.MetricsSummary) */ {
 public:
  MetricsSummary();
  virtual ~MetricsSummary();

  MetricsSummary(const MetricsSummary& from);
  MetricsSummary(MetricsSummary&& from) noexcept
    : MetricsSummary() {
    *this = ::std::move(from);
  }

  inline MetricsSummary& operator=(const MetricsSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsSummary& operator=(MetricsSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricsSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricsSummary* internal_default_instance() {
    return reinterpret_cast<const MetricsSummary*>(
               &_MetricsSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(MetricsSummary& a, MetricsSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricsSummary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricsSummary* New() const final {
    return CreateMaybeMessage<MetricsSummary>(nullptr);
  }

  MetricsSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricsSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricsSummary& from);
  void MergeFrom(const MetricsSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricsSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.MetricsSummary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLopqMetricsFieldNumber = 9,
    kTop1AccuracyFieldNumber = 1,
    kTop5AccuracyFieldNumber = 2,
    kMacroAvgRocAucFieldNumber = 3,
    kMacroStdRocAucFieldNumber = 4,
    kMacroAvgF1ScoreFieldNumber = 5,
    kMacroStdF1ScoreFieldNumber = 6,
    kMacroAvgPrecisionFieldNumber = 7,
    kMacroAvgRecallFieldNumber = 8,
    kMeanAvgPrecisionIou50FieldNumber = 10,
    kMeanAvgPrecisionIouRangeFieldNumber = 11,
  };
  // repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
  int lopq_metrics_size() const;
  private:
  int _internal_lopq_metrics_size() const;
  public:
  void clear_lopq_metrics();
  ::clarifai::api::LOPQEvalResult* mutable_lopq_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LOPQEvalResult >*
      mutable_lopq_metrics();
  private:
  const ::clarifai::api::LOPQEvalResult& _internal_lopq_metrics(int index) const;
  ::clarifai::api::LOPQEvalResult* _internal_add_lopq_metrics();
  public:
  const ::clarifai::api::LOPQEvalResult& lopq_metrics(int index) const;
  ::clarifai::api::LOPQEvalResult* add_lopq_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LOPQEvalResult >&
      lopq_metrics() const;

  // float top1_accuracy = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_top1_accuracy();
  PROTOBUF_DEPRECATED float top1_accuracy() const;
  PROTOBUF_DEPRECATED void set_top1_accuracy(float value);
  private:
  float _internal_top1_accuracy() const;
  void _internal_set_top1_accuracy(float value);
  public:

  // float top5_accuracy = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_top5_accuracy();
  PROTOBUF_DEPRECATED float top5_accuracy() const;
  PROTOBUF_DEPRECATED void set_top5_accuracy(float value);
  private:
  float _internal_top5_accuracy() const;
  void _internal_set_top5_accuracy(float value);
  public:

  // float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_macro_avg_roc_auc();
  float macro_avg_roc_auc() const;
  void set_macro_avg_roc_auc(float value);
  private:
  float _internal_macro_avg_roc_auc() const;
  void _internal_set_macro_avg_roc_auc(float value);
  public:

  // float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_macro_std_roc_auc();
  float macro_std_roc_auc() const;
  void set_macro_std_roc_auc(float value);
  private:
  float _internal_macro_std_roc_auc() const;
  void _internal_set_macro_std_roc_auc(float value);
  public:

  // float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_macro_avg_f1_score();
  float macro_avg_f1_score() const;
  void set_macro_avg_f1_score(float value);
  private:
  float _internal_macro_avg_f1_score() const;
  void _internal_set_macro_avg_f1_score(float value);
  public:

  // float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_macro_std_f1_score();
  float macro_std_f1_score() const;
  void set_macro_std_f1_score(float value);
  private:
  float _internal_macro_std_f1_score() const;
  void _internal_set_macro_std_f1_score(float value);
  public:

  // float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_macro_avg_precision();
  float macro_avg_precision() const;
  void set_macro_avg_precision(float value);
  private:
  float _internal_macro_avg_precision() const;
  void _internal_set_macro_avg_precision(float value);
  public:

  // float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_macro_avg_recall();
  float macro_avg_recall() const;
  void set_macro_avg_recall(float value);
  private:
  float _internal_macro_avg_recall() const;
  void _internal_set_macro_avg_recall(float value);
  public:

  // float mean_avg_precision_iou_50 = 10;
  void clear_mean_avg_precision_iou_50();
  float mean_avg_precision_iou_50() const;
  void set_mean_avg_precision_iou_50(float value);
  private:
  float _internal_mean_avg_precision_iou_50() const;
  void _internal_set_mean_avg_precision_iou_50(float value);
  public:

  // float mean_avg_precision_iou_range = 11;
  void clear_mean_avg_precision_iou_range();
  float mean_avg_precision_iou_range() const;
  void set_mean_avg_precision_iou_range(float value);
  private:
  float _internal_mean_avg_precision_iou_range() const;
  void _internal_set_mean_avg_precision_iou_range(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.MetricsSummary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LOPQEvalResult > lopq_metrics_;
  float top1_accuracy_;
  float top5_accuracy_;
  float macro_avg_roc_auc_;
  float macro_std_roc_auc_;
  float macro_avg_f1_score_;
  float macro_std_f1_score_;
  float macro_avg_precision_;
  float macro_avg_recall_;
  float mean_avg_precision_iou_50_;
  float mean_avg_precision_iou_range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EvalMetrics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.EvalMetrics) */ {
 public:
  EvalMetrics();
  virtual ~EvalMetrics();

  EvalMetrics(const EvalMetrics& from);
  EvalMetrics(EvalMetrics&& from) noexcept
    : EvalMetrics() {
    *this = ::std::move(from);
  }

  inline EvalMetrics& operator=(const EvalMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvalMetrics& operator=(EvalMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EvalMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvalMetrics* internal_default_instance() {
    return reinterpret_cast<const EvalMetrics*>(
               &_EvalMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(EvalMetrics& a, EvalMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(EvalMetrics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvalMetrics* New() const final {
    return CreateMaybeMessage<EvalMetrics>(nullptr);
  }

  EvalMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvalMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EvalMetrics& from);
  void MergeFrom(const EvalMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvalMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.EvalMetrics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinaryMetricsFieldNumber = 6,
    kTestSetFieldNumber = 7,
    kMetricsByAreaFieldNumber = 8,
    kMetricsByClassFieldNumber = 9,
    kTrackerMetricsFieldNumber = 11,
    kIdFieldNumber = 10,
    kStatusFieldNumber = 1,
    kSummaryFieldNumber = 2,
    kConfusionMatrixFieldNumber = 3,
    kCooccurrenceMatrixFieldNumber = 4,
    kLabelCountsFieldNumber = 5,
  };
  // repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
  int binary_metrics_size() const;
  private:
  int _internal_binary_metrics_size() const;
  public:
  void clear_binary_metrics();
  ::clarifai::api::BinaryMetrics* mutable_binary_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >*
      mutable_binary_metrics();
  private:
  const ::clarifai::api::BinaryMetrics& _internal_binary_metrics(int index) const;
  ::clarifai::api::BinaryMetrics* _internal_add_binary_metrics();
  public:
  const ::clarifai::api::BinaryMetrics& binary_metrics(int index) const;
  ::clarifai::api::BinaryMetrics* add_binary_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >&
      binary_metrics() const;

  // repeated .clarifai.api.EvalTestSetEntry test_set = 7;
  int test_set_size() const;
  private:
  int _internal_test_set_size() const;
  public:
  void clear_test_set();
  ::clarifai::api::EvalTestSetEntry* mutable_test_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EvalTestSetEntry >*
      mutable_test_set();
  private:
  const ::clarifai::api::EvalTestSetEntry& _internal_test_set(int index) const;
  ::clarifai::api::EvalTestSetEntry* _internal_add_test_set();
  public:
  const ::clarifai::api::EvalTestSetEntry& test_set(int index) const;
  ::clarifai::api::EvalTestSetEntry* add_test_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EvalTestSetEntry >&
      test_set() const;

  // repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
  int metrics_by_area_size() const;
  private:
  int _internal_metrics_by_area_size() const;
  public:
  void clear_metrics_by_area();
  ::clarifai::api::BinaryMetrics* mutable_metrics_by_area(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >*
      mutable_metrics_by_area();
  private:
  const ::clarifai::api::BinaryMetrics& _internal_metrics_by_area(int index) const;
  ::clarifai::api::BinaryMetrics* _internal_add_metrics_by_area();
  public:
  const ::clarifai::api::BinaryMetrics& metrics_by_area(int index) const;
  ::clarifai::api::BinaryMetrics* add_metrics_by_area();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >&
      metrics_by_area() const;

  // repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
  int metrics_by_class_size() const;
  private:
  int _internal_metrics_by_class_size() const;
  public:
  void clear_metrics_by_class();
  ::clarifai::api::BinaryMetrics* mutable_metrics_by_class(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >*
      mutable_metrics_by_class();
  private:
  const ::clarifai::api::BinaryMetrics& _internal_metrics_by_class(int index) const;
  ::clarifai::api::BinaryMetrics* _internal_add_metrics_by_class();
  public:
  const ::clarifai::api::BinaryMetrics& metrics_by_class(int index) const;
  ::clarifai::api::BinaryMetrics* add_metrics_by_class();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >&
      metrics_by_class() const;

  // repeated .clarifai.api.TrackerMetrics tracker_metrics = 11;
  int tracker_metrics_size() const;
  private:
  int _internal_tracker_metrics_size() const;
  public:
  void clear_tracker_metrics();
  ::clarifai::api::TrackerMetrics* mutable_tracker_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrackerMetrics >*
      mutable_tracker_metrics();
  private:
  const ::clarifai::api::TrackerMetrics& _internal_tracker_metrics(int index) const;
  ::clarifai::api::TrackerMetrics* _internal_add_tracker_metrics();
  public:
  const ::clarifai::api::TrackerMetrics& tracker_metrics(int index) const;
  ::clarifai::api::TrackerMetrics* add_tracker_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrackerMetrics >&
      tracker_metrics() const;

  // string id = 10;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.status.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.MetricsSummary summary = 2;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::clarifai::api::MetricsSummary& summary() const;
  ::clarifai::api::MetricsSummary* release_summary();
  ::clarifai::api::MetricsSummary* mutable_summary();
  void set_allocated_summary(::clarifai::api::MetricsSummary* summary);
  private:
  const ::clarifai::api::MetricsSummary& _internal_summary() const;
  ::clarifai::api::MetricsSummary* _internal_mutable_summary();
  public:

  // .clarifai.api.ConfusionMatrix confusion_matrix = 3;
  bool has_confusion_matrix() const;
  private:
  bool _internal_has_confusion_matrix() const;
  public:
  void clear_confusion_matrix();
  const ::clarifai::api::ConfusionMatrix& confusion_matrix() const;
  ::clarifai::api::ConfusionMatrix* release_confusion_matrix();
  ::clarifai::api::ConfusionMatrix* mutable_confusion_matrix();
  void set_allocated_confusion_matrix(::clarifai::api::ConfusionMatrix* confusion_matrix);
  private:
  const ::clarifai::api::ConfusionMatrix& _internal_confusion_matrix() const;
  ::clarifai::api::ConfusionMatrix* _internal_mutable_confusion_matrix();
  public:

  // .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
  bool has_cooccurrence_matrix() const;
  private:
  bool _internal_has_cooccurrence_matrix() const;
  public:
  void clear_cooccurrence_matrix();
  const ::clarifai::api::CooccurrenceMatrix& cooccurrence_matrix() const;
  ::clarifai::api::CooccurrenceMatrix* release_cooccurrence_matrix();
  ::clarifai::api::CooccurrenceMatrix* mutable_cooccurrence_matrix();
  void set_allocated_cooccurrence_matrix(::clarifai::api::CooccurrenceMatrix* cooccurrence_matrix);
  private:
  const ::clarifai::api::CooccurrenceMatrix& _internal_cooccurrence_matrix() const;
  ::clarifai::api::CooccurrenceMatrix* _internal_mutable_cooccurrence_matrix();
  public:

  // .clarifai.api.LabelDistribution label_counts = 5;
  bool has_label_counts() const;
  private:
  bool _internal_has_label_counts() const;
  public:
  void clear_label_counts();
  const ::clarifai::api::LabelDistribution& label_counts() const;
  ::clarifai::api::LabelDistribution* release_label_counts();
  ::clarifai::api::LabelDistribution* mutable_label_counts();
  void set_allocated_label_counts(::clarifai::api::LabelDistribution* label_counts);
  private:
  const ::clarifai::api::LabelDistribution& _internal_label_counts() const;
  ::clarifai::api::LabelDistribution* _internal_mutable_label_counts();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.EvalMetrics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics > binary_metrics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EvalTestSetEntry > test_set_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics > metrics_by_area_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics > metrics_by_class_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrackerMetrics > tracker_metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::MetricsSummary* summary_;
  ::clarifai::api::ConfusionMatrix* confusion_matrix_;
  ::clarifai::api::CooccurrenceMatrix* cooccurrence_matrix_;
  ::clarifai::api::LabelDistribution* label_counts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class FieldsValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.FieldsValue) */ {
 public:
  FieldsValue();
  virtual ~FieldsValue();

  FieldsValue(const FieldsValue& from);
  FieldsValue(FieldsValue&& from) noexcept
    : FieldsValue() {
    *this = ::std::move(from);
  }

  inline FieldsValue& operator=(const FieldsValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldsValue& operator=(FieldsValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldsValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldsValue* internal_default_instance() {
    return reinterpret_cast<const FieldsValue*>(
               &_FieldsValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(FieldsValue& a, FieldsValue& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldsValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldsValue* New() const final {
    return CreateMaybeMessage<FieldsValue>(nullptr);
  }

  FieldsValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldsValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldsValue& from);
  void MergeFrom(const FieldsValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldsValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.FieldsValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfusionMatrixFieldNumber = 1,
    kCooccurrenceMatrixFieldNumber = 2,
    kLabelCountsFieldNumber = 3,
    kBinaryMetricsFieldNumber = 4,
    kTestSetFieldNumber = 5,
    kMetricsByAreaFieldNumber = 6,
    kMetricsByClassFieldNumber = 7,
  };
  // bool confusion_matrix = 1;
  void clear_confusion_matrix();
  bool confusion_matrix() const;
  void set_confusion_matrix(bool value);
  private:
  bool _internal_confusion_matrix() const;
  void _internal_set_confusion_matrix(bool value);
  public:

  // bool cooccurrence_matrix = 2;
  void clear_cooccurrence_matrix();
  bool cooccurrence_matrix() const;
  void set_cooccurrence_matrix(bool value);
  private:
  bool _internal_cooccurrence_matrix() const;
  void _internal_set_cooccurrence_matrix(bool value);
  public:

  // bool label_counts = 3;
  void clear_label_counts();
  bool label_counts() const;
  void set_label_counts(bool value);
  private:
  bool _internal_label_counts() const;
  void _internal_set_label_counts(bool value);
  public:

  // bool binary_metrics = 4;
  void clear_binary_metrics();
  bool binary_metrics() const;
  void set_binary_metrics(bool value);
  private:
  bool _internal_binary_metrics() const;
  void _internal_set_binary_metrics(bool value);
  public:

  // bool test_set = 5;
  void clear_test_set();
  bool test_set() const;
  void set_test_set(bool value);
  private:
  bool _internal_test_set() const;
  void _internal_set_test_set(bool value);
  public:

  // bool metrics_by_area = 6;
  void clear_metrics_by_area();
  bool metrics_by_area() const;
  void set_metrics_by_area(bool value);
  private:
  bool _internal_metrics_by_area() const;
  void _internal_set_metrics_by_area(bool value);
  public:

  // bool metrics_by_class = 7;
  void clear_metrics_by_class();
  bool metrics_by_class() const;
  void set_metrics_by_class(bool value);
  private:
  bool _internal_metrics_by_class() const;
  void _internal_set_metrics_by_class(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.FieldsValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool confusion_matrix_;
  bool cooccurrence_matrix_;
  bool label_counts_;
  bool binary_metrics_;
  bool test_set_;
  bool metrics_by_area_;
  bool metrics_by_class_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Output :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Output) */ {
 public:
  Output();
  virtual ~Output();

  Output(const Output& from);
  Output(Output&& from) noexcept
    : Output() {
    *this = ::std::move(from);
  }

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(Output& a, Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Output* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Output* New() const final {
    return CreateMaybeMessage<Output>(nullptr);
  }

  Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Output>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Output& from);
  void MergeFrom(const Output& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Output* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Output";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kCreatedAtFieldNumber = 3,
    kModelFieldNumber = 4,
    kInputFieldNumber = 5,
    kDataFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.status.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .clarifai.api.Model model = 4;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:

  // .clarifai.api.Input input = 5;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:

  // .clarifai.api.Data data = 6;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Output)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::status::Status* status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::clarifai::api::Model* model_;
  ::clarifai::api::Input* input_;
  ::clarifai::api::Data* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ScopeDeps :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.ScopeDeps) */ {
 public:
  ScopeDeps();
  virtual ~ScopeDeps();

  ScopeDeps(const ScopeDeps& from);
  ScopeDeps(ScopeDeps&& from) noexcept
    : ScopeDeps() {
    *this = ::std::move(from);
  }

  inline ScopeDeps& operator=(const ScopeDeps& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScopeDeps& operator=(ScopeDeps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScopeDeps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScopeDeps* internal_default_instance() {
    return reinterpret_cast<const ScopeDeps*>(
               &_ScopeDeps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(ScopeDeps& a, ScopeDeps& b) {
    a.Swap(&b);
  }
  inline void Swap(ScopeDeps* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScopeDeps* New() const final {
    return CreateMaybeMessage<ScopeDeps>(nullptr);
  }

  ScopeDeps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScopeDeps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScopeDeps& from);
  void MergeFrom(const ScopeDeps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScopeDeps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.ScopeDeps";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependingScopesFieldNumber = 2,
    kScopeFieldNumber = 1,
  };
  // repeated string depending_scopes = 2;
  int depending_scopes_size() const;
  private:
  int _internal_depending_scopes_size() const;
  public:
  void clear_depending_scopes();
  const std::string& depending_scopes(int index) const;
  std::string* mutable_depending_scopes(int index);
  void set_depending_scopes(int index, const std::string& value);
  void set_depending_scopes(int index, std::string&& value);
  void set_depending_scopes(int index, const char* value);
  void set_depending_scopes(int index, const char* value, size_t size);
  std::string* add_depending_scopes();
  void add_depending_scopes(const std::string& value);
  void add_depending_scopes(std::string&& value);
  void add_depending_scopes(const char* value);
  void add_depending_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& depending_scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_depending_scopes();
  private:
  const std::string& _internal_depending_scopes(int index) const;
  std::string* _internal_add_depending_scopes();
  public:

  // string scope = 1;
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.ScopeDeps)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> depending_scopes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EndpointDeps :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.EndpointDeps) */ {
 public:
  EndpointDeps();
  virtual ~EndpointDeps();

  EndpointDeps(const EndpointDeps& from);
  EndpointDeps(EndpointDeps&& from) noexcept
    : EndpointDeps() {
    *this = ::std::move(from);
  }

  inline EndpointDeps& operator=(const EndpointDeps& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndpointDeps& operator=(EndpointDeps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndpointDeps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndpointDeps* internal_default_instance() {
    return reinterpret_cast<const EndpointDeps*>(
               &_EndpointDeps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(EndpointDeps& a, EndpointDeps& b) {
    a.Swap(&b);
  }
  inline void Swap(EndpointDeps* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndpointDeps* New() const final {
    return CreateMaybeMessage<EndpointDeps>(nullptr);
  }

  EndpointDeps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndpointDeps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndpointDeps& from);
  void MergeFrom(const EndpointDeps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndpointDeps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.EndpointDeps";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependingScopesFieldNumber = 2,
    kEndpointFieldNumber = 1,
  };
  // repeated string depending_scopes = 2;
  int depending_scopes_size() const;
  private:
  int _internal_depending_scopes_size() const;
  public:
  void clear_depending_scopes();
  const std::string& depending_scopes(int index) const;
  std::string* mutable_depending_scopes(int index);
  void set_depending_scopes(int index, const std::string& value);
  void set_depending_scopes(int index, std::string&& value);
  void set_depending_scopes(int index, const char* value);
  void set_depending_scopes(int index, const char* value, size_t size);
  std::string* add_depending_scopes();
  void add_depending_scopes(const std::string& value);
  void add_depending_scopes(std::string&& value);
  void add_depending_scopes(const char* value);
  void add_depending_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& depending_scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_depending_scopes();
  private:
  const std::string& _internal_depending_scopes(int index) const;
  std::string* _internal_add_depending_scopes();
  public:

  // string endpoint = 1;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.EndpointDeps)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> depending_scopes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Hit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Hit) */ {
 public:
  Hit();
  virtual ~Hit();

  Hit(const Hit& from);
  Hit(Hit&& from) noexcept
    : Hit() {
    *this = ::std::move(from);
  }

  inline Hit& operator=(const Hit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hit& operator=(Hit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hit* internal_default_instance() {
    return reinterpret_cast<const Hit*>(
               &_Hit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(Hit& a, Hit& b) {
    a.Swap(&b);
  }
  inline void Swap(Hit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hit* New() const final {
    return CreateMaybeMessage<Hit>(nullptr);
  }

  Hit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hit& from);
  void MergeFrom(const Hit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Hit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 2,
    kAnnotationFieldNumber = 3,
    kScoreFieldNumber = 1,
  };
  // .clarifai.api.Input input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:

  // .clarifai.api.Annotation annotation = 3;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::clarifai::api::Annotation& annotation() const;
  ::clarifai::api::Annotation* release_annotation();
  ::clarifai::api::Annotation* mutable_annotation();
  void set_allocated_annotation(::clarifai::api::Annotation* annotation);
  private:
  const ::clarifai::api::Annotation& _internal_annotation() const;
  ::clarifai::api::Annotation* _internal_mutable_annotation();
  public:

  // float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Hit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::Input* input_;
  ::clarifai::api::Annotation* annotation_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class And :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.And) */ {
 public:
  And();
  virtual ~And();

  And(const And& from);
  And(And&& from) noexcept
    : And() {
    *this = ::std::move(from);
  }

  inline And& operator=(const And& from) {
    CopyFrom(from);
    return *this;
  }
  inline And& operator=(And&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const And& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const And* internal_default_instance() {
    return reinterpret_cast<const And*>(
               &_And_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(And& a, And& b) {
    a.Swap(&b);
  }
  inline void Swap(And* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline And* New() const final {
    return CreateMaybeMessage<And>(nullptr);
  }

  And* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<And>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const And& from);
  void MergeFrom(const And& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(And* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.And";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kOutputFieldNumber = 2,
    kAnnotationFieldNumber = 4,
    kNegateFieldNumber = 3,
  };
  // .clarifai.api.Input input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:

  // .clarifai.api.Output output = 2;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::clarifai::api::Output& output() const;
  ::clarifai::api::Output* release_output();
  ::clarifai::api::Output* mutable_output();
  void set_allocated_output(::clarifai::api::Output* output);
  private:
  const ::clarifai::api::Output& _internal_output() const;
  ::clarifai::api::Output* _internal_mutable_output();
  public:

  // .clarifai.api.Annotation annotation = 4;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::clarifai::api::Annotation& annotation() const;
  ::clarifai::api::Annotation* release_annotation();
  ::clarifai::api::Annotation* mutable_annotation();
  void set_allocated_annotation(::clarifai::api::Annotation* annotation);
  private:
  const ::clarifai::api::Annotation& _internal_annotation() const;
  ::clarifai::api::Annotation* _internal_mutable_annotation();
  public:

  // bool negate = 3;
  void clear_negate();
  bool negate() const;
  void set_negate(bool value);
  private:
  bool _internal_negate() const;
  void _internal_set_negate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.And)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::Input* input_;
  ::clarifai::api::Output* output_;
  ::clarifai::api::Annotation* annotation_;
  bool negate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Query :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Query) */ {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(nullptr);
  }

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Query";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAndsFieldNumber = 1,
    kFiltersFieldNumber = 3,
    kRanksFieldNumber = 4,
    kLanguageFieldNumber = 2,
  };
  // repeated .clarifai.api.And ands = 1;
  int ands_size() const;
  private:
  int _internal_ands_size() const;
  public:
  void clear_ands();
  ::clarifai::api::And* mutable_ands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::And >*
      mutable_ands();
  private:
  const ::clarifai::api::And& _internal_ands(int index) const;
  ::clarifai::api::And* _internal_add_ands();
  public:
  const ::clarifai::api::And& ands(int index) const;
  ::clarifai::api::And* add_ands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::And >&
      ands() const;

  // repeated .clarifai.api.Filter filters = 3;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::clarifai::api::Filter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Filter >*
      mutable_filters();
  private:
  const ::clarifai::api::Filter& _internal_filters(int index) const;
  ::clarifai::api::Filter* _internal_add_filters();
  public:
  const ::clarifai::api::Filter& filters(int index) const;
  ::clarifai::api::Filter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Filter >&
      filters() const;

  // repeated .clarifai.api.Rank ranks = 4;
  int ranks_size() const;
  private:
  int _internal_ranks_size() const;
  public:
  void clear_ranks();
  ::clarifai::api::Rank* mutable_ranks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Rank >*
      mutable_ranks();
  private:
  const ::clarifai::api::Rank& _internal_ranks(int index) const;
  ::clarifai::api::Rank* _internal_add_ranks();
  public:
  const ::clarifai::api::Rank& ranks(int index) const;
  ::clarifai::api::Rank* add_ranks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Rank >&
      ranks() const;

  // string language = 2;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Query)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::And > ands_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Filter > filters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Rank > ranks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Search :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Search) */ {
 public:
  Search();
  virtual ~Search();

  Search(const Search& from);
  Search(Search&& from) noexcept
    : Search() {
    *this = ::std::move(from);
  }

  inline Search& operator=(const Search& from) {
    CopyFrom(from);
    return *this;
  }
  inline Search& operator=(Search&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Search& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Search* internal_default_instance() {
    return reinterpret_cast<const Search*>(
               &_Search_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(Search& a, Search& b) {
    a.Swap(&b);
  }
  inline void Swap(Search* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Search* New() const final {
    return CreateMaybeMessage<Search>(nullptr);
  }

  Search* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Search>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Search& from);
  void MergeFrom(const Search& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Search* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Search";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kApplicationIdFieldNumber = 3,
    kNameFieldNumber = 4,
    kGitHashFieldNumber = 6,
    kAlgorithmFieldNumber = 9,
    kQueryFieldNumber = 1,
    kAsOfFieldNumber = 5,
    kCreatedAtFieldNumber = 7,
    kModifiedAtFieldNumber = 8,
    kVisibilityFieldNumber = 12,
    kSaveFieldNumber = 10,
    kMinValueFieldNumber = 11,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string application_id = 3;
  void clear_application_id();
  const std::string& application_id() const;
  void set_application_id(const std::string& value);
  void set_application_id(std::string&& value);
  void set_application_id(const char* value);
  void set_application_id(const char* value, size_t size);
  std::string* mutable_application_id();
  std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string git_hash = 6;
  void clear_git_hash();
  const std::string& git_hash() const;
  void set_git_hash(const std::string& value);
  void set_git_hash(std::string&& value);
  void set_git_hash(const char* value);
  void set_git_hash(const char* value, size_t size);
  std::string* mutable_git_hash();
  std::string* release_git_hash();
  void set_allocated_git_hash(std::string* git_hash);
  private:
  const std::string& _internal_git_hash() const;
  void _internal_set_git_hash(const std::string& value);
  std::string* _internal_mutable_git_hash();
  public:

  // string algorithm = 9;
  void clear_algorithm();
  const std::string& algorithm() const;
  void set_algorithm(const std::string& value);
  void set_algorithm(std::string&& value);
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  std::string* mutable_algorithm();
  std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // .clarifai.api.Query query = 1;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::clarifai::api::Query& query() const;
  ::clarifai::api::Query* release_query();
  ::clarifai::api::Query* mutable_query();
  void set_allocated_query(::clarifai::api::Query* query);
  private:
  const ::clarifai::api::Query& _internal_query() const;
  ::clarifai::api::Query* _internal_mutable_query();
  public:

  // .google.protobuf.Timestamp as_of = 5;
  bool has_as_of() const;
  private:
  bool _internal_has_as_of() const;
  public:
  void clear_as_of();
  const PROTOBUF_NAMESPACE_ID::Timestamp& as_of() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_as_of();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_as_of();
  void set_allocated_as_of(PROTOBUF_NAMESPACE_ID::Timestamp* as_of);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_as_of() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_as_of();
  public:

  // .google.protobuf.Timestamp created_at = 7;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .google.protobuf.Timestamp modified_at = 8;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:

  // .clarifai.api.Visibility visibility = 12;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  const ::clarifai::api::Visibility& visibility() const;
  ::clarifai::api::Visibility* release_visibility();
  ::clarifai::api::Visibility* mutable_visibility();
  void set_allocated_visibility(::clarifai::api::Visibility* visibility);
  private:
  const ::clarifai::api::Visibility& _internal_visibility() const;
  ::clarifai::api::Visibility* _internal_mutable_visibility();
  public:

  // bool save = 10;
  void clear_save();
  bool save() const;
  void set_save(bool value);
  private:
  bool _internal_save() const;
  void _internal_set_save(bool value);
  public:

  // float min_value = 11;
  void clear_min_value();
  float min_value() const;
  void set_min_value(float value);
  private:
  float _internal_min_value() const;
  void _internal_set_min_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Search)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr git_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::clarifai::api::Query* query_;
  PROTOBUF_NAMESPACE_ID::Timestamp* as_of_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  ::clarifai::api::Visibility* visibility_;
  bool save_;
  float min_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Filter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Filter) */ {
 public:
  Filter();
  virtual ~Filter();

  Filter(const Filter& from);
  Filter(Filter&& from) noexcept
    : Filter() {
    *this = ::std::move(from);
  }

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filter& operator=(Filter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Filter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filter* internal_default_instance() {
    return reinterpret_cast<const Filter*>(
               &_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(Filter& a, Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Filter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Filter* New() const final {
    return CreateMaybeMessage<Filter>(nullptr);
  }

  Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Filter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFieldNumber = 4,
    kInputFieldNumber = 5,
    kLastUpdatedTimeRangeFieldNumber = 6,
    kNegateFieldNumber = 3,
  };
  // .clarifai.api.Annotation annotation = 4;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::clarifai::api::Annotation& annotation() const;
  ::clarifai::api::Annotation* release_annotation();
  ::clarifai::api::Annotation* mutable_annotation();
  void set_allocated_annotation(::clarifai::api::Annotation* annotation);
  private:
  const ::clarifai::api::Annotation& _internal_annotation() const;
  ::clarifai::api::Annotation* _internal_mutable_annotation();
  public:

  // .clarifai.api.Input input = 5;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:

  // .clarifai.api.TimeRange last_updated_time_range = 6;
  bool has_last_updated_time_range() const;
  private:
  bool _internal_has_last_updated_time_range() const;
  public:
  void clear_last_updated_time_range();
  const ::clarifai::api::TimeRange& last_updated_time_range() const;
  ::clarifai::api::TimeRange* release_last_updated_time_range();
  ::clarifai::api::TimeRange* mutable_last_updated_time_range();
  void set_allocated_last_updated_time_range(::clarifai::api::TimeRange* last_updated_time_range);
  private:
  const ::clarifai::api::TimeRange& _internal_last_updated_time_range() const;
  ::clarifai::api::TimeRange* _internal_mutable_last_updated_time_range();
  public:

  // bool negate = 3;
  void clear_negate();
  bool negate() const;
  void set_negate(bool value);
  private:
  bool _internal_negate() const;
  void _internal_set_negate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Filter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::Annotation* annotation_;
  ::clarifai::api::Input* input_;
  ::clarifai::api::TimeRange* last_updated_time_range_;
  bool negate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TimeRange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TimeRange) */ {
 public:
  TimeRange();
  virtual ~TimeRange();

  TimeRange(const TimeRange& from);
  TimeRange(TimeRange&& from) noexcept
    : TimeRange() {
    *this = ::std::move(from);
  }

  inline TimeRange& operator=(const TimeRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRange& operator=(TimeRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeRange* internal_default_instance() {
    return reinterpret_cast<const TimeRange*>(
               &_TimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(TimeRange& a, TimeRange& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeRange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeRange* New() const final {
    return CreateMaybeMessage<TimeRange>(nullptr);
  }

  TimeRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeRange& from);
  void MergeFrom(const TimeRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TimeRange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:

  // .google.protobuf.Timestamp end_time = 2;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.TimeRange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Rank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Rank) */ {
 public:
  Rank();
  virtual ~Rank();

  Rank(const Rank& from);
  Rank(Rank&& from) noexcept
    : Rank() {
    *this = ::std::move(from);
  }

  inline Rank& operator=(const Rank& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rank& operator=(Rank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rank* internal_default_instance() {
    return reinterpret_cast<const Rank*>(
               &_Rank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(Rank& a, Rank& b) {
    a.Swap(&b);
  }
  inline void Swap(Rank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rank* New() const final {
    return CreateMaybeMessage<Rank>(nullptr);
  }

  Rank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rank& from);
  void MergeFrom(const Rank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Rank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFieldNumber = 4,
    kNegateFieldNumber = 3,
  };
  // .clarifai.api.Annotation annotation = 4;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::clarifai::api::Annotation& annotation() const;
  ::clarifai::api::Annotation* release_annotation();
  ::clarifai::api::Annotation* mutable_annotation();
  void set_allocated_annotation(::clarifai::api::Annotation* annotation);
  private:
  const ::clarifai::api::Annotation& _internal_annotation() const;
  ::clarifai::api::Annotation* _internal_mutable_annotation();
  public:

  // bool negate = 3;
  void clear_negate();
  bool negate() const;
  void set_negate(bool value);
  private:
  bool _internal_negate() const;
  void _internal_set_negate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Rank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::Annotation* annotation_;
  bool negate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AnnotationSearchMetrics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.AnnotationSearchMetrics) */ {
 public:
  AnnotationSearchMetrics();
  virtual ~AnnotationSearchMetrics();

  AnnotationSearchMetrics(const AnnotationSearchMetrics& from);
  AnnotationSearchMetrics(AnnotationSearchMetrics&& from) noexcept
    : AnnotationSearchMetrics() {
    *this = ::std::move(from);
  }

  inline AnnotationSearchMetrics& operator=(const AnnotationSearchMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotationSearchMetrics& operator=(AnnotationSearchMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnnotationSearchMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotationSearchMetrics* internal_default_instance() {
    return reinterpret_cast<const AnnotationSearchMetrics*>(
               &_AnnotationSearchMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(AnnotationSearchMetrics& a, AnnotationSearchMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotationSearchMetrics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnnotationSearchMetrics* New() const final {
    return CreateMaybeMessage<AnnotationSearchMetrics>(nullptr);
  }

  AnnotationSearchMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnnotationSearchMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnnotationSearchMetrics& from);
  void MergeFrom(const AnnotationSearchMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotationSearchMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.AnnotationSearchMetrics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroundTruthFieldNumber = 1,
    kSearchToEvalFieldNumber = 2,
    kMetricsFieldNumber = 3,
    kDataFieldNumber = 4,
    kVisibilityFieldNumber = 6,
    kActiveConceptCountFieldNumber = 5,
  };
  // .clarifai.api.Search ground_truth = 1;
  bool has_ground_truth() const;
  private:
  bool _internal_has_ground_truth() const;
  public:
  void clear_ground_truth();
  const ::clarifai::api::Search& ground_truth() const;
  ::clarifai::api::Search* release_ground_truth();
  ::clarifai::api::Search* mutable_ground_truth();
  void set_allocated_ground_truth(::clarifai::api::Search* ground_truth);
  private:
  const ::clarifai::api::Search& _internal_ground_truth() const;
  ::clarifai::api::Search* _internal_mutable_ground_truth();
  public:

  // .clarifai.api.Search search_to_eval = 2;
  bool has_search_to_eval() const;
  private:
  bool _internal_has_search_to_eval() const;
  public:
  void clear_search_to_eval();
  const ::clarifai::api::Search& search_to_eval() const;
  ::clarifai::api::Search* release_search_to_eval();
  ::clarifai::api::Search* mutable_search_to_eval();
  void set_allocated_search_to_eval(::clarifai::api::Search* search_to_eval);
  private:
  const ::clarifai::api::Search& _internal_search_to_eval() const;
  ::clarifai::api::Search* _internal_mutable_search_to_eval();
  public:

  // .clarifai.api.EvalMetrics metrics = 3;
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;
  public:
  void clear_metrics();
  const ::clarifai::api::EvalMetrics& metrics() const;
  ::clarifai::api::EvalMetrics* release_metrics();
  ::clarifai::api::EvalMetrics* mutable_metrics();
  void set_allocated_metrics(::clarifai::api::EvalMetrics* metrics);
  private:
  const ::clarifai::api::EvalMetrics& _internal_metrics() const;
  ::clarifai::api::EvalMetrics* _internal_mutable_metrics();
  public:

  // .clarifai.api.Data data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::clarifai::api::Data& data() const;
  ::clarifai::api::Data* release_data();
  ::clarifai::api::Data* mutable_data();
  void set_allocated_data(::clarifai::api::Data* data);
  private:
  const ::clarifai::api::Data& _internal_data() const;
  ::clarifai::api::Data* _internal_mutable_data();
  public:

  // .clarifai.api.Visibility visibility = 6;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  const ::clarifai::api::Visibility& visibility() const;
  ::clarifai::api::Visibility* release_visibility();
  ::clarifai::api::Visibility* mutable_visibility();
  void set_allocated_visibility(::clarifai::api::Visibility* visibility);
  private:
  const ::clarifai::api::Visibility& _internal_visibility() const;
  ::clarifai::api::Visibility* _internal_mutable_visibility();
  public:

  // uint32 active_concept_count = 5;
  void clear_active_concept_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 active_concept_count() const;
  void set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_active_concept_count() const;
  void _internal_set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.AnnotationSearchMetrics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::Search* ground_truth_;
  ::clarifai::api::Search* search_to_eval_;
  ::clarifai::api::EvalMetrics* metrics_;
  ::clarifai::api::Data* data_;
  ::clarifai::api::Visibility* visibility_;
  ::PROTOBUF_NAMESPACE_ID::uint32 active_concept_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Text :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Text) */ {
 public:
  Text();
  virtual ~Text();

  Text(const Text& from);
  Text(Text&& from) noexcept
    : Text() {
    *this = ::std::move(from);
  }

  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline Text& operator=(Text&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Text& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Text* internal_default_instance() {
    return reinterpret_cast<const Text*>(
               &_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(Text& a, Text& b) {
    a.Swap(&b);
  }
  inline void Swap(Text* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Text* New() const final {
    return CreateMaybeMessage<Text>(nullptr);
  }

  Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Text>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Text* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Text";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawFieldNumber = 1,
    kUrlFieldNumber = 2,
    kHostedFieldNumber = 4,
    kAllowDuplicateUrlFieldNumber = 3,
  };
  // string raw = 1;
  void clear_raw();
  const std::string& raw() const;
  void set_raw(const std::string& value);
  void set_raw(std::string&& value);
  void set_raw(const char* value);
  void set_raw(const char* value, size_t size);
  std::string* mutable_raw();
  std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // .clarifai.api.HostedURL hosted = 4;
  bool has_hosted() const;
  private:
  bool _internal_has_hosted() const;
  public:
  void clear_hosted();
  const ::clarifai::api::HostedURL& hosted() const;
  ::clarifai::api::HostedURL* release_hosted();
  ::clarifai::api::HostedURL* mutable_hosted();
  void set_allocated_hosted(::clarifai::api::HostedURL* hosted);
  private:
  const ::clarifai::api::HostedURL& _internal_hosted() const;
  ::clarifai::api::HostedURL* _internal_mutable_hosted();
  public:

  // bool allow_duplicate_url = 3;
  void clear_allow_duplicate_url();
  bool allow_duplicate_url() const;
  void set_allow_duplicate_url(bool value);
  private:
  bool _internal_allow_duplicate_url() const;
  void _internal_set_allow_duplicate_url(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Text)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::clarifai::api::HostedURL* hosted_;
  bool allow_duplicate_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class User :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.User";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailAddressesFieldNumber = 12,
    kIdFieldNumber = 1,
    kPrimaryEmailFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kCompanyNameFieldNumber = 5,
    kBillTypeFieldNumber = 7,
    kJobTitleFieldNumber = 19,
    kJobRoleFieldNumber = 20,
    kCreatedAtFieldNumber = 6,
    kDateGdprConsentFieldNumber = 8,
    kDateTosConsentFieldNumber = 9,
    kDateMarketingConsentFieldNumber = 10,
    kMetadataFieldNumber = 11,
    kVisibilityFieldNumber = 17,
    kUserDetailFieldNumber = 18,
    kIsOrgAdminFieldNumber = 14,
    kTwoFactorAuthEnabledFieldNumber = 15,
    kTeamsCountFieldNumber = 16,
  };
  // repeated .clarifai.api.EmailAddress email_addresses = 12 [deprecated = true];
  PROTOBUF_DEPRECATED int email_addresses_size() const;
  private:
  int _internal_email_addresses_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_email_addresses();
  PROTOBUF_DEPRECATED ::clarifai::api::EmailAddress* mutable_email_addresses(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >*
      mutable_email_addresses();
  private:
  const ::clarifai::api::EmailAddress& _internal_email_addresses(int index) const;
  ::clarifai::api::EmailAddress* _internal_add_email_addresses();
  public:
  PROTOBUF_DEPRECATED const ::clarifai::api::EmailAddress& email_addresses(int index) const;
  PROTOBUF_DEPRECATED ::clarifai::api::EmailAddress* add_email_addresses();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >&
      email_addresses() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string primary_email = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_primary_email();
  PROTOBUF_DEPRECATED const std::string& primary_email() const;
  PROTOBUF_DEPRECATED void set_primary_email(const std::string& value);
  PROTOBUF_DEPRECATED void set_primary_email(std::string&& value);
  PROTOBUF_DEPRECATED void set_primary_email(const char* value);
  PROTOBUF_DEPRECATED void set_primary_email(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_primary_email();
  PROTOBUF_DEPRECATED std::string* release_primary_email();
  PROTOBUF_DEPRECATED void set_allocated_primary_email(std::string* primary_email);
  private:
  const std::string& _internal_primary_email() const;
  void _internal_set_primary_email(const std::string& value);
  std::string* _internal_mutable_primary_email();
  public:

  // string first_name = 3;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 4;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string company_name = 5;
  void clear_company_name();
  const std::string& company_name() const;
  void set_company_name(const std::string& value);
  void set_company_name(std::string&& value);
  void set_company_name(const char* value);
  void set_company_name(const char* value, size_t size);
  std::string* mutable_company_name();
  std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // string bill_type = 7 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_bill_type();
  PROTOBUF_DEPRECATED const std::string& bill_type() const;
  PROTOBUF_DEPRECATED void set_bill_type(const std::string& value);
  PROTOBUF_DEPRECATED void set_bill_type(std::string&& value);
  PROTOBUF_DEPRECATED void set_bill_type(const char* value);
  PROTOBUF_DEPRECATED void set_bill_type(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_bill_type();
  PROTOBUF_DEPRECATED std::string* release_bill_type();
  PROTOBUF_DEPRECATED void set_allocated_bill_type(std::string* bill_type);
  private:
  const std::string& _internal_bill_type() const;
  void _internal_set_bill_type(const std::string& value);
  std::string* _internal_mutable_bill_type();
  public:

  // string job_title = 19;
  void clear_job_title();
  const std::string& job_title() const;
  void set_job_title(const std::string& value);
  void set_job_title(std::string&& value);
  void set_job_title(const char* value);
  void set_job_title(const char* value, size_t size);
  std::string* mutable_job_title();
  std::string* release_job_title();
  void set_allocated_job_title(std::string* job_title);
  private:
  const std::string& _internal_job_title() const;
  void _internal_set_job_title(const std::string& value);
  std::string* _internal_mutable_job_title();
  public:

  // string job_role = 20;
  void clear_job_role();
  const std::string& job_role() const;
  void set_job_role(const std::string& value);
  void set_job_role(std::string&& value);
  void set_job_role(const char* value);
  void set_job_role(const char* value, size_t size);
  std::string* mutable_job_role();
  std::string* release_job_role();
  void set_allocated_job_role(std::string* job_role);
  private:
  const std::string& _internal_job_role() const;
  void _internal_set_job_role(const std::string& value);
  std::string* _internal_mutable_job_role();
  public:

  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .google.protobuf.Timestamp date_gdpr_consent = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_date_gdpr_consent() const;
  private:
  bool _internal_has_date_gdpr_consent() const;
  public:
  PROTOBUF_DEPRECATED void clear_date_gdpr_consent();
  PROTOBUF_DEPRECATED const PROTOBUF_NAMESPACE_ID::Timestamp& date_gdpr_consent() const;
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Timestamp* release_date_gdpr_consent();
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date_gdpr_consent();
  PROTOBUF_DEPRECATED void set_allocated_date_gdpr_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_gdpr_consent);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date_gdpr_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date_gdpr_consent();
  public:

  // .google.protobuf.Timestamp date_tos_consent = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_date_tos_consent() const;
  private:
  bool _internal_has_date_tos_consent() const;
  public:
  PROTOBUF_DEPRECATED void clear_date_tos_consent();
  PROTOBUF_DEPRECATED const PROTOBUF_NAMESPACE_ID::Timestamp& date_tos_consent() const;
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Timestamp* release_date_tos_consent();
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date_tos_consent();
  PROTOBUF_DEPRECATED void set_allocated_date_tos_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_tos_consent);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date_tos_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date_tos_consent();
  public:

  // .google.protobuf.Timestamp date_marketing_consent = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_date_marketing_consent() const;
  private:
  bool _internal_has_date_marketing_consent() const;
  public:
  PROTOBUF_DEPRECATED void clear_date_marketing_consent();
  PROTOBUF_DEPRECATED const PROTOBUF_NAMESPACE_ID::Timestamp& date_marketing_consent() const;
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Timestamp* release_date_marketing_consent();
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date_marketing_consent();
  PROTOBUF_DEPRECATED void set_allocated_date_marketing_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_marketing_consent);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date_marketing_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date_marketing_consent();
  public:

  // .google.protobuf.Struct metadata = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  PROTOBUF_DEPRECATED void clear_metadata();
  PROTOBUF_DEPRECATED const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  PROTOBUF_DEPRECATED void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:

  // .clarifai.api.Visibility visibility = 17;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  const ::clarifai::api::Visibility& visibility() const;
  ::clarifai::api::Visibility* release_visibility();
  ::clarifai::api::Visibility* mutable_visibility();
  void set_allocated_visibility(::clarifai::api::Visibility* visibility);
  private:
  const ::clarifai::api::Visibility& _internal_visibility() const;
  ::clarifai::api::Visibility* _internal_mutable_visibility();
  public:

  // .clarifai.api.UserDetail user_detail = 18;
  bool has_user_detail() const;
  private:
  bool _internal_has_user_detail() const;
  public:
  void clear_user_detail();
  const ::clarifai::api::UserDetail& user_detail() const;
  ::clarifai::api::UserDetail* release_user_detail();
  ::clarifai::api::UserDetail* mutable_user_detail();
  void set_allocated_user_detail(::clarifai::api::UserDetail* user_detail);
  private:
  const ::clarifai::api::UserDetail& _internal_user_detail() const;
  ::clarifai::api::UserDetail* _internal_mutable_user_detail();
  public:

  // bool is_org_admin = 14 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_is_org_admin();
  PROTOBUF_DEPRECATED bool is_org_admin() const;
  PROTOBUF_DEPRECATED void set_is_org_admin(bool value);
  private:
  bool _internal_is_org_admin() const;
  void _internal_set_is_org_admin(bool value);
  public:

  // bool two_factor_auth_enabled = 15 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_two_factor_auth_enabled();
  PROTOBUF_DEPRECATED bool two_factor_auth_enabled() const;
  PROTOBUF_DEPRECATED void set_two_factor_auth_enabled(bool value);
  private:
  bool _internal_two_factor_auth_enabled() const;
  void _internal_set_two_factor_auth_enabled(bool value);
  public:

  // uint32 teams_count = 16 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_teams_count();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 teams_count() const;
  PROTOBUF_DEPRECATED void set_teams_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teams_count() const;
  void _internal_set_teams_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.User)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress > email_addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bill_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_role_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* date_gdpr_consent_;
  PROTOBUF_NAMESPACE_ID::Timestamp* date_tos_consent_;
  PROTOBUF_NAMESPACE_ID::Timestamp* date_marketing_consent_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  ::clarifai::api::Visibility* visibility_;
  ::clarifai::api::UserDetail* user_detail_;
  bool is_org_admin_;
  bool two_factor_auth_enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teams_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class UserDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.UserDetail) */ {
 public:
  UserDetail();
  virtual ~UserDetail();

  UserDetail(const UserDetail& from);
  UserDetail(UserDetail&& from) noexcept
    : UserDetail() {
    *this = ::std::move(from);
  }

  inline UserDetail& operator=(const UserDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDetail& operator=(UserDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDetail* internal_default_instance() {
    return reinterpret_cast<const UserDetail*>(
               &_UserDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(UserDetail& a, UserDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserDetail* New() const final {
    return CreateMaybeMessage<UserDetail>(nullptr);
  }

  UserDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserDetail& from);
  void MergeFrom(const UserDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.UserDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailAddressesFieldNumber = 7,
    kPrimaryEmailFieldNumber = 1,
    kBillTypeFieldNumber = 2,
    kDateGdprConsentFieldNumber = 3,
    kDateTosConsentFieldNumber = 4,
    kDateMarketingConsentFieldNumber = 5,
    kMetadataFieldNumber = 6,
    kIsOrgAdminFieldNumber = 8,
    kTwoFactorAuthEnabledFieldNumber = 9,
    kTeamsCountFieldNumber = 10,
  };
  // repeated .clarifai.api.EmailAddress email_addresses = 7;
  int email_addresses_size() const;
  private:
  int _internal_email_addresses_size() const;
  public:
  void clear_email_addresses();
  ::clarifai::api::EmailAddress* mutable_email_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >*
      mutable_email_addresses();
  private:
  const ::clarifai::api::EmailAddress& _internal_email_addresses(int index) const;
  ::clarifai::api::EmailAddress* _internal_add_email_addresses();
  public:
  const ::clarifai::api::EmailAddress& email_addresses(int index) const;
  ::clarifai::api::EmailAddress* add_email_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >&
      email_addresses() const;

  // string primary_email = 1;
  void clear_primary_email();
  const std::string& primary_email() const;
  void set_primary_email(const std::string& value);
  void set_primary_email(std::string&& value);
  void set_primary_email(const char* value);
  void set_primary_email(const char* value, size_t size);
  std::string* mutable_primary_email();
  std::string* release_primary_email();
  void set_allocated_primary_email(std::string* primary_email);
  private:
  const std::string& _internal_primary_email() const;
  void _internal_set_primary_email(const std::string& value);
  std::string* _internal_mutable_primary_email();
  public:

  // string bill_type = 2;
  void clear_bill_type();
  const std::string& bill_type() const;
  void set_bill_type(const std::string& value);
  void set_bill_type(std::string&& value);
  void set_bill_type(const char* value);
  void set_bill_type(const char* value, size_t size);
  std::string* mutable_bill_type();
  std::string* release_bill_type();
  void set_allocated_bill_type(std::string* bill_type);
  private:
  const std::string& _internal_bill_type() const;
  void _internal_set_bill_type(const std::string& value);
  std::string* _internal_mutable_bill_type();
  public:

  // .google.protobuf.Timestamp date_gdpr_consent = 3;
  bool has_date_gdpr_consent() const;
  private:
  bool _internal_has_date_gdpr_consent() const;
  public:
  void clear_date_gdpr_consent();
  const PROTOBUF_NAMESPACE_ID::Timestamp& date_gdpr_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_date_gdpr_consent();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date_gdpr_consent();
  void set_allocated_date_gdpr_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_gdpr_consent);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date_gdpr_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date_gdpr_consent();
  public:

  // .google.protobuf.Timestamp date_tos_consent = 4;
  bool has_date_tos_consent() const;
  private:
  bool _internal_has_date_tos_consent() const;
  public:
  void clear_date_tos_consent();
  const PROTOBUF_NAMESPACE_ID::Timestamp& date_tos_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_date_tos_consent();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date_tos_consent();
  void set_allocated_date_tos_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_tos_consent);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date_tos_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date_tos_consent();
  public:

  // .google.protobuf.Timestamp date_marketing_consent = 5;
  bool has_date_marketing_consent() const;
  private:
  bool _internal_has_date_marketing_consent() const;
  public:
  void clear_date_marketing_consent();
  const PROTOBUF_NAMESPACE_ID::Timestamp& date_marketing_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_date_marketing_consent();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date_marketing_consent();
  void set_allocated_date_marketing_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_marketing_consent);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date_marketing_consent() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date_marketing_consent();
  public:

  // .google.protobuf.Struct metadata = 6;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:

  // bool is_org_admin = 8;
  void clear_is_org_admin();
  bool is_org_admin() const;
  void set_is_org_admin(bool value);
  private:
  bool _internal_is_org_admin() const;
  void _internal_set_is_org_admin(bool value);
  public:

  // bool two_factor_auth_enabled = 9;
  void clear_two_factor_auth_enabled();
  bool two_factor_auth_enabled() const;
  void set_two_factor_auth_enabled(bool value);
  private:
  bool _internal_two_factor_auth_enabled() const;
  void _internal_set_two_factor_auth_enabled(bool value);
  public:

  // uint32 teams_count = 10;
  void clear_teams_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 teams_count() const;
  void set_teams_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teams_count() const;
  void _internal_set_teams_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.UserDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress > email_addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bill_type_;
  PROTOBUF_NAMESPACE_ID::Timestamp* date_gdpr_consent_;
  PROTOBUF_NAMESPACE_ID::Timestamp* date_tos_consent_;
  PROTOBUF_NAMESPACE_ID::Timestamp* date_marketing_consent_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  bool is_org_admin_;
  bool two_factor_auth_enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teams_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EmailAddress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.EmailAddress) */ {
 public:
  EmailAddress();
  virtual ~EmailAddress();

  EmailAddress(const EmailAddress& from);
  EmailAddress(EmailAddress&& from) noexcept
    : EmailAddress() {
    *this = ::std::move(from);
  }

  inline EmailAddress& operator=(const EmailAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailAddress& operator=(EmailAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmailAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailAddress* internal_default_instance() {
    return reinterpret_cast<const EmailAddress*>(
               &_EmailAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(EmailAddress& a, EmailAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailAddress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmailAddress* New() const final {
    return CreateMaybeMessage<EmailAddress>(nullptr);
  }

  EmailAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmailAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmailAddress& from);
  void MergeFrom(const EmailAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.EmailAddress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPrimaryFieldNumber = 2,
    kVerifiedFieldNumber = 3,
  };
  // string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_primary();
  bool primary() const;
  void set_primary(bool value);
  private:
  bool _internal_primary() const;
  void _internal_set_primary(bool value);
  public:

  // bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.EmailAddress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  bool primary_;
  bool verified_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Password :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Password) */ {
 public:
  Password();
  virtual ~Password();

  Password(const Password& from);
  Password(Password&& from) noexcept
    : Password() {
    *this = ::std::move(from);
  }

  inline Password& operator=(const Password& from) {
    CopyFrom(from);
    return *this;
  }
  inline Password& operator=(Password&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Password& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Password* internal_default_instance() {
    return reinterpret_cast<const Password*>(
               &_Password_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(Password& a, Password& b) {
    a.Swap(&b);
  }
  inline void Swap(Password* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Password* New() const final {
    return CreateMaybeMessage<Password>(nullptr);
  }

  Password* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Password>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Password& from);
  void MergeFrom(const Password& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Password* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Password";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaintextFieldNumber = 1,
  };
  // string plaintext = 1;
  void clear_plaintext();
  const std::string& plaintext() const;
  void set_plaintext(const std::string& value);
  void set_plaintext(std::string&& value);
  void set_plaintext(const char* value);
  void set_plaintext(const char* value, size_t size);
  std::string* mutable_plaintext();
  std::string* release_plaintext();
  void set_allocated_plaintext(std::string* plaintext);
  private:
  const std::string& _internal_plaintext() const;
  void _internal_set_plaintext(const std::string& value);
  std::string* _internal_mutable_plaintext();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Password)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class PasswordViolations :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.PasswordViolations) */ {
 public:
  PasswordViolations();
  virtual ~PasswordViolations();

  PasswordViolations(const PasswordViolations& from);
  PasswordViolations(PasswordViolations&& from) noexcept
    : PasswordViolations() {
    *this = ::std::move(from);
  }

  inline PasswordViolations& operator=(const PasswordViolations& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordViolations& operator=(PasswordViolations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PasswordViolations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PasswordViolations* internal_default_instance() {
    return reinterpret_cast<const PasswordViolations*>(
               &_PasswordViolations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(PasswordViolations& a, PasswordViolations& b) {
    a.Swap(&b);
  }
  inline void Swap(PasswordViolations* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasswordViolations* New() const final {
    return CreateMaybeMessage<PasswordViolations>(nullptr);
  }

  PasswordViolations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasswordViolations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PasswordViolations& from);
  void MergeFrom(const PasswordViolations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PasswordViolations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.PasswordViolations";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinimumLengthFieldNumber = 1,
    kMaximumLengthFieldNumber = 2,
    kUpperCaseNeededFieldNumber = 3,
    kLowerCaseNeededFieldNumber = 4,
    kNumericNeededFieldNumber = 5,
    kNonAlphanumericNeededFieldNumber = 6,
    kPasswordReuseFieldNumber = 7,
    kExcludeNamesFieldNumber = 8,
    kExcludeEmailFieldNumber = 9,
    kNoConfusingLettersFieldNumber = 10,
    kNoSimplePasswordsFieldNumber = 11,
    kNoCommonVocabsFieldNumber = 12,
    kNoOverlapWithOldFieldNumber = 13,
    kPasswordLifespanFieldNumber = 14,
  };
  // bool minimum_length = 1;
  void clear_minimum_length();
  bool minimum_length() const;
  void set_minimum_length(bool value);
  private:
  bool _internal_minimum_length() const;
  void _internal_set_minimum_length(bool value);
  public:

  // bool maximum_length = 2;
  void clear_maximum_length();
  bool maximum_length() const;
  void set_maximum_length(bool value);
  private:
  bool _internal_maximum_length() const;
  void _internal_set_maximum_length(bool value);
  public:

  // bool upper_case_needed = 3;
  void clear_upper_case_needed();
  bool upper_case_needed() const;
  void set_upper_case_needed(bool value);
  private:
  bool _internal_upper_case_needed() const;
  void _internal_set_upper_case_needed(bool value);
  public:

  // bool lower_case_needed = 4;
  void clear_lower_case_needed();
  bool lower_case_needed() const;
  void set_lower_case_needed(bool value);
  private:
  bool _internal_lower_case_needed() const;
  void _internal_set_lower_case_needed(bool value);
  public:

  // bool numeric_needed = 5;
  void clear_numeric_needed();
  bool numeric_needed() const;
  void set_numeric_needed(bool value);
  private:
  bool _internal_numeric_needed() const;
  void _internal_set_numeric_needed(bool value);
  public:

  // bool non_alphanumeric_needed = 6;
  void clear_non_alphanumeric_needed();
  bool non_alphanumeric_needed() const;
  void set_non_alphanumeric_needed(bool value);
  private:
  bool _internal_non_alphanumeric_needed() const;
  void _internal_set_non_alphanumeric_needed(bool value);
  public:

  // bool password_reuse = 7;
  void clear_password_reuse();
  bool password_reuse() const;
  void set_password_reuse(bool value);
  private:
  bool _internal_password_reuse() const;
  void _internal_set_password_reuse(bool value);
  public:

  // bool exclude_names = 8;
  void clear_exclude_names();
  bool exclude_names() const;
  void set_exclude_names(bool value);
  private:
  bool _internal_exclude_names() const;
  void _internal_set_exclude_names(bool value);
  public:

  // bool exclude_email = 9;
  void clear_exclude_email();
  bool exclude_email() const;
  void set_exclude_email(bool value);
  private:
  bool _internal_exclude_email() const;
  void _internal_set_exclude_email(bool value);
  public:

  // bool no_confusing_letters = 10;
  void clear_no_confusing_letters();
  bool no_confusing_letters() const;
  void set_no_confusing_letters(bool value);
  private:
  bool _internal_no_confusing_letters() const;
  void _internal_set_no_confusing_letters(bool value);
  public:

  // bool no_simple_passwords = 11;
  void clear_no_simple_passwords();
  bool no_simple_passwords() const;
  void set_no_simple_passwords(bool value);
  private:
  bool _internal_no_simple_passwords() const;
  void _internal_set_no_simple_passwords(bool value);
  public:

  // bool no_common_vocabs = 12;
  void clear_no_common_vocabs();
  bool no_common_vocabs() const;
  void set_no_common_vocabs(bool value);
  private:
  bool _internal_no_common_vocabs() const;
  void _internal_set_no_common_vocabs(bool value);
  public:

  // bool no_overlap_with_old = 13;
  void clear_no_overlap_with_old();
  bool no_overlap_with_old() const;
  void set_no_overlap_with_old(bool value);
  private:
  bool _internal_no_overlap_with_old() const;
  void _internal_set_no_overlap_with_old(bool value);
  public:

  // bool password_lifespan = 14;
  void clear_password_lifespan();
  bool password_lifespan() const;
  void set_password_lifespan(bool value);
  private:
  bool _internal_password_lifespan() const;
  void _internal_set_password_lifespan(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.PasswordViolations)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool minimum_length_;
  bool maximum_length_;
  bool upper_case_needed_;
  bool lower_case_needed_;
  bool numeric_needed_;
  bool non_alphanumeric_needed_;
  bool password_reuse_;
  bool exclude_names_;
  bool exclude_email_;
  bool no_confusing_letters_;
  bool no_simple_passwords_;
  bool no_common_vocabs_;
  bool no_overlap_with_old_;
  bool password_lifespan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Video :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Video) */ {
 public:
  Video();
  virtual ~Video();

  Video(const Video& from);
  Video(Video&& from) noexcept
    : Video() {
    *this = ::std::move(from);
  }

  inline Video& operator=(const Video& from) {
    CopyFrom(from);
    return *this;
  }
  inline Video& operator=(Video&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Video& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Video* internal_default_instance() {
    return reinterpret_cast<const Video*>(
               &_Video_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(Video& a, Video& b) {
    a.Swap(&b);
  }
  inline void Swap(Video* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Video* New() const final {
    return CreateMaybeMessage<Video>(nullptr);
  }

  Video* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Video>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Video& from);
  void MergeFrom(const Video& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Video* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Video";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kBase64FieldNumber = 2,
    kThumbnailUrlFieldNumber = 5,
    kHostedFieldNumber = 6,
    kAllowDuplicateUrlFieldNumber = 4,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes base64 = 2;
  void clear_base64();
  const std::string& base64() const;
  void set_base64(const std::string& value);
  void set_base64(std::string&& value);
  void set_base64(const char* value);
  void set_base64(const void* value, size_t size);
  std::string* mutable_base64();
  std::string* release_base64();
  void set_allocated_base64(std::string* base64);
  private:
  const std::string& _internal_base64() const;
  void _internal_set_base64(const std::string& value);
  std::string* _internal_mutable_base64();
  public:

  // string thumbnail_url = 5;
  void clear_thumbnail_url();
  const std::string& thumbnail_url() const;
  void set_thumbnail_url(const std::string& value);
  void set_thumbnail_url(std::string&& value);
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  std::string* mutable_thumbnail_url();
  std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(std::string* thumbnail_url);
  private:
  const std::string& _internal_thumbnail_url() const;
  void _internal_set_thumbnail_url(const std::string& value);
  std::string* _internal_mutable_thumbnail_url();
  public:

  // .clarifai.api.HostedURL hosted = 6;
  bool has_hosted() const;
  private:
  bool _internal_has_hosted() const;
  public:
  void clear_hosted();
  const ::clarifai::api::HostedURL& hosted() const;
  ::clarifai::api::HostedURL* release_hosted();
  ::clarifai::api::HostedURL* mutable_hosted();
  void set_allocated_hosted(::clarifai::api::HostedURL* hosted);
  private:
  const ::clarifai::api::HostedURL& _internal_hosted() const;
  ::clarifai::api::HostedURL* _internal_mutable_hosted();
  public:

  // bool allow_duplicate_url = 4;
  void clear_allow_duplicate_url();
  bool allow_duplicate_url() const;
  void set_allow_duplicate_url(bool value);
  private:
  bool _internal_allow_duplicate_url() const;
  void _internal_set_allow_duplicate_url(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Video)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base64_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_url_;
  ::clarifai::api::HostedURL* hosted_;
  bool allow_duplicate_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Workflow :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Workflow) */ {
 public:
  Workflow();
  virtual ~Workflow();

  Workflow(const Workflow& from);
  Workflow(Workflow&& from) noexcept
    : Workflow() {
    *this = ::std::move(from);
  }

  inline Workflow& operator=(const Workflow& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workflow& operator=(Workflow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Workflow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Workflow* internal_default_instance() {
    return reinterpret_cast<const Workflow*>(
               &_Workflow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(Workflow& a, Workflow& b) {
    a.Swap(&b);
  }
  inline void Swap(Workflow* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Workflow* New() const final {
    return CreateMaybeMessage<Workflow>(nullptr);
  }

  Workflow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Workflow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Workflow& from);
  void MergeFrom(const Workflow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Workflow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Workflow";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 4,
    kIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kUserIdFieldNumber = 7,
    kCreatedAtFieldNumber = 3,
    kMetadataFieldNumber = 5,
    kVisibilityFieldNumber = 6,
    kModifiedAtFieldNumber = 8,
    kVersionFieldNumber = 9,
  };
  // repeated .clarifai.api.WorkflowNode nodes = 4;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::clarifai::api::WorkflowNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode >*
      mutable_nodes();
  private:
  const ::clarifai::api::WorkflowNode& _internal_nodes(int index) const;
  ::clarifai::api::WorkflowNode* _internal_add_nodes();
  public:
  const ::clarifai::api::WorkflowNode& nodes(int index) const;
  ::clarifai::api::WorkflowNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode >&
      nodes() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string user_id = 7;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .google.protobuf.Struct metadata = 5;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:

  // .clarifai.api.Visibility visibility = 6;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  const ::clarifai::api::Visibility& visibility() const;
  ::clarifai::api::Visibility* release_visibility();
  ::clarifai::api::Visibility* mutable_visibility();
  void set_allocated_visibility(::clarifai::api::Visibility* visibility);
  private:
  const ::clarifai::api::Visibility& _internal_visibility() const;
  ::clarifai::api::Visibility* _internal_mutable_visibility();
  public:

  // .google.protobuf.Timestamp modified_at = 8;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:

  // .clarifai.api.WorkflowVersion version = 9;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::clarifai::api::WorkflowVersion& version() const;
  ::clarifai::api::WorkflowVersion* release_version();
  ::clarifai::api::WorkflowVersion* mutable_version();
  void set_allocated_version(::clarifai::api::WorkflowVersion* version);
  private:
  const ::clarifai::api::WorkflowVersion& _internal_version() const;
  ::clarifai::api::WorkflowVersion* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Workflow)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode > nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  ::clarifai::api::Visibility* visibility_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  ::clarifai::api::WorkflowVersion* version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class WorkflowVersion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.WorkflowVersion) */ {
 public:
  WorkflowVersion();
  virtual ~WorkflowVersion();

  WorkflowVersion(const WorkflowVersion& from);
  WorkflowVersion(WorkflowVersion&& from) noexcept
    : WorkflowVersion() {
    *this = ::std::move(from);
  }

  inline WorkflowVersion& operator=(const WorkflowVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowVersion& operator=(WorkflowVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowVersion* internal_default_instance() {
    return reinterpret_cast<const WorkflowVersion*>(
               &_WorkflowVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(WorkflowVersion& a, WorkflowVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowVersion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowVersion* New() const final {
    return CreateMaybeMessage<WorkflowVersion>(nullptr);
  }

  WorkflowVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowVersion& from);
  void MergeFrom(const WorkflowVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.WorkflowVersion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 6,
    kIdFieldNumber = 1,
    kWorkflowIdFieldNumber = 2,
    kAppIdFieldNumber = 8,
    kUserIdFieldNumber = 9,
    kCreatedAtFieldNumber = 3,
    kModifiedAtFieldNumber = 4,
    kVisibilityFieldNumber = 5,
    kMetadataFieldNumber = 7,
  };
  // repeated .clarifai.api.WorkflowNode nodes = 6;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::clarifai::api::WorkflowNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode >*
      mutable_nodes();
  private:
  const ::clarifai::api::WorkflowNode& _internal_nodes(int index) const;
  ::clarifai::api::WorkflowNode* _internal_add_nodes();
  public:
  const ::clarifai::api::WorkflowNode& nodes(int index) const;
  ::clarifai::api::WorkflowNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode >&
      nodes() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string workflow_id = 2;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  void set_workflow_id(const std::string& value);
  void set_workflow_id(std::string&& value);
  void set_workflow_id(const char* value);
  void set_workflow_id(const char* value, size_t size);
  std::string* mutable_workflow_id();
  std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // string app_id = 8;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string user_id = 9;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .google.protobuf.Timestamp modified_at = 4;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:

  // .clarifai.api.Visibility visibility = 5;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  const ::clarifai::api::Visibility& visibility() const;
  ::clarifai::api::Visibility* release_visibility();
  ::clarifai::api::Visibility* mutable_visibility();
  void set_allocated_visibility(::clarifai::api::Visibility* visibility);
  private:
  const ::clarifai::api::Visibility& _internal_visibility() const;
  ::clarifai::api::Visibility* _internal_mutable_visibility();
  public:

  // .google.protobuf.Struct metadata = 7;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.WorkflowVersion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode > nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  ::clarifai::api::Visibility* visibility_;
  PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class WorkflowNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.WorkflowNode) */ {
 public:
  WorkflowNode();
  virtual ~WorkflowNode();

  WorkflowNode(const WorkflowNode& from);
  WorkflowNode(WorkflowNode&& from) noexcept
    : WorkflowNode() {
    *this = ::std::move(from);
  }

  inline WorkflowNode& operator=(const WorkflowNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowNode& operator=(WorkflowNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowNode* internal_default_instance() {
    return reinterpret_cast<const WorkflowNode*>(
               &_WorkflowNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(WorkflowNode& a, WorkflowNode& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowNode* New() const final {
    return CreateMaybeMessage<WorkflowNode>(nullptr);
  }

  WorkflowNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowNode& from);
  void MergeFrom(const WorkflowNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.WorkflowNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeInputsFieldNumber = 3,
    kIdFieldNumber = 1,
    kModelFieldNumber = 2,
    kSuppressOutputFieldNumber = 4,
  };
  // repeated .clarifai.api.NodeInput node_inputs = 3;
  int node_inputs_size() const;
  private:
  int _internal_node_inputs_size() const;
  public:
  void clear_node_inputs();
  ::clarifai::api::NodeInput* mutable_node_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::NodeInput >*
      mutable_node_inputs();
  private:
  const ::clarifai::api::NodeInput& _internal_node_inputs(int index) const;
  ::clarifai::api::NodeInput* _internal_add_node_inputs();
  public:
  const ::clarifai::api::NodeInput& node_inputs(int index) const;
  ::clarifai::api::NodeInput* add_node_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::NodeInput >&
      node_inputs() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.Model model = 2;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:

  // bool suppress_output = 4;
  void clear_suppress_output();
  bool suppress_output() const;
  void set_suppress_output(bool value);
  private:
  bool _internal_suppress_output() const;
  void _internal_set_suppress_output(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.WorkflowNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::NodeInput > node_inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::Model* model_;
  bool suppress_output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class NodeInput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.NodeInput) */ {
 public:
  NodeInput();
  virtual ~NodeInput();

  NodeInput(const NodeInput& from);
  NodeInput(NodeInput&& from) noexcept
    : NodeInput() {
    *this = ::std::move(from);
  }

  inline NodeInput& operator=(const NodeInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInput& operator=(NodeInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInput* internal_default_instance() {
    return reinterpret_cast<const NodeInput*>(
               &_NodeInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(NodeInput& a, NodeInput& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInput* New() const final {
    return CreateMaybeMessage<NodeInput>(nullptr);
  }

  NodeInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInput& from);
  void MergeFrom(const NodeInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.NodeInput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
  };
  // string node_id = 1;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.NodeInput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class WorkflowResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.WorkflowResult) */ {
 public:
  WorkflowResult();
  virtual ~WorkflowResult();

  WorkflowResult(const WorkflowResult& from);
  WorkflowResult(WorkflowResult&& from) noexcept
    : WorkflowResult() {
    *this = ::std::move(from);
  }

  inline WorkflowResult& operator=(const WorkflowResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowResult& operator=(WorkflowResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowResult* internal_default_instance() {
    return reinterpret_cast<const WorkflowResult*>(
               &_WorkflowResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(WorkflowResult& a, WorkflowResult& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowResult* New() const final {
    return CreateMaybeMessage<WorkflowResult>(nullptr);
  }

  WorkflowResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowResult& from);
  void MergeFrom(const WorkflowResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.WorkflowResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 6,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kCreatedAtFieldNumber = 3,
    kModelFieldNumber = 4,
    kInputFieldNumber = 5,
    kSuppressOutputFieldNumber = 7,
  };
  // repeated .clarifai.api.Output outputs = 6;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::clarifai::api::Output* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >*
      mutable_outputs();
  private:
  const ::clarifai::api::Output& _internal_outputs(int index) const;
  ::clarifai::api::Output* _internal_add_outputs();
  public:
  const ::clarifai::api::Output& outputs(int index) const;
  ::clarifai::api::Output* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >&
      outputs() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.status.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .clarifai.api.Model model = 4;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::clarifai::api::Model& model() const;
  ::clarifai::api::Model* release_model();
  ::clarifai::api::Model* mutable_model();
  void set_allocated_model(::clarifai::api::Model* model);
  private:
  const ::clarifai::api::Model& _internal_model() const;
  ::clarifai::api::Model* _internal_mutable_model();
  public:

  // .clarifai.api.Input input = 5;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::clarifai::api::Input& input() const;
  ::clarifai::api::Input* release_input();
  ::clarifai::api::Input* mutable_input();
  void set_allocated_input(::clarifai::api::Input* input);
  private:
  const ::clarifai::api::Input& _internal_input() const;
  ::clarifai::api::Input* _internal_mutable_input();
  public:

  // bool suppress_output = 7;
  void clear_suppress_output();
  bool suppress_output() const;
  void set_suppress_output(bool value);
  private:
  bool _internal_suppress_output() const;
  void _internal_set_suppress_output(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.WorkflowResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::clarifai::api::status::Status* status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::clarifai::api::Model* model_;
  ::clarifai::api::Input* input_;
  bool suppress_output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class WorkflowState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.WorkflowState) */ {
 public:
  WorkflowState();
  virtual ~WorkflowState();

  WorkflowState(const WorkflowState& from);
  WorkflowState(WorkflowState&& from) noexcept
    : WorkflowState() {
    *this = ::std::move(from);
  }

  inline WorkflowState& operator=(const WorkflowState& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowState& operator=(WorkflowState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowState* internal_default_instance() {
    return reinterpret_cast<const WorkflowState*>(
               &_WorkflowState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(WorkflowState& a, WorkflowState& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowState* New() const final {
    return CreateMaybeMessage<WorkflowState>(nullptr);
  }

  WorkflowState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowState& from);
  void MergeFrom(const WorkflowState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.WorkflowState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.WorkflowState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AppDuplication :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.AppDuplication) */ {
 public:
  AppDuplication();
  virtual ~AppDuplication();

  AppDuplication(const AppDuplication& from);
  AppDuplication(AppDuplication&& from) noexcept
    : AppDuplication() {
    *this = ::std::move(from);
  }

  inline AppDuplication& operator=(const AppDuplication& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppDuplication& operator=(AppDuplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppDuplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppDuplication* internal_default_instance() {
    return reinterpret_cast<const AppDuplication*>(
               &_AppDuplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(AppDuplication& a, AppDuplication& b) {
    a.Swap(&b);
  }
  inline void Swap(AppDuplication* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppDuplication* New() const final {
    return CreateMaybeMessage<AppDuplication>(nullptr);
  }

  AppDuplication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppDuplication>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppDuplication& from);
  void MergeFrom(const AppDuplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppDuplication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.AppDuplication";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNewAppIdFieldNumber = 2,
    kNewAppNameFieldNumber = 3,
    kStatusFieldNumber = 4,
    kCreatedAtFieldNumber = 5,
    kLastModifiedAtFieldNumber = 6,
    kFilterFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string new_app_id = 2;
  void clear_new_app_id();
  const std::string& new_app_id() const;
  void set_new_app_id(const std::string& value);
  void set_new_app_id(std::string&& value);
  void set_new_app_id(const char* value);
  void set_new_app_id(const char* value, size_t size);
  std::string* mutable_new_app_id();
  std::string* release_new_app_id();
  void set_allocated_new_app_id(std::string* new_app_id);
  private:
  const std::string& _internal_new_app_id() const;
  void _internal_set_new_app_id(const std::string& value);
  std::string* _internal_mutable_new_app_id();
  public:

  // string new_app_name = 3;
  void clear_new_app_name();
  const std::string& new_app_name() const;
  void set_new_app_name(const std::string& value);
  void set_new_app_name(std::string&& value);
  void set_new_app_name(const char* value);
  void set_new_app_name(const char* value, size_t size);
  std::string* mutable_new_app_name();
  std::string* release_new_app_name();
  void set_allocated_new_app_name(std::string* new_app_name);
  private:
  const std::string& _internal_new_app_name() const;
  void _internal_set_new_app_name(const std::string& value);
  std::string* _internal_mutable_new_app_name();
  public:

  // .clarifai.api.status.Status status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .google.protobuf.Timestamp created_at = 5;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .google.protobuf.Timestamp last_modified_at = 6;
  bool has_last_modified_at() const;
  private:
  bool _internal_has_last_modified_at() const;
  public:
  void clear_last_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_modified_at();
  void set_allocated_last_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* last_modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_modified_at();
  public:

  // .clarifai.api.AppDuplicationFilters filter = 7;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::clarifai::api::AppDuplicationFilters& filter() const;
  ::clarifai::api::AppDuplicationFilters* release_filter();
  ::clarifai::api::AppDuplicationFilters* mutable_filter();
  void set_allocated_filter(::clarifai::api::AppDuplicationFilters* filter);
  private:
  const ::clarifai::api::AppDuplicationFilters& _internal_filter() const;
  ::clarifai::api::AppDuplicationFilters* _internal_mutable_filter();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.AppDuplication)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_app_name_;
  ::clarifai::api::status::Status* status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_modified_at_;
  ::clarifai::api::AppDuplicationFilters* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AppDuplicationFilters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.AppDuplicationFilters) */ {
 public:
  AppDuplicationFilters();
  virtual ~AppDuplicationFilters();

  AppDuplicationFilters(const AppDuplicationFilters& from);
  AppDuplicationFilters(AppDuplicationFilters&& from) noexcept
    : AppDuplicationFilters() {
    *this = ::std::move(from);
  }

  inline AppDuplicationFilters& operator=(const AppDuplicationFilters& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppDuplicationFilters& operator=(AppDuplicationFilters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppDuplicationFilters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppDuplicationFilters* internal_default_instance() {
    return reinterpret_cast<const AppDuplicationFilters*>(
               &_AppDuplicationFilters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(AppDuplicationFilters& a, AppDuplicationFilters& b) {
    a.Swap(&b);
  }
  inline void Swap(AppDuplicationFilters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppDuplicationFilters* New() const final {
    return CreateMaybeMessage<AppDuplicationFilters>(nullptr);
  }

  AppDuplicationFilters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppDuplicationFilters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppDuplicationFilters& from);
  void MergeFrom(const AppDuplicationFilters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppDuplicationFilters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.AppDuplicationFilters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopyInputsFieldNumber = 1,
    kCopyConceptsFieldNumber = 2,
    kCopyAnnotationsFieldNumber = 3,
    kCopyModelsFieldNumber = 4,
    kCopyWorkflowsFieldNumber = 5,
  };
  // bool copy_inputs = 1;
  void clear_copy_inputs();
  bool copy_inputs() const;
  void set_copy_inputs(bool value);
  private:
  bool _internal_copy_inputs() const;
  void _internal_set_copy_inputs(bool value);
  public:

  // bool copy_concepts = 2;
  void clear_copy_concepts();
  bool copy_concepts() const;
  void set_copy_concepts(bool value);
  private:
  bool _internal_copy_concepts() const;
  void _internal_set_copy_concepts(bool value);
  public:

  // bool copy_annotations = 3;
  void clear_copy_annotations();
  bool copy_annotations() const;
  void set_copy_annotations(bool value);
  private:
  bool _internal_copy_annotations() const;
  void _internal_set_copy_annotations(bool value);
  public:

  // bool copy_models = 4;
  void clear_copy_models();
  bool copy_models() const;
  void set_copy_models(bool value);
  private:
  bool _internal_copy_models() const;
  void _internal_set_copy_models(bool value);
  public:

  // bool copy_workflows = 5;
  void clear_copy_workflows();
  bool copy_workflows() const;
  void set_copy_workflows(bool value);
  private:
  bool _internal_copy_workflows() const;
  void _internal_set_copy_workflows(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.AppDuplicationFilters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool copy_inputs_;
  bool copy_concepts_;
  bool copy_annotations_;
  bool copy_models_;
  bool copy_workflows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Task_TaskType TaskType;
  static constexpr TaskType TYPE_NOT_SET =
    Task_TaskType_TYPE_NOT_SET;
  static constexpr TaskType CONCEPTS_CLASSIFICATION =
    Task_TaskType_CONCEPTS_CLASSIFICATION;
  static constexpr TaskType BOUNDING_BOX_DETECTION =
    Task_TaskType_BOUNDING_BOX_DETECTION;
  static constexpr TaskType POLYGON_DETECTION =
    Task_TaskType_POLYGON_DETECTION;
  static inline bool TaskType_IsValid(int value) {
    return Task_TaskType_IsValid(value);
  }
  static constexpr TaskType TaskType_MIN =
    Task_TaskType_TaskType_MIN;
  static constexpr TaskType TaskType_MAX =
    Task_TaskType_TaskType_MAX;
  static constexpr int TaskType_ARRAYSIZE =
    Task_TaskType_TaskType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TaskType_descriptor() {
    return Task_TaskType_descriptor();
  }
  template<typename T>
  static inline const std::string& TaskType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TaskType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TaskType_Name.");
    return Task_TaskType_Name(enum_t_value);
  }
  static inline bool TaskType_Parse(const std::string& name,
      TaskType* value) {
    return Task_TaskType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConceptIdsFieldNumber = 7,
    kIdFieldNumber = 1,
    kDescriptionFieldNumber = 5,
    kNameFieldNumber = 13,
    kAppIdFieldNumber = 16,
    kUserIdFieldNumber = 17,
    kCreatedAtFieldNumber = 2,
    kModifiedAtFieldNumber = 3,
    kWorkerFieldNumber = 6,
    kInputSourceFieldNumber = 8,
    kAiAssistantFieldNumber = 10,
    kReviewFieldNumber = 11,
    kStatusFieldNumber = 12,
    kAiAssistParamsFieldNumber = 14,
    kVisibilityFieldNumber = 15,
    kTypeFieldNumber = 4,
    kSampleMsFieldNumber = 9,
  };
  // repeated string concept_ids = 7;
  int concept_ids_size() const;
  private:
  int _internal_concept_ids_size() const;
  public:
  void clear_concept_ids();
  const std::string& concept_ids(int index) const;
  std::string* mutable_concept_ids(int index);
  void set_concept_ids(int index, const std::string& value);
  void set_concept_ids(int index, std::string&& value);
  void set_concept_ids(int index, const char* value);
  void set_concept_ids(int index, const char* value, size_t size);
  std::string* add_concept_ids();
  void add_concept_ids(const std::string& value);
  void add_concept_ids(std::string&& value);
  void add_concept_ids(const char* value);
  void add_concept_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& concept_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_concept_ids();
  private:
  const std::string& _internal_concept_ids(int index) const;
  std::string* _internal_add_concept_ids();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string name = 13;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string app_id = 16;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string user_id = 17;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .google.protobuf.Timestamp created_at = 2;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .google.protobuf.Timestamp modified_at = 3;
  bool has_modified_at() const;
  private:
  bool _internal_has_modified_at() const;
  public:
  void clear_modified_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified_at();
  void set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified_at();
  public:

  // .clarifai.api.TaskWorker worker = 6;
  bool has_worker() const;
  private:
  bool _internal_has_worker() const;
  public:
  void clear_worker();
  const ::clarifai::api::TaskWorker& worker() const;
  ::clarifai::api::TaskWorker* release_worker();
  ::clarifai::api::TaskWorker* mutable_worker();
  void set_allocated_worker(::clarifai::api::TaskWorker* worker);
  private:
  const ::clarifai::api::TaskWorker& _internal_worker() const;
  ::clarifai::api::TaskWorker* _internal_mutable_worker();
  public:

  // .clarifai.api.TaskInputSource input_source = 8;
  bool has_input_source() const;
  private:
  bool _internal_has_input_source() const;
  public:
  void clear_input_source();
  const ::clarifai::api::TaskInputSource& input_source() const;
  ::clarifai::api::TaskInputSource* release_input_source();
  ::clarifai::api::TaskInputSource* mutable_input_source();
  void set_allocated_input_source(::clarifai::api::TaskInputSource* input_source);
  private:
  const ::clarifai::api::TaskInputSource& _internal_input_source() const;
  ::clarifai::api::TaskInputSource* _internal_mutable_input_source();
  public:

  // .clarifai.api.TaskAIAssistant ai_assistant = 10;
  bool has_ai_assistant() const;
  private:
  bool _internal_has_ai_assistant() const;
  public:
  void clear_ai_assistant();
  const ::clarifai::api::TaskAIAssistant& ai_assistant() const;
  ::clarifai::api::TaskAIAssistant* release_ai_assistant();
  ::clarifai::api::TaskAIAssistant* mutable_ai_assistant();
  void set_allocated_ai_assistant(::clarifai::api::TaskAIAssistant* ai_assistant);
  private:
  const ::clarifai::api::TaskAIAssistant& _internal_ai_assistant() const;
  ::clarifai::api::TaskAIAssistant* _internal_mutable_ai_assistant();
  public:

  // .clarifai.api.TaskReview review = 11;
  bool has_review() const;
  private:
  bool _internal_has_review() const;
  public:
  void clear_review();
  const ::clarifai::api::TaskReview& review() const;
  ::clarifai::api::TaskReview* release_review();
  ::clarifai::api::TaskReview* mutable_review();
  void set_allocated_review(::clarifai::api::TaskReview* review);
  private:
  const ::clarifai::api::TaskReview& _internal_review() const;
  ::clarifai::api::TaskReview* _internal_mutable_review();
  public:

  // .clarifai.api.status.Status status = 12;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // .clarifai.api.AiAssistParameters ai_assist_params = 14;
  bool has_ai_assist_params() const;
  private:
  bool _internal_has_ai_assist_params() const;
  public:
  void clear_ai_assist_params();
  const ::clarifai::api::AiAssistParameters& ai_assist_params() const;
  ::clarifai::api::AiAssistParameters* release_ai_assist_params();
  ::clarifai::api::AiAssistParameters* mutable_ai_assist_params();
  void set_allocated_ai_assist_params(::clarifai::api::AiAssistParameters* ai_assist_params);
  private:
  const ::clarifai::api::AiAssistParameters& _internal_ai_assist_params() const;
  ::clarifai::api::AiAssistParameters* _internal_mutable_ai_assist_params();
  public:

  // .clarifai.api.Visibility visibility = 15;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  const ::clarifai::api::Visibility& visibility() const;
  ::clarifai::api::Visibility* release_visibility();
  ::clarifai::api::Visibility* mutable_visibility();
  void set_allocated_visibility(::clarifai::api::Visibility* visibility);
  private:
  const ::clarifai::api::Visibility& _internal_visibility() const;
  ::clarifai::api::Visibility* _internal_mutable_visibility();
  public:

  // .clarifai.api.Task.TaskType type = 4;
  void clear_type();
  ::clarifai::api::Task_TaskType type() const;
  void set_type(::clarifai::api::Task_TaskType value);
  private:
  ::clarifai::api::Task_TaskType _internal_type() const;
  void _internal_set_type(::clarifai::api::Task_TaskType value);
  public:

  // uint32 sample_ms = 9;
  void clear_sample_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_ms() const;
  void set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_ms() const;
  void _internal_set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Task)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> concept_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_at_;
  ::clarifai::api::TaskWorker* worker_;
  ::clarifai::api::TaskInputSource* input_source_;
  ::clarifai::api::TaskAIAssistant* ai_assistant_;
  ::clarifai::api::TaskReview* review_;
  ::clarifai::api::status::Status* status_;
  ::clarifai::api::AiAssistParameters* ai_assist_params_;
  ::clarifai::api::Visibility* visibility_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AiAssistParameters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.AiAssistParameters) */ {
 public:
  AiAssistParameters();
  virtual ~AiAssistParameters();

  AiAssistParameters(const AiAssistParameters& from);
  AiAssistParameters(AiAssistParameters&& from) noexcept
    : AiAssistParameters() {
    *this = ::std::move(from);
  }

  inline AiAssistParameters& operator=(const AiAssistParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline AiAssistParameters& operator=(AiAssistParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AiAssistParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AiAssistParameters* internal_default_instance() {
    return reinterpret_cast<const AiAssistParameters*>(
               &_AiAssistParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(AiAssistParameters& a, AiAssistParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(AiAssistParameters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AiAssistParameters* New() const final {
    return CreateMaybeMessage<AiAssistParameters>(nullptr);
  }

  AiAssistParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AiAssistParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AiAssistParameters& from);
  void MergeFrom(const AiAssistParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AiAssistParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.AiAssistParameters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConceptRelationIdsFieldNumber = 3,
    kMinThresholdFieldNumber = 1,
    kMaxThresholdFieldNumber = 2,
  };
  // repeated string concept_relation_ids = 3;
  int concept_relation_ids_size() const;
  private:
  int _internal_concept_relation_ids_size() const;
  public:
  void clear_concept_relation_ids();
  const std::string& concept_relation_ids(int index) const;
  std::string* mutable_concept_relation_ids(int index);
  void set_concept_relation_ids(int index, const std::string& value);
  void set_concept_relation_ids(int index, std::string&& value);
  void set_concept_relation_ids(int index, const char* value);
  void set_concept_relation_ids(int index, const char* value, size_t size);
  std::string* add_concept_relation_ids();
  void add_concept_relation_ids(const std::string& value);
  void add_concept_relation_ids(std::string&& value);
  void add_concept_relation_ids(const char* value);
  void add_concept_relation_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& concept_relation_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_concept_relation_ids();
  private:
  const std::string& _internal_concept_relation_ids(int index) const;
  std::string* _internal_add_concept_relation_ids();
  public:

  // float min_threshold = 1;
  void clear_min_threshold();
  float min_threshold() const;
  void set_min_threshold(float value);
  private:
  float _internal_min_threshold() const;
  void _internal_set_min_threshold(float value);
  public:

  // float max_threshold = 2;
  void clear_max_threshold();
  float max_threshold() const;
  void set_max_threshold(float value);
  private:
  float _internal_max_threshold() const;
  void _internal_set_max_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.AiAssistParameters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> concept_relation_ids_;
  float min_threshold_;
  float max_threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TaskWorker :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TaskWorker) */ {
 public:
  TaskWorker();
  virtual ~TaskWorker();

  TaskWorker(const TaskWorker& from);
  TaskWorker(TaskWorker&& from) noexcept
    : TaskWorker() {
    *this = ::std::move(from);
  }

  inline TaskWorker& operator=(const TaskWorker& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskWorker& operator=(TaskWorker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskWorker& default_instance();

  enum StrategyInfoCase {
    kPartitionedStrategyInfo = 3,
    STRATEGY_INFO_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskWorker* internal_default_instance() {
    return reinterpret_cast<const TaskWorker*>(
               &_TaskWorker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(TaskWorker& a, TaskWorker& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskWorker* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskWorker* New() const final {
    return CreateMaybeMessage<TaskWorker>(nullptr);
  }

  TaskWorker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskWorker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskWorker& from);
  void MergeFrom(const TaskWorker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskWorker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TaskWorker";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TaskWorker_TaskWorkerStrategy TaskWorkerStrategy;
  static constexpr TaskWorkerStrategy WORKER_STRATEGY_NOT_SET =
    TaskWorker_TaskWorkerStrategy_WORKER_STRATEGY_NOT_SET;
  static constexpr TaskWorkerStrategy PARTITIONED =
    TaskWorker_TaskWorkerStrategy_PARTITIONED;
  static constexpr TaskWorkerStrategy FULL =
    TaskWorker_TaskWorkerStrategy_FULL;
  static inline bool TaskWorkerStrategy_IsValid(int value) {
    return TaskWorker_TaskWorkerStrategy_IsValid(value);
  }
  static constexpr TaskWorkerStrategy TaskWorkerStrategy_MIN =
    TaskWorker_TaskWorkerStrategy_TaskWorkerStrategy_MIN;
  static constexpr TaskWorkerStrategy TaskWorkerStrategy_MAX =
    TaskWorker_TaskWorkerStrategy_TaskWorkerStrategy_MAX;
  static constexpr int TaskWorkerStrategy_ARRAYSIZE =
    TaskWorker_TaskWorkerStrategy_TaskWorkerStrategy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TaskWorkerStrategy_descriptor() {
    return TaskWorker_TaskWorkerStrategy_descriptor();
  }
  template<typename T>
  static inline const std::string& TaskWorkerStrategy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TaskWorkerStrategy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TaskWorkerStrategy_Name.");
    return TaskWorker_TaskWorkerStrategy_Name(enum_t_value);
  }
  static inline bool TaskWorkerStrategy_Parse(const std::string& name,
      TaskWorkerStrategy* value) {
    return TaskWorker_TaskWorkerStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 2,
    kStrategyFieldNumber = 1,
    kPartitionedStrategyInfoFieldNumber = 3,
  };
  // repeated string user_ids = 2;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // .clarifai.api.TaskWorker.TaskWorkerStrategy strategy = 1;
  void clear_strategy();
  ::clarifai::api::TaskWorker_TaskWorkerStrategy strategy() const;
  void set_strategy(::clarifai::api::TaskWorker_TaskWorkerStrategy value);
  private:
  ::clarifai::api::TaskWorker_TaskWorkerStrategy _internal_strategy() const;
  void _internal_set_strategy(::clarifai::api::TaskWorker_TaskWorkerStrategy value);
  public:

  // .clarifai.api.TaskWorkerPartitionedStrategyInfo partitioned_strategy_info = 3;
  bool has_partitioned_strategy_info() const;
  private:
  bool _internal_has_partitioned_strategy_info() const;
  public:
  void clear_partitioned_strategy_info();
  const ::clarifai::api::TaskWorkerPartitionedStrategyInfo& partitioned_strategy_info() const;
  ::clarifai::api::TaskWorkerPartitionedStrategyInfo* release_partitioned_strategy_info();
  ::clarifai::api::TaskWorkerPartitionedStrategyInfo* mutable_partitioned_strategy_info();
  void set_allocated_partitioned_strategy_info(::clarifai::api::TaskWorkerPartitionedStrategyInfo* partitioned_strategy_info);
  private:
  const ::clarifai::api::TaskWorkerPartitionedStrategyInfo& _internal_partitioned_strategy_info() const;
  ::clarifai::api::TaskWorkerPartitionedStrategyInfo* _internal_mutable_partitioned_strategy_info();
  public:

  void clear_strategy_info();
  StrategyInfoCase strategy_info_case() const;
  // @@protoc_insertion_point(class_scope:clarifai.api.TaskWorker)
 private:
  class _Internal;
  void set_has_partitioned_strategy_info();

  inline bool has_strategy_info() const;
  inline void clear_has_strategy_info();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  int strategy_;
  union StrategyInfoUnion {
    StrategyInfoUnion() {}
    ::clarifai::api::TaskWorkerPartitionedStrategyInfo* partitioned_strategy_info_;
  } strategy_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TaskWorkerPartitionedStrategyInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TaskWorkerPartitionedStrategyInfo) */ {
 public:
  TaskWorkerPartitionedStrategyInfo();
  virtual ~TaskWorkerPartitionedStrategyInfo();

  TaskWorkerPartitionedStrategyInfo(const TaskWorkerPartitionedStrategyInfo& from);
  TaskWorkerPartitionedStrategyInfo(TaskWorkerPartitionedStrategyInfo&& from) noexcept
    : TaskWorkerPartitionedStrategyInfo() {
    *this = ::std::move(from);
  }

  inline TaskWorkerPartitionedStrategyInfo& operator=(const TaskWorkerPartitionedStrategyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskWorkerPartitionedStrategyInfo& operator=(TaskWorkerPartitionedStrategyInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskWorkerPartitionedStrategyInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskWorkerPartitionedStrategyInfo* internal_default_instance() {
    return reinterpret_cast<const TaskWorkerPartitionedStrategyInfo*>(
               &_TaskWorkerPartitionedStrategyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(TaskWorkerPartitionedStrategyInfo& a, TaskWorkerPartitionedStrategyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskWorkerPartitionedStrategyInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskWorkerPartitionedStrategyInfo* New() const final {
    return CreateMaybeMessage<TaskWorkerPartitionedStrategyInfo>(nullptr);
  }

  TaskWorkerPartitionedStrategyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskWorkerPartitionedStrategyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskWorkerPartitionedStrategyInfo& from);
  void MergeFrom(const TaskWorkerPartitionedStrategyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskWorkerPartitionedStrategyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TaskWorkerPartitionedStrategyInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategy;
  static constexpr TaskWorkerPartitionedStrategy PARTITIONED_WORKER_STRATEGY_NOT_SET =
    TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_PARTITIONED_WORKER_STRATEGY_NOT_SET;
  static constexpr TaskWorkerPartitionedStrategy EVENLY =
    TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_EVENLY;
  static constexpr TaskWorkerPartitionedStrategy WEIGHTED =
    TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_WEIGHTED;
  static inline bool TaskWorkerPartitionedStrategy_IsValid(int value) {
    return TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_IsValid(value);
  }
  static constexpr TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategy_MIN =
    TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_TaskWorkerPartitionedStrategy_MIN;
  static constexpr TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategy_MAX =
    TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_TaskWorkerPartitionedStrategy_MAX;
  static constexpr int TaskWorkerPartitionedStrategy_ARRAYSIZE =
    TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_TaskWorkerPartitionedStrategy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TaskWorkerPartitionedStrategy_descriptor() {
    return TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_descriptor();
  }
  template<typename T>
  static inline const std::string& TaskWorkerPartitionedStrategy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TaskWorkerPartitionedStrategy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TaskWorkerPartitionedStrategy_Name.");
    return TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_Name(enum_t_value);
  }
  static inline bool TaskWorkerPartitionedStrategy_Parse(const std::string& name,
      TaskWorkerPartitionedStrategy* value) {
    return TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 3,
    kTypeFieldNumber = 1,
    kWorkersPerInputFieldNumber = 2,
  };
  // .google.protobuf.Struct weights = 3;
  bool has_weights() const;
  private:
  bool _internal_has_weights() const;
  public:
  void clear_weights();
  const PROTOBUF_NAMESPACE_ID::Struct& weights() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_weights();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_weights();
  void set_allocated_weights(PROTOBUF_NAMESPACE_ID::Struct* weights);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_weights() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_weights();
  public:

  // .clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy type = 1;
  void clear_type();
  ::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy type() const;
  void set_type(::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy value);
  private:
  ::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy _internal_type() const;
  void _internal_set_type(::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy value);
  public:

  // int32 workers_per_input = 2;
  void clear_workers_per_input();
  ::PROTOBUF_NAMESPACE_ID::int32 workers_per_input() const;
  void set_workers_per_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_workers_per_input() const;
  void _internal_set_workers_per_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.TaskWorkerPartitionedStrategyInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Struct* weights_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 workers_per_input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TaskInputSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TaskInputSource) */ {
 public:
  TaskInputSource();
  virtual ~TaskInputSource();

  TaskInputSource(const TaskInputSource& from);
  TaskInputSource(TaskInputSource&& from) noexcept
    : TaskInputSource() {
    *this = ::std::move(from);
  }

  inline TaskInputSource& operator=(const TaskInputSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskInputSource& operator=(TaskInputSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskInputSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskInputSource* internal_default_instance() {
    return reinterpret_cast<const TaskInputSource*>(
               &_TaskInputSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(TaskInputSource& a, TaskInputSource& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskInputSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskInputSource* New() const final {
    return CreateMaybeMessage<TaskInputSource>(nullptr);
  }

  TaskInputSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskInputSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskInputSource& from);
  void MergeFrom(const TaskInputSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskInputSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TaskInputSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TaskInputSource_TaskInputSourceType TaskInputSourceType;
  static constexpr TaskInputSourceType INPUT_SOURCE_TYPE_NOT_SET =
    TaskInputSource_TaskInputSourceType_INPUT_SOURCE_TYPE_NOT_SET;
  static constexpr TaskInputSourceType ALL_INPUTS =
    TaskInputSource_TaskInputSourceType_ALL_INPUTS;
  static constexpr TaskInputSourceType SAVED_SEARCH =
    TaskInputSource_TaskInputSourceType_SAVED_SEARCH;
  static inline bool TaskInputSourceType_IsValid(int value) {
    return TaskInputSource_TaskInputSourceType_IsValid(value);
  }
  static constexpr TaskInputSourceType TaskInputSourceType_MIN =
    TaskInputSource_TaskInputSourceType_TaskInputSourceType_MIN;
  static constexpr TaskInputSourceType TaskInputSourceType_MAX =
    TaskInputSource_TaskInputSourceType_TaskInputSourceType_MAX;
  static constexpr int TaskInputSourceType_ARRAYSIZE =
    TaskInputSource_TaskInputSourceType_TaskInputSourceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TaskInputSourceType_descriptor() {
    return TaskInputSource_TaskInputSourceType_descriptor();
  }
  template<typename T>
  static inline const std::string& TaskInputSourceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TaskInputSourceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TaskInputSourceType_Name.");
    return TaskInputSource_TaskInputSourceType_Name(enum_t_value);
  }
  static inline bool TaskInputSourceType_Parse(const std::string& name,
      TaskInputSourceType* value) {
    return TaskInputSource_TaskInputSourceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .clarifai.api.TaskInputSource.TaskInputSourceType type = 1;
  void clear_type();
  ::clarifai::api::TaskInputSource_TaskInputSourceType type() const;
  void set_type(::clarifai::api::TaskInputSource_TaskInputSourceType value);
  private:
  ::clarifai::api::TaskInputSource_TaskInputSourceType _internal_type() const;
  void _internal_set_type(::clarifai::api::TaskInputSource_TaskInputSourceType value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.TaskInputSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TaskReview :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TaskReview) */ {
 public:
  TaskReview();
  virtual ~TaskReview();

  TaskReview(const TaskReview& from);
  TaskReview(TaskReview&& from) noexcept
    : TaskReview() {
    *this = ::std::move(from);
  }

  inline TaskReview& operator=(const TaskReview& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskReview& operator=(TaskReview&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskReview& default_instance();

  enum StrategyInfoCase {
    kManualStrategyInfo = 3,
    kConsensusStrategyInfo = 4,
    STRATEGY_INFO_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskReview* internal_default_instance() {
    return reinterpret_cast<const TaskReview*>(
               &_TaskReview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(TaskReview& a, TaskReview& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskReview* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskReview* New() const final {
    return CreateMaybeMessage<TaskReview>(nullptr);
  }

  TaskReview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskReview>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskReview& from);
  void MergeFrom(const TaskReview& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskReview* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TaskReview";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TaskReview_TaskReviewStrategy TaskReviewStrategy;
  static constexpr TaskReviewStrategy TASK_REVIEW_STRATEGY_NOT_SET =
    TaskReview_TaskReviewStrategy_TASK_REVIEW_STRATEGY_NOT_SET;
  static constexpr TaskReviewStrategy NONE =
    TaskReview_TaskReviewStrategy_NONE;
  static constexpr TaskReviewStrategy MANUAL =
    TaskReview_TaskReviewStrategy_MANUAL;
  static constexpr TaskReviewStrategy CONSENSUS =
    TaskReview_TaskReviewStrategy_CONSENSUS;
  static inline bool TaskReviewStrategy_IsValid(int value) {
    return TaskReview_TaskReviewStrategy_IsValid(value);
  }
  static constexpr TaskReviewStrategy TaskReviewStrategy_MIN =
    TaskReview_TaskReviewStrategy_TaskReviewStrategy_MIN;
  static constexpr TaskReviewStrategy TaskReviewStrategy_MAX =
    TaskReview_TaskReviewStrategy_TaskReviewStrategy_MAX;
  static constexpr int TaskReviewStrategy_ARRAYSIZE =
    TaskReview_TaskReviewStrategy_TaskReviewStrategy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TaskReviewStrategy_descriptor() {
    return TaskReview_TaskReviewStrategy_descriptor();
  }
  template<typename T>
  static inline const std::string& TaskReviewStrategy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TaskReviewStrategy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TaskReviewStrategy_Name.");
    return TaskReview_TaskReviewStrategy_Name(enum_t_value);
  }
  static inline bool TaskReviewStrategy_Parse(const std::string& name,
      TaskReviewStrategy* value) {
    return TaskReview_TaskReviewStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 2,
    kStrategyFieldNumber = 1,
    kManualStrategyInfoFieldNumber = 3,
    kConsensusStrategyInfoFieldNumber = 4,
  };
  // repeated string user_ids = 2;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // .clarifai.api.TaskReview.TaskReviewStrategy strategy = 1;
  void clear_strategy();
  ::clarifai::api::TaskReview_TaskReviewStrategy strategy() const;
  void set_strategy(::clarifai::api::TaskReview_TaskReviewStrategy value);
  private:
  ::clarifai::api::TaskReview_TaskReviewStrategy _internal_strategy() const;
  void _internal_set_strategy(::clarifai::api::TaskReview_TaskReviewStrategy value);
  public:

  // .clarifai.api.TaskReviewManualStrategyInfo manual_strategy_info = 3;
  bool has_manual_strategy_info() const;
  private:
  bool _internal_has_manual_strategy_info() const;
  public:
  void clear_manual_strategy_info();
  const ::clarifai::api::TaskReviewManualStrategyInfo& manual_strategy_info() const;
  ::clarifai::api::TaskReviewManualStrategyInfo* release_manual_strategy_info();
  ::clarifai::api::TaskReviewManualStrategyInfo* mutable_manual_strategy_info();
  void set_allocated_manual_strategy_info(::clarifai::api::TaskReviewManualStrategyInfo* manual_strategy_info);
  private:
  const ::clarifai::api::TaskReviewManualStrategyInfo& _internal_manual_strategy_info() const;
  ::clarifai::api::TaskReviewManualStrategyInfo* _internal_mutable_manual_strategy_info();
  public:

  // .clarifai.api.TaskReviewConsensusStrategyInfo consensus_strategy_info = 4;
  bool has_consensus_strategy_info() const;
  private:
  bool _internal_has_consensus_strategy_info() const;
  public:
  void clear_consensus_strategy_info();
  const ::clarifai::api::TaskReviewConsensusStrategyInfo& consensus_strategy_info() const;
  ::clarifai::api::TaskReviewConsensusStrategyInfo* release_consensus_strategy_info();
  ::clarifai::api::TaskReviewConsensusStrategyInfo* mutable_consensus_strategy_info();
  void set_allocated_consensus_strategy_info(::clarifai::api::TaskReviewConsensusStrategyInfo* consensus_strategy_info);
  private:
  const ::clarifai::api::TaskReviewConsensusStrategyInfo& _internal_consensus_strategy_info() const;
  ::clarifai::api::TaskReviewConsensusStrategyInfo* _internal_mutable_consensus_strategy_info();
  public:

  void clear_strategy_info();
  StrategyInfoCase strategy_info_case() const;
  // @@protoc_insertion_point(class_scope:clarifai.api.TaskReview)
 private:
  class _Internal;
  void set_has_manual_strategy_info();
  void set_has_consensus_strategy_info();

  inline bool has_strategy_info() const;
  inline void clear_has_strategy_info();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  int strategy_;
  union StrategyInfoUnion {
    StrategyInfoUnion() {}
    ::clarifai::api::TaskReviewManualStrategyInfo* manual_strategy_info_;
    ::clarifai::api::TaskReviewConsensusStrategyInfo* consensus_strategy_info_;
  } strategy_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TaskReviewManualStrategyInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TaskReviewManualStrategyInfo) */ {
 public:
  TaskReviewManualStrategyInfo();
  virtual ~TaskReviewManualStrategyInfo();

  TaskReviewManualStrategyInfo(const TaskReviewManualStrategyInfo& from);
  TaskReviewManualStrategyInfo(TaskReviewManualStrategyInfo&& from) noexcept
    : TaskReviewManualStrategyInfo() {
    *this = ::std::move(from);
  }

  inline TaskReviewManualStrategyInfo& operator=(const TaskReviewManualStrategyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskReviewManualStrategyInfo& operator=(TaskReviewManualStrategyInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskReviewManualStrategyInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskReviewManualStrategyInfo* internal_default_instance() {
    return reinterpret_cast<const TaskReviewManualStrategyInfo*>(
               &_TaskReviewManualStrategyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(TaskReviewManualStrategyInfo& a, TaskReviewManualStrategyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskReviewManualStrategyInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskReviewManualStrategyInfo* New() const final {
    return CreateMaybeMessage<TaskReviewManualStrategyInfo>(nullptr);
  }

  TaskReviewManualStrategyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskReviewManualStrategyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskReviewManualStrategyInfo& from);
  void MergeFrom(const TaskReviewManualStrategyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskReviewManualStrategyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TaskReviewManualStrategyInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplePercentageFieldNumber = 1,
  };
  // float sample_percentage = 1;
  void clear_sample_percentage();
  float sample_percentage() const;
  void set_sample_percentage(float value);
  private:
  float _internal_sample_percentage() const;
  void _internal_set_sample_percentage(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.TaskReviewManualStrategyInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float sample_percentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TaskReviewConsensusStrategyInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TaskReviewConsensusStrategyInfo) */ {
 public:
  TaskReviewConsensusStrategyInfo();
  virtual ~TaskReviewConsensusStrategyInfo();

  TaskReviewConsensusStrategyInfo(const TaskReviewConsensusStrategyInfo& from);
  TaskReviewConsensusStrategyInfo(TaskReviewConsensusStrategyInfo&& from) noexcept
    : TaskReviewConsensusStrategyInfo() {
    *this = ::std::move(from);
  }

  inline TaskReviewConsensusStrategyInfo& operator=(const TaskReviewConsensusStrategyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskReviewConsensusStrategyInfo& operator=(TaskReviewConsensusStrategyInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskReviewConsensusStrategyInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskReviewConsensusStrategyInfo* internal_default_instance() {
    return reinterpret_cast<const TaskReviewConsensusStrategyInfo*>(
               &_TaskReviewConsensusStrategyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(TaskReviewConsensusStrategyInfo& a, TaskReviewConsensusStrategyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskReviewConsensusStrategyInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskReviewConsensusStrategyInfo* New() const final {
    return CreateMaybeMessage<TaskReviewConsensusStrategyInfo>(nullptr);
  }

  TaskReviewConsensusStrategyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskReviewConsensusStrategyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskReviewConsensusStrategyInfo& from);
  void MergeFrom(const TaskReviewConsensusStrategyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskReviewConsensusStrategyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TaskReviewConsensusStrategyInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApprovalThresholdFieldNumber = 2,
  };
  // uint32 approval_threshold = 2;
  void clear_approval_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint32 approval_threshold() const;
  void set_approval_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_approval_threshold() const;
  void _internal_set_approval_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.TaskReviewConsensusStrategyInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 approval_threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TaskAIAssistant :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TaskAIAssistant) */ {
 public:
  TaskAIAssistant();
  virtual ~TaskAIAssistant();

  TaskAIAssistant(const TaskAIAssistant& from);
  TaskAIAssistant(TaskAIAssistant&& from) noexcept
    : TaskAIAssistant() {
    *this = ::std::move(from);
  }

  inline TaskAIAssistant& operator=(const TaskAIAssistant& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskAIAssistant& operator=(TaskAIAssistant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskAIAssistant& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskAIAssistant* internal_default_instance() {
    return reinterpret_cast<const TaskAIAssistant*>(
               &_TaskAIAssistant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(TaskAIAssistant& a, TaskAIAssistant& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskAIAssistant* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskAIAssistant* New() const final {
    return CreateMaybeMessage<TaskAIAssistant>(nullptr);
  }

  TaskAIAssistant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskAIAssistant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskAIAssistant& from);
  void MergeFrom(const TaskAIAssistant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskAIAssistant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TaskAIAssistant";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowIdFieldNumber = 1,
  };
  // string workflow_id = 1;
  void clear_workflow_id();
  const std::string& workflow_id() const;
  void set_workflow_id(const std::string& value);
  void set_workflow_id(std::string&& value);
  void set_workflow_id(const char* value);
  void set_workflow_id(const char* value, size_t size);
  std::string* mutable_workflow_id();
  std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.TaskAIAssistant)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class TaskStatusCountPerUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.TaskStatusCountPerUser) */ {
 public:
  TaskStatusCountPerUser();
  virtual ~TaskStatusCountPerUser();

  TaskStatusCountPerUser(const TaskStatusCountPerUser& from);
  TaskStatusCountPerUser(TaskStatusCountPerUser&& from) noexcept
    : TaskStatusCountPerUser() {
    *this = ::std::move(from);
  }

  inline TaskStatusCountPerUser& operator=(const TaskStatusCountPerUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskStatusCountPerUser& operator=(TaskStatusCountPerUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskStatusCountPerUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskStatusCountPerUser* internal_default_instance() {
    return reinterpret_cast<const TaskStatusCountPerUser*>(
               &_TaskStatusCountPerUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(TaskStatusCountPerUser& a, TaskStatusCountPerUser& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskStatusCountPerUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskStatusCountPerUser* New() const final {
    return CreateMaybeMessage<TaskStatusCountPerUser>(nullptr);
  }

  TaskStatusCountPerUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskStatusCountPerUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskStatusCountPerUser& from);
  void MergeFrom(const TaskStatusCountPerUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskStatusCountPerUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.TaskStatusCountPerUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kPendingFieldNumber = 2,
    kAwaitingReviewFieldNumber = 3,
    kSuccessFieldNumber = 4,
    kReviewDeniedFieldNumber = 5,
    kAwaitingConsensusReviewFieldNumber = 6,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // uint32 pending = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_pending();
  ::PROTOBUF_NAMESPACE_ID::uint32 pending() const;
  void set_pending(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pending() const;
  void _internal_set_pending(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 awaiting_review = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_awaiting_review();
  ::PROTOBUF_NAMESPACE_ID::uint32 awaiting_review() const;
  void set_awaiting_review(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_awaiting_review() const;
  void _internal_set_awaiting_review(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 success = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_success();
  ::PROTOBUF_NAMESPACE_ID::uint32 success() const;
  void set_success(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_success() const;
  void _internal_set_success(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 review_denied = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_review_denied();
  ::PROTOBUF_NAMESPACE_ID::uint32 review_denied() const;
  void set_review_denied(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_review_denied() const;
  void _internal_set_review_denied(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 awaiting_consensus_review = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
  void clear_awaiting_consensus_review();
  ::PROTOBUF_NAMESPACE_ID::uint32 awaiting_consensus_review() const;
  void set_awaiting_consensus_review(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_awaiting_consensus_review() const;
  void _internal_set_awaiting_consensus_review(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.TaskStatusCountPerUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_;
  ::PROTOBUF_NAMESPACE_ID::uint32 awaiting_review_;
  ::PROTOBUF_NAMESPACE_ID::uint32 success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 review_denied_;
  ::PROTOBUF_NAMESPACE_ID::uint32 awaiting_consensus_review_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Collector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Collector) */ {
 public:
  Collector();
  virtual ~Collector();

  Collector(const Collector& from);
  Collector(Collector&& from) noexcept
    : Collector() {
    *this = ::std::move(from);
  }

  inline Collector& operator=(const Collector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collector& operator=(Collector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collector* internal_default_instance() {
    return reinterpret_cast<const Collector*>(
               &_Collector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(Collector& a, Collector& b) {
    a.Swap(&b);
  }
  inline void Swap(Collector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collector* New() const final {
    return CreateMaybeMessage<Collector>(nullptr);
  }

  Collector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collector& from);
  void MergeFrom(const Collector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Collector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kPreQueueWorkflowIdFieldNumber = 4,
    kPostQueueWorkflowIdFieldNumber = 5,
    kCreatedAtFieldNumber = 3,
    kCollectorSourceFieldNumber = 6,
    kStatusFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string pre_queue_workflow_id = 4;
  void clear_pre_queue_workflow_id();
  const std::string& pre_queue_workflow_id() const;
  void set_pre_queue_workflow_id(const std::string& value);
  void set_pre_queue_workflow_id(std::string&& value);
  void set_pre_queue_workflow_id(const char* value);
  void set_pre_queue_workflow_id(const char* value, size_t size);
  std::string* mutable_pre_queue_workflow_id();
  std::string* release_pre_queue_workflow_id();
  void set_allocated_pre_queue_workflow_id(std::string* pre_queue_workflow_id);
  private:
  const std::string& _internal_pre_queue_workflow_id() const;
  void _internal_set_pre_queue_workflow_id(const std::string& value);
  std::string* _internal_mutable_pre_queue_workflow_id();
  public:

  // string post_queue_workflow_id = 5;
  void clear_post_queue_workflow_id();
  const std::string& post_queue_workflow_id() const;
  void set_post_queue_workflow_id(const std::string& value);
  void set_post_queue_workflow_id(std::string&& value);
  void set_post_queue_workflow_id(const char* value);
  void set_post_queue_workflow_id(const char* value, size_t size);
  std::string* mutable_post_queue_workflow_id();
  std::string* release_post_queue_workflow_id();
  void set_allocated_post_queue_workflow_id(std::string* post_queue_workflow_id);
  private:
  const std::string& _internal_post_queue_workflow_id() const;
  void _internal_set_post_queue_workflow_id(const std::string& value);
  std::string* _internal_mutable_post_queue_workflow_id();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:

  // .clarifai.api.CollectorSource collector_source = 6;
  bool has_collector_source() const;
  private:
  bool _internal_has_collector_source() const;
  public:
  void clear_collector_source();
  const ::clarifai::api::CollectorSource& collector_source() const;
  ::clarifai::api::CollectorSource* release_collector_source();
  ::clarifai::api::CollectorSource* mutable_collector_source();
  void set_allocated_collector_source(::clarifai::api::CollectorSource* collector_source);
  private:
  const ::clarifai::api::CollectorSource& _internal_collector_source() const;
  ::clarifai::api::CollectorSource* _internal_mutable_collector_source();
  public:

  // .clarifai.api.status.Status status = 7;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::clarifai::api::status::Status& status() const;
  ::clarifai::api::status::Status* release_status();
  ::clarifai::api::status::Status* mutable_status();
  void set_allocated_status(::clarifai::api::status::Status* status);
  private:
  const ::clarifai::api::status::Status& _internal_status() const;
  ::clarifai::api::status::Status* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Collector)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre_queue_workflow_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_queue_workflow_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::clarifai::api::CollectorSource* collector_source_;
  ::clarifai::api::status::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class CollectorSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.CollectorSource) */ {
 public:
  CollectorSource();
  virtual ~CollectorSource();

  CollectorSource(const CollectorSource& from);
  CollectorSource(CollectorSource&& from) noexcept
    : CollectorSource() {
    *this = ::std::move(from);
  }

  inline CollectorSource& operator=(const CollectorSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectorSource& operator=(CollectorSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectorSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectorSource* internal_default_instance() {
    return reinterpret_cast<const CollectorSource*>(
               &_CollectorSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CollectorSource& a, CollectorSource& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectorSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectorSource* New() const final {
    return CreateMaybeMessage<CollectorSource>(nullptr);
  }

  CollectorSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectorSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectorSource& from);
  void MergeFrom(const CollectorSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectorSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.CollectorSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiPostModelOutputsCollectorSourceFieldNumber = 2,
  };
  // .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
  bool has_api_post_model_outputs_collector_source() const;
  private:
  bool _internal_has_api_post_model_outputs_collector_source() const;
  public:
  void clear_api_post_model_outputs_collector_source();
  const ::clarifai::api::APIPostModelOutputsCollectorSource& api_post_model_outputs_collector_source() const;
  ::clarifai::api::APIPostModelOutputsCollectorSource* release_api_post_model_outputs_collector_source();
  ::clarifai::api::APIPostModelOutputsCollectorSource* mutable_api_post_model_outputs_collector_source();
  void set_allocated_api_post_model_outputs_collector_source(::clarifai::api::APIPostModelOutputsCollectorSource* api_post_model_outputs_collector_source);
  private:
  const ::clarifai::api::APIPostModelOutputsCollectorSource& _internal_api_post_model_outputs_collector_source() const;
  ::clarifai::api::APIPostModelOutputsCollectorSource* _internal_mutable_api_post_model_outputs_collector_source();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.CollectorSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::clarifai::api::APIPostModelOutputsCollectorSource* api_post_model_outputs_collector_source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class APIPostModelOutputsCollectorSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.APIPostModelOutputsCollectorSource) */ {
 public:
  APIPostModelOutputsCollectorSource();
  virtual ~APIPostModelOutputsCollectorSource();

  APIPostModelOutputsCollectorSource(const APIPostModelOutputsCollectorSource& from);
  APIPostModelOutputsCollectorSource(APIPostModelOutputsCollectorSource&& from) noexcept
    : APIPostModelOutputsCollectorSource() {
    *this = ::std::move(from);
  }

  inline APIPostModelOutputsCollectorSource& operator=(const APIPostModelOutputsCollectorSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline APIPostModelOutputsCollectorSource& operator=(APIPostModelOutputsCollectorSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const APIPostModelOutputsCollectorSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const APIPostModelOutputsCollectorSource* internal_default_instance() {
    return reinterpret_cast<const APIPostModelOutputsCollectorSource*>(
               &_APIPostModelOutputsCollectorSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(APIPostModelOutputsCollectorSource& a, APIPostModelOutputsCollectorSource& b) {
    a.Swap(&b);
  }
  inline void Swap(APIPostModelOutputsCollectorSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline APIPostModelOutputsCollectorSource* New() const final {
    return CreateMaybeMessage<APIPostModelOutputsCollectorSource>(nullptr);
  }

  APIPostModelOutputsCollectorSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<APIPostModelOutputsCollectorSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const APIPostModelOutputsCollectorSource& from);
  void MergeFrom(const APIPostModelOutputsCollectorSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APIPostModelOutputsCollectorSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.APIPostModelOutputsCollectorSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelUserIdFieldNumber = 1,
    kModelAppIdFieldNumber = 2,
    kModelIdFieldNumber = 3,
    kModelVersionIdFieldNumber = 4,
    kPostInputsKeyIdFieldNumber = 5,
  };
  // string model_user_id = 1;
  void clear_model_user_id();
  const std::string& model_user_id() const;
  void set_model_user_id(const std::string& value);
  void set_model_user_id(std::string&& value);
  void set_model_user_id(const char* value);
  void set_model_user_id(const char* value, size_t size);
  std::string* mutable_model_user_id();
  std::string* release_model_user_id();
  void set_allocated_model_user_id(std::string* model_user_id);
  private:
  const std::string& _internal_model_user_id() const;
  void _internal_set_model_user_id(const std::string& value);
  std::string* _internal_mutable_model_user_id();
  public:

  // string model_app_id = 2;
  void clear_model_app_id();
  const std::string& model_app_id() const;
  void set_model_app_id(const std::string& value);
  void set_model_app_id(std::string&& value);
  void set_model_app_id(const char* value);
  void set_model_app_id(const char* value, size_t size);
  std::string* mutable_model_app_id();
  std::string* release_model_app_id();
  void set_allocated_model_app_id(std::string* model_app_id);
  private:
  const std::string& _internal_model_app_id() const;
  void _internal_set_model_app_id(const std::string& value);
  std::string* _internal_mutable_model_app_id();
  public:

  // string model_id = 3;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string model_version_id = 4;
  void clear_model_version_id();
  const std::string& model_version_id() const;
  void set_model_version_id(const std::string& value);
  void set_model_version_id(std::string&& value);
  void set_model_version_id(const char* value);
  void set_model_version_id(const char* value, size_t size);
  std::string* mutable_model_version_id();
  std::string* release_model_version_id();
  void set_allocated_model_version_id(std::string* model_version_id);
  private:
  const std::string& _internal_model_version_id() const;
  void _internal_set_model_version_id(const std::string& value);
  std::string* _internal_mutable_model_version_id();
  public:

  // string post_inputs_key_id = 5;
  void clear_post_inputs_key_id();
  const std::string& post_inputs_key_id() const;
  void set_post_inputs_key_id(const std::string& value);
  void set_post_inputs_key_id(std::string&& value);
  void set_post_inputs_key_id(const char* value);
  void set_post_inputs_key_id(const char* value, size_t size);
  std::string* mutable_post_inputs_key_id();
  std::string* release_post_inputs_key_id();
  void set_allocated_post_inputs_key_id(std::string* post_inputs_key_id);
  private:
  const std::string& _internal_post_inputs_key_id() const;
  void _internal_set_post_inputs_key_id(const std::string& value);
  std::string* _internal_mutable_post_inputs_key_id();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.APIPostModelOutputsCollectorSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_inputs_key_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class StatValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.StatValue) */ {
 public:
  StatValue();
  virtual ~StatValue();

  StatValue(const StatValue& from);
  StatValue(StatValue&& from) noexcept
    : StatValue() {
    *this = ::std::move(from);
  }

  inline StatValue& operator=(const StatValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatValue& operator=(StatValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatValue* internal_default_instance() {
    return reinterpret_cast<const StatValue*>(
               &_StatValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(StatValue& a, StatValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StatValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatValue* New() const final {
    return CreateMaybeMessage<StatValue>(nullptr);
  }

  StatValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatValue& from);
  void MergeFrom(const StatValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.StatValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kTimeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated string tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.StatValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class StatValueAggregateResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.StatValueAggregateResult) */ {
 public:
  StatValueAggregateResult();
  virtual ~StatValueAggregateResult();

  StatValueAggregateResult(const StatValueAggregateResult& from);
  StatValueAggregateResult(StatValueAggregateResult&& from) noexcept
    : StatValueAggregateResult() {
    *this = ::std::move(from);
  }

  inline StatValueAggregateResult& operator=(const StatValueAggregateResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatValueAggregateResult& operator=(StatValueAggregateResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatValueAggregateResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatValueAggregateResult* internal_default_instance() {
    return reinterpret_cast<const StatValueAggregateResult*>(
               &_StatValueAggregateResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(StatValueAggregateResult& a, StatValueAggregateResult& b) {
    a.Swap(&b);
  }
  inline void Swap(StatValueAggregateResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatValueAggregateResult* New() const final {
    return CreateMaybeMessage<StatValueAggregateResult>(nullptr);
  }

  StatValueAggregateResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatValueAggregateResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatValueAggregateResult& from);
  void MergeFrom(const StatValueAggregateResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatValueAggregateResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.StatValueAggregateResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatValueAggregatesFieldNumber = 1,
    kStatValueAggregateQueryFieldNumber = 2,
  };
  // repeated .clarifai.api.StatValueAggregate stat_value_aggregates = 1;
  int stat_value_aggregates_size() const;
  private:
  int _internal_stat_value_aggregates_size() const;
  public:
  void clear_stat_value_aggregates();
  ::clarifai::api::StatValueAggregate* mutable_stat_value_aggregates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregate >*
      mutable_stat_value_aggregates();
  private:
  const ::clarifai::api::StatValueAggregate& _internal_stat_value_aggregates(int index) const;
  ::clarifai::api::StatValueAggregate* _internal_add_stat_value_aggregates();
  public:
  const ::clarifai::api::StatValueAggregate& stat_value_aggregates(int index) const;
  ::clarifai::api::StatValueAggregate* add_stat_value_aggregates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregate >&
      stat_value_aggregates() const;

  // .clarifai.api.StatValueAggregateQuery stat_value_aggregate_query = 2;
  bool has_stat_value_aggregate_query() const;
  private:
  bool _internal_has_stat_value_aggregate_query() const;
  public:
  void clear_stat_value_aggregate_query();
  const ::clarifai::api::StatValueAggregateQuery& stat_value_aggregate_query() const;
  ::clarifai::api::StatValueAggregateQuery* release_stat_value_aggregate_query();
  ::clarifai::api::StatValueAggregateQuery* mutable_stat_value_aggregate_query();
  void set_allocated_stat_value_aggregate_query(::clarifai::api::StatValueAggregateQuery* stat_value_aggregate_query);
  private:
  const ::clarifai::api::StatValueAggregateQuery& _internal_stat_value_aggregate_query() const;
  ::clarifai::api::StatValueAggregateQuery* _internal_mutable_stat_value_aggregate_query();
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.StatValueAggregateResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregate > stat_value_aggregates_;
  ::clarifai::api::StatValueAggregateQuery* stat_value_aggregate_query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class StatValueAggregate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.StatValueAggregate) */ {
 public:
  StatValueAggregate();
  virtual ~StatValueAggregate();

  StatValueAggregate(const StatValueAggregate& from);
  StatValueAggregate(StatValueAggregate&& from) noexcept
    : StatValueAggregate() {
    *this = ::std::move(from);
  }

  inline StatValueAggregate& operator=(const StatValueAggregate& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatValueAggregate& operator=(StatValueAggregate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatValueAggregate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatValueAggregate* internal_default_instance() {
    return reinterpret_cast<const StatValueAggregate*>(
               &_StatValueAggregate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(StatValueAggregate& a, StatValueAggregate& b) {
    a.Swap(&b);
  }
  inline void Swap(StatValueAggregate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatValueAggregate* New() const final {
    return CreateMaybeMessage<StatValueAggregate>(nullptr);
  }

  StatValueAggregate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatValueAggregate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatValueAggregate& from);
  void MergeFrom(const StatValueAggregate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatValueAggregate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.StatValueAggregate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 4,
    kTimeFieldNumber = 1,
    kCountFieldNumber = 3,
    kAggregateValueFieldNumber = 2,
  };
  // repeated string tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:

  // uint64 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float aggregate_value = 2;
  void clear_aggregate_value();
  float aggregate_value() const;
  void set_aggregate_value(float value);
  private:
  float _internal_aggregate_value() const;
  void _internal_set_aggregate_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.StatValueAggregate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  float aggregate_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class StatValueAggregateQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.StatValueAggregateQuery) */ {
 public:
  StatValueAggregateQuery();
  virtual ~StatValueAggregateQuery();

  StatValueAggregateQuery(const StatValueAggregateQuery& from);
  StatValueAggregateQuery(StatValueAggregateQuery&& from) noexcept
    : StatValueAggregateQuery() {
    *this = ::std::move(from);
  }

  inline StatValueAggregateQuery& operator=(const StatValueAggregateQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatValueAggregateQuery& operator=(StatValueAggregateQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatValueAggregateQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatValueAggregateQuery* internal_default_instance() {
    return reinterpret_cast<const StatValueAggregateQuery*>(
               &_StatValueAggregateQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(StatValueAggregateQuery& a, StatValueAggregateQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(StatValueAggregateQuery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatValueAggregateQuery* New() const final {
    return CreateMaybeMessage<StatValueAggregateQuery>(nullptr);
  }

  StatValueAggregateQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatValueAggregateQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatValueAggregateQuery& from);
  void MergeFrom(const StatValueAggregateQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatValueAggregateQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.StatValueAggregateQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
    kTagGroupsFieldNumber = 2,
    kStartTimeFieldNumber = 5,
    kEndTimeFieldNumber = 6,
    kStatValueAggTypeFieldNumber = 3,
    kStatTimeAggTypeFieldNumber = 4,
  };
  // repeated string tags = 1;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated string tag_groups = 2;
  int tag_groups_size() const;
  private:
  int _internal_tag_groups_size() const;
  public:
  void clear_tag_groups();
  const std::string& tag_groups(int index) const;
  std::string* mutable_tag_groups(int index);
  void set_tag_groups(int index, const std::string& value);
  void set_tag_groups(int index, std::string&& value);
  void set_tag_groups(int index, const char* value);
  void set_tag_groups(int index, const char* value, size_t size);
  std::string* add_tag_groups();
  void add_tag_groups(const std::string& value);
  void add_tag_groups(std::string&& value);
  void add_tag_groups(const char* value);
  void add_tag_groups(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tag_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tag_groups();
  private:
  const std::string& _internal_tag_groups(int index) const;
  std::string* _internal_add_tag_groups();
  public:

  // .google.protobuf.Timestamp start_time = 5;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:

  // .google.protobuf.Timestamp end_time = 6;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:

  // .clarifai.api.StatValueAggType stat_value_agg_type = 3;
  void clear_stat_value_agg_type();
  ::clarifai::api::StatValueAggType stat_value_agg_type() const;
  void set_stat_value_agg_type(::clarifai::api::StatValueAggType value);
  private:
  ::clarifai::api::StatValueAggType _internal_stat_value_agg_type() const;
  void _internal_set_stat_value_agg_type(::clarifai::api::StatValueAggType value);
  public:

  // .clarifai.api.StatTimeAggType stat_time_agg_type = 4;
  void clear_stat_time_agg_type();
  ::clarifai::api::StatTimeAggType stat_time_agg_type() const;
  void set_stat_time_agg_type(::clarifai::api::StatTimeAggType value);
  private:
  ::clarifai::api::StatTimeAggType _internal_stat_time_agg_type() const;
  void _internal_set_stat_time_agg_type(::clarifai::api::StatTimeAggType value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.StatValueAggregateQuery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tag_groups_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  int stat_value_agg_type_;
  int stat_time_agg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Visibility :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clarifai.api.Visibility) */ {
 public:
  Visibility();
  virtual ~Visibility();

  Visibility(const Visibility& from);
  Visibility(Visibility&& from) noexcept
    : Visibility() {
    *this = ::std::move(from);
  }

  inline Visibility& operator=(const Visibility& from) {
    CopyFrom(from);
    return *this;
  }
  inline Visibility& operator=(Visibility&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Visibility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visibility* internal_default_instance() {
    return reinterpret_cast<const Visibility*>(
               &_Visibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(Visibility& a, Visibility& b) {
    a.Swap(&b);
  }
  inline void Swap(Visibility* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Visibility* New() const final {
    return CreateMaybeMessage<Visibility>(nullptr);
  }

  Visibility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Visibility>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Visibility& from);
  void MergeFrom(const Visibility& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visibility* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clarifai.api.Visibility";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto);
    return ::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Visibility_Gettable Gettable;
  static constexpr Gettable UNKNOWN_VISIBILITY =
    Visibility_Gettable_UNKNOWN_VISIBILITY;
  static constexpr Gettable PRIVATE =
    Visibility_Gettable_PRIVATE;
  static constexpr Gettable ORG =
    Visibility_Gettable_ORG;
  static constexpr Gettable PUBLIC =
    Visibility_Gettable_PUBLIC;
  static inline bool Gettable_IsValid(int value) {
    return Visibility_Gettable_IsValid(value);
  }
  static constexpr Gettable Gettable_MIN =
    Visibility_Gettable_Gettable_MIN;
  static constexpr Gettable Gettable_MAX =
    Visibility_Gettable_Gettable_MAX;
  static constexpr int Gettable_ARRAYSIZE =
    Visibility_Gettable_Gettable_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Gettable_descriptor() {
    return Visibility_Gettable_descriptor();
  }
  template<typename T>
  static inline const std::string& Gettable_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gettable>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gettable_Name.");
    return Visibility_Gettable_Name(enum_t_value);
  }
  static inline bool Gettable_Parse(const std::string& name,
      Gettable* value) {
    return Visibility_Gettable_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGettableFieldNumber = 1,
  };
  // .clarifai.api.Visibility.Gettable gettable = 1;
  void clear_gettable();
  ::clarifai::api::Visibility_Gettable gettable() const;
  void set_gettable(::clarifai::api::Visibility_Gettable value);
  private:
  ::clarifai::api::Visibility_Gettable _internal_gettable() const;
  void _internal_set_gettable(::clarifai::api::Visibility_Gettable value);
  public:

  // @@protoc_insertion_point(class_scope:clarifai.api.Visibility)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int gettable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fclarifai_2fapi_2fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Annotation

// string id = 1;
inline void Annotation::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Annotation::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.id)
  return _internal_id();
}
inline void Annotation::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.id)
}
inline std::string* Annotation::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.id)
  return _internal_mutable_id();
}
inline const std::string& Annotation::_internal_id() const {
  return id_.GetNoArena();
}
inline void Annotation::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Annotation::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Annotation.id)
}
inline void Annotation::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Annotation.id)
}
inline void Annotation::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Annotation.id)
}
inline std::string* Annotation::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Annotation::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Annotation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.id)
}

// string input_id = 2;
inline void Annotation::clear_input_id() {
  input_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Annotation::input_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.input_id)
  return _internal_input_id();
}
inline void Annotation::set_input_id(const std::string& value) {
  _internal_set_input_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.input_id)
}
inline std::string* Annotation::mutable_input_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.input_id)
  return _internal_mutable_input_id();
}
inline const std::string& Annotation::_internal_input_id() const {
  return input_id_.GetNoArena();
}
inline void Annotation::_internal_set_input_id(const std::string& value) {
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Annotation::set_input_id(std::string&& value) {
  
  input_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Annotation.input_id)
}
inline void Annotation::set_input_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Annotation.input_id)
}
inline void Annotation::set_input_id(const char* value, size_t size) {
  
  input_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Annotation.input_id)
}
inline std::string* Annotation::_internal_mutable_input_id() {
  
  return input_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Annotation::release_input_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.input_id)
  
  return input_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Annotation::set_allocated_input_id(std::string* input_id) {
  if (input_id != nullptr) {
    
  } else {
    
  }
  input_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.input_id)
}

// .clarifai.api.Data data = 3;
inline bool Annotation::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Annotation::has_data() const {
  return _internal_has_data();
}
inline void Annotation::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& Annotation::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& Annotation::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.data)
  return _internal_data();
}
inline ::clarifai::api::Data* Annotation::release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* Annotation::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* Annotation::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.data)
  return _internal_mutable_data();
}
inline void Annotation::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.data)
}

// .google.protobuf.Struct annotation_info = 13;
inline bool Annotation::_internal_has_annotation_info() const {
  return this != internal_default_instance() && annotation_info_ != nullptr;
}
inline bool Annotation::has_annotation_info() const {
  return _internal_has_annotation_info();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Annotation::_internal_annotation_info() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = annotation_info_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Annotation::annotation_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.annotation_info)
  return _internal_annotation_info();
}
inline PROTOBUF_NAMESPACE_ID::Struct* Annotation::release_annotation_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.annotation_info)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = annotation_info_;
  annotation_info_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Annotation::_internal_mutable_annotation_info() {
  
  if (annotation_info_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    annotation_info_ = p;
  }
  return annotation_info_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Annotation::mutable_annotation_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.annotation_info)
  return _internal_mutable_annotation_info();
}
inline void Annotation::set_allocated_annotation_info(PROTOBUF_NAMESPACE_ID::Struct* annotation_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_info_);
  }
  if (annotation_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_info)->GetArena();
    if (message_arena != submessage_arena) {
      annotation_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_info, submessage_arena);
    }
    
  } else {
    
  }
  annotation_info_ = annotation_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.annotation_info)
}

// string user_id = 15;
inline void Annotation::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Annotation::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.user_id)
  return _internal_user_id();
}
inline void Annotation::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.user_id)
}
inline std::string* Annotation::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Annotation::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void Annotation::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Annotation::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Annotation.user_id)
}
inline void Annotation::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Annotation.user_id)
}
inline void Annotation::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Annotation.user_id)
}
inline std::string* Annotation::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Annotation::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Annotation::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.user_id)
}

// string model_version_id = 16;
inline void Annotation::clear_model_version_id() {
  model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Annotation::model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.model_version_id)
  return _internal_model_version_id();
}
inline void Annotation::set_model_version_id(const std::string& value) {
  _internal_set_model_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.model_version_id)
}
inline std::string* Annotation::mutable_model_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.model_version_id)
  return _internal_mutable_model_version_id();
}
inline const std::string& Annotation::_internal_model_version_id() const {
  return model_version_id_.GetNoArena();
}
inline void Annotation::_internal_set_model_version_id(const std::string& value) {
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Annotation::set_model_version_id(std::string&& value) {
  
  model_version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Annotation.model_version_id)
}
inline void Annotation::set_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Annotation.model_version_id)
}
inline void Annotation::set_model_version_id(const char* value, size_t size) {
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Annotation.model_version_id)
}
inline std::string* Annotation::_internal_mutable_model_version_id() {
  
  return model_version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Annotation::release_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.model_version_id)
  
  return model_version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Annotation::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.model_version_id)
}

// string embed_model_version_id = 14 [deprecated = true];
inline void Annotation::clear_embed_model_version_id() {
  embed_model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Annotation::embed_model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.embed_model_version_id)
  return _internal_embed_model_version_id();
}
inline void Annotation::set_embed_model_version_id(const std::string& value) {
  _internal_set_embed_model_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.embed_model_version_id)
}
inline std::string* Annotation::mutable_embed_model_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.embed_model_version_id)
  return _internal_mutable_embed_model_version_id();
}
inline const std::string& Annotation::_internal_embed_model_version_id() const {
  return embed_model_version_id_.GetNoArena();
}
inline void Annotation::_internal_set_embed_model_version_id(const std::string& value) {
  
  embed_model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Annotation::set_embed_model_version_id(std::string&& value) {
  
  embed_model_version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Annotation.embed_model_version_id)
}
inline void Annotation::set_embed_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  embed_model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Annotation.embed_model_version_id)
}
inline void Annotation::set_embed_model_version_id(const char* value, size_t size) {
  
  embed_model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Annotation.embed_model_version_id)
}
inline std::string* Annotation::_internal_mutable_embed_model_version_id() {
  
  return embed_model_version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Annotation::release_embed_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.embed_model_version_id)
  
  return embed_model_version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Annotation::set_allocated_embed_model_version_id(std::string* embed_model_version_id) {
  if (embed_model_version_id != nullptr) {
    
  } else {
    
  }
  embed_model_version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), embed_model_version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.embed_model_version_id)
}

// .clarifai.api.status.Status status = 7;
inline bool Annotation::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Annotation::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& Annotation::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& Annotation::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* Annotation::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* Annotation::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* Annotation::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.status)
  return _internal_mutable_status();
}
inline void Annotation::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.status)
}

// .google.protobuf.Timestamp created_at = 8;
inline bool Annotation::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Annotation::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Annotation::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Annotation::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.created_at)
  return _internal_mutable_created_at();
}
inline void Annotation::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.created_at)
}

// .google.protobuf.Timestamp modified_at = 9;
inline bool Annotation::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool Annotation::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Annotation::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Annotation::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.modified_at)
  return _internal_modified_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Annotation::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.modified_at)
  return _internal_mutable_modified_at();
}
inline void Annotation::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.modified_at)
}

// bool trusted = 10 [deprecated = true];
inline void Annotation::clear_trusted() {
  trusted_ = false;
}
inline bool Annotation::_internal_trusted() const {
  return trusted_;
}
inline bool Annotation::trusted() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.trusted)
  return _internal_trusted();
}
inline void Annotation::_internal_set_trusted(bool value) {
  
  trusted_ = value;
}
inline void Annotation::set_trusted(bool value) {
  _internal_set_trusted(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.trusted)
}

// bool input_level = 17;
inline void Annotation::clear_input_level() {
  input_level_ = false;
}
inline bool Annotation::_internal_input_level() const {
  return input_level_;
}
inline bool Annotation::input_level() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.input_level)
  return _internal_input_level();
}
inline void Annotation::_internal_set_input_level(bool value) {
  
  input_level_ = value;
}
inline void Annotation::set_input_level(bool value) {
  _internal_set_input_level(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.input_level)
}

// .google.protobuf.Struct consensus_info = 18;
inline bool Annotation::_internal_has_consensus_info() const {
  return this != internal_default_instance() && consensus_info_ != nullptr;
}
inline bool Annotation::has_consensus_info() const {
  return _internal_has_consensus_info();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Annotation::_internal_consensus_info() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = consensus_info_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Annotation::consensus_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.consensus_info)
  return _internal_consensus_info();
}
inline PROTOBUF_NAMESPACE_ID::Struct* Annotation::release_consensus_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.consensus_info)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = consensus_info_;
  consensus_info_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Annotation::_internal_mutable_consensus_info() {
  
  if (consensus_info_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    consensus_info_ = p;
  }
  return consensus_info_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Annotation::mutable_consensus_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.consensus_info)
  return _internal_mutable_consensus_info();
}
inline void Annotation::set_allocated_consensus_info(PROTOBUF_NAMESPACE_ID::Struct* consensus_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_info_);
  }
  if (consensus_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_info)->GetArena();
    if (message_arena != submessage_arena) {
      consensus_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_info, submessage_arena);
    }
    
  } else {
    
  }
  consensus_info_ = consensus_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.consensus_info)
}

// string task_id = 19;
inline void Annotation::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Annotation::task_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Annotation.task_id)
  return _internal_task_id();
}
inline void Annotation::set_task_id(const std::string& value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Annotation.task_id)
}
inline std::string* Annotation::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Annotation.task_id)
  return _internal_mutable_task_id();
}
inline const std::string& Annotation::_internal_task_id() const {
  return task_id_.GetNoArena();
}
inline void Annotation::_internal_set_task_id(const std::string& value) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Annotation::set_task_id(std::string&& value) {
  
  task_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Annotation.task_id)
}
inline void Annotation::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Annotation.task_id)
}
inline void Annotation::set_task_id(const char* value, size_t size) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Annotation.task_id)
}
inline std::string* Annotation::_internal_mutable_task_id() {
  
  return task_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Annotation::release_task_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Annotation.task_id)
  
  return task_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Annotation::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Annotation.task_id)
}

// -------------------------------------------------------------------

// App

// string id = 1;
inline void App::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& App::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.id)
  return _internal_id();
}
inline void App::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.id)
}
inline std::string* App::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.id)
  return _internal_mutable_id();
}
inline const std::string& App::_internal_id() const {
  return id_.GetNoArena();
}
inline void App::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void App::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.App.id)
}
inline void App::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.App.id)
}
inline void App::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.App.id)
}
inline std::string* App::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* App::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void App::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.id)
}

// string name = 2;
inline void App::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& App::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.name)
  return _internal_name();
}
inline void App::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.name)
}
inline std::string* App::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.name)
  return _internal_mutable_name();
}
inline const std::string& App::_internal_name() const {
  return name_.GetNoArena();
}
inline void App::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void App::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.App.name)
}
inline void App::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.App.name)
}
inline void App::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.App.name)
}
inline std::string* App::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* App::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void App::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.name)
}

// string default_language = 3;
inline void App::clear_default_language() {
  default_language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& App::default_language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.default_language)
  return _internal_default_language();
}
inline void App::set_default_language(const std::string& value) {
  _internal_set_default_language(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.default_language)
}
inline std::string* App::mutable_default_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.default_language)
  return _internal_mutable_default_language();
}
inline const std::string& App::_internal_default_language() const {
  return default_language_.GetNoArena();
}
inline void App::_internal_set_default_language(const std::string& value) {
  
  default_language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void App::set_default_language(std::string&& value) {
  
  default_language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.App.default_language)
}
inline void App::set_default_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.App.default_language)
}
inline void App::set_default_language(const char* value, size_t size) {
  
  default_language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.App.default_language)
}
inline std::string* App::_internal_mutable_default_language() {
  
  return default_language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* App::release_default_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.default_language)
  
  return default_language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void App::set_allocated_default_language(std::string* default_language) {
  if (default_language != nullptr) {
    
  } else {
    
  }
  default_language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_language);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.default_language)
}

// string default_workflow_id = 4;
inline void App::clear_default_workflow_id() {
  default_workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& App::default_workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.default_workflow_id)
  return _internal_default_workflow_id();
}
inline void App::set_default_workflow_id(const std::string& value) {
  _internal_set_default_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.default_workflow_id)
}
inline std::string* App::mutable_default_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.default_workflow_id)
  return _internal_mutable_default_workflow_id();
}
inline const std::string& App::_internal_default_workflow_id() const {
  return default_workflow_id_.GetNoArena();
}
inline void App::_internal_set_default_workflow_id(const std::string& value) {
  
  default_workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void App::set_default_workflow_id(std::string&& value) {
  
  default_workflow_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.App.default_workflow_id)
}
inline void App::set_default_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.App.default_workflow_id)
}
inline void App::set_default_workflow_id(const char* value, size_t size) {
  
  default_workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.App.default_workflow_id)
}
inline std::string* App::_internal_mutable_default_workflow_id() {
  
  return default_workflow_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* App::release_default_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.default_workflow_id)
  
  return default_workflow_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void App::set_allocated_default_workflow_id(std::string* default_workflow_id) {
  if (default_workflow_id != nullptr) {
    
  } else {
    
  }
  default_workflow_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_workflow_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.default_workflow_id)
}

// string user_id = 5;
inline void App::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& App::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.user_id)
  return _internal_user_id();
}
inline void App::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.user_id)
}
inline std::string* App::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& App::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void App::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void App::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.App.user_id)
}
inline void App::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.App.user_id)
}
inline void App::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.App.user_id)
}
inline std::string* App::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* App::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void App::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.user_id)
}

// .google.protobuf.Timestamp created_at = 6;
inline bool App::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool App::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& App::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& App::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* App::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* App::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* App::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.created_at)
  return _internal_mutable_created_at();
}
inline void App::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.created_at)
}

// .google.protobuf.Timestamp modified_at = 17;
inline bool App::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool App::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& App::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& App::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.modified_at)
  return _internal_modified_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* App::release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* App::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* App::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.modified_at)
  return _internal_mutable_modified_at();
}
inline void App::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.modified_at)
}

// uint32 legal_consent_status = 7;
inline void App::clear_legal_consent_status() {
  legal_consent_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 App::_internal_legal_consent_status() const {
  return legal_consent_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 App::legal_consent_status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.legal_consent_status)
  return _internal_legal_consent_status();
}
inline void App::_internal_set_legal_consent_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  legal_consent_status_ = value;
}
inline void App::set_legal_consent_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_legal_consent_status(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.legal_consent_status)
}

// .google.protobuf.Struct metadata = 13;
inline bool App::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool App::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& App::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& App::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.metadata)
  return _internal_metadata();
}
inline PROTOBUF_NAMESPACE_ID::Struct* App::release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* App::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* App::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.metadata)
  return _internal_mutable_metadata();
}
inline void App::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.metadata)
}

// string description = 14;
inline void App::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& App::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.description)
  return _internal_description();
}
inline void App::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.description)
}
inline std::string* App::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.description)
  return _internal_mutable_description();
}
inline const std::string& App::_internal_description() const {
  return description_.GetNoArena();
}
inline void App::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void App::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.App.description)
}
inline void App::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.App.description)
}
inline void App::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.App.description)
}
inline std::string* App::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* App::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void App::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.description)
}

// uint32 sample_ms = 15;
inline void App::clear_sample_ms() {
  sample_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 App::_internal_sample_ms() const {
  return sample_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 App::sample_ms() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.sample_ms)
  return _internal_sample_ms();
}
inline void App::_internal_set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sample_ms_ = value;
}
inline void App::set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_ms(value);
  // @@protoc_insertion_point(field_set:clarifai.api.App.sample_ms)
}

// .clarifai.api.Visibility visibility = 16;
inline bool App::_internal_has_visibility() const {
  return this != internal_default_instance() && visibility_ != nullptr;
}
inline bool App::has_visibility() const {
  return _internal_has_visibility();
}
inline void App::clear_visibility() {
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
}
inline const ::clarifai::api::Visibility& App::_internal_visibility() const {
  const ::clarifai::api::Visibility* p = visibility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Visibility*>(
      &::clarifai::api::_Visibility_default_instance_);
}
inline const ::clarifai::api::Visibility& App::visibility() const {
  // @@protoc_insertion_point(field_get:clarifai.api.App.visibility)
  return _internal_visibility();
}
inline ::clarifai::api::Visibility* App::release_visibility() {
  // @@protoc_insertion_point(field_release:clarifai.api.App.visibility)
  
  ::clarifai::api::Visibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::clarifai::api::Visibility* App::_internal_mutable_visibility() {
  
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Visibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  return visibility_;
}
inline ::clarifai::api::Visibility* App::mutable_visibility() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.App.visibility)
  return _internal_mutable_visibility();
}
inline void App::set_allocated_visibility(::clarifai::api::Visibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    
  } else {
    
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.App.visibility)
}

// -------------------------------------------------------------------

// AppQuery

// string name = 1;
inline void AppQuery::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AppQuery::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppQuery.name)
  return _internal_name();
}
inline void AppQuery::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AppQuery.name)
}
inline std::string* AppQuery::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppQuery.name)
  return _internal_mutable_name();
}
inline const std::string& AppQuery::_internal_name() const {
  return name_.GetNoArena();
}
inline void AppQuery::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AppQuery::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.AppQuery.name)
}
inline void AppQuery::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.AppQuery.name)
}
inline void AppQuery::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.AppQuery.name)
}
inline std::string* AppQuery::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppQuery::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppQuery.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppQuery::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppQuery.name)
}

// -------------------------------------------------------------------

// Collaborator

// string id = 1;
inline void Collaborator::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Collaborator::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.id)
  return _internal_id();
}
inline void Collaborator::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Collaborator.id)
}
inline std::string* Collaborator::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.id)
  return _internal_mutable_id();
}
inline const std::string& Collaborator::_internal_id() const {
  return id_.GetNoArena();
}
inline void Collaborator::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Collaborator::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Collaborator.id)
}
inline void Collaborator::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collaborator.id)
}
inline void Collaborator::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collaborator.id)
}
inline std::string* Collaborator::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Collaborator::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaborator.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Collaborator::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaborator.id)
}

// .clarifai.api.App app = 2;
inline bool Collaborator::_internal_has_app() const {
  return this != internal_default_instance() && app_ != nullptr;
}
inline bool Collaborator::has_app() const {
  return _internal_has_app();
}
inline void Collaborator::clear_app() {
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
}
inline const ::clarifai::api::App& Collaborator::_internal_app() const {
  const ::clarifai::api::App* p = app_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::App*>(
      &::clarifai::api::_App_default_instance_);
}
inline const ::clarifai::api::App& Collaborator::app() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.app)
  return _internal_app();
}
inline ::clarifai::api::App* Collaborator::release_app() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaborator.app)
  
  ::clarifai::api::App* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::clarifai::api::App* Collaborator::_internal_mutable_app() {
  
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::App>(GetArenaNoVirtual());
    app_ = p;
  }
  return app_;
}
inline ::clarifai::api::App* Collaborator::mutable_app() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.app)
  return _internal_mutable_app();
}
inline void Collaborator::set_allocated_app(::clarifai::api::App* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete app_;
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaborator.app)
}

// .clarifai.api.User user = 3;
inline bool Collaborator::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Collaborator::has_user() const {
  return _internal_has_user();
}
inline void Collaborator::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::clarifai::api::User& Collaborator::_internal_user() const {
  const ::clarifai::api::User* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::User*>(
      &::clarifai::api::_User_default_instance_);
}
inline const ::clarifai::api::User& Collaborator::user() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.user)
  return _internal_user();
}
inline ::clarifai::api::User* Collaborator::release_user() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaborator.user)
  
  ::clarifai::api::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::clarifai::api::User* Collaborator::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::User>(GetArenaNoVirtual());
    user_ = p;
  }
  return user_;
}
inline ::clarifai::api::User* Collaborator::mutable_user() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.user)
  return _internal_mutable_user();
}
inline void Collaborator::set_allocated_user(::clarifai::api::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaborator.user)
}

// repeated string scopes = 4;
inline int Collaborator::_internal_scopes_size() const {
  return scopes_.size();
}
inline int Collaborator::scopes_size() const {
  return _internal_scopes_size();
}
inline void Collaborator::clear_scopes() {
  scopes_.Clear();
}
inline std::string* Collaborator::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Collaborator.scopes)
  return _internal_add_scopes();
}
inline const std::string& Collaborator::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& Collaborator::scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.scopes)
  return _internal_scopes(index);
}
inline std::string* Collaborator::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.scopes)
  return scopes_.Mutable(index);
}
inline void Collaborator::set_scopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaborator.scopes)
  scopes_.Mutable(index)->assign(value);
}
inline void Collaborator::set_scopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaborator.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
inline void Collaborator::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collaborator.scopes)
}
inline void Collaborator::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collaborator.scopes)
}
inline std::string* Collaborator::_internal_add_scopes() {
  return scopes_.Add();
}
inline void Collaborator::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Collaborator.scopes)
}
inline void Collaborator::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Collaborator.scopes)
}
inline void Collaborator::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Collaborator.scopes)
}
inline void Collaborator::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Collaborator.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Collaborator::scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Collaborator.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Collaborator::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Collaborator.scopes)
  return &scopes_;
}

// repeated string endpoints = 5;
inline int Collaborator::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int Collaborator::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void Collaborator::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* Collaborator::add_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Collaborator.endpoints)
  return _internal_add_endpoints();
}
inline const std::string& Collaborator::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& Collaborator::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.endpoints)
  return _internal_endpoints(index);
}
inline std::string* Collaborator::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.endpoints)
  return endpoints_.Mutable(index);
}
inline void Collaborator::set_endpoints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaborator.endpoints)
  endpoints_.Mutable(index)->assign(value);
}
inline void Collaborator::set_endpoints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaborator.endpoints)
  endpoints_.Mutable(index)->assign(std::move(value));
}
inline void Collaborator::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collaborator.endpoints)
}
inline void Collaborator::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collaborator.endpoints)
}
inline std::string* Collaborator::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void Collaborator::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Collaborator.endpoints)
}
inline void Collaborator::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Collaborator.endpoints)
}
inline void Collaborator::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Collaborator.endpoints)
}
inline void Collaborator::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Collaborator.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Collaborator::endpoints() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Collaborator.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Collaborator::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Collaborator.endpoints)
  return &endpoints_;
}

// .google.protobuf.Timestamp created_at = 6;
inline bool Collaborator::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Collaborator::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collaborator::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collaborator::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaborator.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.created_at)
  return _internal_mutable_created_at();
}
inline void Collaborator::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaborator.created_at)
}

// .google.protobuf.Timestamp modified_at = 7;
inline bool Collaborator::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool Collaborator::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collaborator::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collaborator::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.modified_at)
  return _internal_modified_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaborator.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.modified_at)
  return _internal_mutable_modified_at();
}
inline void Collaborator::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaborator.modified_at)
}

// .google.protobuf.Timestamp deleted_at = 8;
inline bool Collaborator::_internal_has_deleted_at() const {
  return this != internal_default_instance() && deleted_at_ != nullptr;
}
inline bool Collaborator::has_deleted_at() const {
  return _internal_has_deleted_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collaborator::_internal_deleted_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = deleted_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collaborator::deleted_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaborator.deleted_at)
  return _internal_deleted_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::release_deleted_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaborator.deleted_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = deleted_at_;
  deleted_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::_internal_mutable_deleted_at() {
  
  if (deleted_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    deleted_at_ = p;
  }
  return deleted_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaborator::mutable_deleted_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaborator.deleted_at)
  return _internal_mutable_deleted_at();
}
inline void Collaborator::set_allocated_deleted_at(PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deleted_at_);
  }
  if (deleted_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deleted_at)->GetArena();
    if (message_arena != submessage_arena) {
      deleted_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleted_at, submessage_arena);
    }
    
  } else {
    
  }
  deleted_at_ = deleted_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaborator.deleted_at)
}

// -------------------------------------------------------------------

// Collaboration

// .clarifai.api.App app = 1;
inline bool Collaboration::_internal_has_app() const {
  return this != internal_default_instance() && app_ != nullptr;
}
inline bool Collaboration::has_app() const {
  return _internal_has_app();
}
inline void Collaboration::clear_app() {
  if (GetArenaNoVirtual() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
}
inline const ::clarifai::api::App& Collaboration::_internal_app() const {
  const ::clarifai::api::App* p = app_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::App*>(
      &::clarifai::api::_App_default_instance_);
}
inline const ::clarifai::api::App& Collaboration::app() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaboration.app)
  return _internal_app();
}
inline ::clarifai::api::App* Collaboration::release_app() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaboration.app)
  
  ::clarifai::api::App* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::clarifai::api::App* Collaboration::_internal_mutable_app() {
  
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::App>(GetArenaNoVirtual());
    app_ = p;
  }
  return app_;
}
inline ::clarifai::api::App* Collaboration::mutable_app() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaboration.app)
  return _internal_mutable_app();
}
inline void Collaboration::set_allocated_app(::clarifai::api::App* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete app_;
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaboration.app)
}

// .clarifai.api.User app_owner = 2;
inline bool Collaboration::_internal_has_app_owner() const {
  return this != internal_default_instance() && app_owner_ != nullptr;
}
inline bool Collaboration::has_app_owner() const {
  return _internal_has_app_owner();
}
inline void Collaboration::clear_app_owner() {
  if (GetArenaNoVirtual() == nullptr && app_owner_ != nullptr) {
    delete app_owner_;
  }
  app_owner_ = nullptr;
}
inline const ::clarifai::api::User& Collaboration::_internal_app_owner() const {
  const ::clarifai::api::User* p = app_owner_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::User*>(
      &::clarifai::api::_User_default_instance_);
}
inline const ::clarifai::api::User& Collaboration::app_owner() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaboration.app_owner)
  return _internal_app_owner();
}
inline ::clarifai::api::User* Collaboration::release_app_owner() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaboration.app_owner)
  
  ::clarifai::api::User* temp = app_owner_;
  app_owner_ = nullptr;
  return temp;
}
inline ::clarifai::api::User* Collaboration::_internal_mutable_app_owner() {
  
  if (app_owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::User>(GetArenaNoVirtual());
    app_owner_ = p;
  }
  return app_owner_;
}
inline ::clarifai::api::User* Collaboration::mutable_app_owner() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaboration.app_owner)
  return _internal_mutable_app_owner();
}
inline void Collaboration::set_allocated_app_owner(::clarifai::api::User* app_owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete app_owner_;
  }
  if (app_owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_owner, submessage_arena);
    }
    
  } else {
    
  }
  app_owner_ = app_owner;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaboration.app_owner)
}

// repeated string scopes = 3;
inline int Collaboration::_internal_scopes_size() const {
  return scopes_.size();
}
inline int Collaboration::scopes_size() const {
  return _internal_scopes_size();
}
inline void Collaboration::clear_scopes() {
  scopes_.Clear();
}
inline std::string* Collaboration::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Collaboration.scopes)
  return _internal_add_scopes();
}
inline const std::string& Collaboration::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& Collaboration::scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaboration.scopes)
  return _internal_scopes(index);
}
inline std::string* Collaboration::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaboration.scopes)
  return scopes_.Mutable(index);
}
inline void Collaboration::set_scopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaboration.scopes)
  scopes_.Mutable(index)->assign(value);
}
inline void Collaboration::set_scopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaboration.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
inline void Collaboration::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collaboration.scopes)
}
inline void Collaboration::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collaboration.scopes)
}
inline std::string* Collaboration::_internal_add_scopes() {
  return scopes_.Add();
}
inline void Collaboration::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Collaboration.scopes)
}
inline void Collaboration::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Collaboration.scopes)
}
inline void Collaboration::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Collaboration.scopes)
}
inline void Collaboration::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Collaboration.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Collaboration::scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Collaboration.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Collaboration::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Collaboration.scopes)
  return &scopes_;
}

// repeated string endpoints = 4;
inline int Collaboration::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int Collaboration::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void Collaboration::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* Collaboration::add_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Collaboration.endpoints)
  return _internal_add_endpoints();
}
inline const std::string& Collaboration::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& Collaboration::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaboration.endpoints)
  return _internal_endpoints(index);
}
inline std::string* Collaboration::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaboration.endpoints)
  return endpoints_.Mutable(index);
}
inline void Collaboration::set_endpoints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaboration.endpoints)
  endpoints_.Mutable(index)->assign(value);
}
inline void Collaboration::set_endpoints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Collaboration.endpoints)
  endpoints_.Mutable(index)->assign(std::move(value));
}
inline void Collaboration::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collaboration.endpoints)
}
inline void Collaboration::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collaboration.endpoints)
}
inline std::string* Collaboration::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void Collaboration::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Collaboration.endpoints)
}
inline void Collaboration::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Collaboration.endpoints)
}
inline void Collaboration::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Collaboration.endpoints)
}
inline void Collaboration::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Collaboration.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Collaboration::endpoints() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Collaboration.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Collaboration::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Collaboration.endpoints)
  return &endpoints_;
}

// .google.protobuf.Timestamp created_at = 5;
inline bool Collaboration::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Collaboration::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collaboration::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collaboration::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collaboration.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaboration::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collaboration.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaboration::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collaboration::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collaboration.created_at)
  return _internal_mutable_created_at();
}
inline void Collaboration::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collaboration.created_at)
}

// -------------------------------------------------------------------

// Audio

// string url = 1;
inline void Audio::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Audio::url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Audio.url)
  return _internal_url();
}
inline void Audio::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Audio.url)
}
inline std::string* Audio::mutable_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Audio.url)
  return _internal_mutable_url();
}
inline const std::string& Audio::_internal_url() const {
  return url_.GetNoArena();
}
inline void Audio::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Audio::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Audio.url)
}
inline void Audio::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Audio.url)
}
inline void Audio::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Audio.url)
}
inline std::string* Audio::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Audio::release_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.Audio.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Audio::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Audio.url)
}

// bytes base64 = 2;
inline void Audio::clear_base64() {
  base64_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Audio::base64() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Audio.base64)
  return _internal_base64();
}
inline void Audio::set_base64(const std::string& value) {
  _internal_set_base64(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Audio.base64)
}
inline std::string* Audio::mutable_base64() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Audio.base64)
  return _internal_mutable_base64();
}
inline const std::string& Audio::_internal_base64() const {
  return base64_.GetNoArena();
}
inline void Audio::_internal_set_base64(const std::string& value) {
  
  base64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Audio::set_base64(std::string&& value) {
  
  base64_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Audio.base64)
}
inline void Audio::set_base64(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Audio.base64)
}
inline void Audio::set_base64(const void* value, size_t size) {
  
  base64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Audio.base64)
}
inline std::string* Audio::_internal_mutable_base64() {
  
  return base64_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Audio::release_base64() {
  // @@protoc_insertion_point(field_release:clarifai.api.Audio.base64)
  
  return base64_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Audio::set_allocated_base64(std::string* base64) {
  if (base64 != nullptr) {
    
  } else {
    
  }
  base64_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base64);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Audio.base64)
}

// bool allow_duplicate_url = 4;
inline void Audio::clear_allow_duplicate_url() {
  allow_duplicate_url_ = false;
}
inline bool Audio::_internal_allow_duplicate_url() const {
  return allow_duplicate_url_;
}
inline bool Audio::allow_duplicate_url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Audio.allow_duplicate_url)
  return _internal_allow_duplicate_url();
}
inline void Audio::_internal_set_allow_duplicate_url(bool value) {
  
  allow_duplicate_url_ = value;
}
inline void Audio::set_allow_duplicate_url(bool value) {
  _internal_set_allow_duplicate_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Audio.allow_duplicate_url)
}

// .clarifai.api.HostedURL hosted = 5;
inline bool Audio::_internal_has_hosted() const {
  return this != internal_default_instance() && hosted_ != nullptr;
}
inline bool Audio::has_hosted() const {
  return _internal_has_hosted();
}
inline void Audio::clear_hosted() {
  if (GetArenaNoVirtual() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
}
inline const ::clarifai::api::HostedURL& Audio::_internal_hosted() const {
  const ::clarifai::api::HostedURL* p = hosted_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::HostedURL*>(
      &::clarifai::api::_HostedURL_default_instance_);
}
inline const ::clarifai::api::HostedURL& Audio::hosted() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Audio.hosted)
  return _internal_hosted();
}
inline ::clarifai::api::HostedURL* Audio::release_hosted() {
  // @@protoc_insertion_point(field_release:clarifai.api.Audio.hosted)
  
  ::clarifai::api::HostedURL* temp = hosted_;
  hosted_ = nullptr;
  return temp;
}
inline ::clarifai::api::HostedURL* Audio::_internal_mutable_hosted() {
  
  if (hosted_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::HostedURL>(GetArenaNoVirtual());
    hosted_ = p;
  }
  return hosted_;
}
inline ::clarifai::api::HostedURL* Audio::mutable_hosted() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Audio.hosted)
  return _internal_mutable_hosted();
}
inline void Audio::set_allocated_hosted(::clarifai::api::HostedURL* hosted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hosted_;
  }
  if (hosted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hosted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hosted, submessage_arena);
    }
    
  } else {
    
  }
  hosted_ = hosted;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Audio.hosted)
}

// -------------------------------------------------------------------

// Track_TrackInfo

// uint32 num_frames = 1;
inline void Track_TrackInfo::clear_num_frames() {
  num_frames_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Track_TrackInfo::_internal_num_frames() const {
  return num_frames_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Track_TrackInfo::num_frames() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Track.TrackInfo.num_frames)
  return _internal_num_frames();
}
inline void Track_TrackInfo::_internal_set_num_frames(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_frames_ = value;
}
inline void Track_TrackInfo::set_num_frames(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_frames(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Track.TrackInfo.num_frames)
}

// .google.protobuf.Timestamp begin_time = 2;
inline bool Track_TrackInfo::_internal_has_begin_time() const {
  return this != internal_default_instance() && begin_time_ != nullptr;
}
inline bool Track_TrackInfo::has_begin_time() const {
  return _internal_has_begin_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Track_TrackInfo::_internal_begin_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = begin_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Track_TrackInfo::begin_time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Track.TrackInfo.begin_time)
  return _internal_begin_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Track_TrackInfo::release_begin_time() {
  // @@protoc_insertion_point(field_release:clarifai.api.Track.TrackInfo.begin_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = begin_time_;
  begin_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Track_TrackInfo::_internal_mutable_begin_time() {
  
  if (begin_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    begin_time_ = p;
  }
  return begin_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Track_TrackInfo::mutable_begin_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Track.TrackInfo.begin_time)
  return _internal_mutable_begin_time();
}
inline void Track_TrackInfo::set_allocated_begin_time(PROTOBUF_NAMESPACE_ID::Timestamp* begin_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(begin_time_);
  }
  if (begin_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(begin_time)->GetArena();
    if (message_arena != submessage_arena) {
      begin_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin_time, submessage_arena);
    }
    
  } else {
    
  }
  begin_time_ = begin_time;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Track.TrackInfo.begin_time)
}

// .google.protobuf.Timestamp end_time = 3;
inline bool Track_TrackInfo::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool Track_TrackInfo::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Track_TrackInfo::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Track_TrackInfo::end_time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Track.TrackInfo.end_time)
  return _internal_end_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Track_TrackInfo::release_end_time() {
  // @@protoc_insertion_point(field_release:clarifai.api.Track.TrackInfo.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Track_TrackInfo::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Track_TrackInfo::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Track.TrackInfo.end_time)
  return _internal_mutable_end_time();
}
inline void Track_TrackInfo::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Track.TrackInfo.end_time)
}

// float quality = 4;
inline void Track_TrackInfo::clear_quality() {
  quality_ = 0;
}
inline float Track_TrackInfo::_internal_quality() const {
  return quality_;
}
inline float Track_TrackInfo::quality() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Track.TrackInfo.quality)
  return _internal_quality();
}
inline void Track_TrackInfo::_internal_set_quality(float value) {
  
  quality_ = value;
}
inline void Track_TrackInfo::set_quality(float value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Track.TrackInfo.quality)
}

// -------------------------------------------------------------------

// Track

// string id = 1;
inline void Track::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Track::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Track.id)
  return _internal_id();
}
inline void Track::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Track.id)
}
inline std::string* Track::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Track.id)
  return _internal_mutable_id();
}
inline const std::string& Track::_internal_id() const {
  return id_.GetNoArena();
}
inline void Track::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Track::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Track.id)
}
inline void Track::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Track.id)
}
inline void Track::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Track.id)
}
inline std::string* Track::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Track::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Track.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Track::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Track.id)
}

// .clarifai.api.Data data = 2;
inline bool Track::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Track::has_data() const {
  return _internal_has_data();
}
inline void Track::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& Track::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& Track::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Track.data)
  return _internal_data();
}
inline ::clarifai::api::Data* Track::release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.Track.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* Track::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* Track::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Track.data)
  return _internal_mutable_data();
}
inline void Track::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Track.data)
}

// .clarifai.api.Track.TrackInfo track_info = 3;
inline bool Track::_internal_has_track_info() const {
  return this != internal_default_instance() && track_info_ != nullptr;
}
inline bool Track::has_track_info() const {
  return _internal_has_track_info();
}
inline void Track::clear_track_info() {
  if (GetArenaNoVirtual() == nullptr && track_info_ != nullptr) {
    delete track_info_;
  }
  track_info_ = nullptr;
}
inline const ::clarifai::api::Track_TrackInfo& Track::_internal_track_info() const {
  const ::clarifai::api::Track_TrackInfo* p = track_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Track_TrackInfo*>(
      &::clarifai::api::_Track_TrackInfo_default_instance_);
}
inline const ::clarifai::api::Track_TrackInfo& Track::track_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Track.track_info)
  return _internal_track_info();
}
inline ::clarifai::api::Track_TrackInfo* Track::release_track_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.Track.track_info)
  
  ::clarifai::api::Track_TrackInfo* temp = track_info_;
  track_info_ = nullptr;
  return temp;
}
inline ::clarifai::api::Track_TrackInfo* Track::_internal_mutable_track_info() {
  
  if (track_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Track_TrackInfo>(GetArenaNoVirtual());
    track_info_ = p;
  }
  return track_info_;
}
inline ::clarifai::api::Track_TrackInfo* Track::mutable_track_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Track.track_info)
  return _internal_mutable_track_info();
}
inline void Track::set_allocated_track_info(::clarifai::api::Track_TrackInfo* track_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete track_info_;
  }
  if (track_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      track_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_info, submessage_arena);
    }
    
  } else {
    
  }
  track_info_ = track_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Track.track_info)
}

// -------------------------------------------------------------------

// Cluster

// string id = 1;
inline void Cluster::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Cluster::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Cluster.id)
  return _internal_id();
}
inline void Cluster::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Cluster.id)
}
inline std::string* Cluster::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Cluster.id)
  return _internal_mutable_id();
}
inline const std::string& Cluster::_internal_id() const {
  return id_.GetNoArena();
}
inline void Cluster::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Cluster::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Cluster.id)
}
inline void Cluster::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Cluster.id)
}
inline void Cluster::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Cluster.id)
}
inline std::string* Cluster::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Cluster::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Cluster.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Cluster.id)
}

// uint32 count = 2;
inline void Cluster::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cluster::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cluster::count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Cluster.count)
  return _internal_count();
}
inline void Cluster::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void Cluster::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Cluster.count)
}

// float score = 3;
inline void Cluster::clear_score() {
  score_ = 0;
}
inline float Cluster::_internal_score() const {
  return score_;
}
inline float Cluster::score() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Cluster.score)
  return _internal_score();
}
inline void Cluster::_internal_set_score(float value) {
  
  score_ = value;
}
inline void Cluster::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Cluster.score)
}

// repeated .clarifai.api.Hit hits = 4;
inline int Cluster::_internal_hits_size() const {
  return hits_.size();
}
inline int Cluster::hits_size() const {
  return _internal_hits_size();
}
inline void Cluster::clear_hits() {
  hits_.Clear();
}
inline ::clarifai::api::Hit* Cluster::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Cluster.hits)
  return hits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >*
Cluster::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Cluster.hits)
  return &hits_;
}
inline const ::clarifai::api::Hit& Cluster::_internal_hits(int index) const {
  return hits_.Get(index);
}
inline const ::clarifai::api::Hit& Cluster::hits(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Cluster.hits)
  return _internal_hits(index);
}
inline ::clarifai::api::Hit* Cluster::_internal_add_hits() {
  return hits_.Add();
}
inline ::clarifai::api::Hit* Cluster::add_hits() {
  // @@protoc_insertion_point(field_add:clarifai.api.Cluster.hits)
  return _internal_add_hits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >&
Cluster::hits() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Cluster.hits)
  return hits_;
}

// repeated float projection = 5;
inline int Cluster::_internal_projection_size() const {
  return projection_.size();
}
inline int Cluster::projection_size() const {
  return _internal_projection_size();
}
inline void Cluster::clear_projection() {
  projection_.Clear();
}
inline float Cluster::_internal_projection(int index) const {
  return projection_.Get(index);
}
inline float Cluster::projection(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Cluster.projection)
  return _internal_projection(index);
}
inline void Cluster::set_projection(int index, float value) {
  projection_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.Cluster.projection)
}
inline void Cluster::_internal_add_projection(float value) {
  projection_.Add(value);
}
inline void Cluster::add_projection(float value) {
  _internal_add_projection(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Cluster.projection)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Cluster::_internal_projection() const {
  return projection_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Cluster::projection() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Cluster.projection)
  return _internal_projection();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Cluster::_internal_mutable_projection() {
  return &projection_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Cluster::mutable_projection() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Cluster.projection)
  return _internal_mutable_projection();
}

// -------------------------------------------------------------------

// Color

// string raw_hex = 1;
inline void Color::clear_raw_hex() {
  raw_hex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Color::raw_hex() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Color.raw_hex)
  return _internal_raw_hex();
}
inline void Color::set_raw_hex(const std::string& value) {
  _internal_set_raw_hex(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Color.raw_hex)
}
inline std::string* Color::mutable_raw_hex() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Color.raw_hex)
  return _internal_mutable_raw_hex();
}
inline const std::string& Color::_internal_raw_hex() const {
  return raw_hex_.GetNoArena();
}
inline void Color::_internal_set_raw_hex(const std::string& value) {
  
  raw_hex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Color::set_raw_hex(std::string&& value) {
  
  raw_hex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Color.raw_hex)
}
inline void Color::set_raw_hex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_hex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Color.raw_hex)
}
inline void Color::set_raw_hex(const char* value, size_t size) {
  
  raw_hex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Color.raw_hex)
}
inline std::string* Color::_internal_mutable_raw_hex() {
  
  return raw_hex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Color::release_raw_hex() {
  // @@protoc_insertion_point(field_release:clarifai.api.Color.raw_hex)
  
  return raw_hex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Color::set_allocated_raw_hex(std::string* raw_hex) {
  if (raw_hex != nullptr) {
    
  } else {
    
  }
  raw_hex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_hex);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Color.raw_hex)
}

// .clarifai.api.W3C w3c = 2;
inline bool Color::_internal_has_w3c() const {
  return this != internal_default_instance() && w3c_ != nullptr;
}
inline bool Color::has_w3c() const {
  return _internal_has_w3c();
}
inline void Color::clear_w3c() {
  if (GetArenaNoVirtual() == nullptr && w3c_ != nullptr) {
    delete w3c_;
  }
  w3c_ = nullptr;
}
inline const ::clarifai::api::W3C& Color::_internal_w3c() const {
  const ::clarifai::api::W3C* p = w3c_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::W3C*>(
      &::clarifai::api::_W3C_default_instance_);
}
inline const ::clarifai::api::W3C& Color::w3c() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Color.w3c)
  return _internal_w3c();
}
inline ::clarifai::api::W3C* Color::release_w3c() {
  // @@protoc_insertion_point(field_release:clarifai.api.Color.w3c)
  
  ::clarifai::api::W3C* temp = w3c_;
  w3c_ = nullptr;
  return temp;
}
inline ::clarifai::api::W3C* Color::_internal_mutable_w3c() {
  
  if (w3c_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::W3C>(GetArenaNoVirtual());
    w3c_ = p;
  }
  return w3c_;
}
inline ::clarifai::api::W3C* Color::mutable_w3c() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Color.w3c)
  return _internal_mutable_w3c();
}
inline void Color::set_allocated_w3c(::clarifai::api::W3C* w3c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete w3c_;
  }
  if (w3c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      w3c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, w3c, submessage_arena);
    }
    
  } else {
    
  }
  w3c_ = w3c;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Color.w3c)
}

// float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void Color::clear_value() {
  value_ = 0;
}
inline float Color::_internal_value() const {
  return value_;
}
inline float Color::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Color.value)
  return _internal_value();
}
inline void Color::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Color::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Color.value)
}

// -------------------------------------------------------------------

// W3C

// string hex = 1;
inline void W3C::clear_hex() {
  hex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& W3C::hex() const {
  // @@protoc_insertion_point(field_get:clarifai.api.W3C.hex)
  return _internal_hex();
}
inline void W3C::set_hex(const std::string& value) {
  _internal_set_hex(value);
  // @@protoc_insertion_point(field_set:clarifai.api.W3C.hex)
}
inline std::string* W3C::mutable_hex() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.W3C.hex)
  return _internal_mutable_hex();
}
inline const std::string& W3C::_internal_hex() const {
  return hex_.GetNoArena();
}
inline void W3C::_internal_set_hex(const std::string& value) {
  
  hex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void W3C::set_hex(std::string&& value) {
  
  hex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.W3C.hex)
}
inline void W3C::set_hex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.W3C.hex)
}
inline void W3C::set_hex(const char* value, size_t size) {
  
  hex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.W3C.hex)
}
inline std::string* W3C::_internal_mutable_hex() {
  
  return hex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* W3C::release_hex() {
  // @@protoc_insertion_point(field_release:clarifai.api.W3C.hex)
  
  return hex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void W3C::set_allocated_hex(std::string* hex) {
  if (hex != nullptr) {
    
  } else {
    
  }
  hex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hex);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.W3C.hex)
}

// string name = 2;
inline void W3C::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& W3C::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.W3C.name)
  return _internal_name();
}
inline void W3C::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.W3C.name)
}
inline std::string* W3C::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.W3C.name)
  return _internal_mutable_name();
}
inline const std::string& W3C::_internal_name() const {
  return name_.GetNoArena();
}
inline void W3C::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void W3C::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.W3C.name)
}
inline void W3C::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.W3C.name)
}
inline void W3C::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.W3C.name)
}
inline std::string* W3C::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* W3C::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.W3C.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void W3C::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.W3C.name)
}

// -------------------------------------------------------------------

// UserAppIDSet

// string user_id = 1;
inline void UserAppIDSet::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserAppIDSet::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserAppIDSet.user_id)
  return _internal_user_id();
}
inline void UserAppIDSet::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserAppIDSet.user_id)
}
inline std::string* UserAppIDSet::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserAppIDSet.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UserAppIDSet::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void UserAppIDSet::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserAppIDSet::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.UserAppIDSet.user_id)
}
inline void UserAppIDSet::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.UserAppIDSet.user_id)
}
inline void UserAppIDSet::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.UserAppIDSet.user_id)
}
inline std::string* UserAppIDSet::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserAppIDSet::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserAppIDSet.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserAppIDSet::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserAppIDSet.user_id)
}

// string app_id = 2;
inline void UserAppIDSet::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserAppIDSet::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserAppIDSet.app_id)
  return _internal_app_id();
}
inline void UserAppIDSet::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserAppIDSet.app_id)
}
inline std::string* UserAppIDSet::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserAppIDSet.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& UserAppIDSet::_internal_app_id() const {
  return app_id_.GetNoArena();
}
inline void UserAppIDSet::_internal_set_app_id(const std::string& value) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserAppIDSet::set_app_id(std::string&& value) {
  
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.UserAppIDSet.app_id)
}
inline void UserAppIDSet::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.UserAppIDSet.app_id)
}
inline void UserAppIDSet::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.UserAppIDSet.app_id)
}
inline std::string* UserAppIDSet::_internal_mutable_app_id() {
  
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserAppIDSet::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserAppIDSet.app_id)
  
  return app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserAppIDSet::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserAppIDSet.app_id)
}

// -------------------------------------------------------------------

// PatchAction

// string op = 1;
inline void PatchAction::clear_op() {
  op_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchAction::op() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAction.op)
  return _internal_op();
}
inline void PatchAction::set_op(const std::string& value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAction.op)
}
inline std::string* PatchAction::mutable_op() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAction.op)
  return _internal_mutable_op();
}
inline const std::string& PatchAction::_internal_op() const {
  return op_.GetNoArena();
}
inline void PatchAction::_internal_set_op(const std::string& value) {
  
  op_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchAction::set_op(std::string&& value) {
  
  op_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchAction.op)
}
inline void PatchAction::set_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchAction.op)
}
inline void PatchAction::set_op(const char* value, size_t size) {
  
  op_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchAction.op)
}
inline std::string* PatchAction::_internal_mutable_op() {
  
  return op_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchAction::release_op() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAction.op)
  
  return op_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchAction::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    
  } else {
    
  }
  op_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAction.op)
}

// string merge_conflict_resolution = 2;
inline void PatchAction::clear_merge_conflict_resolution() {
  merge_conflict_resolution_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchAction::merge_conflict_resolution() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAction.merge_conflict_resolution)
  return _internal_merge_conflict_resolution();
}
inline void PatchAction::set_merge_conflict_resolution(const std::string& value) {
  _internal_set_merge_conflict_resolution(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAction.merge_conflict_resolution)
}
inline std::string* PatchAction::mutable_merge_conflict_resolution() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAction.merge_conflict_resolution)
  return _internal_mutable_merge_conflict_resolution();
}
inline const std::string& PatchAction::_internal_merge_conflict_resolution() const {
  return merge_conflict_resolution_.GetNoArena();
}
inline void PatchAction::_internal_set_merge_conflict_resolution(const std::string& value) {
  
  merge_conflict_resolution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchAction::set_merge_conflict_resolution(std::string&& value) {
  
  merge_conflict_resolution_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchAction.merge_conflict_resolution)
}
inline void PatchAction::set_merge_conflict_resolution(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merge_conflict_resolution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchAction.merge_conflict_resolution)
}
inline void PatchAction::set_merge_conflict_resolution(const char* value, size_t size) {
  
  merge_conflict_resolution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchAction.merge_conflict_resolution)
}
inline std::string* PatchAction::_internal_mutable_merge_conflict_resolution() {
  
  return merge_conflict_resolution_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchAction::release_merge_conflict_resolution() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAction.merge_conflict_resolution)
  
  return merge_conflict_resolution_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchAction::set_allocated_merge_conflict_resolution(std::string* merge_conflict_resolution) {
  if (merge_conflict_resolution != nullptr) {
    
  } else {
    
  }
  merge_conflict_resolution_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merge_conflict_resolution);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAction.merge_conflict_resolution)
}

// string path = 3;
inline void PatchAction::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatchAction::path() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PatchAction.path)
  return _internal_path();
}
inline void PatchAction::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PatchAction.path)
}
inline std::string* PatchAction::mutable_path() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PatchAction.path)
  return _internal_mutable_path();
}
inline const std::string& PatchAction::_internal_path() const {
  return path_.GetNoArena();
}
inline void PatchAction::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatchAction::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PatchAction.path)
}
inline void PatchAction::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PatchAction.path)
}
inline void PatchAction::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PatchAction.path)
}
inline std::string* PatchAction::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatchAction::release_path() {
  // @@protoc_insertion_point(field_release:clarifai.api.PatchAction.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatchAction::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PatchAction.path)
}

// -------------------------------------------------------------------

// Concept

// string id = 1;
inline void Concept::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Concept::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.id)
  return _internal_id();
}
inline void Concept::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.id)
}
inline std::string* Concept::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.id)
  return _internal_mutable_id();
}
inline const std::string& Concept::_internal_id() const {
  return id_.GetNoArena();
}
inline void Concept::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Concept::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Concept.id)
}
inline void Concept::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Concept.id)
}
inline void Concept::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Concept.id)
}
inline std::string* Concept::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Concept::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Concept::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.id)
}

// string name = 2;
inline void Concept::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Concept::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.name)
  return _internal_name();
}
inline void Concept::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.name)
}
inline std::string* Concept::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.name)
  return _internal_mutable_name();
}
inline const std::string& Concept::_internal_name() const {
  return name_.GetNoArena();
}
inline void Concept::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Concept::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Concept.name)
}
inline void Concept::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Concept.name)
}
inline void Concept::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Concept.name)
}
inline std::string* Concept::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Concept::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Concept::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.name)
}

// float value = 3 [(.clarifai.api.utils.cl_show_if_empty) = true, (.clarifai.api.utils.cl_default_float) = 1];
inline void Concept::clear_value() {
  value_ = 0;
}
inline float Concept::_internal_value() const {
  return value_;
}
inline float Concept::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.value)
  return _internal_value();
}
inline void Concept::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Concept::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.value)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool Concept::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Concept::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Concept::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Concept::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Concept::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Concept::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Concept::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.created_at)
  return _internal_mutable_created_at();
}
inline void Concept::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.created_at)
}

// string language = 5;
inline void Concept::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Concept::language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.language)
  return _internal_language();
}
inline void Concept::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.language)
}
inline std::string* Concept::mutable_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.language)
  return _internal_mutable_language();
}
inline const std::string& Concept::_internal_language() const {
  return language_.GetNoArena();
}
inline void Concept::_internal_set_language(const std::string& value) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Concept::set_language(std::string&& value) {
  
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Concept.language)
}
inline void Concept::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Concept.language)
}
inline void Concept::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Concept.language)
}
inline std::string* Concept::_internal_mutable_language() {
  
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Concept::release_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.language)
  
  return language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Concept::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.language)
}

// string app_id = 6;
inline void Concept::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Concept::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.app_id)
  return _internal_app_id();
}
inline void Concept::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.app_id)
}
inline std::string* Concept::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& Concept::_internal_app_id() const {
  return app_id_.GetNoArena();
}
inline void Concept::_internal_set_app_id(const std::string& value) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Concept::set_app_id(std::string&& value) {
  
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Concept.app_id)
}
inline void Concept::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Concept.app_id)
}
inline void Concept::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Concept.app_id)
}
inline std::string* Concept::_internal_mutable_app_id() {
  
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Concept::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.app_id)
  
  return app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Concept::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.app_id)
}

// string definition = 7;
inline void Concept::clear_definition() {
  definition_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Concept::definition() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.definition)
  return _internal_definition();
}
inline void Concept::set_definition(const std::string& value) {
  _internal_set_definition(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.definition)
}
inline std::string* Concept::mutable_definition() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.definition)
  return _internal_mutable_definition();
}
inline const std::string& Concept::_internal_definition() const {
  return definition_.GetNoArena();
}
inline void Concept::_internal_set_definition(const std::string& value) {
  
  definition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Concept::set_definition(std::string&& value) {
  
  definition_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Concept.definition)
}
inline void Concept::set_definition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  definition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Concept.definition)
}
inline void Concept::set_definition(const char* value, size_t size) {
  
  definition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Concept.definition)
}
inline std::string* Concept::_internal_mutable_definition() {
  
  return definition_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Concept::release_definition() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.definition)
  
  return definition_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Concept::set_allocated_definition(std::string* definition) {
  if (definition != nullptr) {
    
  } else {
    
  }
  definition_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), definition);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.definition)
}

// string vocab_id = 8;
inline void Concept::clear_vocab_id() {
  vocab_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Concept::vocab_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.vocab_id)
  return _internal_vocab_id();
}
inline void Concept::set_vocab_id(const std::string& value) {
  _internal_set_vocab_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.vocab_id)
}
inline std::string* Concept::mutable_vocab_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.vocab_id)
  return _internal_mutable_vocab_id();
}
inline const std::string& Concept::_internal_vocab_id() const {
  return vocab_id_.GetNoArena();
}
inline void Concept::_internal_set_vocab_id(const std::string& value) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Concept::set_vocab_id(std::string&& value) {
  
  vocab_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Concept.vocab_id)
}
inline void Concept::set_vocab_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Concept.vocab_id)
}
inline void Concept::set_vocab_id(const char* value, size_t size) {
  
  vocab_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Concept.vocab_id)
}
inline std::string* Concept::_internal_mutable_vocab_id() {
  
  return vocab_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Concept::release_vocab_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.vocab_id)
  
  return vocab_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Concept::set_allocated_vocab_id(std::string* vocab_id) {
  if (vocab_id != nullptr) {
    
  } else {
    
  }
  vocab_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vocab_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.vocab_id)
}

// .clarifai.api.Visibility visibility = 9;
inline bool Concept::_internal_has_visibility() const {
  return this != internal_default_instance() && visibility_ != nullptr;
}
inline bool Concept::has_visibility() const {
  return _internal_has_visibility();
}
inline void Concept::clear_visibility() {
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
}
inline const ::clarifai::api::Visibility& Concept::_internal_visibility() const {
  const ::clarifai::api::Visibility* p = visibility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Visibility*>(
      &::clarifai::api::_Visibility_default_instance_);
}
inline const ::clarifai::api::Visibility& Concept::visibility() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.visibility)
  return _internal_visibility();
}
inline ::clarifai::api::Visibility* Concept::release_visibility() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.visibility)
  
  ::clarifai::api::Visibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::clarifai::api::Visibility* Concept::_internal_mutable_visibility() {
  
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Visibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  return visibility_;
}
inline ::clarifai::api::Visibility* Concept::mutable_visibility() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.visibility)
  return _internal_mutable_visibility();
}
inline void Concept::set_allocated_visibility(::clarifai::api::Visibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    
  } else {
    
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.visibility)
}

// string user_id = 10;
inline void Concept::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Concept::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Concept.user_id)
  return _internal_user_id();
}
inline void Concept::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Concept.user_id)
}
inline std::string* Concept::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Concept.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Concept::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void Concept::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Concept::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Concept.user_id)
}
inline void Concept::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Concept.user_id)
}
inline void Concept::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Concept.user_id)
}
inline std::string* Concept::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Concept::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Concept.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Concept::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Concept.user_id)
}

// -------------------------------------------------------------------

// ConceptCount

// string id = 1;
inline void ConceptCount::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConceptCount::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptCount.id)
  return _internal_id();
}
inline void ConceptCount::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptCount.id)
}
inline std::string* ConceptCount::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptCount.id)
  return _internal_mutable_id();
}
inline const std::string& ConceptCount::_internal_id() const {
  return id_.GetNoArena();
}
inline void ConceptCount::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConceptCount::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptCount.id)
}
inline void ConceptCount::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptCount.id)
}
inline void ConceptCount::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptCount.id)
}
inline std::string* ConceptCount::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConceptCount::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptCount.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConceptCount::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptCount.id)
}

// string name = 2;
inline void ConceptCount::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConceptCount::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptCount.name)
  return _internal_name();
}
inline void ConceptCount::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptCount.name)
}
inline std::string* ConceptCount::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptCount.name)
  return _internal_mutable_name();
}
inline const std::string& ConceptCount::_internal_name() const {
  return name_.GetNoArena();
}
inline void ConceptCount::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConceptCount::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptCount.name)
}
inline void ConceptCount::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptCount.name)
}
inline void ConceptCount::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptCount.name)
}
inline std::string* ConceptCount::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConceptCount::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptCount.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConceptCount::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptCount.name)
}

// .clarifai.api.ConceptTypeCount concept_type_count = 3;
inline bool ConceptCount::_internal_has_concept_type_count() const {
  return this != internal_default_instance() && concept_type_count_ != nullptr;
}
inline bool ConceptCount::has_concept_type_count() const {
  return _internal_has_concept_type_count();
}
inline void ConceptCount::clear_concept_type_count() {
  if (GetArenaNoVirtual() == nullptr && concept_type_count_ != nullptr) {
    delete concept_type_count_;
  }
  concept_type_count_ = nullptr;
}
inline const ::clarifai::api::ConceptTypeCount& ConceptCount::_internal_concept_type_count() const {
  const ::clarifai::api::ConceptTypeCount* p = concept_type_count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptTypeCount*>(
      &::clarifai::api::_ConceptTypeCount_default_instance_);
}
inline const ::clarifai::api::ConceptTypeCount& ConceptCount::concept_type_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptCount.concept_type_count)
  return _internal_concept_type_count();
}
inline ::clarifai::api::ConceptTypeCount* ConceptCount::release_concept_type_count() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptCount.concept_type_count)
  
  ::clarifai::api::ConceptTypeCount* temp = concept_type_count_;
  concept_type_count_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* ConceptCount::_internal_mutable_concept_type_count() {
  
  if (concept_type_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptTypeCount>(GetArenaNoVirtual());
    concept_type_count_ = p;
  }
  return concept_type_count_;
}
inline ::clarifai::api::ConceptTypeCount* ConceptCount::mutable_concept_type_count() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptCount.concept_type_count)
  return _internal_mutable_concept_type_count();
}
inline void ConceptCount::set_allocated_concept_type_count(::clarifai::api::ConceptTypeCount* concept_type_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete concept_type_count_;
  }
  if (concept_type_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concept_type_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept_type_count, submessage_arena);
    }
    
  } else {
    
  }
  concept_type_count_ = concept_type_count;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptCount.concept_type_count)
}

// .clarifai.api.DetailConceptCount detail_concept_count = 4;
inline bool ConceptCount::_internal_has_detail_concept_count() const {
  return this != internal_default_instance() && detail_concept_count_ != nullptr;
}
inline bool ConceptCount::has_detail_concept_count() const {
  return _internal_has_detail_concept_count();
}
inline void ConceptCount::clear_detail_concept_count() {
  if (GetArenaNoVirtual() == nullptr && detail_concept_count_ != nullptr) {
    delete detail_concept_count_;
  }
  detail_concept_count_ = nullptr;
}
inline const ::clarifai::api::DetailConceptCount& ConceptCount::_internal_detail_concept_count() const {
  const ::clarifai::api::DetailConceptCount* p = detail_concept_count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::DetailConceptCount*>(
      &::clarifai::api::_DetailConceptCount_default_instance_);
}
inline const ::clarifai::api::DetailConceptCount& ConceptCount::detail_concept_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptCount.detail_concept_count)
  return _internal_detail_concept_count();
}
inline ::clarifai::api::DetailConceptCount* ConceptCount::release_detail_concept_count() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptCount.detail_concept_count)
  
  ::clarifai::api::DetailConceptCount* temp = detail_concept_count_;
  detail_concept_count_ = nullptr;
  return temp;
}
inline ::clarifai::api::DetailConceptCount* ConceptCount::_internal_mutable_detail_concept_count() {
  
  if (detail_concept_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::DetailConceptCount>(GetArenaNoVirtual());
    detail_concept_count_ = p;
  }
  return detail_concept_count_;
}
inline ::clarifai::api::DetailConceptCount* ConceptCount::mutable_detail_concept_count() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptCount.detail_concept_count)
  return _internal_mutable_detail_concept_count();
}
inline void ConceptCount::set_allocated_detail_concept_count(::clarifai::api::DetailConceptCount* detail_concept_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detail_concept_count_;
  }
  if (detail_concept_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detail_concept_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail_concept_count, submessage_arena);
    }
    
  } else {
    
  }
  detail_concept_count_ = detail_concept_count;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptCount.detail_concept_count)
}

// -------------------------------------------------------------------

// ConceptTypeCount

// uint32 positive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void ConceptTypeCount::clear_positive() {
  positive_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConceptTypeCount::_internal_positive() const {
  return positive_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConceptTypeCount::positive() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptTypeCount.positive)
  return _internal_positive();
}
inline void ConceptTypeCount::_internal_set_positive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  positive_ = value;
}
inline void ConceptTypeCount::set_positive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_positive(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptTypeCount.positive)
}

// uint32 negative = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void ConceptTypeCount::clear_negative() {
  negative_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConceptTypeCount::_internal_negative() const {
  return negative_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConceptTypeCount::negative() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptTypeCount.negative)
  return _internal_negative();
}
inline void ConceptTypeCount::_internal_set_negative(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  negative_ = value;
}
inline void ConceptTypeCount::set_negative(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_negative(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptTypeCount.negative)
}

// -------------------------------------------------------------------

// DetailConceptCount

// .clarifai.api.ConceptTypeCount processed = 1;
inline bool DetailConceptCount::_internal_has_processed() const {
  return this != internal_default_instance() && processed_ != nullptr;
}
inline bool DetailConceptCount::has_processed() const {
  return _internal_has_processed();
}
inline void DetailConceptCount::clear_processed() {
  if (GetArenaNoVirtual() == nullptr && processed_ != nullptr) {
    delete processed_;
  }
  processed_ = nullptr;
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::_internal_processed() const {
  const ::clarifai::api::ConceptTypeCount* p = processed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptTypeCount*>(
      &::clarifai::api::_ConceptTypeCount_default_instance_);
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::processed() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DetailConceptCount.processed)
  return _internal_processed();
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::release_processed() {
  // @@protoc_insertion_point(field_release:clarifai.api.DetailConceptCount.processed)
  
  ::clarifai::api::ConceptTypeCount* temp = processed_;
  processed_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::_internal_mutable_processed() {
  
  if (processed_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptTypeCount>(GetArenaNoVirtual());
    processed_ = p;
  }
  return processed_;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::mutable_processed() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DetailConceptCount.processed)
  return _internal_mutable_processed();
}
inline void DetailConceptCount::set_allocated_processed(::clarifai::api::ConceptTypeCount* processed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete processed_;
  }
  if (processed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      processed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processed, submessage_arena);
    }
    
  } else {
    
  }
  processed_ = processed;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DetailConceptCount.processed)
}

// .clarifai.api.ConceptTypeCount to_process = 2;
inline bool DetailConceptCount::_internal_has_to_process() const {
  return this != internal_default_instance() && to_process_ != nullptr;
}
inline bool DetailConceptCount::has_to_process() const {
  return _internal_has_to_process();
}
inline void DetailConceptCount::clear_to_process() {
  if (GetArenaNoVirtual() == nullptr && to_process_ != nullptr) {
    delete to_process_;
  }
  to_process_ = nullptr;
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::_internal_to_process() const {
  const ::clarifai::api::ConceptTypeCount* p = to_process_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptTypeCount*>(
      &::clarifai::api::_ConceptTypeCount_default_instance_);
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::to_process() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DetailConceptCount.to_process)
  return _internal_to_process();
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::release_to_process() {
  // @@protoc_insertion_point(field_release:clarifai.api.DetailConceptCount.to_process)
  
  ::clarifai::api::ConceptTypeCount* temp = to_process_;
  to_process_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::_internal_mutable_to_process() {
  
  if (to_process_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptTypeCount>(GetArenaNoVirtual());
    to_process_ = p;
  }
  return to_process_;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::mutable_to_process() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DetailConceptCount.to_process)
  return _internal_mutable_to_process();
}
inline void DetailConceptCount::set_allocated_to_process(::clarifai::api::ConceptTypeCount* to_process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete to_process_;
  }
  if (to_process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      to_process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_process, submessage_arena);
    }
    
  } else {
    
  }
  to_process_ = to_process;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DetailConceptCount.to_process)
}

// .clarifai.api.ConceptTypeCount errors = 3;
inline bool DetailConceptCount::_internal_has_errors() const {
  return this != internal_default_instance() && errors_ != nullptr;
}
inline bool DetailConceptCount::has_errors() const {
  return _internal_has_errors();
}
inline void DetailConceptCount::clear_errors() {
  if (GetArenaNoVirtual() == nullptr && errors_ != nullptr) {
    delete errors_;
  }
  errors_ = nullptr;
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::_internal_errors() const {
  const ::clarifai::api::ConceptTypeCount* p = errors_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptTypeCount*>(
      &::clarifai::api::_ConceptTypeCount_default_instance_);
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::errors() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DetailConceptCount.errors)
  return _internal_errors();
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::release_errors() {
  // @@protoc_insertion_point(field_release:clarifai.api.DetailConceptCount.errors)
  
  ::clarifai::api::ConceptTypeCount* temp = errors_;
  errors_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::_internal_mutable_errors() {
  
  if (errors_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptTypeCount>(GetArenaNoVirtual());
    errors_ = p;
  }
  return errors_;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::mutable_errors() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DetailConceptCount.errors)
  return _internal_mutable_errors();
}
inline void DetailConceptCount::set_allocated_errors(::clarifai::api::ConceptTypeCount* errors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete errors_;
  }
  if (errors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      errors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errors, submessage_arena);
    }
    
  } else {
    
  }
  errors_ = errors;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DetailConceptCount.errors)
}

// .clarifai.api.ConceptTypeCount processing = 4;
inline bool DetailConceptCount::_internal_has_processing() const {
  return this != internal_default_instance() && processing_ != nullptr;
}
inline bool DetailConceptCount::has_processing() const {
  return _internal_has_processing();
}
inline void DetailConceptCount::clear_processing() {
  if (GetArenaNoVirtual() == nullptr && processing_ != nullptr) {
    delete processing_;
  }
  processing_ = nullptr;
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::_internal_processing() const {
  const ::clarifai::api::ConceptTypeCount* p = processing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConceptTypeCount*>(
      &::clarifai::api::_ConceptTypeCount_default_instance_);
}
inline const ::clarifai::api::ConceptTypeCount& DetailConceptCount::processing() const {
  // @@protoc_insertion_point(field_get:clarifai.api.DetailConceptCount.processing)
  return _internal_processing();
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::release_processing() {
  // @@protoc_insertion_point(field_release:clarifai.api.DetailConceptCount.processing)
  
  ::clarifai::api::ConceptTypeCount* temp = processing_;
  processing_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::_internal_mutable_processing() {
  
  if (processing_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConceptTypeCount>(GetArenaNoVirtual());
    processing_ = p;
  }
  return processing_;
}
inline ::clarifai::api::ConceptTypeCount* DetailConceptCount::mutable_processing() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.DetailConceptCount.processing)
  return _internal_mutable_processing();
}
inline void DetailConceptCount::set_allocated_processing(::clarifai::api::ConceptTypeCount* processing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete processing_;
  }
  if (processing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      processing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing, submessage_arena);
    }
    
  } else {
    
  }
  processing_ = processing;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.DetailConceptCount.processing)
}

// -------------------------------------------------------------------

// ConceptQuery

// string name = 1;
inline void ConceptQuery::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConceptQuery::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptQuery.name)
  return _internal_name();
}
inline void ConceptQuery::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptQuery.name)
}
inline std::string* ConceptQuery::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptQuery.name)
  return _internal_mutable_name();
}
inline const std::string& ConceptQuery::_internal_name() const {
  return name_.GetNoArena();
}
inline void ConceptQuery::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConceptQuery::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptQuery.name)
}
inline void ConceptQuery::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptQuery.name)
}
inline void ConceptQuery::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptQuery.name)
}
inline std::string* ConceptQuery::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConceptQuery::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptQuery.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConceptQuery::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptQuery.name)
}

// string language = 2;
inline void ConceptQuery::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConceptQuery::language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptQuery.language)
  return _internal_language();
}
inline void ConceptQuery::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptQuery.language)
}
inline std::string* ConceptQuery::mutable_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptQuery.language)
  return _internal_mutable_language();
}
inline const std::string& ConceptQuery::_internal_language() const {
  return language_.GetNoArena();
}
inline void ConceptQuery::_internal_set_language(const std::string& value) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConceptQuery::set_language(std::string&& value) {
  
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptQuery.language)
}
inline void ConceptQuery::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptQuery.language)
}
inline void ConceptQuery::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptQuery.language)
}
inline std::string* ConceptQuery::_internal_mutable_language() {
  
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConceptQuery::release_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptQuery.language)
  
  return language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConceptQuery::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptQuery.language)
}

// string workflow_id = 3;
inline void ConceptQuery::clear_workflow_id() {
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConceptQuery::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptQuery.workflow_id)
  return _internal_workflow_id();
}
inline void ConceptQuery::set_workflow_id(const std::string& value) {
  _internal_set_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptQuery.workflow_id)
}
inline std::string* ConceptQuery::mutable_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptQuery.workflow_id)
  return _internal_mutable_workflow_id();
}
inline const std::string& ConceptQuery::_internal_workflow_id() const {
  return workflow_id_.GetNoArena();
}
inline void ConceptQuery::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConceptQuery::set_workflow_id(std::string&& value) {
  
  workflow_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptQuery.workflow_id)
}
inline void ConceptQuery::set_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptQuery.workflow_id)
}
inline void ConceptQuery::set_workflow_id(const char* value, size_t size) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptQuery.workflow_id)
}
inline std::string* ConceptQuery::_internal_mutable_workflow_id() {
  
  return workflow_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConceptQuery::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptQuery.workflow_id)
  
  return workflow_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConceptQuery::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptQuery.workflow_id)
}

// -------------------------------------------------------------------

// ConceptRelation

// string id = 1;
inline void ConceptRelation::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConceptRelation::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptRelation.id)
  return _internal_id();
}
inline void ConceptRelation::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptRelation.id)
}
inline std::string* ConceptRelation::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptRelation.id)
  return _internal_mutable_id();
}
inline const std::string& ConceptRelation::_internal_id() const {
  return id_.GetNoArena();
}
inline void ConceptRelation::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConceptRelation::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptRelation.id)
}
inline void ConceptRelation::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptRelation.id)
}
inline void ConceptRelation::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptRelation.id)
}
inline std::string* ConceptRelation::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConceptRelation::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptRelation.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConceptRelation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptRelation.id)
}

// .clarifai.api.Concept subject_concept = 2;
inline bool ConceptRelation::_internal_has_subject_concept() const {
  return this != internal_default_instance() && subject_concept_ != nullptr;
}
inline bool ConceptRelation::has_subject_concept() const {
  return _internal_has_subject_concept();
}
inline void ConceptRelation::clear_subject_concept() {
  if (GetArenaNoVirtual() == nullptr && subject_concept_ != nullptr) {
    delete subject_concept_;
  }
  subject_concept_ = nullptr;
}
inline const ::clarifai::api::Concept& ConceptRelation::_internal_subject_concept() const {
  const ::clarifai::api::Concept* p = subject_concept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Concept*>(
      &::clarifai::api::_Concept_default_instance_);
}
inline const ::clarifai::api::Concept& ConceptRelation::subject_concept() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptRelation.subject_concept)
  return _internal_subject_concept();
}
inline ::clarifai::api::Concept* ConceptRelation::release_subject_concept() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptRelation.subject_concept)
  
  ::clarifai::api::Concept* temp = subject_concept_;
  subject_concept_ = nullptr;
  return temp;
}
inline ::clarifai::api::Concept* ConceptRelation::_internal_mutable_subject_concept() {
  
  if (subject_concept_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Concept>(GetArenaNoVirtual());
    subject_concept_ = p;
  }
  return subject_concept_;
}
inline ::clarifai::api::Concept* ConceptRelation::mutable_subject_concept() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptRelation.subject_concept)
  return _internal_mutable_subject_concept();
}
inline void ConceptRelation::set_allocated_subject_concept(::clarifai::api::Concept* subject_concept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subject_concept_;
  }
  if (subject_concept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subject_concept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject_concept, submessage_arena);
    }
    
  } else {
    
  }
  subject_concept_ = subject_concept;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptRelation.subject_concept)
}

// .clarifai.api.Concept object_concept = 3;
inline bool ConceptRelation::_internal_has_object_concept() const {
  return this != internal_default_instance() && object_concept_ != nullptr;
}
inline bool ConceptRelation::has_object_concept() const {
  return _internal_has_object_concept();
}
inline void ConceptRelation::clear_object_concept() {
  if (GetArenaNoVirtual() == nullptr && object_concept_ != nullptr) {
    delete object_concept_;
  }
  object_concept_ = nullptr;
}
inline const ::clarifai::api::Concept& ConceptRelation::_internal_object_concept() const {
  const ::clarifai::api::Concept* p = object_concept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Concept*>(
      &::clarifai::api::_Concept_default_instance_);
}
inline const ::clarifai::api::Concept& ConceptRelation::object_concept() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptRelation.object_concept)
  return _internal_object_concept();
}
inline ::clarifai::api::Concept* ConceptRelation::release_object_concept() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptRelation.object_concept)
  
  ::clarifai::api::Concept* temp = object_concept_;
  object_concept_ = nullptr;
  return temp;
}
inline ::clarifai::api::Concept* ConceptRelation::_internal_mutable_object_concept() {
  
  if (object_concept_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Concept>(GetArenaNoVirtual());
    object_concept_ = p;
  }
  return object_concept_;
}
inline ::clarifai::api::Concept* ConceptRelation::mutable_object_concept() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptRelation.object_concept)
  return _internal_mutable_object_concept();
}
inline void ConceptRelation::set_allocated_object_concept(::clarifai::api::Concept* object_concept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete object_concept_;
  }
  if (object_concept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object_concept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_concept, submessage_arena);
    }
    
  } else {
    
  }
  object_concept_ = object_concept;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptRelation.object_concept)
}

// string predicate = 4;
inline void ConceptRelation::clear_predicate() {
  predicate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConceptRelation::predicate() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptRelation.predicate)
  return _internal_predicate();
}
inline void ConceptRelation::set_predicate(const std::string& value) {
  _internal_set_predicate(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptRelation.predicate)
}
inline std::string* ConceptRelation::mutable_predicate() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptRelation.predicate)
  return _internal_mutable_predicate();
}
inline const std::string& ConceptRelation::_internal_predicate() const {
  return predicate_.GetNoArena();
}
inline void ConceptRelation::_internal_set_predicate(const std::string& value) {
  
  predicate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConceptRelation::set_predicate(std::string&& value) {
  
  predicate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptRelation.predicate)
}
inline void ConceptRelation::set_predicate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  predicate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptRelation.predicate)
}
inline void ConceptRelation::set_predicate(const char* value, size_t size) {
  
  predicate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptRelation.predicate)
}
inline std::string* ConceptRelation::_internal_mutable_predicate() {
  
  return predicate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConceptRelation::release_predicate() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptRelation.predicate)
  
  return predicate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConceptRelation::set_allocated_predicate(std::string* predicate) {
  if (predicate != nullptr) {
    
  } else {
    
  }
  predicate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), predicate);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptRelation.predicate)
}

// string knowledge_graph_id = 5;
inline void ConceptRelation::clear_knowledge_graph_id() {
  knowledge_graph_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConceptRelation::knowledge_graph_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptRelation.knowledge_graph_id)
  return _internal_knowledge_graph_id();
}
inline void ConceptRelation::set_knowledge_graph_id(const std::string& value) {
  _internal_set_knowledge_graph_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptRelation.knowledge_graph_id)
}
inline std::string* ConceptRelation::mutable_knowledge_graph_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptRelation.knowledge_graph_id)
  return _internal_mutable_knowledge_graph_id();
}
inline const std::string& ConceptRelation::_internal_knowledge_graph_id() const {
  return knowledge_graph_id_.GetNoArena();
}
inline void ConceptRelation::_internal_set_knowledge_graph_id(const std::string& value) {
  
  knowledge_graph_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConceptRelation::set_knowledge_graph_id(std::string&& value) {
  
  knowledge_graph_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptRelation.knowledge_graph_id)
}
inline void ConceptRelation::set_knowledge_graph_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  knowledge_graph_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptRelation.knowledge_graph_id)
}
inline void ConceptRelation::set_knowledge_graph_id(const char* value, size_t size) {
  
  knowledge_graph_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptRelation.knowledge_graph_id)
}
inline std::string* ConceptRelation::_internal_mutable_knowledge_graph_id() {
  
  return knowledge_graph_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConceptRelation::release_knowledge_graph_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptRelation.knowledge_graph_id)
  
  return knowledge_graph_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConceptRelation::set_allocated_knowledge_graph_id(std::string* knowledge_graph_id) {
  if (knowledge_graph_id != nullptr) {
    
  } else {
    
  }
  knowledge_graph_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), knowledge_graph_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptRelation.knowledge_graph_id)
}

// .clarifai.api.Visibility visibility = 6;
inline bool ConceptRelation::_internal_has_visibility() const {
  return this != internal_default_instance() && visibility_ != nullptr;
}
inline bool ConceptRelation::has_visibility() const {
  return _internal_has_visibility();
}
inline void ConceptRelation::clear_visibility() {
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
}
inline const ::clarifai::api::Visibility& ConceptRelation::_internal_visibility() const {
  const ::clarifai::api::Visibility* p = visibility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Visibility*>(
      &::clarifai::api::_Visibility_default_instance_);
}
inline const ::clarifai::api::Visibility& ConceptRelation::visibility() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptRelation.visibility)
  return _internal_visibility();
}
inline ::clarifai::api::Visibility* ConceptRelation::release_visibility() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptRelation.visibility)
  
  ::clarifai::api::Visibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::clarifai::api::Visibility* ConceptRelation::_internal_mutable_visibility() {
  
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Visibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  return visibility_;
}
inline ::clarifai::api::Visibility* ConceptRelation::mutable_visibility() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptRelation.visibility)
  return _internal_mutable_visibility();
}
inline void ConceptRelation::set_allocated_visibility(::clarifai::api::Visibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    
  } else {
    
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptRelation.visibility)
}

// -------------------------------------------------------------------

// KnowledgeGraph

// string id = 1;
inline void KnowledgeGraph::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KnowledgeGraph::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.KnowledgeGraph.id)
  return _internal_id();
}
inline void KnowledgeGraph::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.KnowledgeGraph.id)
}
inline std::string* KnowledgeGraph::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.KnowledgeGraph.id)
  return _internal_mutable_id();
}
inline const std::string& KnowledgeGraph::_internal_id() const {
  return id_.GetNoArena();
}
inline void KnowledgeGraph::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KnowledgeGraph::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.KnowledgeGraph.id)
}
inline void KnowledgeGraph::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.KnowledgeGraph.id)
}
inline void KnowledgeGraph::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.KnowledgeGraph.id)
}
inline std::string* KnowledgeGraph::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KnowledgeGraph::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.KnowledgeGraph.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KnowledgeGraph::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.KnowledgeGraph.id)
}

// string name = 2;
inline void KnowledgeGraph::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KnowledgeGraph::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.KnowledgeGraph.name)
  return _internal_name();
}
inline void KnowledgeGraph::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.KnowledgeGraph.name)
}
inline std::string* KnowledgeGraph::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.KnowledgeGraph.name)
  return _internal_mutable_name();
}
inline const std::string& KnowledgeGraph::_internal_name() const {
  return name_.GetNoArena();
}
inline void KnowledgeGraph::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KnowledgeGraph::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.KnowledgeGraph.name)
}
inline void KnowledgeGraph::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.KnowledgeGraph.name)
}
inline void KnowledgeGraph::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.KnowledgeGraph.name)
}
inline std::string* KnowledgeGraph::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KnowledgeGraph::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.KnowledgeGraph.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KnowledgeGraph::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.KnowledgeGraph.name)
}

// string description = 3;
inline void KnowledgeGraph::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KnowledgeGraph::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.KnowledgeGraph.description)
  return _internal_description();
}
inline void KnowledgeGraph::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.KnowledgeGraph.description)
}
inline std::string* KnowledgeGraph::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.KnowledgeGraph.description)
  return _internal_mutable_description();
}
inline const std::string& KnowledgeGraph::_internal_description() const {
  return description_.GetNoArena();
}
inline void KnowledgeGraph::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KnowledgeGraph::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.KnowledgeGraph.description)
}
inline void KnowledgeGraph::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.KnowledgeGraph.description)
}
inline void KnowledgeGraph::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.KnowledgeGraph.description)
}
inline std::string* KnowledgeGraph::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KnowledgeGraph::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.KnowledgeGraph.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KnowledgeGraph::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.KnowledgeGraph.description)
}

// string examples_app_id = 4;
inline void KnowledgeGraph::clear_examples_app_id() {
  examples_app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KnowledgeGraph::examples_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.KnowledgeGraph.examples_app_id)
  return _internal_examples_app_id();
}
inline void KnowledgeGraph::set_examples_app_id(const std::string& value) {
  _internal_set_examples_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.KnowledgeGraph.examples_app_id)
}
inline std::string* KnowledgeGraph::mutable_examples_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.KnowledgeGraph.examples_app_id)
  return _internal_mutable_examples_app_id();
}
inline const std::string& KnowledgeGraph::_internal_examples_app_id() const {
  return examples_app_id_.GetNoArena();
}
inline void KnowledgeGraph::_internal_set_examples_app_id(const std::string& value) {
  
  examples_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KnowledgeGraph::set_examples_app_id(std::string&& value) {
  
  examples_app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.KnowledgeGraph.examples_app_id)
}
inline void KnowledgeGraph::set_examples_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  examples_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.KnowledgeGraph.examples_app_id)
}
inline void KnowledgeGraph::set_examples_app_id(const char* value, size_t size) {
  
  examples_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.KnowledgeGraph.examples_app_id)
}
inline std::string* KnowledgeGraph::_internal_mutable_examples_app_id() {
  
  return examples_app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KnowledgeGraph::release_examples_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.KnowledgeGraph.examples_app_id)
  
  return examples_app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KnowledgeGraph::set_allocated_examples_app_id(std::string* examples_app_id) {
  if (examples_app_id != nullptr) {
    
  } else {
    
  }
  examples_app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), examples_app_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.KnowledgeGraph.examples_app_id)
}

// string sampled_examples_app_id = 5;
inline void KnowledgeGraph::clear_sampled_examples_app_id() {
  sampled_examples_app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KnowledgeGraph::sampled_examples_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
  return _internal_sampled_examples_app_id();
}
inline void KnowledgeGraph::set_sampled_examples_app_id(const std::string& value) {
  _internal_set_sampled_examples_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
}
inline std::string* KnowledgeGraph::mutable_sampled_examples_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
  return _internal_mutable_sampled_examples_app_id();
}
inline const std::string& KnowledgeGraph::_internal_sampled_examples_app_id() const {
  return sampled_examples_app_id_.GetNoArena();
}
inline void KnowledgeGraph::_internal_set_sampled_examples_app_id(const std::string& value) {
  
  sampled_examples_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KnowledgeGraph::set_sampled_examples_app_id(std::string&& value) {
  
  sampled_examples_app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
}
inline void KnowledgeGraph::set_sampled_examples_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sampled_examples_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
}
inline void KnowledgeGraph::set_sampled_examples_app_id(const char* value, size_t size) {
  
  sampled_examples_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
}
inline std::string* KnowledgeGraph::_internal_mutable_sampled_examples_app_id() {
  
  return sampled_examples_app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KnowledgeGraph::release_sampled_examples_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
  
  return sampled_examples_app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KnowledgeGraph::set_allocated_sampled_examples_app_id(std::string* sampled_examples_app_id) {
  if (sampled_examples_app_id != nullptr) {
    
  } else {
    
  }
  sampled_examples_app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sampled_examples_app_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.KnowledgeGraph.sampled_examples_app_id)
}

// -------------------------------------------------------------------

// ConceptMappingJob

// string knowledge_graph_id = 1;
inline void ConceptMappingJob::clear_knowledge_graph_id() {
  knowledge_graph_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConceptMappingJob::knowledge_graph_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptMappingJob.knowledge_graph_id)
  return _internal_knowledge_graph_id();
}
inline void ConceptMappingJob::set_knowledge_graph_id(const std::string& value) {
  _internal_set_knowledge_graph_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptMappingJob.knowledge_graph_id)
}
inline std::string* ConceptMappingJob::mutable_knowledge_graph_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptMappingJob.knowledge_graph_id)
  return _internal_mutable_knowledge_graph_id();
}
inline const std::string& ConceptMappingJob::_internal_knowledge_graph_id() const {
  return knowledge_graph_id_.GetNoArena();
}
inline void ConceptMappingJob::_internal_set_knowledge_graph_id(const std::string& value) {
  
  knowledge_graph_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConceptMappingJob::set_knowledge_graph_id(std::string&& value) {
  
  knowledge_graph_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptMappingJob.knowledge_graph_id)
}
inline void ConceptMappingJob::set_knowledge_graph_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  knowledge_graph_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptMappingJob.knowledge_graph_id)
}
inline void ConceptMappingJob::set_knowledge_graph_id(const char* value, size_t size) {
  
  knowledge_graph_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptMappingJob.knowledge_graph_id)
}
inline std::string* ConceptMappingJob::_internal_mutable_knowledge_graph_id() {
  
  return knowledge_graph_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConceptMappingJob::release_knowledge_graph_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptMappingJob.knowledge_graph_id)
  
  return knowledge_graph_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConceptMappingJob::set_allocated_knowledge_graph_id(std::string* knowledge_graph_id) {
  if (knowledge_graph_id != nullptr) {
    
  } else {
    
  }
  knowledge_graph_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), knowledge_graph_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptMappingJob.knowledge_graph_id)
}

// repeated string concept_ids = 2;
inline int ConceptMappingJob::_internal_concept_ids_size() const {
  return concept_ids_.size();
}
inline int ConceptMappingJob::concept_ids_size() const {
  return _internal_concept_ids_size();
}
inline void ConceptMappingJob::clear_concept_ids() {
  concept_ids_.Clear();
}
inline std::string* ConceptMappingJob::add_concept_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ConceptMappingJob.concept_ids)
  return _internal_add_concept_ids();
}
inline const std::string& ConceptMappingJob::_internal_concept_ids(int index) const {
  return concept_ids_.Get(index);
}
inline const std::string& ConceptMappingJob::concept_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptMappingJob.concept_ids)
  return _internal_concept_ids(index);
}
inline std::string* ConceptMappingJob::mutable_concept_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptMappingJob.concept_ids)
  return concept_ids_.Mutable(index);
}
inline void ConceptMappingJob::set_concept_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptMappingJob.concept_ids)
  concept_ids_.Mutable(index)->assign(value);
}
inline void ConceptMappingJob::set_concept_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptMappingJob.concept_ids)
  concept_ids_.Mutable(index)->assign(std::move(value));
}
inline void ConceptMappingJob::set_concept_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptMappingJob.concept_ids)
}
inline void ConceptMappingJob::set_concept_ids(int index, const char* value, size_t size) {
  concept_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptMappingJob.concept_ids)
}
inline std::string* ConceptMappingJob::_internal_add_concept_ids() {
  return concept_ids_.Add();
}
inline void ConceptMappingJob::add_concept_ids(const std::string& value) {
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ConceptMappingJob.concept_ids)
}
inline void ConceptMappingJob::add_concept_ids(std::string&& value) {
  concept_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ConceptMappingJob.concept_ids)
}
inline void ConceptMappingJob::add_concept_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ConceptMappingJob.concept_ids)
}
inline void ConceptMappingJob::add_concept_ids(const char* value, size_t size) {
  concept_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ConceptMappingJob.concept_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConceptMappingJob::concept_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ConceptMappingJob.concept_ids)
  return concept_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConceptMappingJob::mutable_concept_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ConceptMappingJob.concept_ids)
  return &concept_ids_;
}

// -------------------------------------------------------------------

// ConceptLanguage

// string id = 1;
inline void ConceptLanguage::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConceptLanguage::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptLanguage.id)
  return _internal_id();
}
inline void ConceptLanguage::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptLanguage.id)
}
inline std::string* ConceptLanguage::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptLanguage.id)
  return _internal_mutable_id();
}
inline const std::string& ConceptLanguage::_internal_id() const {
  return id_.GetNoArena();
}
inline void ConceptLanguage::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConceptLanguage::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptLanguage.id)
}
inline void ConceptLanguage::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptLanguage.id)
}
inline void ConceptLanguage::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptLanguage.id)
}
inline std::string* ConceptLanguage::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConceptLanguage::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptLanguage.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConceptLanguage::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptLanguage.id)
}

// string name = 2;
inline void ConceptLanguage::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConceptLanguage::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptLanguage.name)
  return _internal_name();
}
inline void ConceptLanguage::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptLanguage.name)
}
inline std::string* ConceptLanguage::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptLanguage.name)
  return _internal_mutable_name();
}
inline const std::string& ConceptLanguage::_internal_name() const {
  return name_.GetNoArena();
}
inline void ConceptLanguage::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConceptLanguage::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptLanguage.name)
}
inline void ConceptLanguage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptLanguage.name)
}
inline void ConceptLanguage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptLanguage.name)
}
inline std::string* ConceptLanguage::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConceptLanguage::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptLanguage.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConceptLanguage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptLanguage.name)
}

// string definition = 3;
inline void ConceptLanguage::clear_definition() {
  definition_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConceptLanguage::definition() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConceptLanguage.definition)
  return _internal_definition();
}
inline void ConceptLanguage::set_definition(const std::string& value) {
  _internal_set_definition(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConceptLanguage.definition)
}
inline std::string* ConceptLanguage::mutable_definition() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConceptLanguage.definition)
  return _internal_mutable_definition();
}
inline const std::string& ConceptLanguage::_internal_definition() const {
  return definition_.GetNoArena();
}
inline void ConceptLanguage::_internal_set_definition(const std::string& value) {
  
  definition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConceptLanguage::set_definition(std::string&& value) {
  
  definition_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConceptLanguage.definition)
}
inline void ConceptLanguage::set_definition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  definition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConceptLanguage.definition)
}
inline void ConceptLanguage::set_definition(const char* value, size_t size) {
  
  definition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConceptLanguage.definition)
}
inline std::string* ConceptLanguage::_internal_mutable_definition() {
  
  return definition_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConceptLanguage::release_definition() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConceptLanguage.definition)
  
  return definition_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConceptLanguage::set_allocated_definition(std::string* definition) {
  if (definition != nullptr) {
    
  } else {
    
  }
  definition_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), definition);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConceptLanguage.definition)
}

// -------------------------------------------------------------------

// Data

// .clarifai.api.Image image = 1;
inline bool Data::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool Data::has_image() const {
  return _internal_has_image();
}
inline void Data::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::clarifai::api::Image& Data::_internal_image() const {
  const ::clarifai::api::Image* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Image*>(
      &::clarifai::api::_Image_default_instance_);
}
inline const ::clarifai::api::Image& Data::image() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.image)
  return _internal_image();
}
inline ::clarifai::api::Image* Data::release_image() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.image)
  
  ::clarifai::api::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::clarifai::api::Image* Data::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  return image_;
}
inline ::clarifai::api::Image* Data::mutable_image() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.image)
  return _internal_mutable_image();
}
inline void Data::set_allocated_image(::clarifai::api::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.image)
}

// .clarifai.api.Video video = 2;
inline bool Data::_internal_has_video() const {
  return this != internal_default_instance() && video_ != nullptr;
}
inline bool Data::has_video() const {
  return _internal_has_video();
}
inline void Data::clear_video() {
  if (GetArenaNoVirtual() == nullptr && video_ != nullptr) {
    delete video_;
  }
  video_ = nullptr;
}
inline const ::clarifai::api::Video& Data::_internal_video() const {
  const ::clarifai::api::Video* p = video_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Video*>(
      &::clarifai::api::_Video_default_instance_);
}
inline const ::clarifai::api::Video& Data::video() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.video)
  return _internal_video();
}
inline ::clarifai::api::Video* Data::release_video() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.video)
  
  ::clarifai::api::Video* temp = video_;
  video_ = nullptr;
  return temp;
}
inline ::clarifai::api::Video* Data::_internal_mutable_video() {
  
  if (video_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Video>(GetArenaNoVirtual());
    video_ = p;
  }
  return video_;
}
inline ::clarifai::api::Video* Data::mutable_video() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.video)
  return _internal_mutable_video();
}
inline void Data::set_allocated_video(::clarifai::api::Video* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete video_;
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    
  } else {
    
  }
  video_ = video;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.video)
}

// repeated .clarifai.api.Concept concepts = 3;
inline int Data::_internal_concepts_size() const {
  return concepts_.size();
}
inline int Data::concepts_size() const {
  return _internal_concepts_size();
}
inline void Data::clear_concepts() {
  concepts_.Clear();
}
inline ::clarifai::api::Concept* Data::mutable_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.concepts)
  return concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
Data::mutable_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.concepts)
  return &concepts_;
}
inline const ::clarifai::api::Concept& Data::_internal_concepts(int index) const {
  return concepts_.Get(index);
}
inline const ::clarifai::api::Concept& Data::concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.concepts)
  return _internal_concepts(index);
}
inline ::clarifai::api::Concept* Data::_internal_add_concepts() {
  return concepts_.Add();
}
inline ::clarifai::api::Concept* Data::add_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.concepts)
  return _internal_add_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
Data::concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.concepts)
  return concepts_;
}

// .google.protobuf.Struct metadata = 5;
inline bool Data::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Data::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Data::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Data::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.metadata)
  return _internal_metadata();
}
inline PROTOBUF_NAMESPACE_ID::Struct* Data::release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Data::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Data::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.metadata)
  return _internal_mutable_metadata();
}
inline void Data::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.metadata)
}

// .clarifai.api.Geo geo = 6;
inline bool Data::_internal_has_geo() const {
  return this != internal_default_instance() && geo_ != nullptr;
}
inline bool Data::has_geo() const {
  return _internal_has_geo();
}
inline void Data::clear_geo() {
  if (GetArenaNoVirtual() == nullptr && geo_ != nullptr) {
    delete geo_;
  }
  geo_ = nullptr;
}
inline const ::clarifai::api::Geo& Data::_internal_geo() const {
  const ::clarifai::api::Geo* p = geo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Geo*>(
      &::clarifai::api::_Geo_default_instance_);
}
inline const ::clarifai::api::Geo& Data::geo() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.geo)
  return _internal_geo();
}
inline ::clarifai::api::Geo* Data::release_geo() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.geo)
  
  ::clarifai::api::Geo* temp = geo_;
  geo_ = nullptr;
  return temp;
}
inline ::clarifai::api::Geo* Data::_internal_mutable_geo() {
  
  if (geo_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Geo>(GetArenaNoVirtual());
    geo_ = p;
  }
  return geo_;
}
inline ::clarifai::api::Geo* Data::mutable_geo() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.geo)
  return _internal_mutable_geo();
}
inline void Data::set_allocated_geo(::clarifai::api::Geo* geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geo_;
  }
  if (geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo, submessage_arena);
    }
    
  } else {
    
  }
  geo_ = geo;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.geo)
}

// repeated .clarifai.api.Color colors = 7;
inline int Data::_internal_colors_size() const {
  return colors_.size();
}
inline int Data::colors_size() const {
  return _internal_colors_size();
}
inline void Data::clear_colors() {
  colors_.Clear();
}
inline ::clarifai::api::Color* Data::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.colors)
  return colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Color >*
Data::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.colors)
  return &colors_;
}
inline const ::clarifai::api::Color& Data::_internal_colors(int index) const {
  return colors_.Get(index);
}
inline const ::clarifai::api::Color& Data::colors(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.colors)
  return _internal_colors(index);
}
inline ::clarifai::api::Color* Data::_internal_add_colors() {
  return colors_.Add();
}
inline ::clarifai::api::Color* Data::add_colors() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.colors)
  return _internal_add_colors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Color >&
Data::colors() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.colors)
  return colors_;
}

// repeated .clarifai.api.Cluster clusters = 8;
inline int Data::_internal_clusters_size() const {
  return clusters_.size();
}
inline int Data::clusters_size() const {
  return _internal_clusters_size();
}
inline void Data::clear_clusters() {
  clusters_.Clear();
}
inline ::clarifai::api::Cluster* Data::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.clusters)
  return clusters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster >*
Data::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.clusters)
  return &clusters_;
}
inline const ::clarifai::api::Cluster& Data::_internal_clusters(int index) const {
  return clusters_.Get(index);
}
inline const ::clarifai::api::Cluster& Data::clusters(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.clusters)
  return _internal_clusters(index);
}
inline ::clarifai::api::Cluster* Data::_internal_add_clusters() {
  return clusters_.Add();
}
inline ::clarifai::api::Cluster* Data::add_clusters() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.clusters)
  return _internal_add_clusters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Cluster >&
Data::clusters() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.clusters)
  return clusters_;
}

// repeated .clarifai.api.Embedding embeddings = 9;
inline int Data::_internal_embeddings_size() const {
  return embeddings_.size();
}
inline int Data::embeddings_size() const {
  return _internal_embeddings_size();
}
inline void Data::clear_embeddings() {
  embeddings_.Clear();
}
inline ::clarifai::api::Embedding* Data::mutable_embeddings(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.embeddings)
  return embeddings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Embedding >*
Data::mutable_embeddings() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.embeddings)
  return &embeddings_;
}
inline const ::clarifai::api::Embedding& Data::_internal_embeddings(int index) const {
  return embeddings_.Get(index);
}
inline const ::clarifai::api::Embedding& Data::embeddings(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.embeddings)
  return _internal_embeddings(index);
}
inline ::clarifai::api::Embedding* Data::_internal_add_embeddings() {
  return embeddings_.Add();
}
inline ::clarifai::api::Embedding* Data::add_embeddings() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.embeddings)
  return _internal_add_embeddings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Embedding >&
Data::embeddings() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.embeddings)
  return embeddings_;
}

// repeated .clarifai.api.Region regions = 11;
inline int Data::_internal_regions_size() const {
  return regions_.size();
}
inline int Data::regions_size() const {
  return _internal_regions_size();
}
inline void Data::clear_regions() {
  regions_.Clear();
}
inline ::clarifai::api::Region* Data::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.regions)
  return regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Region >*
Data::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.regions)
  return &regions_;
}
inline const ::clarifai::api::Region& Data::_internal_regions(int index) const {
  return regions_.Get(index);
}
inline const ::clarifai::api::Region& Data::regions(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.regions)
  return _internal_regions(index);
}
inline ::clarifai::api::Region* Data::_internal_add_regions() {
  return regions_.Add();
}
inline ::clarifai::api::Region* Data::add_regions() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.regions)
  return _internal_add_regions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Region >&
Data::regions() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.regions)
  return regions_;
}

// repeated .clarifai.api.Frame frames = 12;
inline int Data::_internal_frames_size() const {
  return frames_.size();
}
inline int Data::frames_size() const {
  return _internal_frames_size();
}
inline void Data::clear_frames() {
  frames_.Clear();
}
inline ::clarifai::api::Frame* Data::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Frame >*
Data::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.frames)
  return &frames_;
}
inline const ::clarifai::api::Frame& Data::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::clarifai::api::Frame& Data::frames(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.frames)
  return _internal_frames(index);
}
inline ::clarifai::api::Frame* Data::_internal_add_frames() {
  return frames_.Add();
}
inline ::clarifai::api::Frame* Data::add_frames() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Frame >&
Data::frames() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.frames)
  return frames_;
}

// .clarifai.api.Text text = 13;
inline bool Data::_internal_has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline bool Data::has_text() const {
  return _internal_has_text();
}
inline void Data::clear_text() {
  if (GetArenaNoVirtual() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
inline const ::clarifai::api::Text& Data::_internal_text() const {
  const ::clarifai::api::Text* p = text_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Text*>(
      &::clarifai::api::_Text_default_instance_);
}
inline const ::clarifai::api::Text& Data::text() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.text)
  return _internal_text();
}
inline ::clarifai::api::Text* Data::release_text() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.text)
  
  ::clarifai::api::Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::clarifai::api::Text* Data::_internal_mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Text>(GetArenaNoVirtual());
    text_ = p;
  }
  return text_;
}
inline ::clarifai::api::Text* Data::mutable_text() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.text)
  return _internal_mutable_text();
}
inline void Data::set_allocated_text(::clarifai::api::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.text)
}

// .clarifai.api.Audio audio = 14;
inline bool Data::_internal_has_audio() const {
  return this != internal_default_instance() && audio_ != nullptr;
}
inline bool Data::has_audio() const {
  return _internal_has_audio();
}
inline void Data::clear_audio() {
  if (GetArenaNoVirtual() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
}
inline const ::clarifai::api::Audio& Data::_internal_audio() const {
  const ::clarifai::api::Audio* p = audio_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Audio*>(
      &::clarifai::api::_Audio_default_instance_);
}
inline const ::clarifai::api::Audio& Data::audio() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.audio)
  return _internal_audio();
}
inline ::clarifai::api::Audio* Data::release_audio() {
  // @@protoc_insertion_point(field_release:clarifai.api.Data.audio)
  
  ::clarifai::api::Audio* temp = audio_;
  audio_ = nullptr;
  return temp;
}
inline ::clarifai::api::Audio* Data::_internal_mutable_audio() {
  
  if (audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Audio>(GetArenaNoVirtual());
    audio_ = p;
  }
  return audio_;
}
inline ::clarifai::api::Audio* Data::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.audio)
  return _internal_mutable_audio();
}
inline void Data::set_allocated_audio(::clarifai::api::Audio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete audio_;
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    
  } else {
    
  }
  audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Data.audio)
}

// repeated .clarifai.api.Track tracks = 15;
inline int Data::_internal_tracks_size() const {
  return tracks_.size();
}
inline int Data::tracks_size() const {
  return _internal_tracks_size();
}
inline void Data::clear_tracks() {
  tracks_.Clear();
}
inline ::clarifai::api::Track* Data::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Data.tracks)
  return tracks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Track >*
Data::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Data.tracks)
  return &tracks_;
}
inline const ::clarifai::api::Track& Data::_internal_tracks(int index) const {
  return tracks_.Get(index);
}
inline const ::clarifai::api::Track& Data::tracks(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Data.tracks)
  return _internal_tracks(index);
}
inline ::clarifai::api::Track* Data::_internal_add_tracks() {
  return tracks_.Add();
}
inline ::clarifai::api::Track* Data::add_tracks() {
  // @@protoc_insertion_point(field_add:clarifai.api.Data.tracks)
  return _internal_add_tracks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Track >&
Data::tracks() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Data.tracks)
  return tracks_;
}

// -------------------------------------------------------------------

// Region

// string id = 1;
inline void Region::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Region::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Region.id)
  return _internal_id();
}
inline void Region::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Region.id)
}
inline std::string* Region::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Region.id)
  return _internal_mutable_id();
}
inline const std::string& Region::_internal_id() const {
  return id_.GetNoArena();
}
inline void Region::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Region::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Region.id)
}
inline void Region::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Region.id)
}
inline void Region::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Region.id)
}
inline std::string* Region::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Region::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Region.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Region::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Region.id)
}

// .clarifai.api.RegionInfo region_info = 2;
inline bool Region::_internal_has_region_info() const {
  return this != internal_default_instance() && region_info_ != nullptr;
}
inline bool Region::has_region_info() const {
  return _internal_has_region_info();
}
inline void Region::clear_region_info() {
  if (GetArenaNoVirtual() == nullptr && region_info_ != nullptr) {
    delete region_info_;
  }
  region_info_ = nullptr;
}
inline const ::clarifai::api::RegionInfo& Region::_internal_region_info() const {
  const ::clarifai::api::RegionInfo* p = region_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::RegionInfo*>(
      &::clarifai::api::_RegionInfo_default_instance_);
}
inline const ::clarifai::api::RegionInfo& Region::region_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Region.region_info)
  return _internal_region_info();
}
inline ::clarifai::api::RegionInfo* Region::release_region_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.Region.region_info)
  
  ::clarifai::api::RegionInfo* temp = region_info_;
  region_info_ = nullptr;
  return temp;
}
inline ::clarifai::api::RegionInfo* Region::_internal_mutable_region_info() {
  
  if (region_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::RegionInfo>(GetArenaNoVirtual());
    region_info_ = p;
  }
  return region_info_;
}
inline ::clarifai::api::RegionInfo* Region::mutable_region_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Region.region_info)
  return _internal_mutable_region_info();
}
inline void Region::set_allocated_region_info(::clarifai::api::RegionInfo* region_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete region_info_;
  }
  if (region_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_info, submessage_arena);
    }
    
  } else {
    
  }
  region_info_ = region_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Region.region_info)
}

// .clarifai.api.Data data = 3;
inline bool Region::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Region::has_data() const {
  return _internal_has_data();
}
inline void Region::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& Region::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& Region::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Region.data)
  return _internal_data();
}
inline ::clarifai::api::Data* Region::release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.Region.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* Region::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* Region::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Region.data)
  return _internal_mutable_data();
}
inline void Region::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Region.data)
}

// float value = 4;
inline void Region::clear_value() {
  value_ = 0;
}
inline float Region::_internal_value() const {
  return value_;
}
inline float Region::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Region.value)
  return _internal_value();
}
inline void Region::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Region::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Region.value)
}

// string track_id = 5;
inline void Region::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Region::track_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Region.track_id)
  return _internal_track_id();
}
inline void Region::set_track_id(const std::string& value) {
  _internal_set_track_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Region.track_id)
}
inline std::string* Region::mutable_track_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Region.track_id)
  return _internal_mutable_track_id();
}
inline const std::string& Region::_internal_track_id() const {
  return track_id_.GetNoArena();
}
inline void Region::_internal_set_track_id(const std::string& value) {
  
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Region::set_track_id(std::string&& value) {
  
  track_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Region.track_id)
}
inline void Region::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Region.track_id)
}
inline void Region::set_track_id(const char* value, size_t size) {
  
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Region.track_id)
}
inline std::string* Region::_internal_mutable_track_id() {
  
  return track_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Region::release_track_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Region.track_id)
  
  return track_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Region::set_allocated_track_id(std::string* track_id) {
  if (track_id != nullptr) {
    
  } else {
    
  }
  track_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Region.track_id)
}

// -------------------------------------------------------------------

// RegionInfo

// .clarifai.api.BoundingBox bounding_box = 1;
inline bool RegionInfo::_internal_has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != nullptr;
}
inline bool RegionInfo::has_bounding_box() const {
  return _internal_has_bounding_box();
}
inline void RegionInfo::clear_bounding_box() {
  if (GetArenaNoVirtual() == nullptr && bounding_box_ != nullptr) {
    delete bounding_box_;
  }
  bounding_box_ = nullptr;
}
inline const ::clarifai::api::BoundingBox& RegionInfo::_internal_bounding_box() const {
  const ::clarifai::api::BoundingBox* p = bounding_box_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::BoundingBox*>(
      &::clarifai::api::_BoundingBox_default_instance_);
}
inline const ::clarifai::api::BoundingBox& RegionInfo::bounding_box() const {
  // @@protoc_insertion_point(field_get:clarifai.api.RegionInfo.bounding_box)
  return _internal_bounding_box();
}
inline ::clarifai::api::BoundingBox* RegionInfo::release_bounding_box() {
  // @@protoc_insertion_point(field_release:clarifai.api.RegionInfo.bounding_box)
  
  ::clarifai::api::BoundingBox* temp = bounding_box_;
  bounding_box_ = nullptr;
  return temp;
}
inline ::clarifai::api::BoundingBox* RegionInfo::_internal_mutable_bounding_box() {
  
  if (bounding_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::BoundingBox>(GetArenaNoVirtual());
    bounding_box_ = p;
  }
  return bounding_box_;
}
inline ::clarifai::api::BoundingBox* RegionInfo::mutable_bounding_box() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.RegionInfo.bounding_box)
  return _internal_mutable_bounding_box();
}
inline void RegionInfo::set_allocated_bounding_box(::clarifai::api::BoundingBox* bounding_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bounding_box_;
  }
  if (bounding_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bounding_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    
  } else {
    
  }
  bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.RegionInfo.bounding_box)
}

// .clarifai.api.Mask mask = 4;
inline bool RegionInfo::_internal_has_mask() const {
  return this != internal_default_instance() && mask_ != nullptr;
}
inline bool RegionInfo::has_mask() const {
  return _internal_has_mask();
}
inline void RegionInfo::clear_mask() {
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
inline const ::clarifai::api::Mask& RegionInfo::_internal_mask() const {
  const ::clarifai::api::Mask* p = mask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Mask*>(
      &::clarifai::api::_Mask_default_instance_);
}
inline const ::clarifai::api::Mask& RegionInfo::mask() const {
  // @@protoc_insertion_point(field_get:clarifai.api.RegionInfo.mask)
  return _internal_mask();
}
inline ::clarifai::api::Mask* RegionInfo::release_mask() {
  // @@protoc_insertion_point(field_release:clarifai.api.RegionInfo.mask)
  
  ::clarifai::api::Mask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline ::clarifai::api::Mask* RegionInfo::_internal_mutable_mask() {
  
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Mask>(GetArenaNoVirtual());
    mask_ = p;
  }
  return mask_;
}
inline ::clarifai::api::Mask* RegionInfo::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.RegionInfo.mask)
  return _internal_mutable_mask();
}
inline void RegionInfo::set_allocated_mask(::clarifai::api::Mask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mask_;
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.RegionInfo.mask)
}

// .clarifai.api.Polygon polygon = 5;
inline bool RegionInfo::_internal_has_polygon() const {
  return this != internal_default_instance() && polygon_ != nullptr;
}
inline bool RegionInfo::has_polygon() const {
  return _internal_has_polygon();
}
inline void RegionInfo::clear_polygon() {
  if (GetArenaNoVirtual() == nullptr && polygon_ != nullptr) {
    delete polygon_;
  }
  polygon_ = nullptr;
}
inline const ::clarifai::api::Polygon& RegionInfo::_internal_polygon() const {
  const ::clarifai::api::Polygon* p = polygon_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Polygon*>(
      &::clarifai::api::_Polygon_default_instance_);
}
inline const ::clarifai::api::Polygon& RegionInfo::polygon() const {
  // @@protoc_insertion_point(field_get:clarifai.api.RegionInfo.polygon)
  return _internal_polygon();
}
inline ::clarifai::api::Polygon* RegionInfo::release_polygon() {
  // @@protoc_insertion_point(field_release:clarifai.api.RegionInfo.polygon)
  
  ::clarifai::api::Polygon* temp = polygon_;
  polygon_ = nullptr;
  return temp;
}
inline ::clarifai::api::Polygon* RegionInfo::_internal_mutable_polygon() {
  
  if (polygon_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  return polygon_;
}
inline ::clarifai::api::Polygon* RegionInfo::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.RegionInfo.polygon)
  return _internal_mutable_polygon();
}
inline void RegionInfo::set_allocated_polygon(::clarifai::api::Polygon* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete polygon_;
  }
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    
  } else {
    
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.RegionInfo.polygon)
}

// .clarifai.api.Point point = 6;
inline bool RegionInfo::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool RegionInfo::has_point() const {
  return _internal_has_point();
}
inline void RegionInfo::clear_point() {
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::clarifai::api::Point& RegionInfo::_internal_point() const {
  const ::clarifai::api::Point* p = point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Point*>(
      &::clarifai::api::_Point_default_instance_);
}
inline const ::clarifai::api::Point& RegionInfo::point() const {
  // @@protoc_insertion_point(field_get:clarifai.api.RegionInfo.point)
  return _internal_point();
}
inline ::clarifai::api::Point* RegionInfo::release_point() {
  // @@protoc_insertion_point(field_release:clarifai.api.RegionInfo.point)
  
  ::clarifai::api::Point* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::clarifai::api::Point* RegionInfo::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Point>(GetArenaNoVirtual());
    point_ = p;
  }
  return point_;
}
inline ::clarifai::api::Point* RegionInfo::mutable_point() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.RegionInfo.point)
  return _internal_mutable_point();
}
inline void RegionInfo::set_allocated_point(::clarifai::api::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.RegionInfo.point)
}

// -------------------------------------------------------------------

// BoundingBox

// float top_row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BoundingBox::clear_top_row() {
  top_row_ = 0;
}
inline float BoundingBox::_internal_top_row() const {
  return top_row_;
}
inline float BoundingBox::top_row() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BoundingBox.top_row)
  return _internal_top_row();
}
inline void BoundingBox::_internal_set_top_row(float value) {
  
  top_row_ = value;
}
inline void BoundingBox::set_top_row(float value) {
  _internal_set_top_row(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BoundingBox.top_row)
}

// float left_col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BoundingBox::clear_left_col() {
  left_col_ = 0;
}
inline float BoundingBox::_internal_left_col() const {
  return left_col_;
}
inline float BoundingBox::left_col() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BoundingBox.left_col)
  return _internal_left_col();
}
inline void BoundingBox::_internal_set_left_col(float value) {
  
  left_col_ = value;
}
inline void BoundingBox::set_left_col(float value) {
  _internal_set_left_col(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BoundingBox.left_col)
}

// float bottom_row = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BoundingBox::clear_bottom_row() {
  bottom_row_ = 0;
}
inline float BoundingBox::_internal_bottom_row() const {
  return bottom_row_;
}
inline float BoundingBox::bottom_row() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BoundingBox.bottom_row)
  return _internal_bottom_row();
}
inline void BoundingBox::_internal_set_bottom_row(float value) {
  
  bottom_row_ = value;
}
inline void BoundingBox::set_bottom_row(float value) {
  _internal_set_bottom_row(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BoundingBox.bottom_row)
}

// float right_col = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BoundingBox::clear_right_col() {
  right_col_ = 0;
}
inline float BoundingBox::_internal_right_col() const {
  return right_col_;
}
inline float BoundingBox::right_col() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BoundingBox.right_col)
  return _internal_right_col();
}
inline void BoundingBox::_internal_set_right_col(float value) {
  
  right_col_ = value;
}
inline void BoundingBox::set_right_col(float value) {
  _internal_set_right_col(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BoundingBox.right_col)
}

// -------------------------------------------------------------------

// FrameInfo

// uint32 index = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void FrameInfo::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameInfo::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameInfo::index() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FrameInfo.index)
  return _internal_index();
}
inline void FrameInfo::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void FrameInfo::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FrameInfo.index)
}

// uint32 time = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void FrameInfo::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameInfo::time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FrameInfo.time)
  return _internal_time();
}
inline void FrameInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void FrameInfo::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FrameInfo.time)
}

// -------------------------------------------------------------------

// Frame

// .clarifai.api.FrameInfo frame_info = 1;
inline bool Frame::_internal_has_frame_info() const {
  return this != internal_default_instance() && frame_info_ != nullptr;
}
inline bool Frame::has_frame_info() const {
  return _internal_has_frame_info();
}
inline void Frame::clear_frame_info() {
  if (GetArenaNoVirtual() == nullptr && frame_info_ != nullptr) {
    delete frame_info_;
  }
  frame_info_ = nullptr;
}
inline const ::clarifai::api::FrameInfo& Frame::_internal_frame_info() const {
  const ::clarifai::api::FrameInfo* p = frame_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::FrameInfo*>(
      &::clarifai::api::_FrameInfo_default_instance_);
}
inline const ::clarifai::api::FrameInfo& Frame::frame_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Frame.frame_info)
  return _internal_frame_info();
}
inline ::clarifai::api::FrameInfo* Frame::release_frame_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.Frame.frame_info)
  
  ::clarifai::api::FrameInfo* temp = frame_info_;
  frame_info_ = nullptr;
  return temp;
}
inline ::clarifai::api::FrameInfo* Frame::_internal_mutable_frame_info() {
  
  if (frame_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::FrameInfo>(GetArenaNoVirtual());
    frame_info_ = p;
  }
  return frame_info_;
}
inline ::clarifai::api::FrameInfo* Frame::mutable_frame_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Frame.frame_info)
  return _internal_mutable_frame_info();
}
inline void Frame::set_allocated_frame_info(::clarifai::api::FrameInfo* frame_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete frame_info_;
  }
  if (frame_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_info, submessage_arena);
    }
    
  } else {
    
  }
  frame_info_ = frame_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Frame.frame_info)
}

// .clarifai.api.Data data = 2;
inline bool Frame::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Frame::has_data() const {
  return _internal_has_data();
}
inline void Frame::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& Frame::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& Frame::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Frame.data)
  return _internal_data();
}
inline ::clarifai::api::Data* Frame::release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.Frame.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* Frame::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* Frame::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Frame.data)
  return _internal_mutable_data();
}
inline void Frame::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Frame.data)
}

// string id = 3;
inline void Frame::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Frame::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Frame.id)
  return _internal_id();
}
inline void Frame::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Frame.id)
}
inline std::string* Frame::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Frame.id)
  return _internal_mutable_id();
}
inline const std::string& Frame::_internal_id() const {
  return id_.GetNoArena();
}
inline void Frame::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Frame::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Frame.id)
}
inline void Frame::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Frame.id)
}
inline void Frame::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Frame.id)
}
inline std::string* Frame::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Frame::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Frame.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Frame::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Frame.id)
}

// -------------------------------------------------------------------

// Mask

// .clarifai.api.Color color = 1;
inline bool Mask::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool Mask::has_color() const {
  return _internal_has_color();
}
inline void Mask::clear_color() {
  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::clarifai::api::Color& Mask::_internal_color() const {
  const ::clarifai::api::Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Color*>(
      &::clarifai::api::_Color_default_instance_);
}
inline const ::clarifai::api::Color& Mask::color() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Mask.color)
  return _internal_color();
}
inline ::clarifai::api::Color* Mask::release_color() {
  // @@protoc_insertion_point(field_release:clarifai.api.Mask.color)
  
  ::clarifai::api::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::clarifai::api::Color* Mask::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  return color_;
}
inline ::clarifai::api::Color* Mask::mutable_color() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Mask.color)
  return _internal_mutable_color();
}
inline void Mask::set_allocated_color(::clarifai::api::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Mask.color)
}

// .clarifai.api.Image image = 2;
inline bool Mask::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool Mask::has_image() const {
  return _internal_has_image();
}
inline void Mask::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::clarifai::api::Image& Mask::_internal_image() const {
  const ::clarifai::api::Image* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Image*>(
      &::clarifai::api::_Image_default_instance_);
}
inline const ::clarifai::api::Image& Mask::image() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Mask.image)
  return _internal_image();
}
inline ::clarifai::api::Image* Mask::release_image() {
  // @@protoc_insertion_point(field_release:clarifai.api.Mask.image)
  
  ::clarifai::api::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::clarifai::api::Image* Mask::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  return image_;
}
inline ::clarifai::api::Image* Mask::mutable_image() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Mask.image)
  return _internal_mutable_image();
}
inline void Mask::set_allocated_image(::clarifai::api::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Mask.image)
}

// -------------------------------------------------------------------

// Polygon

// repeated .clarifai.api.Point points = 1;
inline int Polygon::_internal_points_size() const {
  return points_.size();
}
inline int Polygon::points_size() const {
  return _internal_points_size();
}
inline void Polygon::clear_points() {
  points_.Clear();
}
inline ::clarifai::api::Point* Polygon::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Polygon.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Point >*
Polygon::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Polygon.points)
  return &points_;
}
inline const ::clarifai::api::Point& Polygon::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::clarifai::api::Point& Polygon::points(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Polygon.points)
  return _internal_points(index);
}
inline ::clarifai::api::Point* Polygon::_internal_add_points() {
  return points_.Add();
}
inline ::clarifai::api::Point* Polygon::add_points() {
  // @@protoc_insertion_point(field_add:clarifai.api.Polygon.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Point >&
Polygon::points() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Polygon.points)
  return points_;
}

// -------------------------------------------------------------------

// Point

// float row = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void Point::clear_row() {
  row_ = 0;
}
inline float Point::_internal_row() const {
  return row_;
}
inline float Point::row() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Point.row)
  return _internal_row();
}
inline void Point::_internal_set_row(float value) {
  
  row_ = value;
}
inline void Point::set_row(float value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Point.row)
}

// float col = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void Point::clear_col() {
  col_ = 0;
}
inline float Point::_internal_col() const {
  return col_;
}
inline float Point::col() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Point.col)
  return _internal_col();
}
inline void Point::_internal_set_col(float value) {
  
  col_ = value;
}
inline void Point::set_col(float value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Point.col)
}

// float z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline float Point::_internal_z() const {
  return z_;
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Point::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Point.z)
}

// -------------------------------------------------------------------

// Embedding

// repeated float vector = 1 [packed = true];
inline int Embedding::_internal_vector_size() const {
  return vector_.size();
}
inline int Embedding::vector_size() const {
  return _internal_vector_size();
}
inline void Embedding::clear_vector() {
  vector_.Clear();
}
inline float Embedding::_internal_vector(int index) const {
  return vector_.Get(index);
}
inline float Embedding::vector(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Embedding.vector)
  return _internal_vector(index);
}
inline void Embedding::set_vector(int index, float value) {
  vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.Embedding.vector)
}
inline void Embedding::_internal_add_vector(float value) {
  vector_.Add(value);
}
inline void Embedding::add_vector(float value) {
  _internal_add_vector(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Embedding.vector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Embedding::_internal_vector() const {
  return vector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Embedding::vector() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Embedding.vector)
  return _internal_vector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Embedding::_internal_mutable_vector() {
  return &vector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Embedding::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Embedding.vector)
  return _internal_mutable_vector();
}

// uint32 num_dimensions = 2;
inline void Embedding::clear_num_dimensions() {
  num_dimensions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Embedding::_internal_num_dimensions() const {
  return num_dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Embedding::num_dimensions() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Embedding.num_dimensions)
  return _internal_num_dimensions();
}
inline void Embedding::_internal_set_num_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_dimensions_ = value;
}
inline void Embedding::set_num_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_dimensions(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Embedding.num_dimensions)
}

// -------------------------------------------------------------------

// GeoPoint

// float longitude = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void GeoPoint::clear_longitude() {
  longitude_ = 0;
}
inline float GeoPoint::_internal_longitude() const {
  return longitude_;
}
inline float GeoPoint::longitude() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GeoPoint.longitude)
  return _internal_longitude();
}
inline void GeoPoint::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void GeoPoint::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GeoPoint.longitude)
}

// float latitude = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void GeoPoint::clear_latitude() {
  latitude_ = 0;
}
inline float GeoPoint::_internal_latitude() const {
  return latitude_;
}
inline float GeoPoint::latitude() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GeoPoint.latitude)
  return _internal_latitude();
}
inline void GeoPoint::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void GeoPoint::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GeoPoint.latitude)
}

// -------------------------------------------------------------------

// GeoLimit

// string type = 1;
inline void GeoLimit::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeoLimit::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GeoLimit.type)
  return _internal_type();
}
inline void GeoLimit::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GeoLimit.type)
}
inline std::string* GeoLimit::mutable_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GeoLimit.type)
  return _internal_mutable_type();
}
inline const std::string& GeoLimit::_internal_type() const {
  return type_.GetNoArena();
}
inline void GeoLimit::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeoLimit::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.GeoLimit.type)
}
inline void GeoLimit::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.GeoLimit.type)
}
inline void GeoLimit::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.GeoLimit.type)
}
inline std::string* GeoLimit::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeoLimit::release_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.GeoLimit.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeoLimit::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GeoLimit.type)
}

// float value = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void GeoLimit::clear_value() {
  value_ = 0;
}
inline float GeoLimit::_internal_value() const {
  return value_;
}
inline float GeoLimit::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GeoLimit.value)
  return _internal_value();
}
inline void GeoLimit::_internal_set_value(float value) {
  
  value_ = value;
}
inline void GeoLimit::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.GeoLimit.value)
}

// -------------------------------------------------------------------

// GeoBoxedPoint

// .clarifai.api.GeoPoint geo_point = 1;
inline bool GeoBoxedPoint::_internal_has_geo_point() const {
  return this != internal_default_instance() && geo_point_ != nullptr;
}
inline bool GeoBoxedPoint::has_geo_point() const {
  return _internal_has_geo_point();
}
inline void GeoBoxedPoint::clear_geo_point() {
  if (GetArenaNoVirtual() == nullptr && geo_point_ != nullptr) {
    delete geo_point_;
  }
  geo_point_ = nullptr;
}
inline const ::clarifai::api::GeoPoint& GeoBoxedPoint::_internal_geo_point() const {
  const ::clarifai::api::GeoPoint* p = geo_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::GeoPoint*>(
      &::clarifai::api::_GeoPoint_default_instance_);
}
inline const ::clarifai::api::GeoPoint& GeoBoxedPoint::geo_point() const {
  // @@protoc_insertion_point(field_get:clarifai.api.GeoBoxedPoint.geo_point)
  return _internal_geo_point();
}
inline ::clarifai::api::GeoPoint* GeoBoxedPoint::release_geo_point() {
  // @@protoc_insertion_point(field_release:clarifai.api.GeoBoxedPoint.geo_point)
  
  ::clarifai::api::GeoPoint* temp = geo_point_;
  geo_point_ = nullptr;
  return temp;
}
inline ::clarifai::api::GeoPoint* GeoBoxedPoint::_internal_mutable_geo_point() {
  
  if (geo_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::GeoPoint>(GetArenaNoVirtual());
    geo_point_ = p;
  }
  return geo_point_;
}
inline ::clarifai::api::GeoPoint* GeoBoxedPoint::mutable_geo_point() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.GeoBoxedPoint.geo_point)
  return _internal_mutable_geo_point();
}
inline void GeoBoxedPoint::set_allocated_geo_point(::clarifai::api::GeoPoint* geo_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geo_point_;
  }
  if (geo_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geo_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_point, submessage_arena);
    }
    
  } else {
    
  }
  geo_point_ = geo_point;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.GeoBoxedPoint.geo_point)
}

// -------------------------------------------------------------------

// Geo

// .clarifai.api.GeoPoint geo_point = 1;
inline bool Geo::_internal_has_geo_point() const {
  return this != internal_default_instance() && geo_point_ != nullptr;
}
inline bool Geo::has_geo_point() const {
  return _internal_has_geo_point();
}
inline void Geo::clear_geo_point() {
  if (GetArenaNoVirtual() == nullptr && geo_point_ != nullptr) {
    delete geo_point_;
  }
  geo_point_ = nullptr;
}
inline const ::clarifai::api::GeoPoint& Geo::_internal_geo_point() const {
  const ::clarifai::api::GeoPoint* p = geo_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::GeoPoint*>(
      &::clarifai::api::_GeoPoint_default_instance_);
}
inline const ::clarifai::api::GeoPoint& Geo::geo_point() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Geo.geo_point)
  return _internal_geo_point();
}
inline ::clarifai::api::GeoPoint* Geo::release_geo_point() {
  // @@protoc_insertion_point(field_release:clarifai.api.Geo.geo_point)
  
  ::clarifai::api::GeoPoint* temp = geo_point_;
  geo_point_ = nullptr;
  return temp;
}
inline ::clarifai::api::GeoPoint* Geo::_internal_mutable_geo_point() {
  
  if (geo_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::GeoPoint>(GetArenaNoVirtual());
    geo_point_ = p;
  }
  return geo_point_;
}
inline ::clarifai::api::GeoPoint* Geo::mutable_geo_point() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Geo.geo_point)
  return _internal_mutable_geo_point();
}
inline void Geo::set_allocated_geo_point(::clarifai::api::GeoPoint* geo_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geo_point_;
  }
  if (geo_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geo_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_point, submessage_arena);
    }
    
  } else {
    
  }
  geo_point_ = geo_point;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Geo.geo_point)
}

// .clarifai.api.GeoLimit geo_limit = 2;
inline bool Geo::_internal_has_geo_limit() const {
  return this != internal_default_instance() && geo_limit_ != nullptr;
}
inline bool Geo::has_geo_limit() const {
  return _internal_has_geo_limit();
}
inline void Geo::clear_geo_limit() {
  if (GetArenaNoVirtual() == nullptr && geo_limit_ != nullptr) {
    delete geo_limit_;
  }
  geo_limit_ = nullptr;
}
inline const ::clarifai::api::GeoLimit& Geo::_internal_geo_limit() const {
  const ::clarifai::api::GeoLimit* p = geo_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::GeoLimit*>(
      &::clarifai::api::_GeoLimit_default_instance_);
}
inline const ::clarifai::api::GeoLimit& Geo::geo_limit() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Geo.geo_limit)
  return _internal_geo_limit();
}
inline ::clarifai::api::GeoLimit* Geo::release_geo_limit() {
  // @@protoc_insertion_point(field_release:clarifai.api.Geo.geo_limit)
  
  ::clarifai::api::GeoLimit* temp = geo_limit_;
  geo_limit_ = nullptr;
  return temp;
}
inline ::clarifai::api::GeoLimit* Geo::_internal_mutable_geo_limit() {
  
  if (geo_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::GeoLimit>(GetArenaNoVirtual());
    geo_limit_ = p;
  }
  return geo_limit_;
}
inline ::clarifai::api::GeoLimit* Geo::mutable_geo_limit() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Geo.geo_limit)
  return _internal_mutable_geo_limit();
}
inline void Geo::set_allocated_geo_limit(::clarifai::api::GeoLimit* geo_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geo_limit_;
  }
  if (geo_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geo_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_limit, submessage_arena);
    }
    
  } else {
    
  }
  geo_limit_ = geo_limit;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Geo.geo_limit)
}

// repeated .clarifai.api.GeoBoxedPoint geo_box = 3;
inline int Geo::_internal_geo_box_size() const {
  return geo_box_.size();
}
inline int Geo::geo_box_size() const {
  return _internal_geo_box_size();
}
inline void Geo::clear_geo_box() {
  geo_box_.Clear();
}
inline ::clarifai::api::GeoBoxedPoint* Geo::mutable_geo_box(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Geo.geo_box)
  return geo_box_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::GeoBoxedPoint >*
Geo::mutable_geo_box() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Geo.geo_box)
  return &geo_box_;
}
inline const ::clarifai::api::GeoBoxedPoint& Geo::_internal_geo_box(int index) const {
  return geo_box_.Get(index);
}
inline const ::clarifai::api::GeoBoxedPoint& Geo::geo_box(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Geo.geo_box)
  return _internal_geo_box(index);
}
inline ::clarifai::api::GeoBoxedPoint* Geo::_internal_add_geo_box() {
  return geo_box_.Add();
}
inline ::clarifai::api::GeoBoxedPoint* Geo::add_geo_box() {
  // @@protoc_insertion_point(field_add:clarifai.api.Geo.geo_box)
  return _internal_add_geo_box();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::GeoBoxedPoint >&
Geo::geo_box() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Geo.geo_box)
  return geo_box_;
}

// -------------------------------------------------------------------

// Image

// string url = 1;
inline void Image::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Image.url)
  return _internal_url();
}
inline void Image::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Image.url)
}
inline std::string* Image::mutable_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Image.url)
  return _internal_mutable_url();
}
inline const std::string& Image::_internal_url() const {
  return url_.GetNoArena();
}
inline void Image::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Image::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Image.url)
}
inline void Image::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Image.url)
}
inline void Image::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Image.url)
}
inline std::string* Image::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.Image.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Image.url)
}

// bytes base64 = 2;
inline void Image::clear_base64() {
  base64_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::base64() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Image.base64)
  return _internal_base64();
}
inline void Image::set_base64(const std::string& value) {
  _internal_set_base64(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Image.base64)
}
inline std::string* Image::mutable_base64() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Image.base64)
  return _internal_mutable_base64();
}
inline const std::string& Image::_internal_base64() const {
  return base64_.GetNoArena();
}
inline void Image::_internal_set_base64(const std::string& value) {
  
  base64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Image::set_base64(std::string&& value) {
  
  base64_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Image.base64)
}
inline void Image::set_base64(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Image.base64)
}
inline void Image::set_base64(const void* value, size_t size) {
  
  base64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Image.base64)
}
inline std::string* Image::_internal_mutable_base64() {
  
  return base64_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_base64() {
  // @@protoc_insertion_point(field_release:clarifai.api.Image.base64)
  
  return base64_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_base64(std::string* base64) {
  if (base64 != nullptr) {
    
  } else {
    
  }
  base64_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base64);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Image.base64)
}

// bool allow_duplicate_url = 4;
inline void Image::clear_allow_duplicate_url() {
  allow_duplicate_url_ = false;
}
inline bool Image::_internal_allow_duplicate_url() const {
  return allow_duplicate_url_;
}
inline bool Image::allow_duplicate_url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Image.allow_duplicate_url)
  return _internal_allow_duplicate_url();
}
inline void Image::_internal_set_allow_duplicate_url(bool value) {
  
  allow_duplicate_url_ = value;
}
inline void Image::set_allow_duplicate_url(bool value) {
  _internal_set_allow_duplicate_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Image.allow_duplicate_url)
}

// .clarifai.api.HostedURL hosted = 5;
inline bool Image::_internal_has_hosted() const {
  return this != internal_default_instance() && hosted_ != nullptr;
}
inline bool Image::has_hosted() const {
  return _internal_has_hosted();
}
inline void Image::clear_hosted() {
  if (GetArenaNoVirtual() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
}
inline const ::clarifai::api::HostedURL& Image::_internal_hosted() const {
  const ::clarifai::api::HostedURL* p = hosted_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::HostedURL*>(
      &::clarifai::api::_HostedURL_default_instance_);
}
inline const ::clarifai::api::HostedURL& Image::hosted() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Image.hosted)
  return _internal_hosted();
}
inline ::clarifai::api::HostedURL* Image::release_hosted() {
  // @@protoc_insertion_point(field_release:clarifai.api.Image.hosted)
  
  ::clarifai::api::HostedURL* temp = hosted_;
  hosted_ = nullptr;
  return temp;
}
inline ::clarifai::api::HostedURL* Image::_internal_mutable_hosted() {
  
  if (hosted_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::HostedURL>(GetArenaNoVirtual());
    hosted_ = p;
  }
  return hosted_;
}
inline ::clarifai::api::HostedURL* Image::mutable_hosted() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Image.hosted)
  return _internal_mutable_hosted();
}
inline void Image::set_allocated_hosted(::clarifai::api::HostedURL* hosted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hosted_;
  }
  if (hosted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hosted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hosted, submessage_arena);
    }
    
  } else {
    
  }
  hosted_ = hosted;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Image.hosted)
}

// -------------------------------------------------------------------

// HostedURL

// string prefix = 1;
inline void HostedURL::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostedURL::prefix() const {
  // @@protoc_insertion_point(field_get:clarifai.api.HostedURL.prefix)
  return _internal_prefix();
}
inline void HostedURL::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:clarifai.api.HostedURL.prefix)
}
inline std::string* HostedURL::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.HostedURL.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& HostedURL::_internal_prefix() const {
  return prefix_.GetNoArena();
}
inline void HostedURL::_internal_set_prefix(const std::string& value) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostedURL::set_prefix(std::string&& value) {
  
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.HostedURL.prefix)
}
inline void HostedURL::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.HostedURL.prefix)
}
inline void HostedURL::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.HostedURL.prefix)
}
inline std::string* HostedURL::_internal_mutable_prefix() {
  
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostedURL::release_prefix() {
  // @@protoc_insertion_point(field_release:clarifai.api.HostedURL.prefix)
  
  return prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostedURL::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.HostedURL.prefix)
}

// string suffix = 2;
inline void HostedURL::clear_suffix() {
  suffix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostedURL::suffix() const {
  // @@protoc_insertion_point(field_get:clarifai.api.HostedURL.suffix)
  return _internal_suffix();
}
inline void HostedURL::set_suffix(const std::string& value) {
  _internal_set_suffix(value);
  // @@protoc_insertion_point(field_set:clarifai.api.HostedURL.suffix)
}
inline std::string* HostedURL::mutable_suffix() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.HostedURL.suffix)
  return _internal_mutable_suffix();
}
inline const std::string& HostedURL::_internal_suffix() const {
  return suffix_.GetNoArena();
}
inline void HostedURL::_internal_set_suffix(const std::string& value) {
  
  suffix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostedURL::set_suffix(std::string&& value) {
  
  suffix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.HostedURL.suffix)
}
inline void HostedURL::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suffix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.HostedURL.suffix)
}
inline void HostedURL::set_suffix(const char* value, size_t size) {
  
  suffix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.HostedURL.suffix)
}
inline std::string* HostedURL::_internal_mutable_suffix() {
  
  return suffix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostedURL::release_suffix() {
  // @@protoc_insertion_point(field_release:clarifai.api.HostedURL.suffix)
  
  return suffix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostedURL::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    
  } else {
    
  }
  suffix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.HostedURL.suffix)
}

// repeated string sizes = 3;
inline int HostedURL::_internal_sizes_size() const {
  return sizes_.size();
}
inline int HostedURL::sizes_size() const {
  return _internal_sizes_size();
}
inline void HostedURL::clear_sizes() {
  sizes_.Clear();
}
inline std::string* HostedURL::add_sizes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.HostedURL.sizes)
  return _internal_add_sizes();
}
inline const std::string& HostedURL::_internal_sizes(int index) const {
  return sizes_.Get(index);
}
inline const std::string& HostedURL::sizes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.HostedURL.sizes)
  return _internal_sizes(index);
}
inline std::string* HostedURL::mutable_sizes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.HostedURL.sizes)
  return sizes_.Mutable(index);
}
inline void HostedURL::set_sizes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.HostedURL.sizes)
  sizes_.Mutable(index)->assign(value);
}
inline void HostedURL::set_sizes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.HostedURL.sizes)
  sizes_.Mutable(index)->assign(std::move(value));
}
inline void HostedURL::set_sizes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sizes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.HostedURL.sizes)
}
inline void HostedURL::set_sizes(int index, const char* value, size_t size) {
  sizes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.HostedURL.sizes)
}
inline std::string* HostedURL::_internal_add_sizes() {
  return sizes_.Add();
}
inline void HostedURL::add_sizes(const std::string& value) {
  sizes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.HostedURL.sizes)
}
inline void HostedURL::add_sizes(std::string&& value) {
  sizes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.HostedURL.sizes)
}
inline void HostedURL::add_sizes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sizes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.HostedURL.sizes)
}
inline void HostedURL::add_sizes(const char* value, size_t size) {
  sizes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.HostedURL.sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HostedURL::sizes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.HostedURL.sizes)
  return sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HostedURL::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.HostedURL.sizes)
  return &sizes_;
}

// string crossorigin = 4;
inline void HostedURL::clear_crossorigin() {
  crossorigin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostedURL::crossorigin() const {
  // @@protoc_insertion_point(field_get:clarifai.api.HostedURL.crossorigin)
  return _internal_crossorigin();
}
inline void HostedURL::set_crossorigin(const std::string& value) {
  _internal_set_crossorigin(value);
  // @@protoc_insertion_point(field_set:clarifai.api.HostedURL.crossorigin)
}
inline std::string* HostedURL::mutable_crossorigin() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.HostedURL.crossorigin)
  return _internal_mutable_crossorigin();
}
inline const std::string& HostedURL::_internal_crossorigin() const {
  return crossorigin_.GetNoArena();
}
inline void HostedURL::_internal_set_crossorigin(const std::string& value) {
  
  crossorigin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostedURL::set_crossorigin(std::string&& value) {
  
  crossorigin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.HostedURL.crossorigin)
}
inline void HostedURL::set_crossorigin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crossorigin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.HostedURL.crossorigin)
}
inline void HostedURL::set_crossorigin(const char* value, size_t size) {
  
  crossorigin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.HostedURL.crossorigin)
}
inline std::string* HostedURL::_internal_mutable_crossorigin() {
  
  return crossorigin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostedURL::release_crossorigin() {
  // @@protoc_insertion_point(field_release:clarifai.api.HostedURL.crossorigin)
  
  return crossorigin_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostedURL::set_allocated_crossorigin(std::string* crossorigin) {
  if (crossorigin != nullptr) {
    
  } else {
    
  }
  crossorigin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crossorigin);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.HostedURL.crossorigin)
}

// -------------------------------------------------------------------

// Input

// string id = 1;
inline void Input::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Input::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Input.id)
  return _internal_id();
}
inline void Input::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Input.id)
}
inline std::string* Input::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Input.id)
  return _internal_mutable_id();
}
inline const std::string& Input::_internal_id() const {
  return id_.GetNoArena();
}
inline void Input::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Input::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Input.id)
}
inline void Input::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Input.id)
}
inline void Input::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Input.id)
}
inline std::string* Input::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Input::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Input.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Input::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Input.id)
}

// .clarifai.api.Data data = 2;
inline bool Input::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Input::has_data() const {
  return _internal_has_data();
}
inline void Input::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& Input::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& Input::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Input.data)
  return _internal_data();
}
inline ::clarifai::api::Data* Input::release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.Input.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* Input::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* Input::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Input.data)
  return _internal_mutable_data();
}
inline void Input::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Input.data)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool Input::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Input::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Input::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Input::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Input.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Input.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Input.created_at)
  return _internal_mutable_created_at();
}
inline void Input::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Input.created_at)
}

// .google.protobuf.Timestamp modified_at = 5;
inline bool Input::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool Input::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Input::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Input::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Input.modified_at)
  return _internal_modified_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Input.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Input.modified_at)
  return _internal_mutable_modified_at();
}
inline void Input::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Input.modified_at)
}

// .clarifai.api.status.Status status = 6;
inline bool Input::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Input::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& Input::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& Input::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Input.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* Input::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.Input.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* Input::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* Input::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Input.status)
  return _internal_mutable_status();
}
inline void Input::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Input.status)
}

// -------------------------------------------------------------------

// InputCount

// uint32 processed = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_processed() {
  processed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_processed() const {
  return processed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::processed() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.processed)
  return _internal_processed();
}
inline void InputCount::_internal_set_processed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  processed_ = value;
}
inline void InputCount::set_processed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_processed(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.processed)
}

// uint32 to_process = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_to_process() {
  to_process_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_to_process() const {
  return to_process_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::to_process() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.to_process)
  return _internal_to_process();
}
inline void InputCount::_internal_set_to_process(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_process_ = value;
}
inline void InputCount::set_to_process(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to_process(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.to_process)
}

// uint32 errors = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_errors() {
  errors_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_errors() const {
  return errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::errors() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.errors)
  return _internal_errors();
}
inline void InputCount::_internal_set_errors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  errors_ = value;
}
inline void InputCount::set_errors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errors(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.errors)
}

// uint32 processing = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_processing() {
  processing_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_processing() const {
  return processing_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::processing() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.processing)
  return _internal_processing();
}
inline void InputCount::_internal_set_processing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  processing_ = value;
}
inline void InputCount::set_processing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_processing(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.processing)
}

// uint32 reindexed = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_reindexed() {
  reindexed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_reindexed() const {
  return reindexed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::reindexed() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.reindexed)
  return _internal_reindexed();
}
inline void InputCount::_internal_set_reindexed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reindexed_ = value;
}
inline void InputCount::set_reindexed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reindexed(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.reindexed)
}

// uint32 to_reindex = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_to_reindex() {
  to_reindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_to_reindex() const {
  return to_reindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::to_reindex() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.to_reindex)
  return _internal_to_reindex();
}
inline void InputCount::_internal_set_to_reindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_reindex_ = value;
}
inline void InputCount::set_to_reindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to_reindex(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.to_reindex)
}

// uint32 reindex_errors = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_reindex_errors() {
  reindex_errors_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_reindex_errors() const {
  return reindex_errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::reindex_errors() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.reindex_errors)
  return _internal_reindex_errors();
}
inline void InputCount::_internal_set_reindex_errors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reindex_errors_ = value;
}
inline void InputCount::set_reindex_errors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reindex_errors(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.reindex_errors)
}

// uint32 reindexing = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void InputCount::clear_reindexing() {
  reindexing_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::_internal_reindexing() const {
  return reindexing_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCount::reindexing() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputCount.reindexing)
  return _internal_reindexing();
}
inline void InputCount::_internal_set_reindexing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reindexing_ = value;
}
inline void InputCount::set_reindexing(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reindexing(value);
  // @@protoc_insertion_point(field_set:clarifai.api.InputCount.reindexing)
}

// -------------------------------------------------------------------

// WorkflowResultsSimilarity

// .clarifai.api.Input probe_input = 1;
inline bool WorkflowResultsSimilarity::_internal_has_probe_input() const {
  return this != internal_default_instance() && probe_input_ != nullptr;
}
inline bool WorkflowResultsSimilarity::has_probe_input() const {
  return _internal_has_probe_input();
}
inline void WorkflowResultsSimilarity::clear_probe_input() {
  if (GetArenaNoVirtual() == nullptr && probe_input_ != nullptr) {
    delete probe_input_;
  }
  probe_input_ = nullptr;
}
inline const ::clarifai::api::Input& WorkflowResultsSimilarity::_internal_probe_input() const {
  const ::clarifai::api::Input* p = probe_input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& WorkflowResultsSimilarity::probe_input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResultsSimilarity.probe_input)
  return _internal_probe_input();
}
inline ::clarifai::api::Input* WorkflowResultsSimilarity::release_probe_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowResultsSimilarity.probe_input)
  
  ::clarifai::api::Input* temp = probe_input_;
  probe_input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* WorkflowResultsSimilarity::_internal_mutable_probe_input() {
  
  if (probe_input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArenaNoVirtual());
    probe_input_ = p;
  }
  return probe_input_;
}
inline ::clarifai::api::Input* WorkflowResultsSimilarity::mutable_probe_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResultsSimilarity.probe_input)
  return _internal_mutable_probe_input();
}
inline void WorkflowResultsSimilarity::set_allocated_probe_input(::clarifai::api::Input* probe_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete probe_input_;
  }
  if (probe_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      probe_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probe_input, submessage_arena);
    }
    
  } else {
    
  }
  probe_input_ = probe_input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowResultsSimilarity.probe_input)
}

// repeated .clarifai.api.Hit pool_results = 2;
inline int WorkflowResultsSimilarity::_internal_pool_results_size() const {
  return pool_results_.size();
}
inline int WorkflowResultsSimilarity::pool_results_size() const {
  return _internal_pool_results_size();
}
inline void WorkflowResultsSimilarity::clear_pool_results() {
  pool_results_.Clear();
}
inline ::clarifai::api::Hit* WorkflowResultsSimilarity::mutable_pool_results(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResultsSimilarity.pool_results)
  return pool_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >*
WorkflowResultsSimilarity::mutable_pool_results() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.WorkflowResultsSimilarity.pool_results)
  return &pool_results_;
}
inline const ::clarifai::api::Hit& WorkflowResultsSimilarity::_internal_pool_results(int index) const {
  return pool_results_.Get(index);
}
inline const ::clarifai::api::Hit& WorkflowResultsSimilarity::pool_results(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResultsSimilarity.pool_results)
  return _internal_pool_results(index);
}
inline ::clarifai::api::Hit* WorkflowResultsSimilarity::_internal_add_pool_results() {
  return pool_results_.Add();
}
inline ::clarifai::api::Hit* WorkflowResultsSimilarity::add_pool_results() {
  // @@protoc_insertion_point(field_add:clarifai.api.WorkflowResultsSimilarity.pool_results)
  return _internal_add_pool_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Hit >&
WorkflowResultsSimilarity::pool_results() const {
  // @@protoc_insertion_point(field_list:clarifai.api.WorkflowResultsSimilarity.pool_results)
  return pool_results_;
}

// -------------------------------------------------------------------

// Key

// string id = 1;
inline void Key::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Key::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.id)
  return _internal_id();
}
inline void Key::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Key.id)
}
inline std::string* Key::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.id)
  return _internal_mutable_id();
}
inline const std::string& Key::_internal_id() const {
  return id_.GetNoArena();
}
inline void Key::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Key::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Key.id)
}
inline void Key::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Key.id)
}
inline void Key::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Key.id)
}
inline std::string* Key::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Key::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Key.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Key.id)
}

// string type = 8;
inline void Key::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Key::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.type)
  return _internal_type();
}
inline void Key::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Key.type)
}
inline std::string* Key::mutable_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.type)
  return _internal_mutable_type();
}
inline const std::string& Key::_internal_type() const {
  return type_.GetNoArena();
}
inline void Key::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Key::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Key.type)
}
inline void Key::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Key.type)
}
inline void Key::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Key.type)
}
inline std::string* Key::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Key::release_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.Key.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Key.type)
}

// string description = 2;
inline void Key::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Key::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.description)
  return _internal_description();
}
inline void Key::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Key.description)
}
inline std::string* Key::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.description)
  return _internal_mutable_description();
}
inline const std::string& Key::_internal_description() const {
  return description_.GetNoArena();
}
inline void Key::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Key::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Key.description)
}
inline void Key::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Key.description)
}
inline void Key::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Key.description)
}
inline std::string* Key::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Key::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.Key.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Key.description)
}

// repeated string scopes = 3;
inline int Key::_internal_scopes_size() const {
  return scopes_.size();
}
inline int Key::scopes_size() const {
  return _internal_scopes_size();
}
inline void Key::clear_scopes() {
  scopes_.Clear();
}
inline std::string* Key::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Key.scopes)
  return _internal_add_scopes();
}
inline const std::string& Key::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& Key::scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.scopes)
  return _internal_scopes(index);
}
inline std::string* Key::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.scopes)
  return scopes_.Mutable(index);
}
inline void Key::set_scopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Key.scopes)
  scopes_.Mutable(index)->assign(value);
}
inline void Key::set_scopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Key.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
inline void Key::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Key.scopes)
}
inline void Key::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Key.scopes)
}
inline std::string* Key::_internal_add_scopes() {
  return scopes_.Add();
}
inline void Key::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Key.scopes)
}
inline void Key::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Key.scopes)
}
inline void Key::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Key.scopes)
}
inline void Key::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Key.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Key::scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Key.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Key::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Key.scopes)
  return &scopes_;
}

// repeated string endpoints = 7;
inline int Key::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int Key::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void Key::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* Key::add_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Key.endpoints)
  return _internal_add_endpoints();
}
inline const std::string& Key::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& Key::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.endpoints)
  return _internal_endpoints(index);
}
inline std::string* Key::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.endpoints)
  return endpoints_.Mutable(index);
}
inline void Key::set_endpoints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Key.endpoints)
  endpoints_.Mutable(index)->assign(value);
}
inline void Key::set_endpoints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Key.endpoints)
  endpoints_.Mutable(index)->assign(std::move(value));
}
inline void Key::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Key.endpoints)
}
inline void Key::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Key.endpoints)
}
inline std::string* Key::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void Key::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Key.endpoints)
}
inline void Key::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Key.endpoints)
}
inline void Key::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Key.endpoints)
}
inline void Key::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Key.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Key::endpoints() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Key.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Key::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Key.endpoints)
  return &endpoints_;
}

// repeated .clarifai.api.App apps = 4;
inline int Key::_internal_apps_size() const {
  return apps_.size();
}
inline int Key::apps_size() const {
  return _internal_apps_size();
}
inline void Key::clear_apps() {
  apps_.Clear();
}
inline ::clarifai::api::App* Key::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >*
Key::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Key.apps)
  return &apps_;
}
inline const ::clarifai::api::App& Key::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::clarifai::api::App& Key::apps(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.apps)
  return _internal_apps(index);
}
inline ::clarifai::api::App* Key::_internal_add_apps() {
  return apps_.Add();
}
inline ::clarifai::api::App* Key::add_apps() {
  // @@protoc_insertion_point(field_add:clarifai.api.Key.apps)
  return _internal_add_apps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::App >&
Key::apps() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Key.apps)
  return apps_;
}

// .google.protobuf.Timestamp created_at = 5;
inline bool Key::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Key::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Key::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Key::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Key.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.created_at)
  return _internal_mutable_created_at();
}
inline void Key::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Key.created_at)
}

// .google.protobuf.Timestamp expires_at = 6;
inline bool Key::_internal_has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline bool Key::has_expires_at() const {
  return _internal_has_expires_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Key::_internal_expires_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expires_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Key::expires_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.expires_at)
  return _internal_expires_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::release_expires_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Key.expires_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::_internal_mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    expires_at_ = p;
  }
  return expires_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Key::mutable_expires_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.expires_at)
  return _internal_mutable_expires_at();
}
inline void Key::set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Key.expires_at)
}

// repeated string authorized_idp_ids = 9;
inline int Key::_internal_authorized_idp_ids_size() const {
  return authorized_idp_ids_.size();
}
inline int Key::authorized_idp_ids_size() const {
  return _internal_authorized_idp_ids_size();
}
inline void Key::clear_authorized_idp_ids() {
  authorized_idp_ids_.Clear();
}
inline std::string* Key::add_authorized_idp_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Key.authorized_idp_ids)
  return _internal_add_authorized_idp_ids();
}
inline const std::string& Key::_internal_authorized_idp_ids(int index) const {
  return authorized_idp_ids_.Get(index);
}
inline const std::string& Key::authorized_idp_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Key.authorized_idp_ids)
  return _internal_authorized_idp_ids(index);
}
inline std::string* Key::mutable_authorized_idp_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Key.authorized_idp_ids)
  return authorized_idp_ids_.Mutable(index);
}
inline void Key::set_authorized_idp_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Key.authorized_idp_ids)
  authorized_idp_ids_.Mutable(index)->assign(value);
}
inline void Key::set_authorized_idp_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Key.authorized_idp_ids)
  authorized_idp_ids_.Mutable(index)->assign(std::move(value));
}
inline void Key::set_authorized_idp_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authorized_idp_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Key.authorized_idp_ids)
}
inline void Key::set_authorized_idp_ids(int index, const char* value, size_t size) {
  authorized_idp_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Key.authorized_idp_ids)
}
inline std::string* Key::_internal_add_authorized_idp_ids() {
  return authorized_idp_ids_.Add();
}
inline void Key::add_authorized_idp_ids(const std::string& value) {
  authorized_idp_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Key.authorized_idp_ids)
}
inline void Key::add_authorized_idp_ids(std::string&& value) {
  authorized_idp_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Key.authorized_idp_ids)
}
inline void Key::add_authorized_idp_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authorized_idp_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Key.authorized_idp_ids)
}
inline void Key::add_authorized_idp_ids(const char* value, size_t size) {
  authorized_idp_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Key.authorized_idp_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Key::authorized_idp_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Key.authorized_idp_ids)
  return authorized_idp_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Key::mutable_authorized_idp_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Key.authorized_idp_ids)
  return &authorized_idp_ids_;
}

// -------------------------------------------------------------------

// Model

// string id = 1;
inline void Model::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Model::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.id)
  return _internal_id();
}
inline void Model::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.id)
}
inline std::string* Model::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.id)
  return _internal_mutable_id();
}
inline const std::string& Model::_internal_id() const {
  return id_.GetNoArena();
}
inline void Model::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Model::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.id)
}
inline void Model::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.id)
}
inline void Model::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.id)
}
inline std::string* Model::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Model::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.id)
}

// string name = 2;
inline void Model::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.name)
  return _internal_name();
}
inline void Model::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.name)
}
inline std::string* Model::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.name)
  return _internal_mutable_name();
}
inline const std::string& Model::_internal_name() const {
  return name_.GetNoArena();
}
inline void Model::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Model::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.name)
}
inline void Model::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.name)
}
inline void Model::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.name)
}
inline std::string* Model::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.name)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool Model::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Model::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Model::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Model::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.created_at)
  return _internal_mutable_created_at();
}
inline void Model::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.created_at)
}

// string app_id = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void Model::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Model::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.app_id)
  return _internal_app_id();
}
inline void Model::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.app_id)
}
inline std::string* Model::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& Model::_internal_app_id() const {
  return app_id_.GetNoArena();
}
inline void Model::_internal_set_app_id(const std::string& value) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Model::set_app_id(std::string&& value) {
  
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.app_id)
}
inline void Model::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.app_id)
}
inline void Model::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.app_id)
}
inline std::string* Model::_internal_mutable_app_id() {
  
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Model::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.app_id)
  
  return app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.app_id)
}

// .clarifai.api.OutputInfo output_info = 5;
inline bool Model::_internal_has_output_info() const {
  return this != internal_default_instance() && output_info_ != nullptr;
}
inline bool Model::has_output_info() const {
  return _internal_has_output_info();
}
inline void Model::clear_output_info() {
  if (GetArenaNoVirtual() == nullptr && output_info_ != nullptr) {
    delete output_info_;
  }
  output_info_ = nullptr;
}
inline const ::clarifai::api::OutputInfo& Model::_internal_output_info() const {
  const ::clarifai::api::OutputInfo* p = output_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::OutputInfo*>(
      &::clarifai::api::_OutputInfo_default_instance_);
}
inline const ::clarifai::api::OutputInfo& Model::output_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.output_info)
  return _internal_output_info();
}
inline ::clarifai::api::OutputInfo* Model::release_output_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.output_info)
  
  ::clarifai::api::OutputInfo* temp = output_info_;
  output_info_ = nullptr;
  return temp;
}
inline ::clarifai::api::OutputInfo* Model::_internal_mutable_output_info() {
  
  if (output_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::OutputInfo>(GetArenaNoVirtual());
    output_info_ = p;
  }
  return output_info_;
}
inline ::clarifai::api::OutputInfo* Model::mutable_output_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.output_info)
  return _internal_mutable_output_info();
}
inline void Model::set_allocated_output_info(::clarifai::api::OutputInfo* output_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete output_info_;
  }
  if (output_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_info, submessage_arena);
    }
    
  } else {
    
  }
  output_info_ = output_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.output_info)
}

// .clarifai.api.ModelVersion model_version = 6;
inline bool Model::_internal_has_model_version() const {
  return this != internal_default_instance() && model_version_ != nullptr;
}
inline bool Model::has_model_version() const {
  return _internal_has_model_version();
}
inline void Model::clear_model_version() {
  if (GetArenaNoVirtual() == nullptr && model_version_ != nullptr) {
    delete model_version_;
  }
  model_version_ = nullptr;
}
inline const ::clarifai::api::ModelVersion& Model::_internal_model_version() const {
  const ::clarifai::api::ModelVersion* p = model_version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ModelVersion*>(
      &::clarifai::api::_ModelVersion_default_instance_);
}
inline const ::clarifai::api::ModelVersion& Model::model_version() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.model_version)
  return _internal_model_version();
}
inline ::clarifai::api::ModelVersion* Model::release_model_version() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.model_version)
  
  ::clarifai::api::ModelVersion* temp = model_version_;
  model_version_ = nullptr;
  return temp;
}
inline ::clarifai::api::ModelVersion* Model::_internal_mutable_model_version() {
  
  if (model_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ModelVersion>(GetArenaNoVirtual());
    model_version_ = p;
  }
  return model_version_;
}
inline ::clarifai::api::ModelVersion* Model::mutable_model_version() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.model_version)
  return _internal_mutable_model_version();
}
inline void Model::set_allocated_model_version(::clarifai::api::ModelVersion* model_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete model_version_;
  }
  if (model_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_version, submessage_arena);
    }
    
  } else {
    
  }
  model_version_ = model_version;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.model_version)
}

// string display_name = 7;
inline void Model::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Model::display_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.display_name)
  return _internal_display_name();
}
inline void Model::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.display_name)
}
inline std::string* Model::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& Model::_internal_display_name() const {
  return display_name_.GetNoArena();
}
inline void Model::_internal_set_display_name(const std::string& value) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Model::set_display_name(std::string&& value) {
  
  display_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.display_name)
}
inline void Model::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.display_name)
}
inline void Model::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.display_name)
}
inline std::string* Model::_internal_mutable_display_name() {
  
  return display_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Model::release_display_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.display_name)
  
  return display_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.display_name)
}

// string user_id = 9;
inline void Model::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Model::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.user_id)
  return _internal_user_id();
}
inline void Model::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.user_id)
}
inline std::string* Model::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Model::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void Model::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Model::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.user_id)
}
inline void Model::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.user_id)
}
inline void Model::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.user_id)
}
inline std::string* Model::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Model::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.user_id)
}

// .clarifai.api.InputInfo input_info = 12;
inline bool Model::_internal_has_input_info() const {
  return this != internal_default_instance() && input_info_ != nullptr;
}
inline bool Model::has_input_info() const {
  return _internal_has_input_info();
}
inline void Model::clear_input_info() {
  if (GetArenaNoVirtual() == nullptr && input_info_ != nullptr) {
    delete input_info_;
  }
  input_info_ = nullptr;
}
inline const ::clarifai::api::InputInfo& Model::_internal_input_info() const {
  const ::clarifai::api::InputInfo* p = input_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::InputInfo*>(
      &::clarifai::api::_InputInfo_default_instance_);
}
inline const ::clarifai::api::InputInfo& Model::input_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.input_info)
  return _internal_input_info();
}
inline ::clarifai::api::InputInfo* Model::release_input_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.input_info)
  
  ::clarifai::api::InputInfo* temp = input_info_;
  input_info_ = nullptr;
  return temp;
}
inline ::clarifai::api::InputInfo* Model::_internal_mutable_input_info() {
  
  if (input_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::InputInfo>(GetArenaNoVirtual());
    input_info_ = p;
  }
  return input_info_;
}
inline ::clarifai::api::InputInfo* Model::mutable_input_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.input_info)
  return _internal_mutable_input_info();
}
inline void Model::set_allocated_input_info(::clarifai::api::InputInfo* input_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_info_;
  }
  if (input_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_info, submessage_arena);
    }
    
  } else {
    
  }
  input_info_ = input_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.input_info)
}

// .clarifai.api.TrainInfo train_info = 13;
inline bool Model::_internal_has_train_info() const {
  return this != internal_default_instance() && train_info_ != nullptr;
}
inline bool Model::has_train_info() const {
  return _internal_has_train_info();
}
inline void Model::clear_train_info() {
  if (GetArenaNoVirtual() == nullptr && train_info_ != nullptr) {
    delete train_info_;
  }
  train_info_ = nullptr;
}
inline const ::clarifai::api::TrainInfo& Model::_internal_train_info() const {
  const ::clarifai::api::TrainInfo* p = train_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::TrainInfo*>(
      &::clarifai::api::_TrainInfo_default_instance_);
}
inline const ::clarifai::api::TrainInfo& Model::train_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.train_info)
  return _internal_train_info();
}
inline ::clarifai::api::TrainInfo* Model::release_train_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.train_info)
  
  ::clarifai::api::TrainInfo* temp = train_info_;
  train_info_ = nullptr;
  return temp;
}
inline ::clarifai::api::TrainInfo* Model::_internal_mutable_train_info() {
  
  if (train_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::TrainInfo>(GetArenaNoVirtual());
    train_info_ = p;
  }
  return train_info_;
}
inline ::clarifai::api::TrainInfo* Model::mutable_train_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.train_info)
  return _internal_mutable_train_info();
}
inline void Model::set_allocated_train_info(::clarifai::api::TrainInfo* train_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete train_info_;
  }
  if (train_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      train_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, train_info, submessage_arena);
    }
    
  } else {
    
  }
  train_info_ = train_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.train_info)
}

// string model_type_id = 14;
inline void Model::clear_model_type_id() {
  model_type_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Model::model_type_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.model_type_id)
  return _internal_model_type_id();
}
inline void Model::set_model_type_id(const std::string& value) {
  _internal_set_model_type_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.model_type_id)
}
inline std::string* Model::mutable_model_type_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.model_type_id)
  return _internal_mutable_model_type_id();
}
inline const std::string& Model::_internal_model_type_id() const {
  return model_type_id_.GetNoArena();
}
inline void Model::_internal_set_model_type_id(const std::string& value) {
  
  model_type_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Model::set_model_type_id(std::string&& value) {
  
  model_type_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.model_type_id)
}
inline void Model::set_model_type_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_type_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.model_type_id)
}
inline void Model::set_model_type_id(const char* value, size_t size) {
  
  model_type_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.model_type_id)
}
inline std::string* Model::_internal_mutable_model_type_id() {
  
  return model_type_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Model::release_model_type_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.model_type_id)
  
  return model_type_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_model_type_id(std::string* model_type_id) {
  if (model_type_id != nullptr) {
    
  } else {
    
  }
  model_type_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_type_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.model_type_id)
}

// .clarifai.api.Visibility visibility = 15;
inline bool Model::_internal_has_visibility() const {
  return this != internal_default_instance() && visibility_ != nullptr;
}
inline bool Model::has_visibility() const {
  return _internal_has_visibility();
}
inline void Model::clear_visibility() {
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
}
inline const ::clarifai::api::Visibility& Model::_internal_visibility() const {
  const ::clarifai::api::Visibility* p = visibility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Visibility*>(
      &::clarifai::api::_Visibility_default_instance_);
}
inline const ::clarifai::api::Visibility& Model::visibility() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.visibility)
  return _internal_visibility();
}
inline ::clarifai::api::Visibility* Model::release_visibility() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.visibility)
  
  ::clarifai::api::Visibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::clarifai::api::Visibility* Model::_internal_mutable_visibility() {
  
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Visibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  return visibility_;
}
inline ::clarifai::api::Visibility* Model::mutable_visibility() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.visibility)
  return _internal_mutable_visibility();
}
inline void Model::set_allocated_visibility(::clarifai::api::Visibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    
  } else {
    
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.visibility)
}

// string description = 16;
inline void Model::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Model::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.description)
  return _internal_description();
}
inline void Model::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Model.description)
}
inline std::string* Model::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.description)
  return _internal_mutable_description();
}
inline const std::string& Model::_internal_description() const {
  return description_.GetNoArena();
}
inline void Model::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Model::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Model.description)
}
inline void Model::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Model.description)
}
inline void Model::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Model.description)
}
inline std::string* Model::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Model::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.description)
}

// .google.protobuf.Struct metadata = 17;
inline bool Model::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Model::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Model::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Model::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Model.metadata)
  return _internal_metadata();
}
inline PROTOBUF_NAMESPACE_ID::Struct* Model::release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.Model.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Model::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Model::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Model.metadata)
  return _internal_mutable_metadata();
}
inline void Model::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Model.metadata)
}

// -------------------------------------------------------------------

// ModelReference

// string id = 1;
inline void ModelReference::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelReference::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelReference.id)
  return _internal_id();
}
inline void ModelReference::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelReference.id)
}
inline std::string* ModelReference::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelReference.id)
  return _internal_mutable_id();
}
inline const std::string& ModelReference::_internal_id() const {
  return id_.GetNoArena();
}
inline void ModelReference::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelReference::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelReference.id)
}
inline void ModelReference::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelReference.id)
}
inline void ModelReference::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelReference.id)
}
inline std::string* ModelReference::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelReference::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelReference.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelReference::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelReference.id)
}

// string model_id = 2;
inline void ModelReference::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelReference::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelReference.model_id)
  return _internal_model_id();
}
inline void ModelReference::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelReference.model_id)
}
inline std::string* ModelReference::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelReference.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& ModelReference::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void ModelReference::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelReference::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelReference.model_id)
}
inline void ModelReference::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelReference.model_id)
}
inline void ModelReference::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelReference.model_id)
}
inline std::string* ModelReference::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelReference::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelReference.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelReference::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelReference.model_id)
}

// string url = 3;
inline void ModelReference::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelReference::url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelReference.url)
  return _internal_url();
}
inline void ModelReference::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelReference.url)
}
inline std::string* ModelReference::mutable_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelReference.url)
  return _internal_mutable_url();
}
inline const std::string& ModelReference::_internal_url() const {
  return url_.GetNoArena();
}
inline void ModelReference::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelReference::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelReference.url)
}
inline void ModelReference::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelReference.url)
}
inline void ModelReference::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelReference.url)
}
inline std::string* ModelReference::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelReference::release_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelReference.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelReference::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelReference.url)
}

// string name = 4;
inline void ModelReference::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelReference::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelReference.name)
  return _internal_name();
}
inline void ModelReference::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelReference.name)
}
inline std::string* ModelReference::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelReference.name)
  return _internal_mutable_name();
}
inline const std::string& ModelReference::_internal_name() const {
  return name_.GetNoArena();
}
inline void ModelReference::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelReference::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelReference.name)
}
inline void ModelReference::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelReference.name)
}
inline void ModelReference::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelReference.name)
}
inline std::string* ModelReference::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelReference::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelReference.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelReference::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelReference.name)
}

// .google.protobuf.Struct metadata = 5;
inline bool ModelReference::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool ModelReference::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ModelReference::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ModelReference::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelReference.metadata)
  return _internal_metadata();
}
inline PROTOBUF_NAMESPACE_ID::Struct* ModelReference::release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelReference.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ModelReference::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ModelReference::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelReference.metadata)
  return _internal_mutable_metadata();
}
inline void ModelReference::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelReference.metadata)
}

// -------------------------------------------------------------------

// ModelVersionInputExample

// string id = 1;
inline void ModelVersionInputExample::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelVersionInputExample::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersionInputExample.id)
  return _internal_id();
}
inline void ModelVersionInputExample::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersionInputExample.id)
}
inline std::string* ModelVersionInputExample::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersionInputExample.id)
  return _internal_mutable_id();
}
inline const std::string& ModelVersionInputExample::_internal_id() const {
  return id_.GetNoArena();
}
inline void ModelVersionInputExample::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelVersionInputExample::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelVersionInputExample.id)
}
inline void ModelVersionInputExample::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelVersionInputExample.id)
}
inline void ModelVersionInputExample::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelVersionInputExample.id)
}
inline std::string* ModelVersionInputExample::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelVersionInputExample::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersionInputExample.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVersionInputExample::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersionInputExample.id)
}

// string model_id = 2;
inline void ModelVersionInputExample::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelVersionInputExample::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersionInputExample.model_id)
  return _internal_model_id();
}
inline void ModelVersionInputExample::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersionInputExample.model_id)
}
inline std::string* ModelVersionInputExample::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersionInputExample.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& ModelVersionInputExample::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void ModelVersionInputExample::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelVersionInputExample::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelVersionInputExample.model_id)
}
inline void ModelVersionInputExample::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelVersionInputExample.model_id)
}
inline void ModelVersionInputExample::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelVersionInputExample.model_id)
}
inline std::string* ModelVersionInputExample::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelVersionInputExample::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersionInputExample.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVersionInputExample::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersionInputExample.model_id)
}

// string model_version_id = 3;
inline void ModelVersionInputExample::clear_model_version_id() {
  model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelVersionInputExample::model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersionInputExample.model_version_id)
  return _internal_model_version_id();
}
inline void ModelVersionInputExample::set_model_version_id(const std::string& value) {
  _internal_set_model_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersionInputExample.model_version_id)
}
inline std::string* ModelVersionInputExample::mutable_model_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersionInputExample.model_version_id)
  return _internal_mutable_model_version_id();
}
inline const std::string& ModelVersionInputExample::_internal_model_version_id() const {
  return model_version_id_.GetNoArena();
}
inline void ModelVersionInputExample::_internal_set_model_version_id(const std::string& value) {
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelVersionInputExample::set_model_version_id(std::string&& value) {
  
  model_version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelVersionInputExample.model_version_id)
}
inline void ModelVersionInputExample::set_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelVersionInputExample.model_version_id)
}
inline void ModelVersionInputExample::set_model_version_id(const char* value, size_t size) {
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelVersionInputExample.model_version_id)
}
inline std::string* ModelVersionInputExample::_internal_mutable_model_version_id() {
  
  return model_version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelVersionInputExample::release_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersionInputExample.model_version_id)
  
  return model_version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVersionInputExample::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersionInputExample.model_version_id)
}

// .clarifai.api.Data data = 4;
inline bool ModelVersionInputExample::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ModelVersionInputExample::has_data() const {
  return _internal_has_data();
}
inline void ModelVersionInputExample::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& ModelVersionInputExample::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& ModelVersionInputExample::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersionInputExample.data)
  return _internal_data();
}
inline ::clarifai::api::Data* ModelVersionInputExample::release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersionInputExample.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* ModelVersionInputExample::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* ModelVersionInputExample::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersionInputExample.data)
  return _internal_mutable_data();
}
inline void ModelVersionInputExample::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersionInputExample.data)
}

// string name = 5;
inline void ModelVersionInputExample::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelVersionInputExample::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersionInputExample.name)
  return _internal_name();
}
inline void ModelVersionInputExample::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersionInputExample.name)
}
inline std::string* ModelVersionInputExample::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersionInputExample.name)
  return _internal_mutable_name();
}
inline const std::string& ModelVersionInputExample::_internal_name() const {
  return name_.GetNoArena();
}
inline void ModelVersionInputExample::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelVersionInputExample::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelVersionInputExample.name)
}
inline void ModelVersionInputExample::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelVersionInputExample.name)
}
inline void ModelVersionInputExample::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelVersionInputExample.name)
}
inline std::string* ModelVersionInputExample::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelVersionInputExample::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersionInputExample.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVersionInputExample::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersionInputExample.name)
}

// string description = 6;
inline void ModelVersionInputExample::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelVersionInputExample::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersionInputExample.description)
  return _internal_description();
}
inline void ModelVersionInputExample::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersionInputExample.description)
}
inline std::string* ModelVersionInputExample::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersionInputExample.description)
  return _internal_mutable_description();
}
inline const std::string& ModelVersionInputExample::_internal_description() const {
  return description_.GetNoArena();
}
inline void ModelVersionInputExample::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelVersionInputExample::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelVersionInputExample.description)
}
inline void ModelVersionInputExample::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelVersionInputExample.description)
}
inline void ModelVersionInputExample::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelVersionInputExample.description)
}
inline std::string* ModelVersionInputExample::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelVersionInputExample::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersionInputExample.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVersionInputExample::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersionInputExample.description)
}

// -------------------------------------------------------------------

// OutputInfo

// .clarifai.api.Data data = 1;
inline bool OutputInfo::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool OutputInfo::has_data() const {
  return _internal_has_data();
}
inline void OutputInfo::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& OutputInfo::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& OutputInfo::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputInfo.data)
  return _internal_data();
}
inline ::clarifai::api::Data* OutputInfo::release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputInfo.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* OutputInfo::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* OutputInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputInfo.data)
  return _internal_mutable_data();
}
inline void OutputInfo::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputInfo.data)
}

// .clarifai.api.OutputConfig output_config = 2;
inline bool OutputInfo::_internal_has_output_config() const {
  return this != internal_default_instance() && output_config_ != nullptr;
}
inline bool OutputInfo::has_output_config() const {
  return _internal_has_output_config();
}
inline void OutputInfo::clear_output_config() {
  if (GetArenaNoVirtual() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
}
inline const ::clarifai::api::OutputConfig& OutputInfo::_internal_output_config() const {
  const ::clarifai::api::OutputConfig* p = output_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::OutputConfig*>(
      &::clarifai::api::_OutputConfig_default_instance_);
}
inline const ::clarifai::api::OutputConfig& OutputInfo::output_config() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputInfo.output_config)
  return _internal_output_config();
}
inline ::clarifai::api::OutputConfig* OutputInfo::release_output_config() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputInfo.output_config)
  
  ::clarifai::api::OutputConfig* temp = output_config_;
  output_config_ = nullptr;
  return temp;
}
inline ::clarifai::api::OutputConfig* OutputInfo::_internal_mutable_output_config() {
  
  if (output_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::OutputConfig>(GetArenaNoVirtual());
    output_config_ = p;
  }
  return output_config_;
}
inline ::clarifai::api::OutputConfig* OutputInfo::mutable_output_config() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputInfo.output_config)
  return _internal_mutable_output_config();
}
inline void OutputInfo::set_allocated_output_config(::clarifai::api::OutputConfig* output_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete output_config_;
  }
  if (output_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_config, submessage_arena);
    }
    
  } else {
    
  }
  output_config_ = output_config;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputInfo.output_config)
}

// string message = 3;
inline void OutputInfo::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OutputInfo::message() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputInfo.message)
  return _internal_message();
}
inline void OutputInfo::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputInfo.message)
}
inline std::string* OutputInfo::mutable_message() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputInfo.message)
  return _internal_mutable_message();
}
inline const std::string& OutputInfo::_internal_message() const {
  return message_.GetNoArena();
}
inline void OutputInfo::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OutputInfo::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputInfo.message)
}
inline void OutputInfo::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputInfo.message)
}
inline void OutputInfo::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputInfo.message)
}
inline std::string* OutputInfo::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutputInfo::release_message() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputInfo.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutputInfo::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputInfo.message)
}

// string type = 4;
inline void OutputInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OutputInfo::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputInfo.type)
  return _internal_type();
}
inline void OutputInfo::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputInfo.type)
}
inline std::string* OutputInfo::mutable_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputInfo.type)
  return _internal_mutable_type();
}
inline const std::string& OutputInfo::_internal_type() const {
  return type_.GetNoArena();
}
inline void OutputInfo::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OutputInfo::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputInfo.type)
}
inline void OutputInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputInfo.type)
}
inline void OutputInfo::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputInfo.type)
}
inline std::string* OutputInfo::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutputInfo::release_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputInfo.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutputInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputInfo.type)
}

// string type_ext = 5;
inline void OutputInfo::clear_type_ext() {
  type_ext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OutputInfo::type_ext() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputInfo.type_ext)
  return _internal_type_ext();
}
inline void OutputInfo::set_type_ext(const std::string& value) {
  _internal_set_type_ext(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputInfo.type_ext)
}
inline std::string* OutputInfo::mutable_type_ext() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputInfo.type_ext)
  return _internal_mutable_type_ext();
}
inline const std::string& OutputInfo::_internal_type_ext() const {
  return type_ext_.GetNoArena();
}
inline void OutputInfo::_internal_set_type_ext(const std::string& value) {
  
  type_ext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OutputInfo::set_type_ext(std::string&& value) {
  
  type_ext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputInfo.type_ext)
}
inline void OutputInfo::set_type_ext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_ext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputInfo.type_ext)
}
inline void OutputInfo::set_type_ext(const char* value, size_t size) {
  
  type_ext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputInfo.type_ext)
}
inline std::string* OutputInfo::_internal_mutable_type_ext() {
  
  return type_ext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutputInfo::release_type_ext() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputInfo.type_ext)
  
  return type_ext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutputInfo::set_allocated_type_ext(std::string* type_ext) {
  if (type_ext != nullptr) {
    
  } else {
    
  }
  type_ext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_ext);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputInfo.type_ext)
}

// .google.protobuf.Struct fields_map = 6;
inline bool OutputInfo::_internal_has_fields_map() const {
  return this != internal_default_instance() && fields_map_ != nullptr;
}
inline bool OutputInfo::has_fields_map() const {
  return _internal_has_fields_map();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& OutputInfo::_internal_fields_map() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = fields_map_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& OutputInfo::fields_map() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputInfo.fields_map)
  return _internal_fields_map();
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputInfo::release_fields_map() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputInfo.fields_map)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = fields_map_;
  fields_map_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputInfo::_internal_mutable_fields_map() {
  
  if (fields_map_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    fields_map_ = p;
  }
  return fields_map_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputInfo::mutable_fields_map() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputInfo.fields_map)
  return _internal_mutable_fields_map();
}
inline void OutputInfo::set_allocated_fields_map(PROTOBUF_NAMESPACE_ID::Struct* fields_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fields_map_);
  }
  if (fields_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fields_map)->GetArena();
    if (message_arena != submessage_arena) {
      fields_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fields_map, submessage_arena);
    }
    
  } else {
    
  }
  fields_map_ = fields_map;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputInfo.fields_map)
}

// .google.protobuf.Struct params = 7;
inline bool OutputInfo::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool OutputInfo::has_params() const {
  return _internal_has_params();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& OutputInfo::_internal_params() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& OutputInfo::params() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputInfo.params)
  return _internal_params();
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputInfo::release_params() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputInfo.params)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = params_;
  params_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputInfo::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    params_ = p;
  }
  return params_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputInfo::mutable_params() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputInfo.params)
  return _internal_mutable_params();
}
inline void OutputInfo::set_allocated_params(PROTOBUF_NAMESPACE_ID::Struct* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params)->GetArena();
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputInfo.params)
}

// -------------------------------------------------------------------

// InputInfo

// .google.protobuf.Struct fields_map = 1;
inline bool InputInfo::_internal_has_fields_map() const {
  return this != internal_default_instance() && fields_map_ != nullptr;
}
inline bool InputInfo::has_fields_map() const {
  return _internal_has_fields_map();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& InputInfo::_internal_fields_map() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = fields_map_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& InputInfo::fields_map() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputInfo.fields_map)
  return _internal_fields_map();
}
inline PROTOBUF_NAMESPACE_ID::Struct* InputInfo::release_fields_map() {
  // @@protoc_insertion_point(field_release:clarifai.api.InputInfo.fields_map)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = fields_map_;
  fields_map_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* InputInfo::_internal_mutable_fields_map() {
  
  if (fields_map_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    fields_map_ = p;
  }
  return fields_map_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* InputInfo::mutable_fields_map() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.InputInfo.fields_map)
  return _internal_mutable_fields_map();
}
inline void InputInfo::set_allocated_fields_map(PROTOBUF_NAMESPACE_ID::Struct* fields_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fields_map_);
  }
  if (fields_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fields_map)->GetArena();
    if (message_arena != submessage_arena) {
      fields_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fields_map, submessage_arena);
    }
    
  } else {
    
  }
  fields_map_ = fields_map;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.InputInfo.fields_map)
}

// .google.protobuf.Struct params = 2;
inline bool InputInfo::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool InputInfo::has_params() const {
  return _internal_has_params();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& InputInfo::_internal_params() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& InputInfo::params() const {
  // @@protoc_insertion_point(field_get:clarifai.api.InputInfo.params)
  return _internal_params();
}
inline PROTOBUF_NAMESPACE_ID::Struct* InputInfo::release_params() {
  // @@protoc_insertion_point(field_release:clarifai.api.InputInfo.params)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = params_;
  params_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* InputInfo::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    params_ = p;
  }
  return params_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* InputInfo::mutable_params() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.InputInfo.params)
  return _internal_mutable_params();
}
inline void InputInfo::set_allocated_params(PROTOBUF_NAMESPACE_ID::Struct* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params)->GetArena();
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.InputInfo.params)
}

// -------------------------------------------------------------------

// TrainInfo

// .google.protobuf.Struct params = 1;
inline bool TrainInfo::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool TrainInfo::has_params() const {
  return _internal_has_params();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& TrainInfo::_internal_params() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& TrainInfo::params() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrainInfo.params)
  return _internal_params();
}
inline PROTOBUF_NAMESPACE_ID::Struct* TrainInfo::release_params() {
  // @@protoc_insertion_point(field_release:clarifai.api.TrainInfo.params)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = params_;
  params_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* TrainInfo::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    params_ = p;
  }
  return params_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* TrainInfo::mutable_params() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TrainInfo.params)
  return _internal_mutable_params();
}
inline void TrainInfo::set_allocated_params(PROTOBUF_NAMESPACE_ID::Struct* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params)->GetArena();
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TrainInfo.params)
}

// -------------------------------------------------------------------

// OutputConfig

// bool concepts_mutually_exclusive = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void OutputConfig::clear_concepts_mutually_exclusive() {
  concepts_mutually_exclusive_ = false;
}
inline bool OutputConfig::_internal_concepts_mutually_exclusive() const {
  return concepts_mutually_exclusive_;
}
inline bool OutputConfig::concepts_mutually_exclusive() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.concepts_mutually_exclusive)
  return _internal_concepts_mutually_exclusive();
}
inline void OutputConfig::_internal_set_concepts_mutually_exclusive(bool value) {
  
  concepts_mutually_exclusive_ = value;
}
inline void OutputConfig::set_concepts_mutually_exclusive(bool value) {
  _internal_set_concepts_mutually_exclusive(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.concepts_mutually_exclusive)
}

// bool closed_environment = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void OutputConfig::clear_closed_environment() {
  closed_environment_ = false;
}
inline bool OutputConfig::_internal_closed_environment() const {
  return closed_environment_;
}
inline bool OutputConfig::closed_environment() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.closed_environment)
  return _internal_closed_environment();
}
inline void OutputConfig::_internal_set_closed_environment(bool value) {
  
  closed_environment_ = value;
}
inline void OutputConfig::set_closed_environment(bool value) {
  _internal_set_closed_environment(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.closed_environment)
}

// string existing_model_id = 3 [deprecated = true];
inline void OutputConfig::clear_existing_model_id() {
  existing_model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OutputConfig::existing_model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.existing_model_id)
  return _internal_existing_model_id();
}
inline void OutputConfig::set_existing_model_id(const std::string& value) {
  _internal_set_existing_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.existing_model_id)
}
inline std::string* OutputConfig::mutable_existing_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.existing_model_id)
  return _internal_mutable_existing_model_id();
}
inline const std::string& OutputConfig::_internal_existing_model_id() const {
  return existing_model_id_.GetNoArena();
}
inline void OutputConfig::_internal_set_existing_model_id(const std::string& value) {
  
  existing_model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OutputConfig::set_existing_model_id(std::string&& value) {
  
  existing_model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputConfig.existing_model_id)
}
inline void OutputConfig::set_existing_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  existing_model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputConfig.existing_model_id)
}
inline void OutputConfig::set_existing_model_id(const char* value, size_t size) {
  
  existing_model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputConfig.existing_model_id)
}
inline std::string* OutputConfig::_internal_mutable_existing_model_id() {
  
  return existing_model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutputConfig::release_existing_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputConfig.existing_model_id)
  
  return existing_model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutputConfig::set_allocated_existing_model_id(std::string* existing_model_id) {
  if (existing_model_id != nullptr) {
    
  } else {
    
  }
  existing_model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), existing_model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputConfig.existing_model_id)
}

// string language = 4;
inline void OutputConfig::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OutputConfig::language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.language)
  return _internal_language();
}
inline void OutputConfig::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.language)
}
inline std::string* OutputConfig::mutable_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.language)
  return _internal_mutable_language();
}
inline const std::string& OutputConfig::_internal_language() const {
  return language_.GetNoArena();
}
inline void OutputConfig::_internal_set_language(const std::string& value) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OutputConfig::set_language(std::string&& value) {
  
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputConfig.language)
}
inline void OutputConfig::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputConfig.language)
}
inline void OutputConfig::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputConfig.language)
}
inline std::string* OutputConfig::_internal_mutable_language() {
  
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutputConfig::release_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputConfig.language)
  
  return language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutputConfig::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputConfig.language)
}

// string hyper_parameters = 5 [deprecated = true];
inline void OutputConfig::clear_hyper_parameters() {
  hyper_parameters_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OutputConfig::hyper_parameters() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.hyper_parameters)
  return _internal_hyper_parameters();
}
inline void OutputConfig::set_hyper_parameters(const std::string& value) {
  _internal_set_hyper_parameters(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.hyper_parameters)
}
inline std::string* OutputConfig::mutable_hyper_parameters() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.hyper_parameters)
  return _internal_mutable_hyper_parameters();
}
inline const std::string& OutputConfig::_internal_hyper_parameters() const {
  return hyper_parameters_.GetNoArena();
}
inline void OutputConfig::_internal_set_hyper_parameters(const std::string& value) {
  
  hyper_parameters_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OutputConfig::set_hyper_parameters(std::string&& value) {
  
  hyper_parameters_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputConfig.hyper_parameters)
}
inline void OutputConfig::set_hyper_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hyper_parameters_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputConfig.hyper_parameters)
}
inline void OutputConfig::set_hyper_parameters(const char* value, size_t size) {
  
  hyper_parameters_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputConfig.hyper_parameters)
}
inline std::string* OutputConfig::_internal_mutable_hyper_parameters() {
  
  return hyper_parameters_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutputConfig::release_hyper_parameters() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputConfig.hyper_parameters)
  
  return hyper_parameters_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutputConfig::set_allocated_hyper_parameters(std::string* hyper_parameters) {
  if (hyper_parameters != nullptr) {
    
  } else {
    
  }
  hyper_parameters_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hyper_parameters);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputConfig.hyper_parameters)
}

// uint32 max_concepts = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void OutputConfig::clear_max_concepts() {
  max_concepts_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::_internal_max_concepts() const {
  return max_concepts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::max_concepts() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.max_concepts)
  return _internal_max_concepts();
}
inline void OutputConfig::_internal_set_max_concepts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_concepts_ = value;
}
inline void OutputConfig::set_max_concepts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_concepts(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.max_concepts)
}

// float min_value = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void OutputConfig::clear_min_value() {
  min_value_ = 0;
}
inline float OutputConfig::_internal_min_value() const {
  return min_value_;
}
inline float OutputConfig::min_value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.min_value)
  return _internal_min_value();
}
inline void OutputConfig::_internal_set_min_value(float value) {
  
  min_value_ = value;
}
inline void OutputConfig::set_min_value(float value) {
  _internal_set_min_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.min_value)
}

// repeated .clarifai.api.Concept select_concepts = 8;
inline int OutputConfig::_internal_select_concepts_size() const {
  return select_concepts_.size();
}
inline int OutputConfig::select_concepts_size() const {
  return _internal_select_concepts_size();
}
inline void OutputConfig::clear_select_concepts() {
  select_concepts_.Clear();
}
inline ::clarifai::api::Concept* OutputConfig::mutable_select_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.select_concepts)
  return select_concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
OutputConfig::mutable_select_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.OutputConfig.select_concepts)
  return &select_concepts_;
}
inline const ::clarifai::api::Concept& OutputConfig::_internal_select_concepts(int index) const {
  return select_concepts_.Get(index);
}
inline const ::clarifai::api::Concept& OutputConfig::select_concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.select_concepts)
  return _internal_select_concepts(index);
}
inline ::clarifai::api::Concept* OutputConfig::_internal_add_select_concepts() {
  return select_concepts_.Add();
}
inline ::clarifai::api::Concept* OutputConfig::add_select_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.OutputConfig.select_concepts)
  return _internal_add_select_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
OutputConfig::select_concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.OutputConfig.select_concepts)
  return select_concepts_;
}

// uint32 training_timeout = 9;
inline void OutputConfig::clear_training_timeout() {
  training_timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::_internal_training_timeout() const {
  return training_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::training_timeout() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.training_timeout)
  return _internal_training_timeout();
}
inline void OutputConfig::_internal_set_training_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  training_timeout_ = value;
}
inline void OutputConfig::set_training_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_training_timeout(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.training_timeout)
}

// uint32 sample_ms = 10;
inline void OutputConfig::clear_sample_ms() {
  sample_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::_internal_sample_ms() const {
  return sample_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputConfig::sample_ms() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.sample_ms)
  return _internal_sample_ms();
}
inline void OutputConfig::_internal_set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sample_ms_ = value;
}
inline void OutputConfig::set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_ms(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.sample_ms)
}

// .google.protobuf.Struct hyper_params = 13;
inline bool OutputConfig::_internal_has_hyper_params() const {
  return this != internal_default_instance() && hyper_params_ != nullptr;
}
inline bool OutputConfig::has_hyper_params() const {
  return _internal_has_hyper_params();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& OutputConfig::_internal_hyper_params() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = hyper_params_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& OutputConfig::hyper_params() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.hyper_params)
  return _internal_hyper_params();
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::release_hyper_params() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputConfig.hyper_params)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = hyper_params_;
  hyper_params_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::_internal_mutable_hyper_params() {
  
  if (hyper_params_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    hyper_params_ = p;
  }
  return hyper_params_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::mutable_hyper_params() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.hyper_params)
  return _internal_mutable_hyper_params();
}
inline void OutputConfig::set_allocated_hyper_params(PROTOBUF_NAMESPACE_ID::Struct* hyper_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hyper_params_);
  }
  if (hyper_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hyper_params)->GetArena();
    if (message_arena != submessage_arena) {
      hyper_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hyper_params, submessage_arena);
    }
    
  } else {
    
  }
  hyper_params_ = hyper_params;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputConfig.hyper_params)
}

// string embed_model_version_id = 14;
inline void OutputConfig::clear_embed_model_version_id() {
  embed_model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OutputConfig::embed_model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.embed_model_version_id)
  return _internal_embed_model_version_id();
}
inline void OutputConfig::set_embed_model_version_id(const std::string& value) {
  _internal_set_embed_model_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.embed_model_version_id)
}
inline std::string* OutputConfig::mutable_embed_model_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.embed_model_version_id)
  return _internal_mutable_embed_model_version_id();
}
inline const std::string& OutputConfig::_internal_embed_model_version_id() const {
  return embed_model_version_id_.GetNoArena();
}
inline void OutputConfig::_internal_set_embed_model_version_id(const std::string& value) {
  
  embed_model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OutputConfig::set_embed_model_version_id(std::string&& value) {
  
  embed_model_version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.OutputConfig.embed_model_version_id)
}
inline void OutputConfig::set_embed_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  embed_model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.OutputConfig.embed_model_version_id)
}
inline void OutputConfig::set_embed_model_version_id(const char* value, size_t size) {
  
  embed_model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.OutputConfig.embed_model_version_id)
}
inline std::string* OutputConfig::_internal_mutable_embed_model_version_id() {
  
  return embed_model_version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutputConfig::release_embed_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputConfig.embed_model_version_id)
  
  return embed_model_version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutputConfig::set_allocated_embed_model_version_id(std::string* embed_model_version_id) {
  if (embed_model_version_id != nullptr) {
    
  } else {
    
  }
  embed_model_version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), embed_model_version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputConfig.embed_model_version_id)
}

// bool fail_on_missing_positive_examples = 15;
inline void OutputConfig::clear_fail_on_missing_positive_examples() {
  fail_on_missing_positive_examples_ = false;
}
inline bool OutputConfig::_internal_fail_on_missing_positive_examples() const {
  return fail_on_missing_positive_examples_;
}
inline bool OutputConfig::fail_on_missing_positive_examples() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.fail_on_missing_positive_examples)
  return _internal_fail_on_missing_positive_examples();
}
inline void OutputConfig::_internal_set_fail_on_missing_positive_examples(bool value) {
  
  fail_on_missing_positive_examples_ = value;
}
inline void OutputConfig::set_fail_on_missing_positive_examples(bool value) {
  _internal_set_fail_on_missing_positive_examples(value);
  // @@protoc_insertion_point(field_set:clarifai.api.OutputConfig.fail_on_missing_positive_examples)
}

// .google.protobuf.Struct model_metadata = 17 [deprecated = true];
inline bool OutputConfig::_internal_has_model_metadata() const {
  return this != internal_default_instance() && model_metadata_ != nullptr;
}
inline bool OutputConfig::has_model_metadata() const {
  return _internal_has_model_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& OutputConfig::_internal_model_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = model_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& OutputConfig::model_metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.OutputConfig.model_metadata)
  return _internal_model_metadata();
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::release_model_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.OutputConfig.model_metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = model_metadata_;
  model_metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::_internal_mutable_model_metadata() {
  
  if (model_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    model_metadata_ = p;
  }
  return model_metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* OutputConfig::mutable_model_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.OutputConfig.model_metadata)
  return _internal_mutable_model_metadata();
}
inline void OutputConfig::set_allocated_model_metadata(PROTOBUF_NAMESPACE_ID::Struct* model_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_metadata_);
  }
  if (model_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_metadata)->GetArena();
    if (message_arena != submessage_arena) {
      model_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_metadata, submessage_arena);
    }
    
  } else {
    
  }
  model_metadata_ = model_metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.OutputConfig.model_metadata)
}

// -------------------------------------------------------------------

// ModelType

// string id = 1;
inline void ModelType::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelType::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.id)
  return _internal_id();
}
inline void ModelType::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.id)
}
inline std::string* ModelType::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelType.id)
  return _internal_mutable_id();
}
inline const std::string& ModelType::_internal_id() const {
  return id_.GetNoArena();
}
inline void ModelType::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelType::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelType.id)
}
inline void ModelType::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelType.id)
}
inline void ModelType::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelType.id)
}
inline std::string* ModelType::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelType::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelType.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelType::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelType.id)
}

// string title = 2;
inline void ModelType::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelType::title() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.title)
  return _internal_title();
}
inline void ModelType::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.title)
}
inline std::string* ModelType::mutable_title() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelType.title)
  return _internal_mutable_title();
}
inline const std::string& ModelType::_internal_title() const {
  return title_.GetNoArena();
}
inline void ModelType::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelType::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelType.title)
}
inline void ModelType::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelType.title)
}
inline void ModelType::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelType.title)
}
inline std::string* ModelType::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelType::release_title() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelType.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelType::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelType.title)
}

// string description = 3;
inline void ModelType::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelType::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.description)
  return _internal_description();
}
inline void ModelType::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.description)
}
inline std::string* ModelType::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelType.description)
  return _internal_mutable_description();
}
inline const std::string& ModelType::_internal_description() const {
  return description_.GetNoArena();
}
inline void ModelType::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelType::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelType.description)
}
inline void ModelType::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelType.description)
}
inline void ModelType::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelType.description)
}
inline std::string* ModelType::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelType::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelType.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelType::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelType.description)
}

// string type = 4;
inline void ModelType::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelType::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.type)
  return _internal_type();
}
inline void ModelType::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.type)
}
inline std::string* ModelType::mutable_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelType.type)
  return _internal_mutable_type();
}
inline const std::string& ModelType::_internal_type() const {
  return type_.GetNoArena();
}
inline void ModelType::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelType::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelType.type)
}
inline void ModelType::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelType.type)
}
inline void ModelType::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelType.type)
}
inline std::string* ModelType::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelType::release_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelType.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelType::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelType.type)
}

// repeated string input_fields = 5;
inline int ModelType::_internal_input_fields_size() const {
  return input_fields_.size();
}
inline int ModelType::input_fields_size() const {
  return _internal_input_fields_size();
}
inline void ModelType::clear_input_fields() {
  input_fields_.Clear();
}
inline std::string* ModelType::add_input_fields() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ModelType.input_fields)
  return _internal_add_input_fields();
}
inline const std::string& ModelType::_internal_input_fields(int index) const {
  return input_fields_.Get(index);
}
inline const std::string& ModelType::input_fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.input_fields)
  return _internal_input_fields(index);
}
inline std::string* ModelType::mutable_input_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelType.input_fields)
  return input_fields_.Mutable(index);
}
inline void ModelType::set_input_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.input_fields)
  input_fields_.Mutable(index)->assign(value);
}
inline void ModelType::set_input_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.input_fields)
  input_fields_.Mutable(index)->assign(std::move(value));
}
inline void ModelType::set_input_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelType.input_fields)
}
inline void ModelType::set_input_fields(int index, const char* value, size_t size) {
  input_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelType.input_fields)
}
inline std::string* ModelType::_internal_add_input_fields() {
  return input_fields_.Add();
}
inline void ModelType::add_input_fields(const std::string& value) {
  input_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ModelType.input_fields)
}
inline void ModelType::add_input_fields(std::string&& value) {
  input_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ModelType.input_fields)
}
inline void ModelType::add_input_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ModelType.input_fields)
}
inline void ModelType::add_input_fields(const char* value, size_t size) {
  input_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ModelType.input_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelType::input_fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ModelType.input_fields)
  return input_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelType::mutable_input_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ModelType.input_fields)
  return &input_fields_;
}

// repeated string output_fields = 6;
inline int ModelType::_internal_output_fields_size() const {
  return output_fields_.size();
}
inline int ModelType::output_fields_size() const {
  return _internal_output_fields_size();
}
inline void ModelType::clear_output_fields() {
  output_fields_.Clear();
}
inline std::string* ModelType::add_output_fields() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ModelType.output_fields)
  return _internal_add_output_fields();
}
inline const std::string& ModelType::_internal_output_fields(int index) const {
  return output_fields_.Get(index);
}
inline const std::string& ModelType::output_fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.output_fields)
  return _internal_output_fields(index);
}
inline std::string* ModelType::mutable_output_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelType.output_fields)
  return output_fields_.Mutable(index);
}
inline void ModelType::set_output_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.output_fields)
  output_fields_.Mutable(index)->assign(value);
}
inline void ModelType::set_output_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.output_fields)
  output_fields_.Mutable(index)->assign(std::move(value));
}
inline void ModelType::set_output_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelType.output_fields)
}
inline void ModelType::set_output_fields(int index, const char* value, size_t size) {
  output_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelType.output_fields)
}
inline std::string* ModelType::_internal_add_output_fields() {
  return output_fields_.Add();
}
inline void ModelType::add_output_fields(const std::string& value) {
  output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ModelType.output_fields)
}
inline void ModelType::add_output_fields(std::string&& value) {
  output_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ModelType.output_fields)
}
inline void ModelType::add_output_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ModelType.output_fields)
}
inline void ModelType::add_output_fields(const char* value, size_t size) {
  output_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ModelType.output_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModelType::output_fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ModelType.output_fields)
  return output_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModelType::mutable_output_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ModelType.output_fields)
  return &output_fields_;
}

// bool trainable = 8;
inline void ModelType::clear_trainable() {
  trainable_ = false;
}
inline bool ModelType::_internal_trainable() const {
  return trainable_;
}
inline bool ModelType::trainable() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.trainable)
  return _internal_trainable();
}
inline void ModelType::_internal_set_trainable(bool value) {
  
  trainable_ = value;
}
inline void ModelType::set_trainable(bool value) {
  _internal_set_trainable(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.trainable)
}

// bool creatable = 9;
inline void ModelType::clear_creatable() {
  creatable_ = false;
}
inline bool ModelType::_internal_creatable() const {
  return creatable_;
}
inline bool ModelType::creatable() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.creatable)
  return _internal_creatable();
}
inline void ModelType::_internal_set_creatable(bool value) {
  
  creatable_ = value;
}
inline void ModelType::set_creatable(bool value) {
  _internal_set_creatable(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.creatable)
}

// bool internal_only = 10;
inline void ModelType::clear_internal_only() {
  internal_only_ = false;
}
inline bool ModelType::_internal_internal_only() const {
  return internal_only_;
}
inline bool ModelType::internal_only() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.internal_only)
  return _internal_internal_only();
}
inline void ModelType::_internal_set_internal_only(bool value) {
  
  internal_only_ = value;
}
inline void ModelType::set_internal_only(bool value) {
  _internal_set_internal_only(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.internal_only)
}

// repeated .clarifai.api.ModelTypeField model_type_fields = 11;
inline int ModelType::_internal_model_type_fields_size() const {
  return model_type_fields_.size();
}
inline int ModelType::model_type_fields_size() const {
  return _internal_model_type_fields_size();
}
inline void ModelType::clear_model_type_fields() {
  model_type_fields_.Clear();
}
inline ::clarifai::api::ModelTypeField* ModelType::mutable_model_type_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelType.model_type_fields)
  return model_type_fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeField >*
ModelType::mutable_model_type_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ModelType.model_type_fields)
  return &model_type_fields_;
}
inline const ::clarifai::api::ModelTypeField& ModelType::_internal_model_type_fields(int index) const {
  return model_type_fields_.Get(index);
}
inline const ::clarifai::api::ModelTypeField& ModelType::model_type_fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.model_type_fields)
  return _internal_model_type_fields(index);
}
inline ::clarifai::api::ModelTypeField* ModelType::_internal_add_model_type_fields() {
  return model_type_fields_.Add();
}
inline ::clarifai::api::ModelTypeField* ModelType::add_model_type_fields() {
  // @@protoc_insertion_point(field_add:clarifai.api.ModelType.model_type_fields)
  return _internal_add_model_type_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeField >&
ModelType::model_type_fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ModelType.model_type_fields)
  return model_type_fields_;
}

// bool requires_sequential_frames = 12;
inline void ModelType::clear_requires_sequential_frames() {
  requires_sequential_frames_ = false;
}
inline bool ModelType::_internal_requires_sequential_frames() const {
  return requires_sequential_frames_;
}
inline bool ModelType::requires_sequential_frames() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.requires_sequential_frames)
  return _internal_requires_sequential_frames();
}
inline void ModelType::_internal_set_requires_sequential_frames(bool value) {
  
  requires_sequential_frames_ = value;
}
inline void ModelType::set_requires_sequential_frames(bool value) {
  _internal_set_requires_sequential_frames(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.requires_sequential_frames)
}

// bool evaluable = 13;
inline void ModelType::clear_evaluable() {
  evaluable_ = false;
}
inline bool ModelType::_internal_evaluable() const {
  return evaluable_;
}
inline bool ModelType::evaluable() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.evaluable)
  return _internal_evaluable();
}
inline void ModelType::_internal_set_evaluable(bool value) {
  
  evaluable_ = value;
}
inline void ModelType::set_evaluable(bool value) {
  _internal_set_evaluable(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelType.evaluable)
}

// .google.protobuf.Struct expected_pretrained_input_fields = 14;
inline bool ModelType::_internal_has_expected_pretrained_input_fields() const {
  return this != internal_default_instance() && expected_pretrained_input_fields_ != nullptr;
}
inline bool ModelType::has_expected_pretrained_input_fields() const {
  return _internal_has_expected_pretrained_input_fields();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ModelType::_internal_expected_pretrained_input_fields() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = expected_pretrained_input_fields_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ModelType::expected_pretrained_input_fields() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.expected_pretrained_input_fields)
  return _internal_expected_pretrained_input_fields();
}
inline PROTOBUF_NAMESPACE_ID::Struct* ModelType::release_expected_pretrained_input_fields() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelType.expected_pretrained_input_fields)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = expected_pretrained_input_fields_;
  expected_pretrained_input_fields_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ModelType::_internal_mutable_expected_pretrained_input_fields() {
  
  if (expected_pretrained_input_fields_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    expected_pretrained_input_fields_ = p;
  }
  return expected_pretrained_input_fields_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ModelType::mutable_expected_pretrained_input_fields() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelType.expected_pretrained_input_fields)
  return _internal_mutable_expected_pretrained_input_fields();
}
inline void ModelType::set_allocated_expected_pretrained_input_fields(PROTOBUF_NAMESPACE_ID::Struct* expected_pretrained_input_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_pretrained_input_fields_);
  }
  if (expected_pretrained_input_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_pretrained_input_fields)->GetArena();
    if (message_arena != submessage_arena) {
      expected_pretrained_input_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_pretrained_input_fields, submessage_arena);
    }
    
  } else {
    
  }
  expected_pretrained_input_fields_ = expected_pretrained_input_fields;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelType.expected_pretrained_input_fields)
}

// .google.protobuf.Struct expected_pretrained_output_fields = 15;
inline bool ModelType::_internal_has_expected_pretrained_output_fields() const {
  return this != internal_default_instance() && expected_pretrained_output_fields_ != nullptr;
}
inline bool ModelType::has_expected_pretrained_output_fields() const {
  return _internal_has_expected_pretrained_output_fields();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ModelType::_internal_expected_pretrained_output_fields() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = expected_pretrained_output_fields_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ModelType::expected_pretrained_output_fields() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelType.expected_pretrained_output_fields)
  return _internal_expected_pretrained_output_fields();
}
inline PROTOBUF_NAMESPACE_ID::Struct* ModelType::release_expected_pretrained_output_fields() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelType.expected_pretrained_output_fields)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = expected_pretrained_output_fields_;
  expected_pretrained_output_fields_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ModelType::_internal_mutable_expected_pretrained_output_fields() {
  
  if (expected_pretrained_output_fields_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    expected_pretrained_output_fields_ = p;
  }
  return expected_pretrained_output_fields_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ModelType::mutable_expected_pretrained_output_fields() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelType.expected_pretrained_output_fields)
  return _internal_mutable_expected_pretrained_output_fields();
}
inline void ModelType::set_allocated_expected_pretrained_output_fields(PROTOBUF_NAMESPACE_ID::Struct* expected_pretrained_output_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_pretrained_output_fields_);
  }
  if (expected_pretrained_output_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_pretrained_output_fields)->GetArena();
    if (message_arena != submessage_arena) {
      expected_pretrained_output_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_pretrained_output_fields, submessage_arena);
    }
    
  } else {
    
  }
  expected_pretrained_output_fields_ = expected_pretrained_output_fields;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelType.expected_pretrained_output_fields)
}

// -------------------------------------------------------------------

// ModelTypeField

// string path = 1;
inline void ModelTypeField::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelTypeField::path() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeField.path)
  return _internal_path();
}
inline void ModelTypeField::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelTypeField.path)
}
inline std::string* ModelTypeField::mutable_path() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelTypeField.path)
  return _internal_mutable_path();
}
inline const std::string& ModelTypeField::_internal_path() const {
  return path_.GetNoArena();
}
inline void ModelTypeField::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelTypeField::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelTypeField.path)
}
inline void ModelTypeField::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelTypeField.path)
}
inline void ModelTypeField::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelTypeField.path)
}
inline std::string* ModelTypeField::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelTypeField::release_path() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelTypeField.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelTypeField::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelTypeField.path)
}

// .clarifai.api.ModelTypeField.ModelTypeFieldType field_type = 2;
inline void ModelTypeField::clear_field_type() {
  field_type_ = 0;
}
inline ::clarifai::api::ModelTypeField_ModelTypeFieldType ModelTypeField::_internal_field_type() const {
  return static_cast< ::clarifai::api::ModelTypeField_ModelTypeFieldType >(field_type_);
}
inline ::clarifai::api::ModelTypeField_ModelTypeFieldType ModelTypeField::field_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeField.field_type)
  return _internal_field_type();
}
inline void ModelTypeField::_internal_set_field_type(::clarifai::api::ModelTypeField_ModelTypeFieldType value) {
  
  field_type_ = value;
}
inline void ModelTypeField::set_field_type(::clarifai::api::ModelTypeField_ModelTypeFieldType value) {
  _internal_set_field_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelTypeField.field_type)
}

// .google.protobuf.Value default_value = 3;
inline bool ModelTypeField::_internal_has_default_value() const {
  return this != internal_default_instance() && default_value_ != nullptr;
}
inline bool ModelTypeField::has_default_value() const {
  return _internal_has_default_value();
}
inline const PROTOBUF_NAMESPACE_ID::Value& ModelTypeField::_internal_default_value() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = default_value_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Value& ModelTypeField::default_value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeField.default_value)
  return _internal_default_value();
}
inline PROTOBUF_NAMESPACE_ID::Value* ModelTypeField::release_default_value() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelTypeField.default_value)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = default_value_;
  default_value_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* ModelTypeField::_internal_mutable_default_value() {
  
  if (default_value_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArenaNoVirtual());
    default_value_ = p;
  }
  return default_value_;
}
inline PROTOBUF_NAMESPACE_ID::Value* ModelTypeField::mutable_default_value() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelTypeField.default_value)
  return _internal_mutable_default_value();
}
inline void ModelTypeField::set_allocated_default_value(PROTOBUF_NAMESPACE_ID::Value* default_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_value_);
  }
  if (default_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_value)->GetArena();
    if (message_arena != submessage_arena) {
      default_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_value, submessage_arena);
    }
    
  } else {
    
  }
  default_value_ = default_value;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelTypeField.default_value)
}

// string description = 4;
inline void ModelTypeField::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelTypeField::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeField.description)
  return _internal_description();
}
inline void ModelTypeField::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelTypeField.description)
}
inline std::string* ModelTypeField::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelTypeField.description)
  return _internal_mutable_description();
}
inline const std::string& ModelTypeField::_internal_description() const {
  return description_.GetNoArena();
}
inline void ModelTypeField::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelTypeField::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelTypeField.description)
}
inline void ModelTypeField::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelTypeField.description)
}
inline void ModelTypeField::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelTypeField.description)
}
inline std::string* ModelTypeField::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelTypeField::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelTypeField.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelTypeField::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelTypeField.description)
}

// string placeholder = 5;
inline void ModelTypeField::clear_placeholder() {
  placeholder_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelTypeField::placeholder() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeField.placeholder)
  return _internal_placeholder();
}
inline void ModelTypeField::set_placeholder(const std::string& value) {
  _internal_set_placeholder(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelTypeField.placeholder)
}
inline std::string* ModelTypeField::mutable_placeholder() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelTypeField.placeholder)
  return _internal_mutable_placeholder();
}
inline const std::string& ModelTypeField::_internal_placeholder() const {
  return placeholder_.GetNoArena();
}
inline void ModelTypeField::_internal_set_placeholder(const std::string& value) {
  
  placeholder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelTypeField::set_placeholder(std::string&& value) {
  
  placeholder_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelTypeField.placeholder)
}
inline void ModelTypeField::set_placeholder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  placeholder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelTypeField.placeholder)
}
inline void ModelTypeField::set_placeholder(const char* value, size_t size) {
  
  placeholder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelTypeField.placeholder)
}
inline std::string* ModelTypeField::_internal_mutable_placeholder() {
  
  return placeholder_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelTypeField::release_placeholder() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelTypeField.placeholder)
  
  return placeholder_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelTypeField::set_allocated_placeholder(std::string* placeholder) {
  if (placeholder != nullptr) {
    
  } else {
    
  }
  placeholder_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placeholder);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelTypeField.placeholder)
}

// repeated .clarifai.api.ModelTypeEnumOption model_type_enum_options = 6;
inline int ModelTypeField::_internal_model_type_enum_options_size() const {
  return model_type_enum_options_.size();
}
inline int ModelTypeField::model_type_enum_options_size() const {
  return _internal_model_type_enum_options_size();
}
inline void ModelTypeField::clear_model_type_enum_options() {
  model_type_enum_options_.Clear();
}
inline ::clarifai::api::ModelTypeEnumOption* ModelTypeField::mutable_model_type_enum_options(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelTypeField.model_type_enum_options)
  return model_type_enum_options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeEnumOption >*
ModelTypeField::mutable_model_type_enum_options() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ModelTypeField.model_type_enum_options)
  return &model_type_enum_options_;
}
inline const ::clarifai::api::ModelTypeEnumOption& ModelTypeField::_internal_model_type_enum_options(int index) const {
  return model_type_enum_options_.Get(index);
}
inline const ::clarifai::api::ModelTypeEnumOption& ModelTypeField::model_type_enum_options(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeField.model_type_enum_options)
  return _internal_model_type_enum_options(index);
}
inline ::clarifai::api::ModelTypeEnumOption* ModelTypeField::_internal_add_model_type_enum_options() {
  return model_type_enum_options_.Add();
}
inline ::clarifai::api::ModelTypeEnumOption* ModelTypeField::add_model_type_enum_options() {
  // @@protoc_insertion_point(field_add:clarifai.api.ModelTypeField.model_type_enum_options)
  return _internal_add_model_type_enum_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeEnumOption >&
ModelTypeField::model_type_enum_options() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ModelTypeField.model_type_enum_options)
  return model_type_enum_options_;
}

// bool internal_only = 7;
inline void ModelTypeField::clear_internal_only() {
  internal_only_ = false;
}
inline bool ModelTypeField::_internal_internal_only() const {
  return internal_only_;
}
inline bool ModelTypeField::internal_only() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeField.internal_only)
  return _internal_internal_only();
}
inline void ModelTypeField::_internal_set_internal_only(bool value) {
  
  internal_only_ = value;
}
inline void ModelTypeField::set_internal_only(bool value) {
  _internal_set_internal_only(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelTypeField.internal_only)
}

// bool required = 8;
inline void ModelTypeField::clear_required() {
  required_ = false;
}
inline bool ModelTypeField::_internal_required() const {
  return required_;
}
inline bool ModelTypeField::required() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeField.required)
  return _internal_required();
}
inline void ModelTypeField::_internal_set_required(bool value) {
  
  required_ = value;
}
inline void ModelTypeField::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelTypeField.required)
}

// .clarifai.api.ModelTypeRangeInfo model_type_range_info = 9;
inline bool ModelTypeField::_internal_has_model_type_range_info() const {
  return this != internal_default_instance() && model_type_range_info_ != nullptr;
}
inline bool ModelTypeField::has_model_type_range_info() const {
  return _internal_has_model_type_range_info();
}
inline void ModelTypeField::clear_model_type_range_info() {
  if (GetArenaNoVirtual() == nullptr && model_type_range_info_ != nullptr) {
    delete model_type_range_info_;
  }
  model_type_range_info_ = nullptr;
}
inline const ::clarifai::api::ModelTypeRangeInfo& ModelTypeField::_internal_model_type_range_info() const {
  const ::clarifai::api::ModelTypeRangeInfo* p = model_type_range_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ModelTypeRangeInfo*>(
      &::clarifai::api::_ModelTypeRangeInfo_default_instance_);
}
inline const ::clarifai::api::ModelTypeRangeInfo& ModelTypeField::model_type_range_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeField.model_type_range_info)
  return _internal_model_type_range_info();
}
inline ::clarifai::api::ModelTypeRangeInfo* ModelTypeField::release_model_type_range_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelTypeField.model_type_range_info)
  
  ::clarifai::api::ModelTypeRangeInfo* temp = model_type_range_info_;
  model_type_range_info_ = nullptr;
  return temp;
}
inline ::clarifai::api::ModelTypeRangeInfo* ModelTypeField::_internal_mutable_model_type_range_info() {
  
  if (model_type_range_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ModelTypeRangeInfo>(GetArenaNoVirtual());
    model_type_range_info_ = p;
  }
  return model_type_range_info_;
}
inline ::clarifai::api::ModelTypeRangeInfo* ModelTypeField::mutable_model_type_range_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelTypeField.model_type_range_info)
  return _internal_mutable_model_type_range_info();
}
inline void ModelTypeField::set_allocated_model_type_range_info(::clarifai::api::ModelTypeRangeInfo* model_type_range_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete model_type_range_info_;
  }
  if (model_type_range_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_type_range_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_type_range_info, submessage_arena);
    }
    
  } else {
    
  }
  model_type_range_info_ = model_type_range_info;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelTypeField.model_type_range_info)
}

// -------------------------------------------------------------------

// ModelTypeRangeInfo

// float min = 1;
inline void ModelTypeRangeInfo::clear_min() {
  min_ = 0;
}
inline float ModelTypeRangeInfo::_internal_min() const {
  return min_;
}
inline float ModelTypeRangeInfo::min() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeRangeInfo.min)
  return _internal_min();
}
inline void ModelTypeRangeInfo::_internal_set_min(float value) {
  
  min_ = value;
}
inline void ModelTypeRangeInfo::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelTypeRangeInfo.min)
}

// float max = 2;
inline void ModelTypeRangeInfo::clear_max() {
  max_ = 0;
}
inline float ModelTypeRangeInfo::_internal_max() const {
  return max_;
}
inline float ModelTypeRangeInfo::max() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeRangeInfo.max)
  return _internal_max();
}
inline void ModelTypeRangeInfo::_internal_set_max(float value) {
  
  max_ = value;
}
inline void ModelTypeRangeInfo::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelTypeRangeInfo.max)
}

// float step = 3;
inline void ModelTypeRangeInfo::clear_step() {
  step_ = 0;
}
inline float ModelTypeRangeInfo::_internal_step() const {
  return step_;
}
inline float ModelTypeRangeInfo::step() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeRangeInfo.step)
  return _internal_step();
}
inline void ModelTypeRangeInfo::_internal_set_step(float value) {
  
  step_ = value;
}
inline void ModelTypeRangeInfo::set_step(float value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelTypeRangeInfo.step)
}

// -------------------------------------------------------------------

// ModelTypeEnumOption

// string id = 1;
inline void ModelTypeEnumOption::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelTypeEnumOption::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeEnumOption.id)
  return _internal_id();
}
inline void ModelTypeEnumOption::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelTypeEnumOption.id)
}
inline std::string* ModelTypeEnumOption::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelTypeEnumOption.id)
  return _internal_mutable_id();
}
inline const std::string& ModelTypeEnumOption::_internal_id() const {
  return id_.GetNoArena();
}
inline void ModelTypeEnumOption::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelTypeEnumOption::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelTypeEnumOption.id)
}
inline void ModelTypeEnumOption::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelTypeEnumOption.id)
}
inline void ModelTypeEnumOption::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelTypeEnumOption.id)
}
inline std::string* ModelTypeEnumOption::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelTypeEnumOption::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelTypeEnumOption.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelTypeEnumOption::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelTypeEnumOption.id)
}

// string description = 2;
inline void ModelTypeEnumOption::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelTypeEnumOption::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeEnumOption.description)
  return _internal_description();
}
inline void ModelTypeEnumOption::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelTypeEnumOption.description)
}
inline std::string* ModelTypeEnumOption::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelTypeEnumOption.description)
  return _internal_mutable_description();
}
inline const std::string& ModelTypeEnumOption::_internal_description() const {
  return description_.GetNoArena();
}
inline void ModelTypeEnumOption::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelTypeEnumOption::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelTypeEnumOption.description)
}
inline void ModelTypeEnumOption::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelTypeEnumOption.description)
}
inline void ModelTypeEnumOption::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelTypeEnumOption.description)
}
inline std::string* ModelTypeEnumOption::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelTypeEnumOption::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelTypeEnumOption.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelTypeEnumOption::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelTypeEnumOption.description)
}

// repeated .clarifai.api.ModelTypeField model_type_fields = 3;
inline int ModelTypeEnumOption::_internal_model_type_fields_size() const {
  return model_type_fields_.size();
}
inline int ModelTypeEnumOption::model_type_fields_size() const {
  return _internal_model_type_fields_size();
}
inline void ModelTypeEnumOption::clear_model_type_fields() {
  model_type_fields_.Clear();
}
inline ::clarifai::api::ModelTypeField* ModelTypeEnumOption::mutable_model_type_fields(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelTypeEnumOption.model_type_fields)
  return model_type_fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeField >*
ModelTypeEnumOption::mutable_model_type_fields() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ModelTypeEnumOption.model_type_fields)
  return &model_type_fields_;
}
inline const ::clarifai::api::ModelTypeField& ModelTypeEnumOption::_internal_model_type_fields(int index) const {
  return model_type_fields_.Get(index);
}
inline const ::clarifai::api::ModelTypeField& ModelTypeEnumOption::model_type_fields(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeEnumOption.model_type_fields)
  return _internal_model_type_fields(index);
}
inline ::clarifai::api::ModelTypeField* ModelTypeEnumOption::_internal_add_model_type_fields() {
  return model_type_fields_.Add();
}
inline ::clarifai::api::ModelTypeField* ModelTypeEnumOption::add_model_type_fields() {
  // @@protoc_insertion_point(field_add:clarifai.api.ModelTypeEnumOption.model_type_fields)
  return _internal_add_model_type_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ModelTypeField >&
ModelTypeEnumOption::model_type_fields() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ModelTypeEnumOption.model_type_fields)
  return model_type_fields_;
}

// bool internal_only = 4;
inline void ModelTypeEnumOption::clear_internal_only() {
  internal_only_ = false;
}
inline bool ModelTypeEnumOption::_internal_internal_only() const {
  return internal_only_;
}
inline bool ModelTypeEnumOption::internal_only() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelTypeEnumOption.internal_only)
  return _internal_internal_only();
}
inline void ModelTypeEnumOption::_internal_set_internal_only(bool value) {
  
  internal_only_ = value;
}
inline void ModelTypeEnumOption::set_internal_only(bool value) {
  _internal_set_internal_only(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelTypeEnumOption.internal_only)
}

// -------------------------------------------------------------------

// ModelQuery

// string name = 1;
inline void ModelQuery::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelQuery::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelQuery.name)
  return _internal_name();
}
inline void ModelQuery::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelQuery.name)
}
inline std::string* ModelQuery::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelQuery.name)
  return _internal_mutable_name();
}
inline const std::string& ModelQuery::_internal_name() const {
  return name_.GetNoArena();
}
inline void ModelQuery::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelQuery::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelQuery.name)
}
inline void ModelQuery::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelQuery.name)
}
inline void ModelQuery::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelQuery.name)
}
inline std::string* ModelQuery::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelQuery::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelQuery.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelQuery::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelQuery.name)
}

// string type = 2 [deprecated = true];
inline void ModelQuery::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelQuery::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelQuery.type)
  return _internal_type();
}
inline void ModelQuery::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelQuery.type)
}
inline std::string* ModelQuery::mutable_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelQuery.type)
  return _internal_mutable_type();
}
inline const std::string& ModelQuery::_internal_type() const {
  return type_.GetNoArena();
}
inline void ModelQuery::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelQuery::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelQuery.type)
}
inline void ModelQuery::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelQuery.type)
}
inline void ModelQuery::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelQuery.type)
}
inline std::string* ModelQuery::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelQuery::release_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelQuery.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelQuery::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelQuery.type)
}

// string model_type_id = 3;
inline void ModelQuery::clear_model_type_id() {
  model_type_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelQuery::model_type_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelQuery.model_type_id)
  return _internal_model_type_id();
}
inline void ModelQuery::set_model_type_id(const std::string& value) {
  _internal_set_model_type_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelQuery.model_type_id)
}
inline std::string* ModelQuery::mutable_model_type_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelQuery.model_type_id)
  return _internal_mutable_model_type_id();
}
inline const std::string& ModelQuery::_internal_model_type_id() const {
  return model_type_id_.GetNoArena();
}
inline void ModelQuery::_internal_set_model_type_id(const std::string& value) {
  
  model_type_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelQuery::set_model_type_id(std::string&& value) {
  
  model_type_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelQuery.model_type_id)
}
inline void ModelQuery::set_model_type_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_type_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelQuery.model_type_id)
}
inline void ModelQuery::set_model_type_id(const char* value, size_t size) {
  
  model_type_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelQuery.model_type_id)
}
inline std::string* ModelQuery::_internal_mutable_model_type_id() {
  
  return model_type_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelQuery::release_model_type_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelQuery.model_type_id)
  
  return model_type_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelQuery::set_allocated_model_type_id(std::string* model_type_id) {
  if (model_type_id != nullptr) {
    
  } else {
    
  }
  model_type_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_type_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelQuery.model_type_id)
}

// -------------------------------------------------------------------

// ModelVersion

// string id = 1;
inline void ModelVersion::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelVersion::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.id)
  return _internal_id();
}
inline void ModelVersion::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersion.id)
}
inline std::string* ModelVersion::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.id)
  return _internal_mutable_id();
}
inline const std::string& ModelVersion::_internal_id() const {
  return id_.GetNoArena();
}
inline void ModelVersion::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelVersion::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelVersion.id)
}
inline void ModelVersion::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelVersion.id)
}
inline void ModelVersion::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelVersion.id)
}
inline std::string* ModelVersion::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelVersion::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVersion::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.id)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool ModelVersion::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool ModelVersion::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelVersion::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelVersion::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.created_at)
  return _internal_mutable_created_at();
}
inline void ModelVersion::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.created_at)
}

// .clarifai.api.status.Status status = 3;
inline bool ModelVersion::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ModelVersion::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& ModelVersion::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& ModelVersion::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* ModelVersion::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* ModelVersion::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* ModelVersion::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.status)
  return _internal_mutable_status();
}
inline void ModelVersion::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.status)
}

// uint32 active_concept_count = 4;
inline void ModelVersion::clear_active_concept_count() {
  active_concept_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelVersion::_internal_active_concept_count() const {
  return active_concept_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelVersion::active_concept_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.active_concept_count)
  return _internal_active_concept_count();
}
inline void ModelVersion::_internal_set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  active_concept_count_ = value;
}
inline void ModelVersion::set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_active_concept_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersion.active_concept_count)
}

// .clarifai.api.EvalMetrics metrics = 5;
inline bool ModelVersion::_internal_has_metrics() const {
  return this != internal_default_instance() && metrics_ != nullptr;
}
inline bool ModelVersion::has_metrics() const {
  return _internal_has_metrics();
}
inline void ModelVersion::clear_metrics() {
  if (GetArenaNoVirtual() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
}
inline const ::clarifai::api::EvalMetrics& ModelVersion::_internal_metrics() const {
  const ::clarifai::api::EvalMetrics* p = metrics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::EvalMetrics*>(
      &::clarifai::api::_EvalMetrics_default_instance_);
}
inline const ::clarifai::api::EvalMetrics& ModelVersion::metrics() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.metrics)
  return _internal_metrics();
}
inline ::clarifai::api::EvalMetrics* ModelVersion::release_metrics() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.metrics)
  
  ::clarifai::api::EvalMetrics* temp = metrics_;
  metrics_ = nullptr;
  return temp;
}
inline ::clarifai::api::EvalMetrics* ModelVersion::_internal_mutable_metrics() {
  
  if (metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::EvalMetrics>(GetArenaNoVirtual());
    metrics_ = p;
  }
  return metrics_;
}
inline ::clarifai::api::EvalMetrics* ModelVersion::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.metrics)
  return _internal_mutable_metrics();
}
inline void ModelVersion::set_allocated_metrics(::clarifai::api::EvalMetrics* metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metrics_;
  }
  if (metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    
  } else {
    
  }
  metrics_ = metrics;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.metrics)
}

// uint32 total_input_count = 6;
inline void ModelVersion::clear_total_input_count() {
  total_input_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelVersion::_internal_total_input_count() const {
  return total_input_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelVersion::total_input_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.total_input_count)
  return _internal_total_input_count();
}
inline void ModelVersion::_internal_set_total_input_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_input_count_ = value;
}
inline void ModelVersion::set_total_input_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_input_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersion.total_input_count)
}

// .google.protobuf.Timestamp completed_at = 10;
inline bool ModelVersion::_internal_has_completed_at() const {
  return this != internal_default_instance() && completed_at_ != nullptr;
}
inline bool ModelVersion::has_completed_at() const {
  return _internal_has_completed_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelVersion::_internal_completed_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = completed_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelVersion::completed_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.completed_at)
  return _internal_completed_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::release_completed_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.completed_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = completed_at_;
  completed_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::_internal_mutable_completed_at() {
  
  if (completed_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    completed_at_ = p;
  }
  return completed_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::mutable_completed_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.completed_at)
  return _internal_mutable_completed_at();
}
inline void ModelVersion::set_allocated_completed_at(PROTOBUF_NAMESPACE_ID::Timestamp* completed_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(completed_at_);
  }
  if (completed_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(completed_at)->GetArena();
    if (message_arena != submessage_arena) {
      completed_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, completed_at, submessage_arena);
    }
    
  } else {
    
  }
  completed_at_ = completed_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.completed_at)
}

// string description = 11;
inline void ModelVersion::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelVersion::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.description)
  return _internal_description();
}
inline void ModelVersion::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersion.description)
}
inline std::string* ModelVersion::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.description)
  return _internal_mutable_description();
}
inline const std::string& ModelVersion::_internal_description() const {
  return description_.GetNoArena();
}
inline void ModelVersion::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelVersion::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelVersion.description)
}
inline void ModelVersion::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelVersion.description)
}
inline void ModelVersion::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelVersion.description)
}
inline std::string* ModelVersion::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelVersion::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVersion::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.description)
}

// .clarifai.api.Visibility visibility = 12;
inline bool ModelVersion::_internal_has_visibility() const {
  return this != internal_default_instance() && visibility_ != nullptr;
}
inline bool ModelVersion::has_visibility() const {
  return _internal_has_visibility();
}
inline void ModelVersion::clear_visibility() {
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
}
inline const ::clarifai::api::Visibility& ModelVersion::_internal_visibility() const {
  const ::clarifai::api::Visibility* p = visibility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Visibility*>(
      &::clarifai::api::_Visibility_default_instance_);
}
inline const ::clarifai::api::Visibility& ModelVersion::visibility() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.visibility)
  return _internal_visibility();
}
inline ::clarifai::api::Visibility* ModelVersion::release_visibility() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.visibility)
  
  ::clarifai::api::Visibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::clarifai::api::Visibility* ModelVersion::_internal_mutable_visibility() {
  
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Visibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  return visibility_;
}
inline ::clarifai::api::Visibility* ModelVersion::mutable_visibility() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.visibility)
  return _internal_mutable_visibility();
}
inline void ModelVersion::set_allocated_visibility(::clarifai::api::Visibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    
  } else {
    
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.visibility)
}

// string app_id = 13;
inline void ModelVersion::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelVersion::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.app_id)
  return _internal_app_id();
}
inline void ModelVersion::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersion.app_id)
}
inline std::string* ModelVersion::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& ModelVersion::_internal_app_id() const {
  return app_id_.GetNoArena();
}
inline void ModelVersion::_internal_set_app_id(const std::string& value) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelVersion::set_app_id(std::string&& value) {
  
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelVersion.app_id)
}
inline void ModelVersion::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelVersion.app_id)
}
inline void ModelVersion::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelVersion.app_id)
}
inline std::string* ModelVersion::_internal_mutable_app_id() {
  
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelVersion::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.app_id)
  
  return app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVersion::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.app_id)
}

// string user_id = 14;
inline void ModelVersion::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelVersion::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.user_id)
  return _internal_user_id();
}
inline void ModelVersion::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersion.user_id)
}
inline std::string* ModelVersion::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ModelVersion::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void ModelVersion::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelVersion::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelVersion.user_id)
}
inline void ModelVersion::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelVersion.user_id)
}
inline void ModelVersion::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelVersion.user_id)
}
inline std::string* ModelVersion::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelVersion::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVersion::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.user_id)
}

// .google.protobuf.Timestamp modified_at = 15;
inline bool ModelVersion::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool ModelVersion::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelVersion::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ModelVersion::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.modified_at)
  return _internal_modified_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ModelVersion::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.modified_at)
  return _internal_mutable_modified_at();
}
inline void ModelVersion::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.modified_at)
}

// .google.protobuf.Struct metadata = 16;
inline bool ModelVersion::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool ModelVersion::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ModelVersion::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ModelVersion::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.metadata)
  return _internal_metadata();
}
inline PROTOBUF_NAMESPACE_ID::Struct* ModelVersion::release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ModelVersion::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ModelVersion::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.metadata)
  return _internal_mutable_metadata();
}
inline void ModelVersion::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.metadata)
}

// string license = 17;
inline void ModelVersion::clear_license() {
  license_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelVersion::license() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ModelVersion.license)
  return _internal_license();
}
inline void ModelVersion::set_license(const std::string& value) {
  _internal_set_license(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ModelVersion.license)
}
inline std::string* ModelVersion::mutable_license() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ModelVersion.license)
  return _internal_mutable_license();
}
inline const std::string& ModelVersion::_internal_license() const {
  return license_.GetNoArena();
}
inline void ModelVersion::_internal_set_license(const std::string& value) {
  
  license_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelVersion::set_license(std::string&& value) {
  
  license_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ModelVersion.license)
}
inline void ModelVersion::set_license(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  license_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ModelVersion.license)
}
inline void ModelVersion::set_license(const char* value, size_t size) {
  
  license_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ModelVersion.license)
}
inline std::string* ModelVersion::_internal_mutable_license() {
  
  return license_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelVersion::release_license() {
  // @@protoc_insertion_point(field_release:clarifai.api.ModelVersion.license)
  
  return license_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVersion::set_allocated_license(std::string* license) {
  if (license != nullptr) {
    
  } else {
    
  }
  license_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), license);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ModelVersion.license)
}

// -------------------------------------------------------------------

// PretrainedModelConfig

// string id = 1;
inline void PretrainedModelConfig::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PretrainedModelConfig::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PretrainedModelConfig.id)
  return _internal_id();
}
inline void PretrainedModelConfig::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PretrainedModelConfig.id)
}
inline std::string* PretrainedModelConfig::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PretrainedModelConfig.id)
  return _internal_mutable_id();
}
inline const std::string& PretrainedModelConfig::_internal_id() const {
  return id_.GetNoArena();
}
inline void PretrainedModelConfig::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PretrainedModelConfig::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PretrainedModelConfig.id)
}
inline void PretrainedModelConfig::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PretrainedModelConfig.id)
}
inline void PretrainedModelConfig::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PretrainedModelConfig.id)
}
inline std::string* PretrainedModelConfig::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PretrainedModelConfig::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.PretrainedModelConfig.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PretrainedModelConfig::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PretrainedModelConfig.id)
}

// string type = 2;
inline void PretrainedModelConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PretrainedModelConfig::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PretrainedModelConfig.type)
  return _internal_type();
}
inline void PretrainedModelConfig::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PretrainedModelConfig.type)
}
inline std::string* PretrainedModelConfig::mutable_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PretrainedModelConfig.type)
  return _internal_mutable_type();
}
inline const std::string& PretrainedModelConfig::_internal_type() const {
  return type_.GetNoArena();
}
inline void PretrainedModelConfig::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PretrainedModelConfig::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PretrainedModelConfig.type)
}
inline void PretrainedModelConfig::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PretrainedModelConfig.type)
}
inline void PretrainedModelConfig::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PretrainedModelConfig.type)
}
inline std::string* PretrainedModelConfig::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PretrainedModelConfig::release_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.PretrainedModelConfig.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PretrainedModelConfig::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PretrainedModelConfig.type)
}

// .google.protobuf.Struct input_fields_map = 3;
inline bool PretrainedModelConfig::_internal_has_input_fields_map() const {
  return this != internal_default_instance() && input_fields_map_ != nullptr;
}
inline bool PretrainedModelConfig::has_input_fields_map() const {
  return _internal_has_input_fields_map();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& PretrainedModelConfig::_internal_input_fields_map() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = input_fields_map_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& PretrainedModelConfig::input_fields_map() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PretrainedModelConfig.input_fields_map)
  return _internal_input_fields_map();
}
inline PROTOBUF_NAMESPACE_ID::Struct* PretrainedModelConfig::release_input_fields_map() {
  // @@protoc_insertion_point(field_release:clarifai.api.PretrainedModelConfig.input_fields_map)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = input_fields_map_;
  input_fields_map_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* PretrainedModelConfig::_internal_mutable_input_fields_map() {
  
  if (input_fields_map_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    input_fields_map_ = p;
  }
  return input_fields_map_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* PretrainedModelConfig::mutable_input_fields_map() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PretrainedModelConfig.input_fields_map)
  return _internal_mutable_input_fields_map();
}
inline void PretrainedModelConfig::set_allocated_input_fields_map(PROTOBUF_NAMESPACE_ID::Struct* input_fields_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_fields_map_);
  }
  if (input_fields_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_fields_map)->GetArena();
    if (message_arena != submessage_arena) {
      input_fields_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_fields_map, submessage_arena);
    }
    
  } else {
    
  }
  input_fields_map_ = input_fields_map;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PretrainedModelConfig.input_fields_map)
}

// .google.protobuf.Struct output_fields_map = 4;
inline bool PretrainedModelConfig::_internal_has_output_fields_map() const {
  return this != internal_default_instance() && output_fields_map_ != nullptr;
}
inline bool PretrainedModelConfig::has_output_fields_map() const {
  return _internal_has_output_fields_map();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& PretrainedModelConfig::_internal_output_fields_map() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = output_fields_map_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& PretrainedModelConfig::output_fields_map() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PretrainedModelConfig.output_fields_map)
  return _internal_output_fields_map();
}
inline PROTOBUF_NAMESPACE_ID::Struct* PretrainedModelConfig::release_output_fields_map() {
  // @@protoc_insertion_point(field_release:clarifai.api.PretrainedModelConfig.output_fields_map)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = output_fields_map_;
  output_fields_map_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* PretrainedModelConfig::_internal_mutable_output_fields_map() {
  
  if (output_fields_map_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    output_fields_map_ = p;
  }
  return output_fields_map_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* PretrainedModelConfig::mutable_output_fields_map() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PretrainedModelConfig.output_fields_map)
  return _internal_mutable_output_fields_map();
}
inline void PretrainedModelConfig::set_allocated_output_fields_map(PROTOBUF_NAMESPACE_ID::Struct* output_fields_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_fields_map_);
  }
  if (output_fields_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_fields_map)->GetArena();
    if (message_arena != submessage_arena) {
      output_fields_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_fields_map, submessage_arena);
    }
    
  } else {
    
  }
  output_fields_map_ = output_fields_map;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PretrainedModelConfig.output_fields_map)
}

// string data_provider_params = 5;
inline void PretrainedModelConfig::clear_data_provider_params() {
  data_provider_params_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PretrainedModelConfig::data_provider_params() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PretrainedModelConfig.data_provider_params)
  return _internal_data_provider_params();
}
inline void PretrainedModelConfig::set_data_provider_params(const std::string& value) {
  _internal_set_data_provider_params(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PretrainedModelConfig.data_provider_params)
}
inline std::string* PretrainedModelConfig::mutable_data_provider_params() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PretrainedModelConfig.data_provider_params)
  return _internal_mutable_data_provider_params();
}
inline const std::string& PretrainedModelConfig::_internal_data_provider_params() const {
  return data_provider_params_.GetNoArena();
}
inline void PretrainedModelConfig::_internal_set_data_provider_params(const std::string& value) {
  
  data_provider_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PretrainedModelConfig::set_data_provider_params(std::string&& value) {
  
  data_provider_params_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PretrainedModelConfig.data_provider_params)
}
inline void PretrainedModelConfig::set_data_provider_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_provider_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PretrainedModelConfig.data_provider_params)
}
inline void PretrainedModelConfig::set_data_provider_params(const char* value, size_t size) {
  
  data_provider_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PretrainedModelConfig.data_provider_params)
}
inline std::string* PretrainedModelConfig::_internal_mutable_data_provider_params() {
  
  return data_provider_params_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PretrainedModelConfig::release_data_provider_params() {
  // @@protoc_insertion_point(field_release:clarifai.api.PretrainedModelConfig.data_provider_params)
  
  return data_provider_params_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PretrainedModelConfig::set_allocated_data_provider_params(std::string* data_provider_params) {
  if (data_provider_params != nullptr) {
    
  } else {
    
  }
  data_provider_params_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_provider_params);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PretrainedModelConfig.data_provider_params)
}

// string model_zip_url = 6;
inline void PretrainedModelConfig::clear_model_zip_url() {
  model_zip_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PretrainedModelConfig::model_zip_url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PretrainedModelConfig.model_zip_url)
  return _internal_model_zip_url();
}
inline void PretrainedModelConfig::set_model_zip_url(const std::string& value) {
  _internal_set_model_zip_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PretrainedModelConfig.model_zip_url)
}
inline std::string* PretrainedModelConfig::mutable_model_zip_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.PretrainedModelConfig.model_zip_url)
  return _internal_mutable_model_zip_url();
}
inline const std::string& PretrainedModelConfig::_internal_model_zip_url() const {
  return model_zip_url_.GetNoArena();
}
inline void PretrainedModelConfig::_internal_set_model_zip_url(const std::string& value) {
  
  model_zip_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PretrainedModelConfig::set_model_zip_url(std::string&& value) {
  
  model_zip_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.PretrainedModelConfig.model_zip_url)
}
inline void PretrainedModelConfig::set_model_zip_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_zip_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.PretrainedModelConfig.model_zip_url)
}
inline void PretrainedModelConfig::set_model_zip_url(const char* value, size_t size) {
  
  model_zip_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.PretrainedModelConfig.model_zip_url)
}
inline std::string* PretrainedModelConfig::_internal_mutable_model_zip_url() {
  
  return model_zip_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PretrainedModelConfig::release_model_zip_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.PretrainedModelConfig.model_zip_url)
  
  return model_zip_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PretrainedModelConfig::set_allocated_model_zip_url(std::string* model_zip_url) {
  if (model_zip_url != nullptr) {
    
  } else {
    
  }
  model_zip_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_zip_url);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.PretrainedModelConfig.model_zip_url)
}

// bool overwrite = 7;
inline void PretrainedModelConfig::clear_overwrite() {
  overwrite_ = false;
}
inline bool PretrainedModelConfig::_internal_overwrite() const {
  return overwrite_;
}
inline bool PretrainedModelConfig::overwrite() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PretrainedModelConfig.overwrite)
  return _internal_overwrite();
}
inline void PretrainedModelConfig::_internal_set_overwrite(bool value) {
  
  overwrite_ = value;
}
inline void PretrainedModelConfig::set_overwrite(bool value) {
  _internal_set_overwrite(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PretrainedModelConfig.overwrite)
}

// -------------------------------------------------------------------

// TrainStats

// repeated .clarifai.api.LossCurveEntry loss_curve = 1;
inline int TrainStats::_internal_loss_curve_size() const {
  return loss_curve_.size();
}
inline int TrainStats::loss_curve_size() const {
  return _internal_loss_curve_size();
}
inline void TrainStats::clear_loss_curve() {
  loss_curve_.Clear();
}
inline ::clarifai::api::LossCurveEntry* TrainStats::mutable_loss_curve(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TrainStats.loss_curve)
  return loss_curve_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LossCurveEntry >*
TrainStats::mutable_loss_curve() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.TrainStats.loss_curve)
  return &loss_curve_;
}
inline const ::clarifai::api::LossCurveEntry& TrainStats::_internal_loss_curve(int index) const {
  return loss_curve_.Get(index);
}
inline const ::clarifai::api::LossCurveEntry& TrainStats::loss_curve(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrainStats.loss_curve)
  return _internal_loss_curve(index);
}
inline ::clarifai::api::LossCurveEntry* TrainStats::_internal_add_loss_curve() {
  return loss_curve_.Add();
}
inline ::clarifai::api::LossCurveEntry* TrainStats::add_loss_curve() {
  // @@protoc_insertion_point(field_add:clarifai.api.TrainStats.loss_curve)
  return _internal_add_loss_curve();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LossCurveEntry >&
TrainStats::loss_curve() const {
  // @@protoc_insertion_point(field_list:clarifai.api.TrainStats.loss_curve)
  return loss_curve_;
}

// -------------------------------------------------------------------

// LossCurveEntry

// uint32 epoch = 1;
inline void LossCurveEntry::clear_epoch() {
  epoch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LossCurveEntry::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LossCurveEntry::epoch() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LossCurveEntry.epoch)
  return _internal_epoch();
}
inline void LossCurveEntry::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  epoch_ = value;
}
inline void LossCurveEntry::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LossCurveEntry.epoch)
}

// uint32 global_step = 2;
inline void LossCurveEntry::clear_global_step() {
  global_step_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LossCurveEntry::_internal_global_step() const {
  return global_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LossCurveEntry::global_step() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LossCurveEntry.global_step)
  return _internal_global_step();
}
inline void LossCurveEntry::_internal_set_global_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  global_step_ = value;
}
inline void LossCurveEntry::set_global_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_global_step(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LossCurveEntry.global_step)
}

// float cost = 3;
inline void LossCurveEntry::clear_cost() {
  cost_ = 0;
}
inline float LossCurveEntry::_internal_cost() const {
  return cost_;
}
inline float LossCurveEntry::cost() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LossCurveEntry.cost)
  return _internal_cost();
}
inline void LossCurveEntry::_internal_set_cost(float value) {
  
  cost_ = value;
}
inline void LossCurveEntry::set_cost(float value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LossCurveEntry.cost)
}

// -------------------------------------------------------------------

// LabelCount

// string concept_name = 1;
inline void LabelCount::clear_concept_name() {
  concept_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LabelCount::concept_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LabelCount.concept_name)
  return _internal_concept_name();
}
inline void LabelCount::set_concept_name(const std::string& value) {
  _internal_set_concept_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LabelCount.concept_name)
}
inline std::string* LabelCount::mutable_concept_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.LabelCount.concept_name)
  return _internal_mutable_concept_name();
}
inline const std::string& LabelCount::_internal_concept_name() const {
  return concept_name_.GetNoArena();
}
inline void LabelCount::_internal_set_concept_name(const std::string& value) {
  
  concept_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LabelCount::set_concept_name(std::string&& value) {
  
  concept_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.LabelCount.concept_name)
}
inline void LabelCount::set_concept_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concept_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.LabelCount.concept_name)
}
inline void LabelCount::set_concept_name(const char* value, size_t size) {
  
  concept_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.LabelCount.concept_name)
}
inline std::string* LabelCount::_internal_mutable_concept_name() {
  
  return concept_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LabelCount::release_concept_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.LabelCount.concept_name)
  
  return concept_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LabelCount::set_allocated_concept_name(std::string* concept_name) {
  if (concept_name != nullptr) {
    
  } else {
    
  }
  concept_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concept_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.LabelCount.concept_name)
}

// uint32 count = 2;
inline void LabelCount::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelCount::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelCount::count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LabelCount.count)
  return _internal_count();
}
inline void LabelCount::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void LabelCount::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LabelCount.count)
}

// -------------------------------------------------------------------

// LabelDistribution

// repeated .clarifai.api.LabelCount positive_label_counts = 1;
inline int LabelDistribution::_internal_positive_label_counts_size() const {
  return positive_label_counts_.size();
}
inline int LabelDistribution::positive_label_counts_size() const {
  return _internal_positive_label_counts_size();
}
inline void LabelDistribution::clear_positive_label_counts() {
  positive_label_counts_.Clear();
}
inline ::clarifai::api::LabelCount* LabelDistribution::mutable_positive_label_counts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.LabelDistribution.positive_label_counts)
  return positive_label_counts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelCount >*
LabelDistribution::mutable_positive_label_counts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.LabelDistribution.positive_label_counts)
  return &positive_label_counts_;
}
inline const ::clarifai::api::LabelCount& LabelDistribution::_internal_positive_label_counts(int index) const {
  return positive_label_counts_.Get(index);
}
inline const ::clarifai::api::LabelCount& LabelDistribution::positive_label_counts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.LabelDistribution.positive_label_counts)
  return _internal_positive_label_counts(index);
}
inline ::clarifai::api::LabelCount* LabelDistribution::_internal_add_positive_label_counts() {
  return positive_label_counts_.Add();
}
inline ::clarifai::api::LabelCount* LabelDistribution::add_positive_label_counts() {
  // @@protoc_insertion_point(field_add:clarifai.api.LabelDistribution.positive_label_counts)
  return _internal_add_positive_label_counts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LabelCount >&
LabelDistribution::positive_label_counts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.LabelDistribution.positive_label_counts)
  return positive_label_counts_;
}

// -------------------------------------------------------------------

// CooccurrenceMatrixEntry

// string row = 1;
inline void CooccurrenceMatrixEntry::clear_row() {
  row_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CooccurrenceMatrixEntry::row() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CooccurrenceMatrixEntry.row)
  return _internal_row();
}
inline void CooccurrenceMatrixEntry::set_row(const std::string& value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CooccurrenceMatrixEntry.row)
}
inline std::string* CooccurrenceMatrixEntry::mutable_row() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CooccurrenceMatrixEntry.row)
  return _internal_mutable_row();
}
inline const std::string& CooccurrenceMatrixEntry::_internal_row() const {
  return row_.GetNoArena();
}
inline void CooccurrenceMatrixEntry::_internal_set_row(const std::string& value) {
  
  row_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CooccurrenceMatrixEntry::set_row(std::string&& value) {
  
  row_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CooccurrenceMatrixEntry.row)
}
inline void CooccurrenceMatrixEntry::set_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.CooccurrenceMatrixEntry.row)
}
inline void CooccurrenceMatrixEntry::set_row(const char* value, size_t size) {
  
  row_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CooccurrenceMatrixEntry.row)
}
inline std::string* CooccurrenceMatrixEntry::_internal_mutable_row() {
  
  return row_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CooccurrenceMatrixEntry::release_row() {
  // @@protoc_insertion_point(field_release:clarifai.api.CooccurrenceMatrixEntry.row)
  
  return row_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceMatrixEntry::set_allocated_row(std::string* row) {
  if (row != nullptr) {
    
  } else {
    
  }
  row_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CooccurrenceMatrixEntry.row)
}

// string col = 2;
inline void CooccurrenceMatrixEntry::clear_col() {
  col_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CooccurrenceMatrixEntry::col() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CooccurrenceMatrixEntry.col)
  return _internal_col();
}
inline void CooccurrenceMatrixEntry::set_col(const std::string& value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CooccurrenceMatrixEntry.col)
}
inline std::string* CooccurrenceMatrixEntry::mutable_col() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CooccurrenceMatrixEntry.col)
  return _internal_mutable_col();
}
inline const std::string& CooccurrenceMatrixEntry::_internal_col() const {
  return col_.GetNoArena();
}
inline void CooccurrenceMatrixEntry::_internal_set_col(const std::string& value) {
  
  col_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CooccurrenceMatrixEntry::set_col(std::string&& value) {
  
  col_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.CooccurrenceMatrixEntry.col)
}
inline void CooccurrenceMatrixEntry::set_col(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  col_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.CooccurrenceMatrixEntry.col)
}
inline void CooccurrenceMatrixEntry::set_col(const char* value, size_t size) {
  
  col_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CooccurrenceMatrixEntry.col)
}
inline std::string* CooccurrenceMatrixEntry::_internal_mutable_col() {
  
  return col_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CooccurrenceMatrixEntry::release_col() {
  // @@protoc_insertion_point(field_release:clarifai.api.CooccurrenceMatrixEntry.col)
  
  return col_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceMatrixEntry::set_allocated_col(std::string* col) {
  if (col != nullptr) {
    
  } else {
    
  }
  col_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), col);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CooccurrenceMatrixEntry.col)
}

// uint32 count = 3;
inline void CooccurrenceMatrixEntry::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CooccurrenceMatrixEntry::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CooccurrenceMatrixEntry::count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CooccurrenceMatrixEntry.count)
  return _internal_count();
}
inline void CooccurrenceMatrixEntry::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void CooccurrenceMatrixEntry::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.CooccurrenceMatrixEntry.count)
}

// -------------------------------------------------------------------

// CooccurrenceMatrix

// repeated .clarifai.api.CooccurrenceMatrixEntry matrix = 1;
inline int CooccurrenceMatrix::_internal_matrix_size() const {
  return matrix_.size();
}
inline int CooccurrenceMatrix::matrix_size() const {
  return _internal_matrix_size();
}
inline void CooccurrenceMatrix::clear_matrix() {
  matrix_.Clear();
}
inline ::clarifai::api::CooccurrenceMatrixEntry* CooccurrenceMatrix::mutable_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CooccurrenceMatrix.matrix)
  return matrix_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CooccurrenceMatrixEntry >*
CooccurrenceMatrix::mutable_matrix() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.CooccurrenceMatrix.matrix)
  return &matrix_;
}
inline const ::clarifai::api::CooccurrenceMatrixEntry& CooccurrenceMatrix::_internal_matrix(int index) const {
  return matrix_.Get(index);
}
inline const ::clarifai::api::CooccurrenceMatrixEntry& CooccurrenceMatrix::matrix(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.CooccurrenceMatrix.matrix)
  return _internal_matrix(index);
}
inline ::clarifai::api::CooccurrenceMatrixEntry* CooccurrenceMatrix::_internal_add_matrix() {
  return matrix_.Add();
}
inline ::clarifai::api::CooccurrenceMatrixEntry* CooccurrenceMatrix::add_matrix() {
  // @@protoc_insertion_point(field_add:clarifai.api.CooccurrenceMatrix.matrix)
  return _internal_add_matrix();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::CooccurrenceMatrixEntry >&
CooccurrenceMatrix::matrix() const {
  // @@protoc_insertion_point(field_list:clarifai.api.CooccurrenceMatrix.matrix)
  return matrix_;
}

// repeated string concept_ids = 2;
inline int CooccurrenceMatrix::_internal_concept_ids_size() const {
  return concept_ids_.size();
}
inline int CooccurrenceMatrix::concept_ids_size() const {
  return _internal_concept_ids_size();
}
inline void CooccurrenceMatrix::clear_concept_ids() {
  concept_ids_.Clear();
}
inline std::string* CooccurrenceMatrix::add_concept_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.CooccurrenceMatrix.concept_ids)
  return _internal_add_concept_ids();
}
inline const std::string& CooccurrenceMatrix::_internal_concept_ids(int index) const {
  return concept_ids_.Get(index);
}
inline const std::string& CooccurrenceMatrix::concept_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.CooccurrenceMatrix.concept_ids)
  return _internal_concept_ids(index);
}
inline std::string* CooccurrenceMatrix::mutable_concept_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CooccurrenceMatrix.concept_ids)
  return concept_ids_.Mutable(index);
}
inline void CooccurrenceMatrix::set_concept_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.CooccurrenceMatrix.concept_ids)
  concept_ids_.Mutable(index)->assign(value);
}
inline void CooccurrenceMatrix::set_concept_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.CooccurrenceMatrix.concept_ids)
  concept_ids_.Mutable(index)->assign(std::move(value));
}
inline void CooccurrenceMatrix::set_concept_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.CooccurrenceMatrix.concept_ids)
}
inline void CooccurrenceMatrix::set_concept_ids(int index, const char* value, size_t size) {
  concept_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.CooccurrenceMatrix.concept_ids)
}
inline std::string* CooccurrenceMatrix::_internal_add_concept_ids() {
  return concept_ids_.Add();
}
inline void CooccurrenceMatrix::add_concept_ids(const std::string& value) {
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.CooccurrenceMatrix.concept_ids)
}
inline void CooccurrenceMatrix::add_concept_ids(std::string&& value) {
  concept_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.CooccurrenceMatrix.concept_ids)
}
inline void CooccurrenceMatrix::add_concept_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.CooccurrenceMatrix.concept_ids)
}
inline void CooccurrenceMatrix::add_concept_ids(const char* value, size_t size) {
  concept_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.CooccurrenceMatrix.concept_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CooccurrenceMatrix::concept_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.CooccurrenceMatrix.concept_ids)
  return concept_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CooccurrenceMatrix::mutable_concept_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.CooccurrenceMatrix.concept_ids)
  return &concept_ids_;
}

// -------------------------------------------------------------------

// ConfusionMatrixEntry

// string predicted = 1;
inline void ConfusionMatrixEntry::clear_predicted() {
  predicted_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfusionMatrixEntry::predicted() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConfusionMatrixEntry.predicted)
  return _internal_predicted();
}
inline void ConfusionMatrixEntry::set_predicted(const std::string& value) {
  _internal_set_predicted(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConfusionMatrixEntry.predicted)
}
inline std::string* ConfusionMatrixEntry::mutable_predicted() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConfusionMatrixEntry.predicted)
  return _internal_mutable_predicted();
}
inline const std::string& ConfusionMatrixEntry::_internal_predicted() const {
  return predicted_.GetNoArena();
}
inline void ConfusionMatrixEntry::_internal_set_predicted(const std::string& value) {
  
  predicted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfusionMatrixEntry::set_predicted(std::string&& value) {
  
  predicted_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConfusionMatrixEntry.predicted)
}
inline void ConfusionMatrixEntry::set_predicted(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  predicted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConfusionMatrixEntry.predicted)
}
inline void ConfusionMatrixEntry::set_predicted(const char* value, size_t size) {
  
  predicted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConfusionMatrixEntry.predicted)
}
inline std::string* ConfusionMatrixEntry::_internal_mutable_predicted() {
  
  return predicted_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfusionMatrixEntry::release_predicted() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConfusionMatrixEntry.predicted)
  
  return predicted_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfusionMatrixEntry::set_allocated_predicted(std::string* predicted) {
  if (predicted != nullptr) {
    
  } else {
    
  }
  predicted_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), predicted);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConfusionMatrixEntry.predicted)
}

// string actual = 2;
inline void ConfusionMatrixEntry::clear_actual() {
  actual_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfusionMatrixEntry::actual() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConfusionMatrixEntry.actual)
  return _internal_actual();
}
inline void ConfusionMatrixEntry::set_actual(const std::string& value) {
  _internal_set_actual(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConfusionMatrixEntry.actual)
}
inline std::string* ConfusionMatrixEntry::mutable_actual() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConfusionMatrixEntry.actual)
  return _internal_mutable_actual();
}
inline const std::string& ConfusionMatrixEntry::_internal_actual() const {
  return actual_.GetNoArena();
}
inline void ConfusionMatrixEntry::_internal_set_actual(const std::string& value) {
  
  actual_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfusionMatrixEntry::set_actual(std::string&& value) {
  
  actual_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ConfusionMatrixEntry.actual)
}
inline void ConfusionMatrixEntry::set_actual(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actual_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConfusionMatrixEntry.actual)
}
inline void ConfusionMatrixEntry::set_actual(const char* value, size_t size) {
  
  actual_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConfusionMatrixEntry.actual)
}
inline std::string* ConfusionMatrixEntry::_internal_mutable_actual() {
  
  return actual_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfusionMatrixEntry::release_actual() {
  // @@protoc_insertion_point(field_release:clarifai.api.ConfusionMatrixEntry.actual)
  
  return actual_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfusionMatrixEntry::set_allocated_actual(std::string* actual) {
  if (actual != nullptr) {
    
  } else {
    
  }
  actual_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actual);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ConfusionMatrixEntry.actual)
}

// float value = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void ConfusionMatrixEntry::clear_value() {
  value_ = 0;
}
inline float ConfusionMatrixEntry::_internal_value() const {
  return value_;
}
inline float ConfusionMatrixEntry::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConfusionMatrixEntry.value)
  return _internal_value();
}
inline void ConfusionMatrixEntry::_internal_set_value(float value) {
  
  value_ = value;
}
inline void ConfusionMatrixEntry::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ConfusionMatrixEntry.value)
}

// -------------------------------------------------------------------

// ConfusionMatrix

// repeated .clarifai.api.ConfusionMatrixEntry matrix = 1;
inline int ConfusionMatrix::_internal_matrix_size() const {
  return matrix_.size();
}
inline int ConfusionMatrix::matrix_size() const {
  return _internal_matrix_size();
}
inline void ConfusionMatrix::clear_matrix() {
  matrix_.Clear();
}
inline ::clarifai::api::ConfusionMatrixEntry* ConfusionMatrix::mutable_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConfusionMatrix.matrix)
  return matrix_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConfusionMatrixEntry >*
ConfusionMatrix::mutable_matrix() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ConfusionMatrix.matrix)
  return &matrix_;
}
inline const ::clarifai::api::ConfusionMatrixEntry& ConfusionMatrix::_internal_matrix(int index) const {
  return matrix_.Get(index);
}
inline const ::clarifai::api::ConfusionMatrixEntry& ConfusionMatrix::matrix(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConfusionMatrix.matrix)
  return _internal_matrix(index);
}
inline ::clarifai::api::ConfusionMatrixEntry* ConfusionMatrix::_internal_add_matrix() {
  return matrix_.Add();
}
inline ::clarifai::api::ConfusionMatrixEntry* ConfusionMatrix::add_matrix() {
  // @@protoc_insertion_point(field_add:clarifai.api.ConfusionMatrix.matrix)
  return _internal_add_matrix();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::ConfusionMatrixEntry >&
ConfusionMatrix::matrix() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ConfusionMatrix.matrix)
  return matrix_;
}

// repeated string concept_ids = 2;
inline int ConfusionMatrix::_internal_concept_ids_size() const {
  return concept_ids_.size();
}
inline int ConfusionMatrix::concept_ids_size() const {
  return _internal_concept_ids_size();
}
inline void ConfusionMatrix::clear_concept_ids() {
  concept_ids_.Clear();
}
inline std::string* ConfusionMatrix::add_concept_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ConfusionMatrix.concept_ids)
  return _internal_add_concept_ids();
}
inline const std::string& ConfusionMatrix::_internal_concept_ids(int index) const {
  return concept_ids_.Get(index);
}
inline const std::string& ConfusionMatrix::concept_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ConfusionMatrix.concept_ids)
  return _internal_concept_ids(index);
}
inline std::string* ConfusionMatrix::mutable_concept_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ConfusionMatrix.concept_ids)
  return concept_ids_.Mutable(index);
}
inline void ConfusionMatrix::set_concept_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ConfusionMatrix.concept_ids)
  concept_ids_.Mutable(index)->assign(value);
}
inline void ConfusionMatrix::set_concept_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ConfusionMatrix.concept_ids)
  concept_ids_.Mutable(index)->assign(std::move(value));
}
inline void ConfusionMatrix::set_concept_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ConfusionMatrix.concept_ids)
}
inline void ConfusionMatrix::set_concept_ids(int index, const char* value, size_t size) {
  concept_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ConfusionMatrix.concept_ids)
}
inline std::string* ConfusionMatrix::_internal_add_concept_ids() {
  return concept_ids_.Add();
}
inline void ConfusionMatrix::add_concept_ids(const std::string& value) {
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ConfusionMatrix.concept_ids)
}
inline void ConfusionMatrix::add_concept_ids(std::string&& value) {
  concept_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ConfusionMatrix.concept_ids)
}
inline void ConfusionMatrix::add_concept_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ConfusionMatrix.concept_ids)
}
inline void ConfusionMatrix::add_concept_ids(const char* value, size_t size) {
  concept_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ConfusionMatrix.concept_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConfusionMatrix::concept_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ConfusionMatrix.concept_ids)
  return concept_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConfusionMatrix::mutable_concept_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ConfusionMatrix.concept_ids)
  return &concept_ids_;
}

// -------------------------------------------------------------------

// ROC

// repeated float fpr = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int ROC::_internal_fpr_size() const {
  return fpr_.size();
}
inline int ROC::fpr_size() const {
  return _internal_fpr_size();
}
inline void ROC::clear_fpr() {
  fpr_.Clear();
}
inline float ROC::_internal_fpr(int index) const {
  return fpr_.Get(index);
}
inline float ROC::fpr(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ROC.fpr)
  return _internal_fpr(index);
}
inline void ROC::set_fpr(int index, float value) {
  fpr_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.ROC.fpr)
}
inline void ROC::_internal_add_fpr(float value) {
  fpr_.Add(value);
}
inline void ROC::add_fpr(float value) {
  _internal_add_fpr(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ROC.fpr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_fpr() const {
  return fpr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::fpr() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ROC.fpr)
  return _internal_fpr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_fpr() {
  return &fpr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_fpr() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ROC.fpr)
  return _internal_mutable_fpr();
}

// repeated float tpr = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int ROC::_internal_tpr_size() const {
  return tpr_.size();
}
inline int ROC::tpr_size() const {
  return _internal_tpr_size();
}
inline void ROC::clear_tpr() {
  tpr_.Clear();
}
inline float ROC::_internal_tpr(int index) const {
  return tpr_.Get(index);
}
inline float ROC::tpr(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ROC.tpr)
  return _internal_tpr(index);
}
inline void ROC::set_tpr(int index, float value) {
  tpr_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.ROC.tpr)
}
inline void ROC::_internal_add_tpr(float value) {
  tpr_.Add(value);
}
inline void ROC::add_tpr(float value) {
  _internal_add_tpr(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ROC.tpr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_tpr() const {
  return tpr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::tpr() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ROC.tpr)
  return _internal_tpr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_tpr() {
  return &tpr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_tpr() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ROC.tpr)
  return _internal_mutable_tpr();
}

// repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int ROC::_internal_thresholds_size() const {
  return thresholds_.size();
}
inline int ROC::thresholds_size() const {
  return _internal_thresholds_size();
}
inline void ROC::clear_thresholds() {
  thresholds_.Clear();
}
inline float ROC::_internal_thresholds(int index) const {
  return thresholds_.Get(index);
}
inline float ROC::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ROC.thresholds)
  return _internal_thresholds(index);
}
inline void ROC::set_thresholds(int index, float value) {
  thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.ROC.thresholds)
}
inline void ROC::_internal_add_thresholds(float value) {
  thresholds_.Add(value);
}
inline void ROC::add_thresholds(float value) {
  _internal_add_thresholds(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ROC.thresholds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_thresholds() const {
  return thresholds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::thresholds() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ROC.thresholds)
  return _internal_thresholds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_thresholds() {
  return &thresholds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ROC.thresholds)
  return _internal_mutable_thresholds();
}

// repeated float fpr_per_image = 4;
inline int ROC::_internal_fpr_per_image_size() const {
  return fpr_per_image_.size();
}
inline int ROC::fpr_per_image_size() const {
  return _internal_fpr_per_image_size();
}
inline void ROC::clear_fpr_per_image() {
  fpr_per_image_.Clear();
}
inline float ROC::_internal_fpr_per_image(int index) const {
  return fpr_per_image_.Get(index);
}
inline float ROC::fpr_per_image(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ROC.fpr_per_image)
  return _internal_fpr_per_image(index);
}
inline void ROC::set_fpr_per_image(int index, float value) {
  fpr_per_image_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.ROC.fpr_per_image)
}
inline void ROC::_internal_add_fpr_per_image(float value) {
  fpr_per_image_.Add(value);
}
inline void ROC::add_fpr_per_image(float value) {
  _internal_add_fpr_per_image(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ROC.fpr_per_image)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_fpr_per_image() const {
  return fpr_per_image_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::fpr_per_image() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ROC.fpr_per_image)
  return _internal_fpr_per_image();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_fpr_per_image() {
  return &fpr_per_image_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_fpr_per_image() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ROC.fpr_per_image)
  return _internal_mutable_fpr_per_image();
}

// repeated float fpr_per_object = 5;
inline int ROC::_internal_fpr_per_object_size() const {
  return fpr_per_object_.size();
}
inline int ROC::fpr_per_object_size() const {
  return _internal_fpr_per_object_size();
}
inline void ROC::clear_fpr_per_object() {
  fpr_per_object_.Clear();
}
inline float ROC::_internal_fpr_per_object(int index) const {
  return fpr_per_object_.Get(index);
}
inline float ROC::fpr_per_object(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ROC.fpr_per_object)
  return _internal_fpr_per_object(index);
}
inline void ROC::set_fpr_per_object(int index, float value) {
  fpr_per_object_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.ROC.fpr_per_object)
}
inline void ROC::_internal_add_fpr_per_object(float value) {
  fpr_per_object_.Add(value);
}
inline void ROC::add_fpr_per_object(float value) {
  _internal_add_fpr_per_object(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ROC.fpr_per_object)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::_internal_fpr_per_object() const {
  return fpr_per_object_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ROC::fpr_per_object() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ROC.fpr_per_object)
  return _internal_fpr_per_object();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::_internal_mutable_fpr_per_object() {
  return &fpr_per_object_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ROC::mutable_fpr_per_object() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ROC.fpr_per_object)
  return _internal_mutable_fpr_per_object();
}

// -------------------------------------------------------------------

// PrecisionRecallCurve

// repeated float recall = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int PrecisionRecallCurve::_internal_recall_size() const {
  return recall_.size();
}
inline int PrecisionRecallCurve::recall_size() const {
  return _internal_recall_size();
}
inline void PrecisionRecallCurve::clear_recall() {
  recall_.Clear();
}
inline float PrecisionRecallCurve::_internal_recall(int index) const {
  return recall_.Get(index);
}
inline float PrecisionRecallCurve::recall(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PrecisionRecallCurve.recall)
  return _internal_recall(index);
}
inline void PrecisionRecallCurve::set_recall(int index, float value) {
  recall_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.PrecisionRecallCurve.recall)
}
inline void PrecisionRecallCurve::_internal_add_recall(float value) {
  recall_.Add(value);
}
inline void PrecisionRecallCurve::add_recall(float value) {
  _internal_add_recall(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PrecisionRecallCurve.recall)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::_internal_recall() const {
  return recall_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::recall() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PrecisionRecallCurve.recall)
  return _internal_recall();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::_internal_mutable_recall() {
  return &recall_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::mutable_recall() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PrecisionRecallCurve.recall)
  return _internal_mutable_recall();
}

// repeated float precision = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int PrecisionRecallCurve::_internal_precision_size() const {
  return precision_.size();
}
inline int PrecisionRecallCurve::precision_size() const {
  return _internal_precision_size();
}
inline void PrecisionRecallCurve::clear_precision() {
  precision_.Clear();
}
inline float PrecisionRecallCurve::_internal_precision(int index) const {
  return precision_.Get(index);
}
inline float PrecisionRecallCurve::precision(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PrecisionRecallCurve.precision)
  return _internal_precision(index);
}
inline void PrecisionRecallCurve::set_precision(int index, float value) {
  precision_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.PrecisionRecallCurve.precision)
}
inline void PrecisionRecallCurve::_internal_add_precision(float value) {
  precision_.Add(value);
}
inline void PrecisionRecallCurve::add_precision(float value) {
  _internal_add_precision(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PrecisionRecallCurve.precision)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::_internal_precision() const {
  return precision_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::precision() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PrecisionRecallCurve.precision)
  return _internal_precision();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::_internal_mutable_precision() {
  return &precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::mutable_precision() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PrecisionRecallCurve.precision)
  return _internal_mutable_precision();
}

// repeated float thresholds = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline int PrecisionRecallCurve::_internal_thresholds_size() const {
  return thresholds_.size();
}
inline int PrecisionRecallCurve::thresholds_size() const {
  return _internal_thresholds_size();
}
inline void PrecisionRecallCurve::clear_thresholds() {
  thresholds_.Clear();
}
inline float PrecisionRecallCurve::_internal_thresholds(int index) const {
  return thresholds_.Get(index);
}
inline float PrecisionRecallCurve::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.PrecisionRecallCurve.thresholds)
  return _internal_thresholds(index);
}
inline void PrecisionRecallCurve::set_thresholds(int index, float value) {
  thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:clarifai.api.PrecisionRecallCurve.thresholds)
}
inline void PrecisionRecallCurve::_internal_add_thresholds(float value) {
  thresholds_.Add(value);
}
inline void PrecisionRecallCurve::add_thresholds(float value) {
  _internal_add_thresholds(value);
  // @@protoc_insertion_point(field_add:clarifai.api.PrecisionRecallCurve.thresholds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::_internal_thresholds() const {
  return thresholds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PrecisionRecallCurve::thresholds() const {
  // @@protoc_insertion_point(field_list:clarifai.api.PrecisionRecallCurve.thresholds)
  return _internal_thresholds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::_internal_mutable_thresholds() {
  return &thresholds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PrecisionRecallCurve::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.PrecisionRecallCurve.thresholds)
  return _internal_mutable_thresholds();
}

// -------------------------------------------------------------------

// BinaryMetrics

// uint32 num_pos = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BinaryMetrics::clear_num_pos() {
  num_pos_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryMetrics::_internal_num_pos() const {
  return num_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryMetrics::num_pos() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.num_pos)
  return _internal_num_pos();
}
inline void BinaryMetrics::_internal_set_num_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_pos_ = value;
}
inline void BinaryMetrics::set_num_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_pos(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.num_pos)
}

// uint32 num_neg = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BinaryMetrics::clear_num_neg() {
  num_neg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryMetrics::_internal_num_neg() const {
  return num_neg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryMetrics::num_neg() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.num_neg)
  return _internal_num_neg();
}
inline void BinaryMetrics::_internal_set_num_neg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_neg_ = value;
}
inline void BinaryMetrics::set_num_neg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_neg(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.num_neg)
}

// uint32 num_tot = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BinaryMetrics::clear_num_tot() {
  num_tot_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryMetrics::_internal_num_tot() const {
  return num_tot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryMetrics::num_tot() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.num_tot)
  return _internal_num_tot();
}
inline void BinaryMetrics::_internal_set_num_tot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_tot_ = value;
}
inline void BinaryMetrics::set_num_tot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_tot(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.num_tot)
}

// float roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BinaryMetrics::clear_roc_auc() {
  roc_auc_ = 0;
}
inline float BinaryMetrics::_internal_roc_auc() const {
  return roc_auc_;
}
inline float BinaryMetrics::roc_auc() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.roc_auc)
  return _internal_roc_auc();
}
inline void BinaryMetrics::_internal_set_roc_auc(float value) {
  
  roc_auc_ = value;
}
inline void BinaryMetrics::set_roc_auc(float value) {
  _internal_set_roc_auc(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.roc_auc)
}

// float f1 = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void BinaryMetrics::clear_f1() {
  f1_ = 0;
}
inline float BinaryMetrics::_internal_f1() const {
  return f1_;
}
inline float BinaryMetrics::f1() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.f1)
  return _internal_f1();
}
inline void BinaryMetrics::_internal_set_f1(float value) {
  
  f1_ = value;
}
inline void BinaryMetrics::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.f1)
}

// .clarifai.api.Concept concept = 6;
inline bool BinaryMetrics::_internal_has_concept() const {
  return this != internal_default_instance() && concept_ != nullptr;
}
inline bool BinaryMetrics::has_concept() const {
  return _internal_has_concept();
}
inline void BinaryMetrics::clear_concept() {
  if (GetArenaNoVirtual() == nullptr && concept_ != nullptr) {
    delete concept_;
  }
  concept_ = nullptr;
}
inline const ::clarifai::api::Concept& BinaryMetrics::_internal_concept() const {
  const ::clarifai::api::Concept* p = concept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Concept*>(
      &::clarifai::api::_Concept_default_instance_);
}
inline const ::clarifai::api::Concept& BinaryMetrics::concept() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.concept)
  return _internal_concept();
}
inline ::clarifai::api::Concept* BinaryMetrics::release_concept() {
  // @@protoc_insertion_point(field_release:clarifai.api.BinaryMetrics.concept)
  
  ::clarifai::api::Concept* temp = concept_;
  concept_ = nullptr;
  return temp;
}
inline ::clarifai::api::Concept* BinaryMetrics::_internal_mutable_concept() {
  
  if (concept_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Concept>(GetArenaNoVirtual());
    concept_ = p;
  }
  return concept_;
}
inline ::clarifai::api::Concept* BinaryMetrics::mutable_concept() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.BinaryMetrics.concept)
  return _internal_mutable_concept();
}
inline void BinaryMetrics::set_allocated_concept(::clarifai::api::Concept* concept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete concept_;
  }
  if (concept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concept, submessage_arena);
    }
    
  } else {
    
  }
  concept_ = concept;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BinaryMetrics.concept)
}

// .clarifai.api.ROC roc_curve = 7;
inline bool BinaryMetrics::_internal_has_roc_curve() const {
  return this != internal_default_instance() && roc_curve_ != nullptr;
}
inline bool BinaryMetrics::has_roc_curve() const {
  return _internal_has_roc_curve();
}
inline void BinaryMetrics::clear_roc_curve() {
  if (GetArenaNoVirtual() == nullptr && roc_curve_ != nullptr) {
    delete roc_curve_;
  }
  roc_curve_ = nullptr;
}
inline const ::clarifai::api::ROC& BinaryMetrics::_internal_roc_curve() const {
  const ::clarifai::api::ROC* p = roc_curve_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ROC*>(
      &::clarifai::api::_ROC_default_instance_);
}
inline const ::clarifai::api::ROC& BinaryMetrics::roc_curve() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.roc_curve)
  return _internal_roc_curve();
}
inline ::clarifai::api::ROC* BinaryMetrics::release_roc_curve() {
  // @@protoc_insertion_point(field_release:clarifai.api.BinaryMetrics.roc_curve)
  
  ::clarifai::api::ROC* temp = roc_curve_;
  roc_curve_ = nullptr;
  return temp;
}
inline ::clarifai::api::ROC* BinaryMetrics::_internal_mutable_roc_curve() {
  
  if (roc_curve_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ROC>(GetArenaNoVirtual());
    roc_curve_ = p;
  }
  return roc_curve_;
}
inline ::clarifai::api::ROC* BinaryMetrics::mutable_roc_curve() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.BinaryMetrics.roc_curve)
  return _internal_mutable_roc_curve();
}
inline void BinaryMetrics::set_allocated_roc_curve(::clarifai::api::ROC* roc_curve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roc_curve_;
  }
  if (roc_curve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roc_curve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roc_curve, submessage_arena);
    }
    
  } else {
    
  }
  roc_curve_ = roc_curve;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BinaryMetrics.roc_curve)
}

// .clarifai.api.PrecisionRecallCurve precision_recall_curve = 8;
inline bool BinaryMetrics::_internal_has_precision_recall_curve() const {
  return this != internal_default_instance() && precision_recall_curve_ != nullptr;
}
inline bool BinaryMetrics::has_precision_recall_curve() const {
  return _internal_has_precision_recall_curve();
}
inline void BinaryMetrics::clear_precision_recall_curve() {
  if (GetArenaNoVirtual() == nullptr && precision_recall_curve_ != nullptr) {
    delete precision_recall_curve_;
  }
  precision_recall_curve_ = nullptr;
}
inline const ::clarifai::api::PrecisionRecallCurve& BinaryMetrics::_internal_precision_recall_curve() const {
  const ::clarifai::api::PrecisionRecallCurve* p = precision_recall_curve_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::PrecisionRecallCurve*>(
      &::clarifai::api::_PrecisionRecallCurve_default_instance_);
}
inline const ::clarifai::api::PrecisionRecallCurve& BinaryMetrics::precision_recall_curve() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.precision_recall_curve)
  return _internal_precision_recall_curve();
}
inline ::clarifai::api::PrecisionRecallCurve* BinaryMetrics::release_precision_recall_curve() {
  // @@protoc_insertion_point(field_release:clarifai.api.BinaryMetrics.precision_recall_curve)
  
  ::clarifai::api::PrecisionRecallCurve* temp = precision_recall_curve_;
  precision_recall_curve_ = nullptr;
  return temp;
}
inline ::clarifai::api::PrecisionRecallCurve* BinaryMetrics::_internal_mutable_precision_recall_curve() {
  
  if (precision_recall_curve_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::PrecisionRecallCurve>(GetArenaNoVirtual());
    precision_recall_curve_ = p;
  }
  return precision_recall_curve_;
}
inline ::clarifai::api::PrecisionRecallCurve* BinaryMetrics::mutable_precision_recall_curve() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.BinaryMetrics.precision_recall_curve)
  return _internal_mutable_precision_recall_curve();
}
inline void BinaryMetrics::set_allocated_precision_recall_curve(::clarifai::api::PrecisionRecallCurve* precision_recall_curve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete precision_recall_curve_;
  }
  if (precision_recall_curve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      precision_recall_curve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, precision_recall_curve, submessage_arena);
    }
    
  } else {
    
  }
  precision_recall_curve_ = precision_recall_curve;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BinaryMetrics.precision_recall_curve)
}

// float avg_precision = 9;
inline void BinaryMetrics::clear_avg_precision() {
  avg_precision_ = 0;
}
inline float BinaryMetrics::_internal_avg_precision() const {
  return avg_precision_;
}
inline float BinaryMetrics::avg_precision() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.avg_precision)
  return _internal_avg_precision();
}
inline void BinaryMetrics::_internal_set_avg_precision(float value) {
  
  avg_precision_ = value;
}
inline void BinaryMetrics::set_avg_precision(float value) {
  _internal_set_avg_precision(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.avg_precision)
}

// string area_name = 10;
inline void BinaryMetrics::clear_area_name() {
  area_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BinaryMetrics::area_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.area_name)
  return _internal_area_name();
}
inline void BinaryMetrics::set_area_name(const std::string& value) {
  _internal_set_area_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.area_name)
}
inline std::string* BinaryMetrics::mutable_area_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.BinaryMetrics.area_name)
  return _internal_mutable_area_name();
}
inline const std::string& BinaryMetrics::_internal_area_name() const {
  return area_name_.GetNoArena();
}
inline void BinaryMetrics::_internal_set_area_name(const std::string& value) {
  
  area_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BinaryMetrics::set_area_name(std::string&& value) {
  
  area_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.BinaryMetrics.area_name)
}
inline void BinaryMetrics::set_area_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  area_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.BinaryMetrics.area_name)
}
inline void BinaryMetrics::set_area_name(const char* value, size_t size) {
  
  area_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.BinaryMetrics.area_name)
}
inline std::string* BinaryMetrics::_internal_mutable_area_name() {
  
  return area_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BinaryMetrics::release_area_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.BinaryMetrics.area_name)
  
  return area_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BinaryMetrics::set_allocated_area_name(std::string* area_name) {
  if (area_name != nullptr) {
    
  } else {
    
  }
  area_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.BinaryMetrics.area_name)
}

// double area_min = 11;
inline void BinaryMetrics::clear_area_min() {
  area_min_ = 0;
}
inline double BinaryMetrics::_internal_area_min() const {
  return area_min_;
}
inline double BinaryMetrics::area_min() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.area_min)
  return _internal_area_min();
}
inline void BinaryMetrics::_internal_set_area_min(double value) {
  
  area_min_ = value;
}
inline void BinaryMetrics::set_area_min(double value) {
  _internal_set_area_min(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.area_min)
}

// double area_max = 12;
inline void BinaryMetrics::clear_area_max() {
  area_max_ = 0;
}
inline double BinaryMetrics::_internal_area_max() const {
  return area_max_;
}
inline double BinaryMetrics::area_max() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.area_max)
  return _internal_area_max();
}
inline void BinaryMetrics::_internal_set_area_max(double value) {
  
  area_max_ = value;
}
inline void BinaryMetrics::set_area_max(double value) {
  _internal_set_area_max(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.area_max)
}

// float iou = 13;
inline void BinaryMetrics::clear_iou() {
  iou_ = 0;
}
inline float BinaryMetrics::_internal_iou() const {
  return iou_;
}
inline float BinaryMetrics::iou() const {
  // @@protoc_insertion_point(field_get:clarifai.api.BinaryMetrics.iou)
  return _internal_iou();
}
inline void BinaryMetrics::_internal_set_iou(float value) {
  
  iou_ = value;
}
inline void BinaryMetrics::set_iou(float value) {
  _internal_set_iou(value);
  // @@protoc_insertion_point(field_set:clarifai.api.BinaryMetrics.iou)
}

// -------------------------------------------------------------------

// TrackerMetrics

// float mot_mota = 1;
inline void TrackerMetrics::clear_mot_mota() {
  mot_mota_ = 0;
}
inline float TrackerMetrics::_internal_mot_mota() const {
  return mot_mota_;
}
inline float TrackerMetrics::mot_mota() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrackerMetrics.mot_mota)
  return _internal_mot_mota();
}
inline void TrackerMetrics::_internal_set_mot_mota(float value) {
  
  mot_mota_ = value;
}
inline void TrackerMetrics::set_mot_mota(float value) {
  _internal_set_mot_mota(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TrackerMetrics.mot_mota)
}

// int32 mot_num_switches = 2;
inline void TrackerMetrics::clear_mot_num_switches() {
  mot_num_switches_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackerMetrics::_internal_mot_num_switches() const {
  return mot_num_switches_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackerMetrics::mot_num_switches() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrackerMetrics.mot_num_switches)
  return _internal_mot_num_switches();
}
inline void TrackerMetrics::_internal_set_mot_num_switches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mot_num_switches_ = value;
}
inline void TrackerMetrics::set_mot_num_switches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mot_num_switches(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TrackerMetrics.mot_num_switches)
}

// float morse_frag = 3;
inline void TrackerMetrics::clear_morse_frag() {
  morse_frag_ = 0;
}
inline float TrackerMetrics::_internal_morse_frag() const {
  return morse_frag_;
}
inline float TrackerMetrics::morse_frag() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrackerMetrics.morse_frag)
  return _internal_morse_frag();
}
inline void TrackerMetrics::_internal_set_morse_frag(float value) {
  
  morse_frag_ = value;
}
inline void TrackerMetrics::set_morse_frag(float value) {
  _internal_set_morse_frag(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TrackerMetrics.morse_frag)
}

// float avg_precision = 4;
inline void TrackerMetrics::clear_avg_precision() {
  avg_precision_ = 0;
}
inline float TrackerMetrics::_internal_avg_precision() const {
  return avg_precision_;
}
inline float TrackerMetrics::avg_precision() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrackerMetrics.avg_precision)
  return _internal_avg_precision();
}
inline void TrackerMetrics::_internal_set_avg_precision(float value) {
  
  avg_precision_ = value;
}
inline void TrackerMetrics::set_avg_precision(float value) {
  _internal_set_avg_precision(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TrackerMetrics.avg_precision)
}

// string aiid = 5;
inline void TrackerMetrics::clear_aiid() {
  aiid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrackerMetrics::aiid() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrackerMetrics.aiid)
  return _internal_aiid();
}
inline void TrackerMetrics::set_aiid(const std::string& value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TrackerMetrics.aiid)
}
inline std::string* TrackerMetrics::mutable_aiid() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TrackerMetrics.aiid)
  return _internal_mutable_aiid();
}
inline const std::string& TrackerMetrics::_internal_aiid() const {
  return aiid_.GetNoArena();
}
inline void TrackerMetrics::_internal_set_aiid(const std::string& value) {
  
  aiid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrackerMetrics::set_aiid(std::string&& value) {
  
  aiid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.TrackerMetrics.aiid)
}
inline void TrackerMetrics::set_aiid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aiid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.TrackerMetrics.aiid)
}
inline void TrackerMetrics::set_aiid(const char* value, size_t size) {
  
  aiid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.TrackerMetrics.aiid)
}
inline std::string* TrackerMetrics::_internal_mutable_aiid() {
  
  return aiid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrackerMetrics::release_aiid() {
  // @@protoc_insertion_point(field_release:clarifai.api.TrackerMetrics.aiid)
  
  return aiid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrackerMetrics::set_allocated_aiid(std::string* aiid) {
  if (aiid != nullptr) {
    
  } else {
    
  }
  aiid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aiid);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TrackerMetrics.aiid)
}

// float unique_switch_rate = 6;
inline void TrackerMetrics::clear_unique_switch_rate() {
  unique_switch_rate_ = 0;
}
inline float TrackerMetrics::_internal_unique_switch_rate() const {
  return unique_switch_rate_;
}
inline float TrackerMetrics::unique_switch_rate() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TrackerMetrics.unique_switch_rate)
  return _internal_unique_switch_rate();
}
inline void TrackerMetrics::_internal_set_unique_switch_rate(float value) {
  
  unique_switch_rate_ = value;
}
inline void TrackerMetrics::set_unique_switch_rate(float value) {
  _internal_set_unique_switch_rate(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TrackerMetrics.unique_switch_rate)
}

// -------------------------------------------------------------------

// EvalTestSetEntry

// string id = 1 [deprecated = true];
inline void EvalTestSetEntry::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EvalTestSetEntry::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalTestSetEntry.id)
  return _internal_id();
}
inline void EvalTestSetEntry::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EvalTestSetEntry.id)
}
inline std::string* EvalTestSetEntry::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalTestSetEntry.id)
  return _internal_mutable_id();
}
inline const std::string& EvalTestSetEntry::_internal_id() const {
  return id_.GetNoArena();
}
inline void EvalTestSetEntry::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EvalTestSetEntry::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.EvalTestSetEntry.id)
}
inline void EvalTestSetEntry::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.EvalTestSetEntry.id)
}
inline void EvalTestSetEntry::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.EvalTestSetEntry.id)
}
inline std::string* EvalTestSetEntry::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EvalTestSetEntry::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalTestSetEntry.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EvalTestSetEntry::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalTestSetEntry.id)
}

// string url = 2 [deprecated = true];
inline void EvalTestSetEntry::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EvalTestSetEntry::url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalTestSetEntry.url)
  return _internal_url();
}
inline void EvalTestSetEntry::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EvalTestSetEntry.url)
}
inline std::string* EvalTestSetEntry::mutable_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalTestSetEntry.url)
  return _internal_mutable_url();
}
inline const std::string& EvalTestSetEntry::_internal_url() const {
  return url_.GetNoArena();
}
inline void EvalTestSetEntry::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EvalTestSetEntry::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.EvalTestSetEntry.url)
}
inline void EvalTestSetEntry::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.EvalTestSetEntry.url)
}
inline void EvalTestSetEntry::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.EvalTestSetEntry.url)
}
inline std::string* EvalTestSetEntry::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EvalTestSetEntry::release_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalTestSetEntry.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EvalTestSetEntry::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalTestSetEntry.url)
}

// .clarifai.api.Input input = 6;
inline bool EvalTestSetEntry::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool EvalTestSetEntry::has_input() const {
  return _internal_has_input();
}
inline void EvalTestSetEntry::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::clarifai::api::Input& EvalTestSetEntry::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& EvalTestSetEntry::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalTestSetEntry.input)
  return _internal_input();
}
inline ::clarifai::api::Input* EvalTestSetEntry::release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalTestSetEntry.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* EvalTestSetEntry::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArenaNoVirtual());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* EvalTestSetEntry::mutable_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalTestSetEntry.input)
  return _internal_mutable_input();
}
inline void EvalTestSetEntry::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalTestSetEntry.input)
}

// repeated .clarifai.api.Concept predicted_concepts = 3;
inline int EvalTestSetEntry::_internal_predicted_concepts_size() const {
  return predicted_concepts_.size();
}
inline int EvalTestSetEntry::predicted_concepts_size() const {
  return _internal_predicted_concepts_size();
}
inline void EvalTestSetEntry::clear_predicted_concepts() {
  predicted_concepts_.Clear();
}
inline ::clarifai::api::Concept* EvalTestSetEntry::mutable_predicted_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalTestSetEntry.predicted_concepts)
  return predicted_concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
EvalTestSetEntry::mutable_predicted_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalTestSetEntry.predicted_concepts)
  return &predicted_concepts_;
}
inline const ::clarifai::api::Concept& EvalTestSetEntry::_internal_predicted_concepts(int index) const {
  return predicted_concepts_.Get(index);
}
inline const ::clarifai::api::Concept& EvalTestSetEntry::predicted_concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalTestSetEntry.predicted_concepts)
  return _internal_predicted_concepts(index);
}
inline ::clarifai::api::Concept* EvalTestSetEntry::_internal_add_predicted_concepts() {
  return predicted_concepts_.Add();
}
inline ::clarifai::api::Concept* EvalTestSetEntry::add_predicted_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalTestSetEntry.predicted_concepts)
  return _internal_add_predicted_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
EvalTestSetEntry::predicted_concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalTestSetEntry.predicted_concepts)
  return predicted_concepts_;
}

// repeated .clarifai.api.Concept ground_truth_concepts = 4;
inline int EvalTestSetEntry::_internal_ground_truth_concepts_size() const {
  return ground_truth_concepts_.size();
}
inline int EvalTestSetEntry::ground_truth_concepts_size() const {
  return _internal_ground_truth_concepts_size();
}
inline void EvalTestSetEntry::clear_ground_truth_concepts() {
  ground_truth_concepts_.Clear();
}
inline ::clarifai::api::Concept* EvalTestSetEntry::mutable_ground_truth_concepts(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalTestSetEntry.ground_truth_concepts)
  return ground_truth_concepts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >*
EvalTestSetEntry::mutable_ground_truth_concepts() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalTestSetEntry.ground_truth_concepts)
  return &ground_truth_concepts_;
}
inline const ::clarifai::api::Concept& EvalTestSetEntry::_internal_ground_truth_concepts(int index) const {
  return ground_truth_concepts_.Get(index);
}
inline const ::clarifai::api::Concept& EvalTestSetEntry::ground_truth_concepts(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalTestSetEntry.ground_truth_concepts)
  return _internal_ground_truth_concepts(index);
}
inline ::clarifai::api::Concept* EvalTestSetEntry::_internal_add_ground_truth_concepts() {
  return ground_truth_concepts_.Add();
}
inline ::clarifai::api::Concept* EvalTestSetEntry::add_ground_truth_concepts() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalTestSetEntry.ground_truth_concepts)
  return _internal_add_ground_truth_concepts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Concept >&
EvalTestSetEntry::ground_truth_concepts() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalTestSetEntry.ground_truth_concepts)
  return ground_truth_concepts_;
}

// .clarifai.api.Annotation annotation = 5;
inline bool EvalTestSetEntry::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool EvalTestSetEntry::has_annotation() const {
  return _internal_has_annotation();
}
inline void EvalTestSetEntry::clear_annotation() {
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
inline const ::clarifai::api::Annotation& EvalTestSetEntry::_internal_annotation() const {
  const ::clarifai::api::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Annotation*>(
      &::clarifai::api::_Annotation_default_instance_);
}
inline const ::clarifai::api::Annotation& EvalTestSetEntry::annotation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalTestSetEntry.annotation)
  return _internal_annotation();
}
inline ::clarifai::api::Annotation* EvalTestSetEntry::release_annotation() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalTestSetEntry.annotation)
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::clarifai::api::Annotation* EvalTestSetEntry::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Annotation>(GetArenaNoVirtual());
    annotation_ = p;
  }
  return annotation_;
}
inline ::clarifai::api::Annotation* EvalTestSetEntry::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalTestSetEntry.annotation)
  return _internal_mutable_annotation();
}
inline void EvalTestSetEntry::set_allocated_annotation(::clarifai::api::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalTestSetEntry.annotation)
}

// -------------------------------------------------------------------

// LOPQEvalResult

// int32 k = 1;
inline void LOPQEvalResult::clear_k() {
  k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQEvalResult::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LOPQEvalResult::k() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LOPQEvalResult.k)
  return _internal_k();
}
inline void LOPQEvalResult::_internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  k_ = value;
}
inline void LOPQEvalResult::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LOPQEvalResult.k)
}

// float recall_vs_brute_force = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_recall_vs_brute_force() {
  recall_vs_brute_force_ = 0;
}
inline float LOPQEvalResult::_internal_recall_vs_brute_force() const {
  return recall_vs_brute_force_;
}
inline float LOPQEvalResult::recall_vs_brute_force() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LOPQEvalResult.recall_vs_brute_force)
  return _internal_recall_vs_brute_force();
}
inline void LOPQEvalResult::_internal_set_recall_vs_brute_force(float value) {
  
  recall_vs_brute_force_ = value;
}
inline void LOPQEvalResult::set_recall_vs_brute_force(float value) {
  _internal_set_recall_vs_brute_force(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LOPQEvalResult.recall_vs_brute_force)
}

// float kendall_tau_vs_brute_force = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_kendall_tau_vs_brute_force() {
  kendall_tau_vs_brute_force_ = 0;
}
inline float LOPQEvalResult::_internal_kendall_tau_vs_brute_force() const {
  return kendall_tau_vs_brute_force_;
}
inline float LOPQEvalResult::kendall_tau_vs_brute_force() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LOPQEvalResult.kendall_tau_vs_brute_force)
  return _internal_kendall_tau_vs_brute_force();
}
inline void LOPQEvalResult::_internal_set_kendall_tau_vs_brute_force(float value) {
  
  kendall_tau_vs_brute_force_ = value;
}
inline void LOPQEvalResult::set_kendall_tau_vs_brute_force(float value) {
  _internal_set_kendall_tau_vs_brute_force(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LOPQEvalResult.kendall_tau_vs_brute_force)
}

// float most_frequent_code_percent = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_most_frequent_code_percent() {
  most_frequent_code_percent_ = 0;
}
inline float LOPQEvalResult::_internal_most_frequent_code_percent() const {
  return most_frequent_code_percent_;
}
inline float LOPQEvalResult::most_frequent_code_percent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LOPQEvalResult.most_frequent_code_percent)
  return _internal_most_frequent_code_percent();
}
inline void LOPQEvalResult::_internal_set_most_frequent_code_percent(float value) {
  
  most_frequent_code_percent_ = value;
}
inline void LOPQEvalResult::set_most_frequent_code_percent(float value) {
  _internal_set_most_frequent_code_percent(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LOPQEvalResult.most_frequent_code_percent)
}

// float lopq_ndcg = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_lopq_ndcg() {
  lopq_ndcg_ = 0;
}
inline float LOPQEvalResult::_internal_lopq_ndcg() const {
  return lopq_ndcg_;
}
inline float LOPQEvalResult::lopq_ndcg() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LOPQEvalResult.lopq_ndcg)
  return _internal_lopq_ndcg();
}
inline void LOPQEvalResult::_internal_set_lopq_ndcg(float value) {
  
  lopq_ndcg_ = value;
}
inline void LOPQEvalResult::set_lopq_ndcg(float value) {
  _internal_set_lopq_ndcg(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LOPQEvalResult.lopq_ndcg)
}

// float brute_force_ndcg = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void LOPQEvalResult::clear_brute_force_ndcg() {
  brute_force_ndcg_ = 0;
}
inline float LOPQEvalResult::_internal_brute_force_ndcg() const {
  return brute_force_ndcg_;
}
inline float LOPQEvalResult::brute_force_ndcg() const {
  // @@protoc_insertion_point(field_get:clarifai.api.LOPQEvalResult.brute_force_ndcg)
  return _internal_brute_force_ndcg();
}
inline void LOPQEvalResult::_internal_set_brute_force_ndcg(float value) {
  
  brute_force_ndcg_ = value;
}
inline void LOPQEvalResult::set_brute_force_ndcg(float value) {
  _internal_set_brute_force_ndcg(value);
  // @@protoc_insertion_point(field_set:clarifai.api.LOPQEvalResult.brute_force_ndcg)
}

// -------------------------------------------------------------------

// MetricsSummary

// float top1_accuracy = 1 [deprecated = true];
inline void MetricsSummary::clear_top1_accuracy() {
  top1_accuracy_ = 0;
}
inline float MetricsSummary::_internal_top1_accuracy() const {
  return top1_accuracy_;
}
inline float MetricsSummary::top1_accuracy() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.top1_accuracy)
  return _internal_top1_accuracy();
}
inline void MetricsSummary::_internal_set_top1_accuracy(float value) {
  
  top1_accuracy_ = value;
}
inline void MetricsSummary::set_top1_accuracy(float value) {
  _internal_set_top1_accuracy(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.top1_accuracy)
}

// float top5_accuracy = 2 [deprecated = true];
inline void MetricsSummary::clear_top5_accuracy() {
  top5_accuracy_ = 0;
}
inline float MetricsSummary::_internal_top5_accuracy() const {
  return top5_accuracy_;
}
inline float MetricsSummary::top5_accuracy() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.top5_accuracy)
  return _internal_top5_accuracy();
}
inline void MetricsSummary::_internal_set_top5_accuracy(float value) {
  
  top5_accuracy_ = value;
}
inline void MetricsSummary::set_top5_accuracy(float value) {
  _internal_set_top5_accuracy(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.top5_accuracy)
}

// float macro_avg_roc_auc = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void MetricsSummary::clear_macro_avg_roc_auc() {
  macro_avg_roc_auc_ = 0;
}
inline float MetricsSummary::_internal_macro_avg_roc_auc() const {
  return macro_avg_roc_auc_;
}
inline float MetricsSummary::macro_avg_roc_auc() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.macro_avg_roc_auc)
  return _internal_macro_avg_roc_auc();
}
inline void MetricsSummary::_internal_set_macro_avg_roc_auc(float value) {
  
  macro_avg_roc_auc_ = value;
}
inline void MetricsSummary::set_macro_avg_roc_auc(float value) {
  _internal_set_macro_avg_roc_auc(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.macro_avg_roc_auc)
}

// float macro_std_roc_auc = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void MetricsSummary::clear_macro_std_roc_auc() {
  macro_std_roc_auc_ = 0;
}
inline float MetricsSummary::_internal_macro_std_roc_auc() const {
  return macro_std_roc_auc_;
}
inline float MetricsSummary::macro_std_roc_auc() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.macro_std_roc_auc)
  return _internal_macro_std_roc_auc();
}
inline void MetricsSummary::_internal_set_macro_std_roc_auc(float value) {
  
  macro_std_roc_auc_ = value;
}
inline void MetricsSummary::set_macro_std_roc_auc(float value) {
  _internal_set_macro_std_roc_auc(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.macro_std_roc_auc)
}

// float macro_avg_f1_score = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void MetricsSummary::clear_macro_avg_f1_score() {
  macro_avg_f1_score_ = 0;
}
inline float MetricsSummary::_internal_macro_avg_f1_score() const {
  return macro_avg_f1_score_;
}
inline float MetricsSummary::macro_avg_f1_score() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.macro_avg_f1_score)
  return _internal_macro_avg_f1_score();
}
inline void MetricsSummary::_internal_set_macro_avg_f1_score(float value) {
  
  macro_avg_f1_score_ = value;
}
inline void MetricsSummary::set_macro_avg_f1_score(float value) {
  _internal_set_macro_avg_f1_score(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.macro_avg_f1_score)
}

// float macro_std_f1_score = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void MetricsSummary::clear_macro_std_f1_score() {
  macro_std_f1_score_ = 0;
}
inline float MetricsSummary::_internal_macro_std_f1_score() const {
  return macro_std_f1_score_;
}
inline float MetricsSummary::macro_std_f1_score() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.macro_std_f1_score)
  return _internal_macro_std_f1_score();
}
inline void MetricsSummary::_internal_set_macro_std_f1_score(float value) {
  
  macro_std_f1_score_ = value;
}
inline void MetricsSummary::set_macro_std_f1_score(float value) {
  _internal_set_macro_std_f1_score(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.macro_std_f1_score)
}

// float macro_avg_precision = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void MetricsSummary::clear_macro_avg_precision() {
  macro_avg_precision_ = 0;
}
inline float MetricsSummary::_internal_macro_avg_precision() const {
  return macro_avg_precision_;
}
inline float MetricsSummary::macro_avg_precision() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.macro_avg_precision)
  return _internal_macro_avg_precision();
}
inline void MetricsSummary::_internal_set_macro_avg_precision(float value) {
  
  macro_avg_precision_ = value;
}
inline void MetricsSummary::set_macro_avg_precision(float value) {
  _internal_set_macro_avg_precision(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.macro_avg_precision)
}

// float macro_avg_recall = 8 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void MetricsSummary::clear_macro_avg_recall() {
  macro_avg_recall_ = 0;
}
inline float MetricsSummary::_internal_macro_avg_recall() const {
  return macro_avg_recall_;
}
inline float MetricsSummary::macro_avg_recall() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.macro_avg_recall)
  return _internal_macro_avg_recall();
}
inline void MetricsSummary::_internal_set_macro_avg_recall(float value) {
  
  macro_avg_recall_ = value;
}
inline void MetricsSummary::set_macro_avg_recall(float value) {
  _internal_set_macro_avg_recall(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.macro_avg_recall)
}

// float mean_avg_precision_iou_50 = 10;
inline void MetricsSummary::clear_mean_avg_precision_iou_50() {
  mean_avg_precision_iou_50_ = 0;
}
inline float MetricsSummary::_internal_mean_avg_precision_iou_50() const {
  return mean_avg_precision_iou_50_;
}
inline float MetricsSummary::mean_avg_precision_iou_50() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.mean_avg_precision_iou_50)
  return _internal_mean_avg_precision_iou_50();
}
inline void MetricsSummary::_internal_set_mean_avg_precision_iou_50(float value) {
  
  mean_avg_precision_iou_50_ = value;
}
inline void MetricsSummary::set_mean_avg_precision_iou_50(float value) {
  _internal_set_mean_avg_precision_iou_50(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.mean_avg_precision_iou_50)
}

// float mean_avg_precision_iou_range = 11;
inline void MetricsSummary::clear_mean_avg_precision_iou_range() {
  mean_avg_precision_iou_range_ = 0;
}
inline float MetricsSummary::_internal_mean_avg_precision_iou_range() const {
  return mean_avg_precision_iou_range_;
}
inline float MetricsSummary::mean_avg_precision_iou_range() const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.mean_avg_precision_iou_range)
  return _internal_mean_avg_precision_iou_range();
}
inline void MetricsSummary::_internal_set_mean_avg_precision_iou_range(float value) {
  
  mean_avg_precision_iou_range_ = value;
}
inline void MetricsSummary::set_mean_avg_precision_iou_range(float value) {
  _internal_set_mean_avg_precision_iou_range(value);
  // @@protoc_insertion_point(field_set:clarifai.api.MetricsSummary.mean_avg_precision_iou_range)
}

// repeated .clarifai.api.LOPQEvalResult lopq_metrics = 9;
inline int MetricsSummary::_internal_lopq_metrics_size() const {
  return lopq_metrics_.size();
}
inline int MetricsSummary::lopq_metrics_size() const {
  return _internal_lopq_metrics_size();
}
inline void MetricsSummary::clear_lopq_metrics() {
  lopq_metrics_.Clear();
}
inline ::clarifai::api::LOPQEvalResult* MetricsSummary::mutable_lopq_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.MetricsSummary.lopq_metrics)
  return lopq_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LOPQEvalResult >*
MetricsSummary::mutable_lopq_metrics() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.MetricsSummary.lopq_metrics)
  return &lopq_metrics_;
}
inline const ::clarifai::api::LOPQEvalResult& MetricsSummary::_internal_lopq_metrics(int index) const {
  return lopq_metrics_.Get(index);
}
inline const ::clarifai::api::LOPQEvalResult& MetricsSummary::lopq_metrics(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.MetricsSummary.lopq_metrics)
  return _internal_lopq_metrics(index);
}
inline ::clarifai::api::LOPQEvalResult* MetricsSummary::_internal_add_lopq_metrics() {
  return lopq_metrics_.Add();
}
inline ::clarifai::api::LOPQEvalResult* MetricsSummary::add_lopq_metrics() {
  // @@protoc_insertion_point(field_add:clarifai.api.MetricsSummary.lopq_metrics)
  return _internal_add_lopq_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::LOPQEvalResult >&
MetricsSummary::lopq_metrics() const {
  // @@protoc_insertion_point(field_list:clarifai.api.MetricsSummary.lopq_metrics)
  return lopq_metrics_;
}

// -------------------------------------------------------------------

// EvalMetrics

// .clarifai.api.status.Status status = 1;
inline bool EvalMetrics::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool EvalMetrics::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& EvalMetrics::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& EvalMetrics::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* EvalMetrics::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalMetrics.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* EvalMetrics::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* EvalMetrics::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.status)
  return _internal_mutable_status();
}
inline void EvalMetrics::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalMetrics.status)
}

// string id = 10;
inline void EvalMetrics::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EvalMetrics::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.id)
  return _internal_id();
}
inline void EvalMetrics::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EvalMetrics.id)
}
inline std::string* EvalMetrics::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.id)
  return _internal_mutable_id();
}
inline const std::string& EvalMetrics::_internal_id() const {
  return id_.GetNoArena();
}
inline void EvalMetrics::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EvalMetrics::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.EvalMetrics.id)
}
inline void EvalMetrics::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.EvalMetrics.id)
}
inline void EvalMetrics::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.EvalMetrics.id)
}
inline std::string* EvalMetrics::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EvalMetrics::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalMetrics.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EvalMetrics::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalMetrics.id)
}

// .clarifai.api.MetricsSummary summary = 2;
inline bool EvalMetrics::_internal_has_summary() const {
  return this != internal_default_instance() && summary_ != nullptr;
}
inline bool EvalMetrics::has_summary() const {
  return _internal_has_summary();
}
inline void EvalMetrics::clear_summary() {
  if (GetArenaNoVirtual() == nullptr && summary_ != nullptr) {
    delete summary_;
  }
  summary_ = nullptr;
}
inline const ::clarifai::api::MetricsSummary& EvalMetrics::_internal_summary() const {
  const ::clarifai::api::MetricsSummary* p = summary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::MetricsSummary*>(
      &::clarifai::api::_MetricsSummary_default_instance_);
}
inline const ::clarifai::api::MetricsSummary& EvalMetrics::summary() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.summary)
  return _internal_summary();
}
inline ::clarifai::api::MetricsSummary* EvalMetrics::release_summary() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalMetrics.summary)
  
  ::clarifai::api::MetricsSummary* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::clarifai::api::MetricsSummary* EvalMetrics::_internal_mutable_summary() {
  
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::MetricsSummary>(GetArenaNoVirtual());
    summary_ = p;
  }
  return summary_;
}
inline ::clarifai::api::MetricsSummary* EvalMetrics::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.summary)
  return _internal_mutable_summary();
}
inline void EvalMetrics::set_allocated_summary(::clarifai::api::MetricsSummary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete summary_;
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    
  } else {
    
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalMetrics.summary)
}

// .clarifai.api.ConfusionMatrix confusion_matrix = 3;
inline bool EvalMetrics::_internal_has_confusion_matrix() const {
  return this != internal_default_instance() && confusion_matrix_ != nullptr;
}
inline bool EvalMetrics::has_confusion_matrix() const {
  return _internal_has_confusion_matrix();
}
inline void EvalMetrics::clear_confusion_matrix() {
  if (GetArenaNoVirtual() == nullptr && confusion_matrix_ != nullptr) {
    delete confusion_matrix_;
  }
  confusion_matrix_ = nullptr;
}
inline const ::clarifai::api::ConfusionMatrix& EvalMetrics::_internal_confusion_matrix() const {
  const ::clarifai::api::ConfusionMatrix* p = confusion_matrix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::ConfusionMatrix*>(
      &::clarifai::api::_ConfusionMatrix_default_instance_);
}
inline const ::clarifai::api::ConfusionMatrix& EvalMetrics::confusion_matrix() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.confusion_matrix)
  return _internal_confusion_matrix();
}
inline ::clarifai::api::ConfusionMatrix* EvalMetrics::release_confusion_matrix() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalMetrics.confusion_matrix)
  
  ::clarifai::api::ConfusionMatrix* temp = confusion_matrix_;
  confusion_matrix_ = nullptr;
  return temp;
}
inline ::clarifai::api::ConfusionMatrix* EvalMetrics::_internal_mutable_confusion_matrix() {
  
  if (confusion_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::ConfusionMatrix>(GetArenaNoVirtual());
    confusion_matrix_ = p;
  }
  return confusion_matrix_;
}
inline ::clarifai::api::ConfusionMatrix* EvalMetrics::mutable_confusion_matrix() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.confusion_matrix)
  return _internal_mutable_confusion_matrix();
}
inline void EvalMetrics::set_allocated_confusion_matrix(::clarifai::api::ConfusionMatrix* confusion_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete confusion_matrix_;
  }
  if (confusion_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      confusion_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confusion_matrix, submessage_arena);
    }
    
  } else {
    
  }
  confusion_matrix_ = confusion_matrix;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalMetrics.confusion_matrix)
}

// .clarifai.api.CooccurrenceMatrix cooccurrence_matrix = 4;
inline bool EvalMetrics::_internal_has_cooccurrence_matrix() const {
  return this != internal_default_instance() && cooccurrence_matrix_ != nullptr;
}
inline bool EvalMetrics::has_cooccurrence_matrix() const {
  return _internal_has_cooccurrence_matrix();
}
inline void EvalMetrics::clear_cooccurrence_matrix() {
  if (GetArenaNoVirtual() == nullptr && cooccurrence_matrix_ != nullptr) {
    delete cooccurrence_matrix_;
  }
  cooccurrence_matrix_ = nullptr;
}
inline const ::clarifai::api::CooccurrenceMatrix& EvalMetrics::_internal_cooccurrence_matrix() const {
  const ::clarifai::api::CooccurrenceMatrix* p = cooccurrence_matrix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::CooccurrenceMatrix*>(
      &::clarifai::api::_CooccurrenceMatrix_default_instance_);
}
inline const ::clarifai::api::CooccurrenceMatrix& EvalMetrics::cooccurrence_matrix() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.cooccurrence_matrix)
  return _internal_cooccurrence_matrix();
}
inline ::clarifai::api::CooccurrenceMatrix* EvalMetrics::release_cooccurrence_matrix() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalMetrics.cooccurrence_matrix)
  
  ::clarifai::api::CooccurrenceMatrix* temp = cooccurrence_matrix_;
  cooccurrence_matrix_ = nullptr;
  return temp;
}
inline ::clarifai::api::CooccurrenceMatrix* EvalMetrics::_internal_mutable_cooccurrence_matrix() {
  
  if (cooccurrence_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::CooccurrenceMatrix>(GetArenaNoVirtual());
    cooccurrence_matrix_ = p;
  }
  return cooccurrence_matrix_;
}
inline ::clarifai::api::CooccurrenceMatrix* EvalMetrics::mutable_cooccurrence_matrix() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.cooccurrence_matrix)
  return _internal_mutable_cooccurrence_matrix();
}
inline void EvalMetrics::set_allocated_cooccurrence_matrix(::clarifai::api::CooccurrenceMatrix* cooccurrence_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cooccurrence_matrix_;
  }
  if (cooccurrence_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cooccurrence_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cooccurrence_matrix, submessage_arena);
    }
    
  } else {
    
  }
  cooccurrence_matrix_ = cooccurrence_matrix;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalMetrics.cooccurrence_matrix)
}

// .clarifai.api.LabelDistribution label_counts = 5;
inline bool EvalMetrics::_internal_has_label_counts() const {
  return this != internal_default_instance() && label_counts_ != nullptr;
}
inline bool EvalMetrics::has_label_counts() const {
  return _internal_has_label_counts();
}
inline void EvalMetrics::clear_label_counts() {
  if (GetArenaNoVirtual() == nullptr && label_counts_ != nullptr) {
    delete label_counts_;
  }
  label_counts_ = nullptr;
}
inline const ::clarifai::api::LabelDistribution& EvalMetrics::_internal_label_counts() const {
  const ::clarifai::api::LabelDistribution* p = label_counts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::LabelDistribution*>(
      &::clarifai::api::_LabelDistribution_default_instance_);
}
inline const ::clarifai::api::LabelDistribution& EvalMetrics::label_counts() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.label_counts)
  return _internal_label_counts();
}
inline ::clarifai::api::LabelDistribution* EvalMetrics::release_label_counts() {
  // @@protoc_insertion_point(field_release:clarifai.api.EvalMetrics.label_counts)
  
  ::clarifai::api::LabelDistribution* temp = label_counts_;
  label_counts_ = nullptr;
  return temp;
}
inline ::clarifai::api::LabelDistribution* EvalMetrics::_internal_mutable_label_counts() {
  
  if (label_counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::LabelDistribution>(GetArenaNoVirtual());
    label_counts_ = p;
  }
  return label_counts_;
}
inline ::clarifai::api::LabelDistribution* EvalMetrics::mutable_label_counts() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.label_counts)
  return _internal_mutable_label_counts();
}
inline void EvalMetrics::set_allocated_label_counts(::clarifai::api::LabelDistribution* label_counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete label_counts_;
  }
  if (label_counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      label_counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_counts, submessage_arena);
    }
    
  } else {
    
  }
  label_counts_ = label_counts;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EvalMetrics.label_counts)
}

// repeated .clarifai.api.BinaryMetrics binary_metrics = 6;
inline int EvalMetrics::_internal_binary_metrics_size() const {
  return binary_metrics_.size();
}
inline int EvalMetrics::binary_metrics_size() const {
  return _internal_binary_metrics_size();
}
inline void EvalMetrics::clear_binary_metrics() {
  binary_metrics_.Clear();
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::mutable_binary_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.binary_metrics)
  return binary_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >*
EvalMetrics::mutable_binary_metrics() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalMetrics.binary_metrics)
  return &binary_metrics_;
}
inline const ::clarifai::api::BinaryMetrics& EvalMetrics::_internal_binary_metrics(int index) const {
  return binary_metrics_.Get(index);
}
inline const ::clarifai::api::BinaryMetrics& EvalMetrics::binary_metrics(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.binary_metrics)
  return _internal_binary_metrics(index);
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::_internal_add_binary_metrics() {
  return binary_metrics_.Add();
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::add_binary_metrics() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalMetrics.binary_metrics)
  return _internal_add_binary_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >&
EvalMetrics::binary_metrics() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalMetrics.binary_metrics)
  return binary_metrics_;
}

// repeated .clarifai.api.EvalTestSetEntry test_set = 7;
inline int EvalMetrics::_internal_test_set_size() const {
  return test_set_.size();
}
inline int EvalMetrics::test_set_size() const {
  return _internal_test_set_size();
}
inline void EvalMetrics::clear_test_set() {
  test_set_.Clear();
}
inline ::clarifai::api::EvalTestSetEntry* EvalMetrics::mutable_test_set(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.test_set)
  return test_set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EvalTestSetEntry >*
EvalMetrics::mutable_test_set() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalMetrics.test_set)
  return &test_set_;
}
inline const ::clarifai::api::EvalTestSetEntry& EvalMetrics::_internal_test_set(int index) const {
  return test_set_.Get(index);
}
inline const ::clarifai::api::EvalTestSetEntry& EvalMetrics::test_set(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.test_set)
  return _internal_test_set(index);
}
inline ::clarifai::api::EvalTestSetEntry* EvalMetrics::_internal_add_test_set() {
  return test_set_.Add();
}
inline ::clarifai::api::EvalTestSetEntry* EvalMetrics::add_test_set() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalMetrics.test_set)
  return _internal_add_test_set();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EvalTestSetEntry >&
EvalMetrics::test_set() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalMetrics.test_set)
  return test_set_;
}

// repeated .clarifai.api.BinaryMetrics metrics_by_area = 8;
inline int EvalMetrics::_internal_metrics_by_area_size() const {
  return metrics_by_area_.size();
}
inline int EvalMetrics::metrics_by_area_size() const {
  return _internal_metrics_by_area_size();
}
inline void EvalMetrics::clear_metrics_by_area() {
  metrics_by_area_.Clear();
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::mutable_metrics_by_area(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.metrics_by_area)
  return metrics_by_area_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >*
EvalMetrics::mutable_metrics_by_area() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalMetrics.metrics_by_area)
  return &metrics_by_area_;
}
inline const ::clarifai::api::BinaryMetrics& EvalMetrics::_internal_metrics_by_area(int index) const {
  return metrics_by_area_.Get(index);
}
inline const ::clarifai::api::BinaryMetrics& EvalMetrics::metrics_by_area(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.metrics_by_area)
  return _internal_metrics_by_area(index);
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::_internal_add_metrics_by_area() {
  return metrics_by_area_.Add();
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::add_metrics_by_area() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalMetrics.metrics_by_area)
  return _internal_add_metrics_by_area();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >&
EvalMetrics::metrics_by_area() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalMetrics.metrics_by_area)
  return metrics_by_area_;
}

// repeated .clarifai.api.BinaryMetrics metrics_by_class = 9;
inline int EvalMetrics::_internal_metrics_by_class_size() const {
  return metrics_by_class_.size();
}
inline int EvalMetrics::metrics_by_class_size() const {
  return _internal_metrics_by_class_size();
}
inline void EvalMetrics::clear_metrics_by_class() {
  metrics_by_class_.Clear();
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::mutable_metrics_by_class(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.metrics_by_class)
  return metrics_by_class_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >*
EvalMetrics::mutable_metrics_by_class() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalMetrics.metrics_by_class)
  return &metrics_by_class_;
}
inline const ::clarifai::api::BinaryMetrics& EvalMetrics::_internal_metrics_by_class(int index) const {
  return metrics_by_class_.Get(index);
}
inline const ::clarifai::api::BinaryMetrics& EvalMetrics::metrics_by_class(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.metrics_by_class)
  return _internal_metrics_by_class(index);
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::_internal_add_metrics_by_class() {
  return metrics_by_class_.Add();
}
inline ::clarifai::api::BinaryMetrics* EvalMetrics::add_metrics_by_class() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalMetrics.metrics_by_class)
  return _internal_add_metrics_by_class();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::BinaryMetrics >&
EvalMetrics::metrics_by_class() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalMetrics.metrics_by_class)
  return metrics_by_class_;
}

// repeated .clarifai.api.TrackerMetrics tracker_metrics = 11;
inline int EvalMetrics::_internal_tracker_metrics_size() const {
  return tracker_metrics_.size();
}
inline int EvalMetrics::tracker_metrics_size() const {
  return _internal_tracker_metrics_size();
}
inline void EvalMetrics::clear_tracker_metrics() {
  tracker_metrics_.Clear();
}
inline ::clarifai::api::TrackerMetrics* EvalMetrics::mutable_tracker_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EvalMetrics.tracker_metrics)
  return tracker_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrackerMetrics >*
EvalMetrics::mutable_tracker_metrics() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EvalMetrics.tracker_metrics)
  return &tracker_metrics_;
}
inline const ::clarifai::api::TrackerMetrics& EvalMetrics::_internal_tracker_metrics(int index) const {
  return tracker_metrics_.Get(index);
}
inline const ::clarifai::api::TrackerMetrics& EvalMetrics::tracker_metrics(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EvalMetrics.tracker_metrics)
  return _internal_tracker_metrics(index);
}
inline ::clarifai::api::TrackerMetrics* EvalMetrics::_internal_add_tracker_metrics() {
  return tracker_metrics_.Add();
}
inline ::clarifai::api::TrackerMetrics* EvalMetrics::add_tracker_metrics() {
  // @@protoc_insertion_point(field_add:clarifai.api.EvalMetrics.tracker_metrics)
  return _internal_add_tracker_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::TrackerMetrics >&
EvalMetrics::tracker_metrics() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EvalMetrics.tracker_metrics)
  return tracker_metrics_;
}

// -------------------------------------------------------------------

// FieldsValue

// bool confusion_matrix = 1;
inline void FieldsValue::clear_confusion_matrix() {
  confusion_matrix_ = false;
}
inline bool FieldsValue::_internal_confusion_matrix() const {
  return confusion_matrix_;
}
inline bool FieldsValue::confusion_matrix() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.confusion_matrix)
  return _internal_confusion_matrix();
}
inline void FieldsValue::_internal_set_confusion_matrix(bool value) {
  
  confusion_matrix_ = value;
}
inline void FieldsValue::set_confusion_matrix(bool value) {
  _internal_set_confusion_matrix(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.confusion_matrix)
}

// bool cooccurrence_matrix = 2;
inline void FieldsValue::clear_cooccurrence_matrix() {
  cooccurrence_matrix_ = false;
}
inline bool FieldsValue::_internal_cooccurrence_matrix() const {
  return cooccurrence_matrix_;
}
inline bool FieldsValue::cooccurrence_matrix() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.cooccurrence_matrix)
  return _internal_cooccurrence_matrix();
}
inline void FieldsValue::_internal_set_cooccurrence_matrix(bool value) {
  
  cooccurrence_matrix_ = value;
}
inline void FieldsValue::set_cooccurrence_matrix(bool value) {
  _internal_set_cooccurrence_matrix(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.cooccurrence_matrix)
}

// bool label_counts = 3;
inline void FieldsValue::clear_label_counts() {
  label_counts_ = false;
}
inline bool FieldsValue::_internal_label_counts() const {
  return label_counts_;
}
inline bool FieldsValue::label_counts() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.label_counts)
  return _internal_label_counts();
}
inline void FieldsValue::_internal_set_label_counts(bool value) {
  
  label_counts_ = value;
}
inline void FieldsValue::set_label_counts(bool value) {
  _internal_set_label_counts(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.label_counts)
}

// bool binary_metrics = 4;
inline void FieldsValue::clear_binary_metrics() {
  binary_metrics_ = false;
}
inline bool FieldsValue::_internal_binary_metrics() const {
  return binary_metrics_;
}
inline bool FieldsValue::binary_metrics() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.binary_metrics)
  return _internal_binary_metrics();
}
inline void FieldsValue::_internal_set_binary_metrics(bool value) {
  
  binary_metrics_ = value;
}
inline void FieldsValue::set_binary_metrics(bool value) {
  _internal_set_binary_metrics(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.binary_metrics)
}

// bool test_set = 5;
inline void FieldsValue::clear_test_set() {
  test_set_ = false;
}
inline bool FieldsValue::_internal_test_set() const {
  return test_set_;
}
inline bool FieldsValue::test_set() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.test_set)
  return _internal_test_set();
}
inline void FieldsValue::_internal_set_test_set(bool value) {
  
  test_set_ = value;
}
inline void FieldsValue::set_test_set(bool value) {
  _internal_set_test_set(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.test_set)
}

// bool metrics_by_area = 6;
inline void FieldsValue::clear_metrics_by_area() {
  metrics_by_area_ = false;
}
inline bool FieldsValue::_internal_metrics_by_area() const {
  return metrics_by_area_;
}
inline bool FieldsValue::metrics_by_area() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.metrics_by_area)
  return _internal_metrics_by_area();
}
inline void FieldsValue::_internal_set_metrics_by_area(bool value) {
  
  metrics_by_area_ = value;
}
inline void FieldsValue::set_metrics_by_area(bool value) {
  _internal_set_metrics_by_area(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.metrics_by_area)
}

// bool metrics_by_class = 7;
inline void FieldsValue::clear_metrics_by_class() {
  metrics_by_class_ = false;
}
inline bool FieldsValue::_internal_metrics_by_class() const {
  return metrics_by_class_;
}
inline bool FieldsValue::metrics_by_class() const {
  // @@protoc_insertion_point(field_get:clarifai.api.FieldsValue.metrics_by_class)
  return _internal_metrics_by_class();
}
inline void FieldsValue::_internal_set_metrics_by_class(bool value) {
  
  metrics_by_class_ = value;
}
inline void FieldsValue::set_metrics_by_class(bool value) {
  _internal_set_metrics_by_class(value);
  // @@protoc_insertion_point(field_set:clarifai.api.FieldsValue.metrics_by_class)
}

// -------------------------------------------------------------------

// Output

// string id = 1;
inline void Output::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Output::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Output.id)
  return _internal_id();
}
inline void Output::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Output.id)
}
inline std::string* Output::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Output.id)
  return _internal_mutable_id();
}
inline const std::string& Output::_internal_id() const {
  return id_.GetNoArena();
}
inline void Output::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Output::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Output.id)
}
inline void Output::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Output.id)
}
inline void Output::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Output.id)
}
inline std::string* Output::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Output::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Output.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Output::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Output.id)
}

// .clarifai.api.status.Status status = 2;
inline bool Output::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Output::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& Output::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& Output::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Output.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* Output::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.Output.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* Output::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* Output::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Output.status)
  return _internal_mutable_status();
}
inline void Output::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Output.status)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool Output::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Output::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Output::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Output::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Output.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Output::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Output.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Output::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Output::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Output.created_at)
  return _internal_mutable_created_at();
}
inline void Output::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Output.created_at)
}

// .clarifai.api.Model model = 4;
inline bool Output::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool Output::has_model() const {
  return _internal_has_model();
}
inline void Output::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::api::Model& Output::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Model*>(
      &::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& Output::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Output.model)
  return _internal_model();
}
inline ::clarifai::api::Model* Output::release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.Output.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* Output::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArenaNoVirtual());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* Output::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Output.model)
  return _internal_mutable_model();
}
inline void Output::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Output.model)
}

// .clarifai.api.Input input = 5;
inline bool Output::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool Output::has_input() const {
  return _internal_has_input();
}
inline void Output::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::clarifai::api::Input& Output::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& Output::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Output.input)
  return _internal_input();
}
inline ::clarifai::api::Input* Output::release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.Output.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* Output::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArenaNoVirtual());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* Output::mutable_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Output.input)
  return _internal_mutable_input();
}
inline void Output::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Output.input)
}

// .clarifai.api.Data data = 6;
inline bool Output::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Output::has_data() const {
  return _internal_has_data();
}
inline void Output::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& Output::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& Output::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Output.data)
  return _internal_data();
}
inline ::clarifai::api::Data* Output::release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.Output.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* Output::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* Output::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Output.data)
  return _internal_mutable_data();
}
inline void Output::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Output.data)
}

// -------------------------------------------------------------------

// ScopeDeps

// string scope = 1;
inline void ScopeDeps::clear_scope() {
  scope_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ScopeDeps::scope() const {
  // @@protoc_insertion_point(field_get:clarifai.api.ScopeDeps.scope)
  return _internal_scope();
}
inline void ScopeDeps::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:clarifai.api.ScopeDeps.scope)
}
inline std::string* ScopeDeps::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ScopeDeps.scope)
  return _internal_mutable_scope();
}
inline const std::string& ScopeDeps::_internal_scope() const {
  return scope_.GetNoArena();
}
inline void ScopeDeps::_internal_set_scope(const std::string& value) {
  
  scope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ScopeDeps::set_scope(std::string&& value) {
  
  scope_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.ScopeDeps.scope)
}
inline void ScopeDeps::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.ScopeDeps.scope)
}
inline void ScopeDeps::set_scope(const char* value, size_t size) {
  
  scope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ScopeDeps.scope)
}
inline std::string* ScopeDeps::_internal_mutable_scope() {
  
  return scope_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ScopeDeps::release_scope() {
  // @@protoc_insertion_point(field_release:clarifai.api.ScopeDeps.scope)
  
  return scope_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ScopeDeps::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    
  } else {
    
  }
  scope_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.ScopeDeps.scope)
}

// repeated string depending_scopes = 2;
inline int ScopeDeps::_internal_depending_scopes_size() const {
  return depending_scopes_.size();
}
inline int ScopeDeps::depending_scopes_size() const {
  return _internal_depending_scopes_size();
}
inline void ScopeDeps::clear_depending_scopes() {
  depending_scopes_.Clear();
}
inline std::string* ScopeDeps::add_depending_scopes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.ScopeDeps.depending_scopes)
  return _internal_add_depending_scopes();
}
inline const std::string& ScopeDeps::_internal_depending_scopes(int index) const {
  return depending_scopes_.Get(index);
}
inline const std::string& ScopeDeps::depending_scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.ScopeDeps.depending_scopes)
  return _internal_depending_scopes(index);
}
inline std::string* ScopeDeps::mutable_depending_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.ScopeDeps.depending_scopes)
  return depending_scopes_.Mutable(index);
}
inline void ScopeDeps::set_depending_scopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ScopeDeps.depending_scopes)
  depending_scopes_.Mutable(index)->assign(value);
}
inline void ScopeDeps::set_depending_scopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.ScopeDeps.depending_scopes)
  depending_scopes_.Mutable(index)->assign(std::move(value));
}
inline void ScopeDeps::set_depending_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  depending_scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.ScopeDeps.depending_scopes)
}
inline void ScopeDeps::set_depending_scopes(int index, const char* value, size_t size) {
  depending_scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.ScopeDeps.depending_scopes)
}
inline std::string* ScopeDeps::_internal_add_depending_scopes() {
  return depending_scopes_.Add();
}
inline void ScopeDeps::add_depending_scopes(const std::string& value) {
  depending_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.ScopeDeps.depending_scopes)
}
inline void ScopeDeps::add_depending_scopes(std::string&& value) {
  depending_scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.ScopeDeps.depending_scopes)
}
inline void ScopeDeps::add_depending_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  depending_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.ScopeDeps.depending_scopes)
}
inline void ScopeDeps::add_depending_scopes(const char* value, size_t size) {
  depending_scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.ScopeDeps.depending_scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ScopeDeps::depending_scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.ScopeDeps.depending_scopes)
  return depending_scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ScopeDeps::mutable_depending_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.ScopeDeps.depending_scopes)
  return &depending_scopes_;
}

// -------------------------------------------------------------------

// EndpointDeps

// string endpoint = 1;
inline void EndpointDeps::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EndpointDeps::endpoint() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EndpointDeps.endpoint)
  return _internal_endpoint();
}
inline void EndpointDeps::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EndpointDeps.endpoint)
}
inline std::string* EndpointDeps::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EndpointDeps.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& EndpointDeps::_internal_endpoint() const {
  return endpoint_.GetNoArena();
}
inline void EndpointDeps::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EndpointDeps::set_endpoint(std::string&& value) {
  
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.EndpointDeps.endpoint)
}
inline void EndpointDeps::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.EndpointDeps.endpoint)
}
inline void EndpointDeps::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.EndpointDeps.endpoint)
}
inline std::string* EndpointDeps::_internal_mutable_endpoint() {
  
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndpointDeps::release_endpoint() {
  // @@protoc_insertion_point(field_release:clarifai.api.EndpointDeps.endpoint)
  
  return endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndpointDeps::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EndpointDeps.endpoint)
}

// repeated string depending_scopes = 2;
inline int EndpointDeps::_internal_depending_scopes_size() const {
  return depending_scopes_.size();
}
inline int EndpointDeps::depending_scopes_size() const {
  return _internal_depending_scopes_size();
}
inline void EndpointDeps::clear_depending_scopes() {
  depending_scopes_.Clear();
}
inline std::string* EndpointDeps::add_depending_scopes() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.EndpointDeps.depending_scopes)
  return _internal_add_depending_scopes();
}
inline const std::string& EndpointDeps::_internal_depending_scopes(int index) const {
  return depending_scopes_.Get(index);
}
inline const std::string& EndpointDeps::depending_scopes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.EndpointDeps.depending_scopes)
  return _internal_depending_scopes(index);
}
inline std::string* EndpointDeps::mutable_depending_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EndpointDeps.depending_scopes)
  return depending_scopes_.Mutable(index);
}
inline void EndpointDeps::set_depending_scopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.EndpointDeps.depending_scopes)
  depending_scopes_.Mutable(index)->assign(value);
}
inline void EndpointDeps::set_depending_scopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.EndpointDeps.depending_scopes)
  depending_scopes_.Mutable(index)->assign(std::move(value));
}
inline void EndpointDeps::set_depending_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  depending_scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.EndpointDeps.depending_scopes)
}
inline void EndpointDeps::set_depending_scopes(int index, const char* value, size_t size) {
  depending_scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.EndpointDeps.depending_scopes)
}
inline std::string* EndpointDeps::_internal_add_depending_scopes() {
  return depending_scopes_.Add();
}
inline void EndpointDeps::add_depending_scopes(const std::string& value) {
  depending_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.EndpointDeps.depending_scopes)
}
inline void EndpointDeps::add_depending_scopes(std::string&& value) {
  depending_scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.EndpointDeps.depending_scopes)
}
inline void EndpointDeps::add_depending_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  depending_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.EndpointDeps.depending_scopes)
}
inline void EndpointDeps::add_depending_scopes(const char* value, size_t size) {
  depending_scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.EndpointDeps.depending_scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EndpointDeps::depending_scopes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.EndpointDeps.depending_scopes)
  return depending_scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EndpointDeps::mutable_depending_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.EndpointDeps.depending_scopes)
  return &depending_scopes_;
}

// -------------------------------------------------------------------

// Hit

// float score = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void Hit::clear_score() {
  score_ = 0;
}
inline float Hit::_internal_score() const {
  return score_;
}
inline float Hit::score() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Hit.score)
  return _internal_score();
}
inline void Hit::_internal_set_score(float value) {
  
  score_ = value;
}
inline void Hit::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Hit.score)
}

// .clarifai.api.Input input = 2;
inline bool Hit::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool Hit::has_input() const {
  return _internal_has_input();
}
inline void Hit::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::clarifai::api::Input& Hit::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& Hit::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Hit.input)
  return _internal_input();
}
inline ::clarifai::api::Input* Hit::release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.Hit.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* Hit::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArenaNoVirtual());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* Hit::mutable_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Hit.input)
  return _internal_mutable_input();
}
inline void Hit::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Hit.input)
}

// .clarifai.api.Annotation annotation = 3;
inline bool Hit::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool Hit::has_annotation() const {
  return _internal_has_annotation();
}
inline void Hit::clear_annotation() {
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
inline const ::clarifai::api::Annotation& Hit::_internal_annotation() const {
  const ::clarifai::api::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Annotation*>(
      &::clarifai::api::_Annotation_default_instance_);
}
inline const ::clarifai::api::Annotation& Hit::annotation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Hit.annotation)
  return _internal_annotation();
}
inline ::clarifai::api::Annotation* Hit::release_annotation() {
  // @@protoc_insertion_point(field_release:clarifai.api.Hit.annotation)
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::clarifai::api::Annotation* Hit::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Annotation>(GetArenaNoVirtual());
    annotation_ = p;
  }
  return annotation_;
}
inline ::clarifai::api::Annotation* Hit::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Hit.annotation)
  return _internal_mutable_annotation();
}
inline void Hit::set_allocated_annotation(::clarifai::api::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Hit.annotation)
}

// -------------------------------------------------------------------

// And

// .clarifai.api.Input input = 1;
inline bool And::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool And::has_input() const {
  return _internal_has_input();
}
inline void And::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::clarifai::api::Input& And::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& And::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.And.input)
  return _internal_input();
}
inline ::clarifai::api::Input* And::release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.And.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* And::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArenaNoVirtual());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* And::mutable_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.And.input)
  return _internal_mutable_input();
}
inline void And::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.And.input)
}

// .clarifai.api.Output output = 2;
inline bool And::_internal_has_output() const {
  return this != internal_default_instance() && output_ != nullptr;
}
inline bool And::has_output() const {
  return _internal_has_output();
}
inline void And::clear_output() {
  if (GetArenaNoVirtual() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
}
inline const ::clarifai::api::Output& And::_internal_output() const {
  const ::clarifai::api::Output* p = output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Output*>(
      &::clarifai::api::_Output_default_instance_);
}
inline const ::clarifai::api::Output& And::output() const {
  // @@protoc_insertion_point(field_get:clarifai.api.And.output)
  return _internal_output();
}
inline ::clarifai::api::Output* And::release_output() {
  // @@protoc_insertion_point(field_release:clarifai.api.And.output)
  
  ::clarifai::api::Output* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::clarifai::api::Output* And::_internal_mutable_output() {
  
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Output>(GetArenaNoVirtual());
    output_ = p;
  }
  return output_;
}
inline ::clarifai::api::Output* And::mutable_output() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.And.output)
  return _internal_mutable_output();
}
inline void And::set_allocated_output(::clarifai::api::Output* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete output_;
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.And.output)
}

// bool negate = 3;
inline void And::clear_negate() {
  negate_ = false;
}
inline bool And::_internal_negate() const {
  return negate_;
}
inline bool And::negate() const {
  // @@protoc_insertion_point(field_get:clarifai.api.And.negate)
  return _internal_negate();
}
inline void And::_internal_set_negate(bool value) {
  
  negate_ = value;
}
inline void And::set_negate(bool value) {
  _internal_set_negate(value);
  // @@protoc_insertion_point(field_set:clarifai.api.And.negate)
}

// .clarifai.api.Annotation annotation = 4;
inline bool And::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool And::has_annotation() const {
  return _internal_has_annotation();
}
inline void And::clear_annotation() {
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
inline const ::clarifai::api::Annotation& And::_internal_annotation() const {
  const ::clarifai::api::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Annotation*>(
      &::clarifai::api::_Annotation_default_instance_);
}
inline const ::clarifai::api::Annotation& And::annotation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.And.annotation)
  return _internal_annotation();
}
inline ::clarifai::api::Annotation* And::release_annotation() {
  // @@protoc_insertion_point(field_release:clarifai.api.And.annotation)
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::clarifai::api::Annotation* And::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Annotation>(GetArenaNoVirtual());
    annotation_ = p;
  }
  return annotation_;
}
inline ::clarifai::api::Annotation* And::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.And.annotation)
  return _internal_mutable_annotation();
}
inline void And::set_allocated_annotation(::clarifai::api::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.And.annotation)
}

// -------------------------------------------------------------------

// Query

// repeated .clarifai.api.And ands = 1;
inline int Query::_internal_ands_size() const {
  return ands_.size();
}
inline int Query::ands_size() const {
  return _internal_ands_size();
}
inline void Query::clear_ands() {
  ands_.Clear();
}
inline ::clarifai::api::And* Query::mutable_ands(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Query.ands)
  return ands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::And >*
Query::mutable_ands() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Query.ands)
  return &ands_;
}
inline const ::clarifai::api::And& Query::_internal_ands(int index) const {
  return ands_.Get(index);
}
inline const ::clarifai::api::And& Query::ands(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Query.ands)
  return _internal_ands(index);
}
inline ::clarifai::api::And* Query::_internal_add_ands() {
  return ands_.Add();
}
inline ::clarifai::api::And* Query::add_ands() {
  // @@protoc_insertion_point(field_add:clarifai.api.Query.ands)
  return _internal_add_ands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::And >&
Query::ands() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Query.ands)
  return ands_;
}

// string language = 2;
inline void Query::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Query::language() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Query.language)
  return _internal_language();
}
inline void Query::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Query.language)
}
inline std::string* Query::mutable_language() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Query.language)
  return _internal_mutable_language();
}
inline const std::string& Query::_internal_language() const {
  return language_.GetNoArena();
}
inline void Query::_internal_set_language(const std::string& value) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Query::set_language(std::string&& value) {
  
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Query.language)
}
inline void Query::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Query.language)
}
inline void Query::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Query.language)
}
inline std::string* Query::_internal_mutable_language() {
  
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Query::release_language() {
  // @@protoc_insertion_point(field_release:clarifai.api.Query.language)
  
  return language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Query::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Query.language)
}

// repeated .clarifai.api.Filter filters = 3;
inline int Query::_internal_filters_size() const {
  return filters_.size();
}
inline int Query::filters_size() const {
  return _internal_filters_size();
}
inline void Query::clear_filters() {
  filters_.Clear();
}
inline ::clarifai::api::Filter* Query::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Query.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Filter >*
Query::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Query.filters)
  return &filters_;
}
inline const ::clarifai::api::Filter& Query::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::clarifai::api::Filter& Query::filters(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Query.filters)
  return _internal_filters(index);
}
inline ::clarifai::api::Filter* Query::_internal_add_filters() {
  return filters_.Add();
}
inline ::clarifai::api::Filter* Query::add_filters() {
  // @@protoc_insertion_point(field_add:clarifai.api.Query.filters)
  return _internal_add_filters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Filter >&
Query::filters() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Query.filters)
  return filters_;
}

// repeated .clarifai.api.Rank ranks = 4;
inline int Query::_internal_ranks_size() const {
  return ranks_.size();
}
inline int Query::ranks_size() const {
  return _internal_ranks_size();
}
inline void Query::clear_ranks() {
  ranks_.Clear();
}
inline ::clarifai::api::Rank* Query::mutable_ranks(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Query.ranks)
  return ranks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Rank >*
Query::mutable_ranks() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Query.ranks)
  return &ranks_;
}
inline const ::clarifai::api::Rank& Query::_internal_ranks(int index) const {
  return ranks_.Get(index);
}
inline const ::clarifai::api::Rank& Query::ranks(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Query.ranks)
  return _internal_ranks(index);
}
inline ::clarifai::api::Rank* Query::_internal_add_ranks() {
  return ranks_.Add();
}
inline ::clarifai::api::Rank* Query::add_ranks() {
  // @@protoc_insertion_point(field_add:clarifai.api.Query.ranks)
  return _internal_add_ranks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Rank >&
Query::ranks() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Query.ranks)
  return ranks_;
}

// -------------------------------------------------------------------

// Search

// .clarifai.api.Query query = 1;
inline bool Search::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool Search::has_query() const {
  return _internal_has_query();
}
inline void Search::clear_query() {
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
inline const ::clarifai::api::Query& Search::_internal_query() const {
  const ::clarifai::api::Query* p = query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Query*>(
      &::clarifai::api::_Query_default_instance_);
}
inline const ::clarifai::api::Query& Search::query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.query)
  return _internal_query();
}
inline ::clarifai::api::Query* Search::release_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.query)
  
  ::clarifai::api::Query* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::clarifai::api::Query* Search::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Query>(GetArenaNoVirtual());
    query_ = p;
  }
  return query_;
}
inline ::clarifai::api::Query* Search::mutable_query() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.query)
  return _internal_mutable_query();
}
inline void Search::set_allocated_query(::clarifai::api::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.query)
}

// string id = 2;
inline void Search::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Search::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.id)
  return _internal_id();
}
inline void Search::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.id)
}
inline std::string* Search::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.id)
  return _internal_mutable_id();
}
inline const std::string& Search::_internal_id() const {
  return id_.GetNoArena();
}
inline void Search::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Search::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Search.id)
}
inline void Search::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Search.id)
}
inline void Search::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Search.id)
}
inline std::string* Search::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Search::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Search::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.id)
}

// string application_id = 3;
inline void Search::clear_application_id() {
  application_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Search::application_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.application_id)
  return _internal_application_id();
}
inline void Search::set_application_id(const std::string& value) {
  _internal_set_application_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.application_id)
}
inline std::string* Search::mutable_application_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.application_id)
  return _internal_mutable_application_id();
}
inline const std::string& Search::_internal_application_id() const {
  return application_id_.GetNoArena();
}
inline void Search::_internal_set_application_id(const std::string& value) {
  
  application_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Search::set_application_id(std::string&& value) {
  
  application_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Search.application_id)
}
inline void Search::set_application_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Search.application_id)
}
inline void Search::set_application_id(const char* value, size_t size) {
  
  application_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Search.application_id)
}
inline std::string* Search::_internal_mutable_application_id() {
  
  return application_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Search::release_application_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.application_id)
  
  return application_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Search::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.application_id)
}

// string name = 4;
inline void Search::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Search::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.name)
  return _internal_name();
}
inline void Search::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.name)
}
inline std::string* Search::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.name)
  return _internal_mutable_name();
}
inline const std::string& Search::_internal_name() const {
  return name_.GetNoArena();
}
inline void Search::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Search::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Search.name)
}
inline void Search::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Search.name)
}
inline void Search::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Search.name)
}
inline std::string* Search::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Search::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Search::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.name)
}

// .google.protobuf.Timestamp as_of = 5;
inline bool Search::_internal_has_as_of() const {
  return this != internal_default_instance() && as_of_ != nullptr;
}
inline bool Search::has_as_of() const {
  return _internal_has_as_of();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Search::_internal_as_of() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = as_of_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Search::as_of() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.as_of)
  return _internal_as_of();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::release_as_of() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.as_of)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = as_of_;
  as_of_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::_internal_mutable_as_of() {
  
  if (as_of_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    as_of_ = p;
  }
  return as_of_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::mutable_as_of() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.as_of)
  return _internal_mutable_as_of();
}
inline void Search::set_allocated_as_of(PROTOBUF_NAMESPACE_ID::Timestamp* as_of) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(as_of_);
  }
  if (as_of) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(as_of)->GetArena();
    if (message_arena != submessage_arena) {
      as_of = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_of, submessage_arena);
    }
    
  } else {
    
  }
  as_of_ = as_of;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.as_of)
}

// string git_hash = 6;
inline void Search::clear_git_hash() {
  git_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Search::git_hash() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.git_hash)
  return _internal_git_hash();
}
inline void Search::set_git_hash(const std::string& value) {
  _internal_set_git_hash(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.git_hash)
}
inline std::string* Search::mutable_git_hash() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.git_hash)
  return _internal_mutable_git_hash();
}
inline const std::string& Search::_internal_git_hash() const {
  return git_hash_.GetNoArena();
}
inline void Search::_internal_set_git_hash(const std::string& value) {
  
  git_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Search::set_git_hash(std::string&& value) {
  
  git_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Search.git_hash)
}
inline void Search::set_git_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  git_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Search.git_hash)
}
inline void Search::set_git_hash(const char* value, size_t size) {
  
  git_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Search.git_hash)
}
inline std::string* Search::_internal_mutable_git_hash() {
  
  return git_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Search::release_git_hash() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.git_hash)
  
  return git_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Search::set_allocated_git_hash(std::string* git_hash) {
  if (git_hash != nullptr) {
    
  } else {
    
  }
  git_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), git_hash);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.git_hash)
}

// .google.protobuf.Timestamp created_at = 7;
inline bool Search::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Search::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Search::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Search::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.created_at)
  return _internal_mutable_created_at();
}
inline void Search::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.created_at)
}

// .google.protobuf.Timestamp modified_at = 8;
inline bool Search::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool Search::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Search::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Search::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.modified_at)
  return _internal_modified_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Search::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.modified_at)
  return _internal_mutable_modified_at();
}
inline void Search::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.modified_at)
}

// string algorithm = 9;
inline void Search::clear_algorithm() {
  algorithm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Search::algorithm() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.algorithm)
  return _internal_algorithm();
}
inline void Search::set_algorithm(const std::string& value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.algorithm)
}
inline std::string* Search::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.algorithm)
  return _internal_mutable_algorithm();
}
inline const std::string& Search::_internal_algorithm() const {
  return algorithm_.GetNoArena();
}
inline void Search::_internal_set_algorithm(const std::string& value) {
  
  algorithm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Search::set_algorithm(std::string&& value) {
  
  algorithm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Search.algorithm)
}
inline void Search::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Search.algorithm)
}
inline void Search::set_algorithm(const char* value, size_t size) {
  
  algorithm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Search.algorithm)
}
inline std::string* Search::_internal_mutable_algorithm() {
  
  return algorithm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Search::release_algorithm() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.algorithm)
  
  return algorithm_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Search::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.algorithm)
}

// bool save = 10;
inline void Search::clear_save() {
  save_ = false;
}
inline bool Search::_internal_save() const {
  return save_;
}
inline bool Search::save() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.save)
  return _internal_save();
}
inline void Search::_internal_set_save(bool value) {
  
  save_ = value;
}
inline void Search::set_save(bool value) {
  _internal_set_save(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.save)
}

// float min_value = 11;
inline void Search::clear_min_value() {
  min_value_ = 0;
}
inline float Search::_internal_min_value() const {
  return min_value_;
}
inline float Search::min_value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.min_value)
  return _internal_min_value();
}
inline void Search::_internal_set_min_value(float value) {
  
  min_value_ = value;
}
inline void Search::set_min_value(float value) {
  _internal_set_min_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Search.min_value)
}

// .clarifai.api.Visibility visibility = 12;
inline bool Search::_internal_has_visibility() const {
  return this != internal_default_instance() && visibility_ != nullptr;
}
inline bool Search::has_visibility() const {
  return _internal_has_visibility();
}
inline void Search::clear_visibility() {
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
}
inline const ::clarifai::api::Visibility& Search::_internal_visibility() const {
  const ::clarifai::api::Visibility* p = visibility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Visibility*>(
      &::clarifai::api::_Visibility_default_instance_);
}
inline const ::clarifai::api::Visibility& Search::visibility() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Search.visibility)
  return _internal_visibility();
}
inline ::clarifai::api::Visibility* Search::release_visibility() {
  // @@protoc_insertion_point(field_release:clarifai.api.Search.visibility)
  
  ::clarifai::api::Visibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::clarifai::api::Visibility* Search::_internal_mutable_visibility() {
  
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Visibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  return visibility_;
}
inline ::clarifai::api::Visibility* Search::mutable_visibility() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Search.visibility)
  return _internal_mutable_visibility();
}
inline void Search::set_allocated_visibility(::clarifai::api::Visibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    
  } else {
    
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Search.visibility)
}

// -------------------------------------------------------------------

// Filter

// bool negate = 3;
inline void Filter::clear_negate() {
  negate_ = false;
}
inline bool Filter::_internal_negate() const {
  return negate_;
}
inline bool Filter::negate() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Filter.negate)
  return _internal_negate();
}
inline void Filter::_internal_set_negate(bool value) {
  
  negate_ = value;
}
inline void Filter::set_negate(bool value) {
  _internal_set_negate(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Filter.negate)
}

// .clarifai.api.Annotation annotation = 4;
inline bool Filter::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool Filter::has_annotation() const {
  return _internal_has_annotation();
}
inline void Filter::clear_annotation() {
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
inline const ::clarifai::api::Annotation& Filter::_internal_annotation() const {
  const ::clarifai::api::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Annotation*>(
      &::clarifai::api::_Annotation_default_instance_);
}
inline const ::clarifai::api::Annotation& Filter::annotation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Filter.annotation)
  return _internal_annotation();
}
inline ::clarifai::api::Annotation* Filter::release_annotation() {
  // @@protoc_insertion_point(field_release:clarifai.api.Filter.annotation)
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::clarifai::api::Annotation* Filter::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Annotation>(GetArenaNoVirtual());
    annotation_ = p;
  }
  return annotation_;
}
inline ::clarifai::api::Annotation* Filter::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Filter.annotation)
  return _internal_mutable_annotation();
}
inline void Filter::set_allocated_annotation(::clarifai::api::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Filter.annotation)
}

// .clarifai.api.Input input = 5;
inline bool Filter::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool Filter::has_input() const {
  return _internal_has_input();
}
inline void Filter::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::clarifai::api::Input& Filter::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& Filter::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Filter.input)
  return _internal_input();
}
inline ::clarifai::api::Input* Filter::release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.Filter.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* Filter::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArenaNoVirtual());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* Filter::mutable_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Filter.input)
  return _internal_mutable_input();
}
inline void Filter::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Filter.input)
}

// .clarifai.api.TimeRange last_updated_time_range = 6;
inline bool Filter::_internal_has_last_updated_time_range() const {
  return this != internal_default_instance() && last_updated_time_range_ != nullptr;
}
inline bool Filter::has_last_updated_time_range() const {
  return _internal_has_last_updated_time_range();
}
inline void Filter::clear_last_updated_time_range() {
  if (GetArenaNoVirtual() == nullptr && last_updated_time_range_ != nullptr) {
    delete last_updated_time_range_;
  }
  last_updated_time_range_ = nullptr;
}
inline const ::clarifai::api::TimeRange& Filter::_internal_last_updated_time_range() const {
  const ::clarifai::api::TimeRange* p = last_updated_time_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::TimeRange*>(
      &::clarifai::api::_TimeRange_default_instance_);
}
inline const ::clarifai::api::TimeRange& Filter::last_updated_time_range() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Filter.last_updated_time_range)
  return _internal_last_updated_time_range();
}
inline ::clarifai::api::TimeRange* Filter::release_last_updated_time_range() {
  // @@protoc_insertion_point(field_release:clarifai.api.Filter.last_updated_time_range)
  
  ::clarifai::api::TimeRange* temp = last_updated_time_range_;
  last_updated_time_range_ = nullptr;
  return temp;
}
inline ::clarifai::api::TimeRange* Filter::_internal_mutable_last_updated_time_range() {
  
  if (last_updated_time_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::TimeRange>(GetArenaNoVirtual());
    last_updated_time_range_ = p;
  }
  return last_updated_time_range_;
}
inline ::clarifai::api::TimeRange* Filter::mutable_last_updated_time_range() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Filter.last_updated_time_range)
  return _internal_mutable_last_updated_time_range();
}
inline void Filter::set_allocated_last_updated_time_range(::clarifai::api::TimeRange* last_updated_time_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete last_updated_time_range_;
  }
  if (last_updated_time_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_updated_time_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated_time_range, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_time_range_ = last_updated_time_range;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Filter.last_updated_time_range)
}

// -------------------------------------------------------------------

// TimeRange

// .google.protobuf.Timestamp start_time = 1;
inline bool TimeRange::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool TimeRange::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeRange::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeRange::start_time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TimeRange.start_time)
  return _internal_start_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::release_start_time() {
  // @@protoc_insertion_point(field_release:clarifai.api.TimeRange.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TimeRange.start_time)
  return _internal_mutable_start_time();
}
inline void TimeRange::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TimeRange.start_time)
}

// .google.protobuf.Timestamp end_time = 2;
inline bool TimeRange::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool TimeRange::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeRange::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeRange::end_time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TimeRange.end_time)
  return _internal_end_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::release_end_time() {
  // @@protoc_insertion_point(field_release:clarifai.api.TimeRange.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeRange::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TimeRange.end_time)
  return _internal_mutable_end_time();
}
inline void TimeRange::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TimeRange.end_time)
}

// -------------------------------------------------------------------

// Rank

// bool negate = 3;
inline void Rank::clear_negate() {
  negate_ = false;
}
inline bool Rank::_internal_negate() const {
  return negate_;
}
inline bool Rank::negate() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Rank.negate)
  return _internal_negate();
}
inline void Rank::_internal_set_negate(bool value) {
  
  negate_ = value;
}
inline void Rank::set_negate(bool value) {
  _internal_set_negate(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Rank.negate)
}

// .clarifai.api.Annotation annotation = 4;
inline bool Rank::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool Rank::has_annotation() const {
  return _internal_has_annotation();
}
inline void Rank::clear_annotation() {
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
inline const ::clarifai::api::Annotation& Rank::_internal_annotation() const {
  const ::clarifai::api::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Annotation*>(
      &::clarifai::api::_Annotation_default_instance_);
}
inline const ::clarifai::api::Annotation& Rank::annotation() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Rank.annotation)
  return _internal_annotation();
}
inline ::clarifai::api::Annotation* Rank::release_annotation() {
  // @@protoc_insertion_point(field_release:clarifai.api.Rank.annotation)
  
  ::clarifai::api::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::clarifai::api::Annotation* Rank::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Annotation>(GetArenaNoVirtual());
    annotation_ = p;
  }
  return annotation_;
}
inline ::clarifai::api::Annotation* Rank::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Rank.annotation)
  return _internal_mutable_annotation();
}
inline void Rank::set_allocated_annotation(::clarifai::api::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Rank.annotation)
}

// -------------------------------------------------------------------

// AnnotationSearchMetrics

// .clarifai.api.Search ground_truth = 1;
inline bool AnnotationSearchMetrics::_internal_has_ground_truth() const {
  return this != internal_default_instance() && ground_truth_ != nullptr;
}
inline bool AnnotationSearchMetrics::has_ground_truth() const {
  return _internal_has_ground_truth();
}
inline void AnnotationSearchMetrics::clear_ground_truth() {
  if (GetArenaNoVirtual() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
}
inline const ::clarifai::api::Search& AnnotationSearchMetrics::_internal_ground_truth() const {
  const ::clarifai::api::Search* p = ground_truth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Search*>(
      &::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& AnnotationSearchMetrics::ground_truth() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AnnotationSearchMetrics.ground_truth)
  return _internal_ground_truth();
}
inline ::clarifai::api::Search* AnnotationSearchMetrics::release_ground_truth() {
  // @@protoc_insertion_point(field_release:clarifai.api.AnnotationSearchMetrics.ground_truth)
  
  ::clarifai::api::Search* temp = ground_truth_;
  ground_truth_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* AnnotationSearchMetrics::_internal_mutable_ground_truth() {
  
  if (ground_truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaNoVirtual());
    ground_truth_ = p;
  }
  return ground_truth_;
}
inline ::clarifai::api::Search* AnnotationSearchMetrics::mutable_ground_truth() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AnnotationSearchMetrics.ground_truth)
  return _internal_mutable_ground_truth();
}
inline void AnnotationSearchMetrics::set_allocated_ground_truth(::clarifai::api::Search* ground_truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ground_truth_;
  }
  if (ground_truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ground_truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_truth, submessage_arena);
    }
    
  } else {
    
  }
  ground_truth_ = ground_truth;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AnnotationSearchMetrics.ground_truth)
}

// .clarifai.api.Search search_to_eval = 2;
inline bool AnnotationSearchMetrics::_internal_has_search_to_eval() const {
  return this != internal_default_instance() && search_to_eval_ != nullptr;
}
inline bool AnnotationSearchMetrics::has_search_to_eval() const {
  return _internal_has_search_to_eval();
}
inline void AnnotationSearchMetrics::clear_search_to_eval() {
  if (GetArenaNoVirtual() == nullptr && search_to_eval_ != nullptr) {
    delete search_to_eval_;
  }
  search_to_eval_ = nullptr;
}
inline const ::clarifai::api::Search& AnnotationSearchMetrics::_internal_search_to_eval() const {
  const ::clarifai::api::Search* p = search_to_eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Search*>(
      &::clarifai::api::_Search_default_instance_);
}
inline const ::clarifai::api::Search& AnnotationSearchMetrics::search_to_eval() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AnnotationSearchMetrics.search_to_eval)
  return _internal_search_to_eval();
}
inline ::clarifai::api::Search* AnnotationSearchMetrics::release_search_to_eval() {
  // @@protoc_insertion_point(field_release:clarifai.api.AnnotationSearchMetrics.search_to_eval)
  
  ::clarifai::api::Search* temp = search_to_eval_;
  search_to_eval_ = nullptr;
  return temp;
}
inline ::clarifai::api::Search* AnnotationSearchMetrics::_internal_mutable_search_to_eval() {
  
  if (search_to_eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Search>(GetArenaNoVirtual());
    search_to_eval_ = p;
  }
  return search_to_eval_;
}
inline ::clarifai::api::Search* AnnotationSearchMetrics::mutable_search_to_eval() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AnnotationSearchMetrics.search_to_eval)
  return _internal_mutable_search_to_eval();
}
inline void AnnotationSearchMetrics::set_allocated_search_to_eval(::clarifai::api::Search* search_to_eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete search_to_eval_;
  }
  if (search_to_eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      search_to_eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_to_eval, submessage_arena);
    }
    
  } else {
    
  }
  search_to_eval_ = search_to_eval;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AnnotationSearchMetrics.search_to_eval)
}

// .clarifai.api.EvalMetrics metrics = 3;
inline bool AnnotationSearchMetrics::_internal_has_metrics() const {
  return this != internal_default_instance() && metrics_ != nullptr;
}
inline bool AnnotationSearchMetrics::has_metrics() const {
  return _internal_has_metrics();
}
inline void AnnotationSearchMetrics::clear_metrics() {
  if (GetArenaNoVirtual() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
}
inline const ::clarifai::api::EvalMetrics& AnnotationSearchMetrics::_internal_metrics() const {
  const ::clarifai::api::EvalMetrics* p = metrics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::EvalMetrics*>(
      &::clarifai::api::_EvalMetrics_default_instance_);
}
inline const ::clarifai::api::EvalMetrics& AnnotationSearchMetrics::metrics() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AnnotationSearchMetrics.metrics)
  return _internal_metrics();
}
inline ::clarifai::api::EvalMetrics* AnnotationSearchMetrics::release_metrics() {
  // @@protoc_insertion_point(field_release:clarifai.api.AnnotationSearchMetrics.metrics)
  
  ::clarifai::api::EvalMetrics* temp = metrics_;
  metrics_ = nullptr;
  return temp;
}
inline ::clarifai::api::EvalMetrics* AnnotationSearchMetrics::_internal_mutable_metrics() {
  
  if (metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::EvalMetrics>(GetArenaNoVirtual());
    metrics_ = p;
  }
  return metrics_;
}
inline ::clarifai::api::EvalMetrics* AnnotationSearchMetrics::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AnnotationSearchMetrics.metrics)
  return _internal_mutable_metrics();
}
inline void AnnotationSearchMetrics::set_allocated_metrics(::clarifai::api::EvalMetrics* metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metrics_;
  }
  if (metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    
  } else {
    
  }
  metrics_ = metrics;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AnnotationSearchMetrics.metrics)
}

// .clarifai.api.Data data = 4;
inline bool AnnotationSearchMetrics::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool AnnotationSearchMetrics::has_data() const {
  return _internal_has_data();
}
inline void AnnotationSearchMetrics::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::clarifai::api::Data& AnnotationSearchMetrics::_internal_data() const {
  const ::clarifai::api::Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Data*>(
      &::clarifai::api::_Data_default_instance_);
}
inline const ::clarifai::api::Data& AnnotationSearchMetrics::data() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AnnotationSearchMetrics.data)
  return _internal_data();
}
inline ::clarifai::api::Data* AnnotationSearchMetrics::release_data() {
  // @@protoc_insertion_point(field_release:clarifai.api.AnnotationSearchMetrics.data)
  
  ::clarifai::api::Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::clarifai::api::Data* AnnotationSearchMetrics::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Data>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::clarifai::api::Data* AnnotationSearchMetrics::mutable_data() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AnnotationSearchMetrics.data)
  return _internal_mutable_data();
}
inline void AnnotationSearchMetrics::set_allocated_data(::clarifai::api::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AnnotationSearchMetrics.data)
}

// uint32 active_concept_count = 5;
inline void AnnotationSearchMetrics::clear_active_concept_count() {
  active_concept_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnnotationSearchMetrics::_internal_active_concept_count() const {
  return active_concept_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnnotationSearchMetrics::active_concept_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AnnotationSearchMetrics.active_concept_count)
  return _internal_active_concept_count();
}
inline void AnnotationSearchMetrics::_internal_set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  active_concept_count_ = value;
}
inline void AnnotationSearchMetrics::set_active_concept_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_active_concept_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AnnotationSearchMetrics.active_concept_count)
}

// .clarifai.api.Visibility visibility = 6;
inline bool AnnotationSearchMetrics::_internal_has_visibility() const {
  return this != internal_default_instance() && visibility_ != nullptr;
}
inline bool AnnotationSearchMetrics::has_visibility() const {
  return _internal_has_visibility();
}
inline void AnnotationSearchMetrics::clear_visibility() {
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
}
inline const ::clarifai::api::Visibility& AnnotationSearchMetrics::_internal_visibility() const {
  const ::clarifai::api::Visibility* p = visibility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Visibility*>(
      &::clarifai::api::_Visibility_default_instance_);
}
inline const ::clarifai::api::Visibility& AnnotationSearchMetrics::visibility() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AnnotationSearchMetrics.visibility)
  return _internal_visibility();
}
inline ::clarifai::api::Visibility* AnnotationSearchMetrics::release_visibility() {
  // @@protoc_insertion_point(field_release:clarifai.api.AnnotationSearchMetrics.visibility)
  
  ::clarifai::api::Visibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::clarifai::api::Visibility* AnnotationSearchMetrics::_internal_mutable_visibility() {
  
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Visibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  return visibility_;
}
inline ::clarifai::api::Visibility* AnnotationSearchMetrics::mutable_visibility() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AnnotationSearchMetrics.visibility)
  return _internal_mutable_visibility();
}
inline void AnnotationSearchMetrics::set_allocated_visibility(::clarifai::api::Visibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    
  } else {
    
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AnnotationSearchMetrics.visibility)
}

// -------------------------------------------------------------------

// Text

// string raw = 1;
inline void Text::clear_raw() {
  raw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Text::raw() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Text.raw)
  return _internal_raw();
}
inline void Text::set_raw(const std::string& value) {
  _internal_set_raw(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Text.raw)
}
inline std::string* Text::mutable_raw() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Text.raw)
  return _internal_mutable_raw();
}
inline const std::string& Text::_internal_raw() const {
  return raw_.GetNoArena();
}
inline void Text::_internal_set_raw(const std::string& value) {
  
  raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Text::set_raw(std::string&& value) {
  
  raw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Text.raw)
}
inline void Text::set_raw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Text.raw)
}
inline void Text::set_raw(const char* value, size_t size) {
  
  raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Text.raw)
}
inline std::string* Text::_internal_mutable_raw() {
  
  return raw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Text::release_raw() {
  // @@protoc_insertion_point(field_release:clarifai.api.Text.raw)
  
  return raw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Text::set_allocated_raw(std::string* raw) {
  if (raw != nullptr) {
    
  } else {
    
  }
  raw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Text.raw)
}

// string url = 2;
inline void Text::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Text::url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Text.url)
  return _internal_url();
}
inline void Text::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Text.url)
}
inline std::string* Text::mutable_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Text.url)
  return _internal_mutable_url();
}
inline const std::string& Text::_internal_url() const {
  return url_.GetNoArena();
}
inline void Text::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Text::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Text.url)
}
inline void Text::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Text.url)
}
inline void Text::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Text.url)
}
inline std::string* Text::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Text::release_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.Text.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Text::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Text.url)
}

// bool allow_duplicate_url = 3;
inline void Text::clear_allow_duplicate_url() {
  allow_duplicate_url_ = false;
}
inline bool Text::_internal_allow_duplicate_url() const {
  return allow_duplicate_url_;
}
inline bool Text::allow_duplicate_url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Text.allow_duplicate_url)
  return _internal_allow_duplicate_url();
}
inline void Text::_internal_set_allow_duplicate_url(bool value) {
  
  allow_duplicate_url_ = value;
}
inline void Text::set_allow_duplicate_url(bool value) {
  _internal_set_allow_duplicate_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Text.allow_duplicate_url)
}

// .clarifai.api.HostedURL hosted = 4;
inline bool Text::_internal_has_hosted() const {
  return this != internal_default_instance() && hosted_ != nullptr;
}
inline bool Text::has_hosted() const {
  return _internal_has_hosted();
}
inline void Text::clear_hosted() {
  if (GetArenaNoVirtual() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
}
inline const ::clarifai::api::HostedURL& Text::_internal_hosted() const {
  const ::clarifai::api::HostedURL* p = hosted_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::HostedURL*>(
      &::clarifai::api::_HostedURL_default_instance_);
}
inline const ::clarifai::api::HostedURL& Text::hosted() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Text.hosted)
  return _internal_hosted();
}
inline ::clarifai::api::HostedURL* Text::release_hosted() {
  // @@protoc_insertion_point(field_release:clarifai.api.Text.hosted)
  
  ::clarifai::api::HostedURL* temp = hosted_;
  hosted_ = nullptr;
  return temp;
}
inline ::clarifai::api::HostedURL* Text::_internal_mutable_hosted() {
  
  if (hosted_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::HostedURL>(GetArenaNoVirtual());
    hosted_ = p;
  }
  return hosted_;
}
inline ::clarifai::api::HostedURL* Text::mutable_hosted() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Text.hosted)
  return _internal_mutable_hosted();
}
inline void Text::set_allocated_hosted(::clarifai::api::HostedURL* hosted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hosted_;
  }
  if (hosted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hosted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hosted, submessage_arena);
    }
    
  } else {
    
  }
  hosted_ = hosted;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Text.hosted)
}

// -------------------------------------------------------------------

// User

// string id = 1;
inline void User::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.id)
  return _internal_id();
}
inline void User::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.id)
}
inline std::string* User::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.id)
  return _internal_mutable_id();
}
inline const std::string& User::_internal_id() const {
  return id_.GetNoArena();
}
inline void User::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.id)
}
inline void User::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.id)
}
inline void User::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.id)
}
inline std::string* User::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.id)
}

// string primary_email = 2 [deprecated = true];
inline void User::clear_primary_email() {
  primary_email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::primary_email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.primary_email)
  return _internal_primary_email();
}
inline void User::set_primary_email(const std::string& value) {
  _internal_set_primary_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.primary_email)
}
inline std::string* User::mutable_primary_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.primary_email)
  return _internal_mutable_primary_email();
}
inline const std::string& User::_internal_primary_email() const {
  return primary_email_.GetNoArena();
}
inline void User::_internal_set_primary_email(const std::string& value) {
  
  primary_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_primary_email(std::string&& value) {
  
  primary_email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.primary_email)
}
inline void User::set_primary_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primary_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.primary_email)
}
inline void User::set_primary_email(const char* value, size_t size) {
  
  primary_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.primary_email)
}
inline std::string* User::_internal_mutable_primary_email() {
  
  return primary_email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_primary_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.primary_email)
  
  return primary_email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_primary_email(std::string* primary_email) {
  if (primary_email != nullptr) {
    
  } else {
    
  }
  primary_email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_email);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.primary_email)
}

// string first_name = 3;
inline void User::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::first_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.first_name)
  return _internal_first_name();
}
inline void User::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.first_name)
}
inline std::string* User::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& User::_internal_first_name() const {
  return first_name_.GetNoArena();
}
inline void User::_internal_set_first_name(const std::string& value) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_first_name(std::string&& value) {
  
  first_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.first_name)
}
inline void User::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.first_name)
}
inline void User::set_first_name(const char* value, size_t size) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.first_name)
}
inline std::string* User::_internal_mutable_first_name() {
  
  return first_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_first_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.first_name)
  
  return first_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.first_name)
}

// string last_name = 4;
inline void User::clear_last_name() {
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::last_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.last_name)
  return _internal_last_name();
}
inline void User::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.last_name)
}
inline std::string* User::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& User::_internal_last_name() const {
  return last_name_.GetNoArena();
}
inline void User::_internal_set_last_name(const std::string& value) {
  
  last_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_last_name(std::string&& value) {
  
  last_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.last_name)
}
inline void User::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.last_name)
}
inline void User::set_last_name(const char* value, size_t size) {
  
  last_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.last_name)
}
inline std::string* User::_internal_mutable_last_name() {
  
  return last_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_last_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.last_name)
  
  return last_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.last_name)
}

// string company_name = 5;
inline void User::clear_company_name() {
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::company_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.company_name)
  return _internal_company_name();
}
inline void User::set_company_name(const std::string& value) {
  _internal_set_company_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.company_name)
}
inline std::string* User::mutable_company_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.company_name)
  return _internal_mutable_company_name();
}
inline const std::string& User::_internal_company_name() const {
  return company_name_.GetNoArena();
}
inline void User::_internal_set_company_name(const std::string& value) {
  
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_company_name(std::string&& value) {
  
  company_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.company_name)
}
inline void User::set_company_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.company_name)
}
inline void User::set_company_name(const char* value, size_t size) {
  
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.company_name)
}
inline std::string* User::_internal_mutable_company_name() {
  
  return company_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_company_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.company_name)
  
  return company_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    
  } else {
    
  }
  company_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.company_name)
}

// string job_title = 19;
inline void User::clear_job_title() {
  job_title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::job_title() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.job_title)
  return _internal_job_title();
}
inline void User::set_job_title(const std::string& value) {
  _internal_set_job_title(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.job_title)
}
inline std::string* User::mutable_job_title() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.job_title)
  return _internal_mutable_job_title();
}
inline const std::string& User::_internal_job_title() const {
  return job_title_.GetNoArena();
}
inline void User::_internal_set_job_title(const std::string& value) {
  
  job_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_job_title(std::string&& value) {
  
  job_title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.job_title)
}
inline void User::set_job_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.job_title)
}
inline void User::set_job_title(const char* value, size_t size) {
  
  job_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.job_title)
}
inline std::string* User::_internal_mutable_job_title() {
  
  return job_title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_job_title() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.job_title)
  
  return job_title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_job_title(std::string* job_title) {
  if (job_title != nullptr) {
    
  } else {
    
  }
  job_title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_title);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.job_title)
}

// string job_role = 20;
inline void User::clear_job_role() {
  job_role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::job_role() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.job_role)
  return _internal_job_role();
}
inline void User::set_job_role(const std::string& value) {
  _internal_set_job_role(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.job_role)
}
inline std::string* User::mutable_job_role() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.job_role)
  return _internal_mutable_job_role();
}
inline const std::string& User::_internal_job_role() const {
  return job_role_.GetNoArena();
}
inline void User::_internal_set_job_role(const std::string& value) {
  
  job_role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_job_role(std::string&& value) {
  
  job_role_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.job_role)
}
inline void User::set_job_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.job_role)
}
inline void User::set_job_role(const char* value, size_t size) {
  
  job_role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.job_role)
}
inline std::string* User::_internal_mutable_job_role() {
  
  return job_role_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_job_role() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.job_role)
  
  return job_role_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_job_role(std::string* job_role) {
  if (job_role != nullptr) {
    
  } else {
    
  }
  job_role_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_role);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.job_role)
}

// string bill_type = 7 [deprecated = true];
inline void User::clear_bill_type() {
  bill_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::bill_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.bill_type)
  return _internal_bill_type();
}
inline void User::set_bill_type(const std::string& value) {
  _internal_set_bill_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.bill_type)
}
inline std::string* User::mutable_bill_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.bill_type)
  return _internal_mutable_bill_type();
}
inline const std::string& User::_internal_bill_type() const {
  return bill_type_.GetNoArena();
}
inline void User::_internal_set_bill_type(const std::string& value) {
  
  bill_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_bill_type(std::string&& value) {
  
  bill_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.User.bill_type)
}
inline void User::set_bill_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bill_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.User.bill_type)
}
inline void User::set_bill_type(const char* value, size_t size) {
  
  bill_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.User.bill_type)
}
inline std::string* User::_internal_mutable_bill_type() {
  
  return bill_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_bill_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.bill_type)
  
  return bill_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_bill_type(std::string* bill_type) {
  if (bill_type != nullptr) {
    
  } else {
    
  }
  bill_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bill_type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.bill_type)
}

// .google.protobuf.Timestamp created_at = 6;
inline bool User::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool User::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.created_at)
  return _internal_mutable_created_at();
}
inline void User::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.created_at)
}

// .google.protobuf.Timestamp date_gdpr_consent = 8 [deprecated = true];
inline bool User::_internal_has_date_gdpr_consent() const {
  return this != internal_default_instance() && date_gdpr_consent_ != nullptr;
}
inline bool User::has_date_gdpr_consent() const {
  return _internal_has_date_gdpr_consent();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::_internal_date_gdpr_consent() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = date_gdpr_consent_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::date_gdpr_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.date_gdpr_consent)
  return _internal_date_gdpr_consent();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::release_date_gdpr_consent() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.date_gdpr_consent)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_gdpr_consent_;
  date_gdpr_consent_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::_internal_mutable_date_gdpr_consent() {
  
  if (date_gdpr_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    date_gdpr_consent_ = p;
  }
  return date_gdpr_consent_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::mutable_date_gdpr_consent() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.date_gdpr_consent)
  return _internal_mutable_date_gdpr_consent();
}
inline void User::set_allocated_date_gdpr_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_gdpr_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_gdpr_consent_);
  }
  if (date_gdpr_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_gdpr_consent)->GetArena();
    if (message_arena != submessage_arena) {
      date_gdpr_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_gdpr_consent, submessage_arena);
    }
    
  } else {
    
  }
  date_gdpr_consent_ = date_gdpr_consent;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.date_gdpr_consent)
}

// .google.protobuf.Timestamp date_tos_consent = 9 [deprecated = true];
inline bool User::_internal_has_date_tos_consent() const {
  return this != internal_default_instance() && date_tos_consent_ != nullptr;
}
inline bool User::has_date_tos_consent() const {
  return _internal_has_date_tos_consent();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::_internal_date_tos_consent() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = date_tos_consent_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::date_tos_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.date_tos_consent)
  return _internal_date_tos_consent();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::release_date_tos_consent() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.date_tos_consent)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_tos_consent_;
  date_tos_consent_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::_internal_mutable_date_tos_consent() {
  
  if (date_tos_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    date_tos_consent_ = p;
  }
  return date_tos_consent_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::mutable_date_tos_consent() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.date_tos_consent)
  return _internal_mutable_date_tos_consent();
}
inline void User::set_allocated_date_tos_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_tos_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_tos_consent_);
  }
  if (date_tos_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_tos_consent)->GetArena();
    if (message_arena != submessage_arena) {
      date_tos_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_tos_consent, submessage_arena);
    }
    
  } else {
    
  }
  date_tos_consent_ = date_tos_consent;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.date_tos_consent)
}

// .google.protobuf.Timestamp date_marketing_consent = 10 [deprecated = true];
inline bool User::_internal_has_date_marketing_consent() const {
  return this != internal_default_instance() && date_marketing_consent_ != nullptr;
}
inline bool User::has_date_marketing_consent() const {
  return _internal_has_date_marketing_consent();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::_internal_date_marketing_consent() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = date_marketing_consent_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& User::date_marketing_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.date_marketing_consent)
  return _internal_date_marketing_consent();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::release_date_marketing_consent() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.date_marketing_consent)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_marketing_consent_;
  date_marketing_consent_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::_internal_mutable_date_marketing_consent() {
  
  if (date_marketing_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    date_marketing_consent_ = p;
  }
  return date_marketing_consent_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* User::mutable_date_marketing_consent() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.date_marketing_consent)
  return _internal_mutable_date_marketing_consent();
}
inline void User::set_allocated_date_marketing_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_marketing_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_marketing_consent_);
  }
  if (date_marketing_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_marketing_consent)->GetArena();
    if (message_arena != submessage_arena) {
      date_marketing_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_marketing_consent, submessage_arena);
    }
    
  } else {
    
  }
  date_marketing_consent_ = date_marketing_consent;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.date_marketing_consent)
}

// .google.protobuf.Struct metadata = 11 [deprecated = true];
inline bool User::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool User::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& User::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& User::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.metadata)
  return _internal_metadata();
}
inline PROTOBUF_NAMESPACE_ID::Struct* User::release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* User::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* User::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.metadata)
  return _internal_mutable_metadata();
}
inline void User::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.metadata)
}

// repeated .clarifai.api.EmailAddress email_addresses = 12 [deprecated = true];
inline int User::_internal_email_addresses_size() const {
  return email_addresses_.size();
}
inline int User::email_addresses_size() const {
  return _internal_email_addresses_size();
}
inline void User::clear_email_addresses() {
  email_addresses_.Clear();
}
inline ::clarifai::api::EmailAddress* User::mutable_email_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.email_addresses)
  return email_addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >*
User::mutable_email_addresses() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.User.email_addresses)
  return &email_addresses_;
}
inline const ::clarifai::api::EmailAddress& User::_internal_email_addresses(int index) const {
  return email_addresses_.Get(index);
}
inline const ::clarifai::api::EmailAddress& User::email_addresses(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.email_addresses)
  return _internal_email_addresses(index);
}
inline ::clarifai::api::EmailAddress* User::_internal_add_email_addresses() {
  return email_addresses_.Add();
}
inline ::clarifai::api::EmailAddress* User::add_email_addresses() {
  // @@protoc_insertion_point(field_add:clarifai.api.User.email_addresses)
  return _internal_add_email_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >&
User::email_addresses() const {
  // @@protoc_insertion_point(field_list:clarifai.api.User.email_addresses)
  return email_addresses_;
}

// bool is_org_admin = 14 [deprecated = true];
inline void User::clear_is_org_admin() {
  is_org_admin_ = false;
}
inline bool User::_internal_is_org_admin() const {
  return is_org_admin_;
}
inline bool User::is_org_admin() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.is_org_admin)
  return _internal_is_org_admin();
}
inline void User::_internal_set_is_org_admin(bool value) {
  
  is_org_admin_ = value;
}
inline void User::set_is_org_admin(bool value) {
  _internal_set_is_org_admin(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.is_org_admin)
}

// bool two_factor_auth_enabled = 15 [deprecated = true];
inline void User::clear_two_factor_auth_enabled() {
  two_factor_auth_enabled_ = false;
}
inline bool User::_internal_two_factor_auth_enabled() const {
  return two_factor_auth_enabled_;
}
inline bool User::two_factor_auth_enabled() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.two_factor_auth_enabled)
  return _internal_two_factor_auth_enabled();
}
inline void User::_internal_set_two_factor_auth_enabled(bool value) {
  
  two_factor_auth_enabled_ = value;
}
inline void User::set_two_factor_auth_enabled(bool value) {
  _internal_set_two_factor_auth_enabled(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.two_factor_auth_enabled)
}

// uint32 teams_count = 16 [deprecated = true];
inline void User::clear_teams_count() {
  teams_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 User::_internal_teams_count() const {
  return teams_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 User::teams_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.teams_count)
  return _internal_teams_count();
}
inline void User::_internal_set_teams_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  teams_count_ = value;
}
inline void User::set_teams_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teams_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.User.teams_count)
}

// .clarifai.api.Visibility visibility = 17;
inline bool User::_internal_has_visibility() const {
  return this != internal_default_instance() && visibility_ != nullptr;
}
inline bool User::has_visibility() const {
  return _internal_has_visibility();
}
inline void User::clear_visibility() {
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
}
inline const ::clarifai::api::Visibility& User::_internal_visibility() const {
  const ::clarifai::api::Visibility* p = visibility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Visibility*>(
      &::clarifai::api::_Visibility_default_instance_);
}
inline const ::clarifai::api::Visibility& User::visibility() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.visibility)
  return _internal_visibility();
}
inline ::clarifai::api::Visibility* User::release_visibility() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.visibility)
  
  ::clarifai::api::Visibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::clarifai::api::Visibility* User::_internal_mutable_visibility() {
  
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Visibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  return visibility_;
}
inline ::clarifai::api::Visibility* User::mutable_visibility() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.visibility)
  return _internal_mutable_visibility();
}
inline void User::set_allocated_visibility(::clarifai::api::Visibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    
  } else {
    
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.visibility)
}

// .clarifai.api.UserDetail user_detail = 18;
inline bool User::_internal_has_user_detail() const {
  return this != internal_default_instance() && user_detail_ != nullptr;
}
inline bool User::has_user_detail() const {
  return _internal_has_user_detail();
}
inline void User::clear_user_detail() {
  if (GetArenaNoVirtual() == nullptr && user_detail_ != nullptr) {
    delete user_detail_;
  }
  user_detail_ = nullptr;
}
inline const ::clarifai::api::UserDetail& User::_internal_user_detail() const {
  const ::clarifai::api::UserDetail* p = user_detail_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::UserDetail*>(
      &::clarifai::api::_UserDetail_default_instance_);
}
inline const ::clarifai::api::UserDetail& User::user_detail() const {
  // @@protoc_insertion_point(field_get:clarifai.api.User.user_detail)
  return _internal_user_detail();
}
inline ::clarifai::api::UserDetail* User::release_user_detail() {
  // @@protoc_insertion_point(field_release:clarifai.api.User.user_detail)
  
  ::clarifai::api::UserDetail* temp = user_detail_;
  user_detail_ = nullptr;
  return temp;
}
inline ::clarifai::api::UserDetail* User::_internal_mutable_user_detail() {
  
  if (user_detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::UserDetail>(GetArenaNoVirtual());
    user_detail_ = p;
  }
  return user_detail_;
}
inline ::clarifai::api::UserDetail* User::mutable_user_detail() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.User.user_detail)
  return _internal_mutable_user_detail();
}
inline void User::set_allocated_user_detail(::clarifai::api::UserDetail* user_detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_detail_;
  }
  if (user_detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_detail, submessage_arena);
    }
    
  } else {
    
  }
  user_detail_ = user_detail;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.User.user_detail)
}

// -------------------------------------------------------------------

// UserDetail

// string primary_email = 1;
inline void UserDetail::clear_primary_email() {
  primary_email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserDetail::primary_email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserDetail.primary_email)
  return _internal_primary_email();
}
inline void UserDetail::set_primary_email(const std::string& value) {
  _internal_set_primary_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserDetail.primary_email)
}
inline std::string* UserDetail::mutable_primary_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserDetail.primary_email)
  return _internal_mutable_primary_email();
}
inline const std::string& UserDetail::_internal_primary_email() const {
  return primary_email_.GetNoArena();
}
inline void UserDetail::_internal_set_primary_email(const std::string& value) {
  
  primary_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserDetail::set_primary_email(std::string&& value) {
  
  primary_email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.UserDetail.primary_email)
}
inline void UserDetail::set_primary_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primary_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.UserDetail.primary_email)
}
inline void UserDetail::set_primary_email(const char* value, size_t size) {
  
  primary_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.UserDetail.primary_email)
}
inline std::string* UserDetail::_internal_mutable_primary_email() {
  
  return primary_email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserDetail::release_primary_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserDetail.primary_email)
  
  return primary_email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetail::set_allocated_primary_email(std::string* primary_email) {
  if (primary_email != nullptr) {
    
  } else {
    
  }
  primary_email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_email);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserDetail.primary_email)
}

// string bill_type = 2;
inline void UserDetail::clear_bill_type() {
  bill_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserDetail::bill_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserDetail.bill_type)
  return _internal_bill_type();
}
inline void UserDetail::set_bill_type(const std::string& value) {
  _internal_set_bill_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserDetail.bill_type)
}
inline std::string* UserDetail::mutable_bill_type() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserDetail.bill_type)
  return _internal_mutable_bill_type();
}
inline const std::string& UserDetail::_internal_bill_type() const {
  return bill_type_.GetNoArena();
}
inline void UserDetail::_internal_set_bill_type(const std::string& value) {
  
  bill_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserDetail::set_bill_type(std::string&& value) {
  
  bill_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.UserDetail.bill_type)
}
inline void UserDetail::set_bill_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bill_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.UserDetail.bill_type)
}
inline void UserDetail::set_bill_type(const char* value, size_t size) {
  
  bill_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.UserDetail.bill_type)
}
inline std::string* UserDetail::_internal_mutable_bill_type() {
  
  return bill_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserDetail::release_bill_type() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserDetail.bill_type)
  
  return bill_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetail::set_allocated_bill_type(std::string* bill_type) {
  if (bill_type != nullptr) {
    
  } else {
    
  }
  bill_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bill_type);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserDetail.bill_type)
}

// .google.protobuf.Timestamp date_gdpr_consent = 3;
inline bool UserDetail::_internal_has_date_gdpr_consent() const {
  return this != internal_default_instance() && date_gdpr_consent_ != nullptr;
}
inline bool UserDetail::has_date_gdpr_consent() const {
  return _internal_has_date_gdpr_consent();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UserDetail::_internal_date_gdpr_consent() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = date_gdpr_consent_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UserDetail::date_gdpr_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserDetail.date_gdpr_consent)
  return _internal_date_gdpr_consent();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserDetail::release_date_gdpr_consent() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserDetail.date_gdpr_consent)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_gdpr_consent_;
  date_gdpr_consent_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserDetail::_internal_mutable_date_gdpr_consent() {
  
  if (date_gdpr_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    date_gdpr_consent_ = p;
  }
  return date_gdpr_consent_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserDetail::mutable_date_gdpr_consent() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserDetail.date_gdpr_consent)
  return _internal_mutable_date_gdpr_consent();
}
inline void UserDetail::set_allocated_date_gdpr_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_gdpr_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_gdpr_consent_);
  }
  if (date_gdpr_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_gdpr_consent)->GetArena();
    if (message_arena != submessage_arena) {
      date_gdpr_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_gdpr_consent, submessage_arena);
    }
    
  } else {
    
  }
  date_gdpr_consent_ = date_gdpr_consent;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserDetail.date_gdpr_consent)
}

// .google.protobuf.Timestamp date_tos_consent = 4;
inline bool UserDetail::_internal_has_date_tos_consent() const {
  return this != internal_default_instance() && date_tos_consent_ != nullptr;
}
inline bool UserDetail::has_date_tos_consent() const {
  return _internal_has_date_tos_consent();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UserDetail::_internal_date_tos_consent() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = date_tos_consent_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UserDetail::date_tos_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserDetail.date_tos_consent)
  return _internal_date_tos_consent();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserDetail::release_date_tos_consent() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserDetail.date_tos_consent)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_tos_consent_;
  date_tos_consent_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserDetail::_internal_mutable_date_tos_consent() {
  
  if (date_tos_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    date_tos_consent_ = p;
  }
  return date_tos_consent_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserDetail::mutable_date_tos_consent() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserDetail.date_tos_consent)
  return _internal_mutable_date_tos_consent();
}
inline void UserDetail::set_allocated_date_tos_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_tos_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_tos_consent_);
  }
  if (date_tos_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_tos_consent)->GetArena();
    if (message_arena != submessage_arena) {
      date_tos_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_tos_consent, submessage_arena);
    }
    
  } else {
    
  }
  date_tos_consent_ = date_tos_consent;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserDetail.date_tos_consent)
}

// .google.protobuf.Timestamp date_marketing_consent = 5;
inline bool UserDetail::_internal_has_date_marketing_consent() const {
  return this != internal_default_instance() && date_marketing_consent_ != nullptr;
}
inline bool UserDetail::has_date_marketing_consent() const {
  return _internal_has_date_marketing_consent();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UserDetail::_internal_date_marketing_consent() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = date_marketing_consent_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UserDetail::date_marketing_consent() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserDetail.date_marketing_consent)
  return _internal_date_marketing_consent();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserDetail::release_date_marketing_consent() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserDetail.date_marketing_consent)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_marketing_consent_;
  date_marketing_consent_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserDetail::_internal_mutable_date_marketing_consent() {
  
  if (date_marketing_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    date_marketing_consent_ = p;
  }
  return date_marketing_consent_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserDetail::mutable_date_marketing_consent() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserDetail.date_marketing_consent)
  return _internal_mutable_date_marketing_consent();
}
inline void UserDetail::set_allocated_date_marketing_consent(PROTOBUF_NAMESPACE_ID::Timestamp* date_marketing_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_marketing_consent_);
  }
  if (date_marketing_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_marketing_consent)->GetArena();
    if (message_arena != submessage_arena) {
      date_marketing_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_marketing_consent, submessage_arena);
    }
    
  } else {
    
  }
  date_marketing_consent_ = date_marketing_consent;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserDetail.date_marketing_consent)
}

// .google.protobuf.Struct metadata = 6;
inline bool UserDetail::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool UserDetail::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& UserDetail::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& UserDetail::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserDetail.metadata)
  return _internal_metadata();
}
inline PROTOBUF_NAMESPACE_ID::Struct* UserDetail::release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.UserDetail.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UserDetail::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* UserDetail::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserDetail.metadata)
  return _internal_mutable_metadata();
}
inline void UserDetail::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.UserDetail.metadata)
}

// repeated .clarifai.api.EmailAddress email_addresses = 7;
inline int UserDetail::_internal_email_addresses_size() const {
  return email_addresses_.size();
}
inline int UserDetail::email_addresses_size() const {
  return _internal_email_addresses_size();
}
inline void UserDetail::clear_email_addresses() {
  email_addresses_.Clear();
}
inline ::clarifai::api::EmailAddress* UserDetail::mutable_email_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.UserDetail.email_addresses)
  return email_addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >*
UserDetail::mutable_email_addresses() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.UserDetail.email_addresses)
  return &email_addresses_;
}
inline const ::clarifai::api::EmailAddress& UserDetail::_internal_email_addresses(int index) const {
  return email_addresses_.Get(index);
}
inline const ::clarifai::api::EmailAddress& UserDetail::email_addresses(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserDetail.email_addresses)
  return _internal_email_addresses(index);
}
inline ::clarifai::api::EmailAddress* UserDetail::_internal_add_email_addresses() {
  return email_addresses_.Add();
}
inline ::clarifai::api::EmailAddress* UserDetail::add_email_addresses() {
  // @@protoc_insertion_point(field_add:clarifai.api.UserDetail.email_addresses)
  return _internal_add_email_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::EmailAddress >&
UserDetail::email_addresses() const {
  // @@protoc_insertion_point(field_list:clarifai.api.UserDetail.email_addresses)
  return email_addresses_;
}

// bool is_org_admin = 8;
inline void UserDetail::clear_is_org_admin() {
  is_org_admin_ = false;
}
inline bool UserDetail::_internal_is_org_admin() const {
  return is_org_admin_;
}
inline bool UserDetail::is_org_admin() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserDetail.is_org_admin)
  return _internal_is_org_admin();
}
inline void UserDetail::_internal_set_is_org_admin(bool value) {
  
  is_org_admin_ = value;
}
inline void UserDetail::set_is_org_admin(bool value) {
  _internal_set_is_org_admin(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserDetail.is_org_admin)
}

// bool two_factor_auth_enabled = 9;
inline void UserDetail::clear_two_factor_auth_enabled() {
  two_factor_auth_enabled_ = false;
}
inline bool UserDetail::_internal_two_factor_auth_enabled() const {
  return two_factor_auth_enabled_;
}
inline bool UserDetail::two_factor_auth_enabled() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserDetail.two_factor_auth_enabled)
  return _internal_two_factor_auth_enabled();
}
inline void UserDetail::_internal_set_two_factor_auth_enabled(bool value) {
  
  two_factor_auth_enabled_ = value;
}
inline void UserDetail::set_two_factor_auth_enabled(bool value) {
  _internal_set_two_factor_auth_enabled(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserDetail.two_factor_auth_enabled)
}

// uint32 teams_count = 10;
inline void UserDetail::clear_teams_count() {
  teams_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserDetail::_internal_teams_count() const {
  return teams_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserDetail::teams_count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.UserDetail.teams_count)
  return _internal_teams_count();
}
inline void UserDetail::_internal_set_teams_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  teams_count_ = value;
}
inline void UserDetail::set_teams_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teams_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.UserDetail.teams_count)
}

// -------------------------------------------------------------------

// EmailAddress

// string email = 1 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void EmailAddress::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EmailAddress::email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EmailAddress.email)
  return _internal_email();
}
inline void EmailAddress::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EmailAddress.email)
}
inline std::string* EmailAddress::mutable_email() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.EmailAddress.email)
  return _internal_mutable_email();
}
inline const std::string& EmailAddress::_internal_email() const {
  return email_.GetNoArena();
}
inline void EmailAddress::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EmailAddress::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.EmailAddress.email)
}
inline void EmailAddress::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.EmailAddress.email)
}
inline void EmailAddress::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.EmailAddress.email)
}
inline std::string* EmailAddress::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmailAddress::release_email() {
  // @@protoc_insertion_point(field_release:clarifai.api.EmailAddress.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmailAddress::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.EmailAddress.email)
}

// bool primary = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void EmailAddress::clear_primary() {
  primary_ = false;
}
inline bool EmailAddress::_internal_primary() const {
  return primary_;
}
inline bool EmailAddress::primary() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EmailAddress.primary)
  return _internal_primary();
}
inline void EmailAddress::_internal_set_primary(bool value) {
  
  primary_ = value;
}
inline void EmailAddress::set_primary(bool value) {
  _internal_set_primary(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EmailAddress.primary)
}

// bool verified = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void EmailAddress::clear_verified() {
  verified_ = false;
}
inline bool EmailAddress::_internal_verified() const {
  return verified_;
}
inline bool EmailAddress::verified() const {
  // @@protoc_insertion_point(field_get:clarifai.api.EmailAddress.verified)
  return _internal_verified();
}
inline void EmailAddress::_internal_set_verified(bool value) {
  
  verified_ = value;
}
inline void EmailAddress::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:clarifai.api.EmailAddress.verified)
}

// -------------------------------------------------------------------

// Password

// string plaintext = 1;
inline void Password::clear_plaintext() {
  plaintext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Password::plaintext() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Password.plaintext)
  return _internal_plaintext();
}
inline void Password::set_plaintext(const std::string& value) {
  _internal_set_plaintext(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Password.plaintext)
}
inline std::string* Password::mutable_plaintext() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Password.plaintext)
  return _internal_mutable_plaintext();
}
inline const std::string& Password::_internal_plaintext() const {
  return plaintext_.GetNoArena();
}
inline void Password::_internal_set_plaintext(const std::string& value) {
  
  plaintext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Password::set_plaintext(std::string&& value) {
  
  plaintext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Password.plaintext)
}
inline void Password::set_plaintext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plaintext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Password.plaintext)
}
inline void Password::set_plaintext(const char* value, size_t size) {
  
  plaintext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Password.plaintext)
}
inline std::string* Password::_internal_mutable_plaintext() {
  
  return plaintext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Password::release_plaintext() {
  // @@protoc_insertion_point(field_release:clarifai.api.Password.plaintext)
  
  return plaintext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Password::set_allocated_plaintext(std::string* plaintext) {
  if (plaintext != nullptr) {
    
  } else {
    
  }
  plaintext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintext);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Password.plaintext)
}

// -------------------------------------------------------------------

// PasswordViolations

// bool minimum_length = 1;
inline void PasswordViolations::clear_minimum_length() {
  minimum_length_ = false;
}
inline bool PasswordViolations::_internal_minimum_length() const {
  return minimum_length_;
}
inline bool PasswordViolations::minimum_length() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.minimum_length)
  return _internal_minimum_length();
}
inline void PasswordViolations::_internal_set_minimum_length(bool value) {
  
  minimum_length_ = value;
}
inline void PasswordViolations::set_minimum_length(bool value) {
  _internal_set_minimum_length(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.minimum_length)
}

// bool maximum_length = 2;
inline void PasswordViolations::clear_maximum_length() {
  maximum_length_ = false;
}
inline bool PasswordViolations::_internal_maximum_length() const {
  return maximum_length_;
}
inline bool PasswordViolations::maximum_length() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.maximum_length)
  return _internal_maximum_length();
}
inline void PasswordViolations::_internal_set_maximum_length(bool value) {
  
  maximum_length_ = value;
}
inline void PasswordViolations::set_maximum_length(bool value) {
  _internal_set_maximum_length(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.maximum_length)
}

// bool upper_case_needed = 3;
inline void PasswordViolations::clear_upper_case_needed() {
  upper_case_needed_ = false;
}
inline bool PasswordViolations::_internal_upper_case_needed() const {
  return upper_case_needed_;
}
inline bool PasswordViolations::upper_case_needed() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.upper_case_needed)
  return _internal_upper_case_needed();
}
inline void PasswordViolations::_internal_set_upper_case_needed(bool value) {
  
  upper_case_needed_ = value;
}
inline void PasswordViolations::set_upper_case_needed(bool value) {
  _internal_set_upper_case_needed(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.upper_case_needed)
}

// bool lower_case_needed = 4;
inline void PasswordViolations::clear_lower_case_needed() {
  lower_case_needed_ = false;
}
inline bool PasswordViolations::_internal_lower_case_needed() const {
  return lower_case_needed_;
}
inline bool PasswordViolations::lower_case_needed() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.lower_case_needed)
  return _internal_lower_case_needed();
}
inline void PasswordViolations::_internal_set_lower_case_needed(bool value) {
  
  lower_case_needed_ = value;
}
inline void PasswordViolations::set_lower_case_needed(bool value) {
  _internal_set_lower_case_needed(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.lower_case_needed)
}

// bool numeric_needed = 5;
inline void PasswordViolations::clear_numeric_needed() {
  numeric_needed_ = false;
}
inline bool PasswordViolations::_internal_numeric_needed() const {
  return numeric_needed_;
}
inline bool PasswordViolations::numeric_needed() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.numeric_needed)
  return _internal_numeric_needed();
}
inline void PasswordViolations::_internal_set_numeric_needed(bool value) {
  
  numeric_needed_ = value;
}
inline void PasswordViolations::set_numeric_needed(bool value) {
  _internal_set_numeric_needed(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.numeric_needed)
}

// bool non_alphanumeric_needed = 6;
inline void PasswordViolations::clear_non_alphanumeric_needed() {
  non_alphanumeric_needed_ = false;
}
inline bool PasswordViolations::_internal_non_alphanumeric_needed() const {
  return non_alphanumeric_needed_;
}
inline bool PasswordViolations::non_alphanumeric_needed() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.non_alphanumeric_needed)
  return _internal_non_alphanumeric_needed();
}
inline void PasswordViolations::_internal_set_non_alphanumeric_needed(bool value) {
  
  non_alphanumeric_needed_ = value;
}
inline void PasswordViolations::set_non_alphanumeric_needed(bool value) {
  _internal_set_non_alphanumeric_needed(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.non_alphanumeric_needed)
}

// bool password_reuse = 7;
inline void PasswordViolations::clear_password_reuse() {
  password_reuse_ = false;
}
inline bool PasswordViolations::_internal_password_reuse() const {
  return password_reuse_;
}
inline bool PasswordViolations::password_reuse() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.password_reuse)
  return _internal_password_reuse();
}
inline void PasswordViolations::_internal_set_password_reuse(bool value) {
  
  password_reuse_ = value;
}
inline void PasswordViolations::set_password_reuse(bool value) {
  _internal_set_password_reuse(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.password_reuse)
}

// bool exclude_names = 8;
inline void PasswordViolations::clear_exclude_names() {
  exclude_names_ = false;
}
inline bool PasswordViolations::_internal_exclude_names() const {
  return exclude_names_;
}
inline bool PasswordViolations::exclude_names() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.exclude_names)
  return _internal_exclude_names();
}
inline void PasswordViolations::_internal_set_exclude_names(bool value) {
  
  exclude_names_ = value;
}
inline void PasswordViolations::set_exclude_names(bool value) {
  _internal_set_exclude_names(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.exclude_names)
}

// bool exclude_email = 9;
inline void PasswordViolations::clear_exclude_email() {
  exclude_email_ = false;
}
inline bool PasswordViolations::_internal_exclude_email() const {
  return exclude_email_;
}
inline bool PasswordViolations::exclude_email() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.exclude_email)
  return _internal_exclude_email();
}
inline void PasswordViolations::_internal_set_exclude_email(bool value) {
  
  exclude_email_ = value;
}
inline void PasswordViolations::set_exclude_email(bool value) {
  _internal_set_exclude_email(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.exclude_email)
}

// bool no_confusing_letters = 10;
inline void PasswordViolations::clear_no_confusing_letters() {
  no_confusing_letters_ = false;
}
inline bool PasswordViolations::_internal_no_confusing_letters() const {
  return no_confusing_letters_;
}
inline bool PasswordViolations::no_confusing_letters() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.no_confusing_letters)
  return _internal_no_confusing_letters();
}
inline void PasswordViolations::_internal_set_no_confusing_letters(bool value) {
  
  no_confusing_letters_ = value;
}
inline void PasswordViolations::set_no_confusing_letters(bool value) {
  _internal_set_no_confusing_letters(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.no_confusing_letters)
}

// bool no_simple_passwords = 11;
inline void PasswordViolations::clear_no_simple_passwords() {
  no_simple_passwords_ = false;
}
inline bool PasswordViolations::_internal_no_simple_passwords() const {
  return no_simple_passwords_;
}
inline bool PasswordViolations::no_simple_passwords() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.no_simple_passwords)
  return _internal_no_simple_passwords();
}
inline void PasswordViolations::_internal_set_no_simple_passwords(bool value) {
  
  no_simple_passwords_ = value;
}
inline void PasswordViolations::set_no_simple_passwords(bool value) {
  _internal_set_no_simple_passwords(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.no_simple_passwords)
}

// bool no_common_vocabs = 12;
inline void PasswordViolations::clear_no_common_vocabs() {
  no_common_vocabs_ = false;
}
inline bool PasswordViolations::_internal_no_common_vocabs() const {
  return no_common_vocabs_;
}
inline bool PasswordViolations::no_common_vocabs() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.no_common_vocabs)
  return _internal_no_common_vocabs();
}
inline void PasswordViolations::_internal_set_no_common_vocabs(bool value) {
  
  no_common_vocabs_ = value;
}
inline void PasswordViolations::set_no_common_vocabs(bool value) {
  _internal_set_no_common_vocabs(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.no_common_vocabs)
}

// bool no_overlap_with_old = 13;
inline void PasswordViolations::clear_no_overlap_with_old() {
  no_overlap_with_old_ = false;
}
inline bool PasswordViolations::_internal_no_overlap_with_old() const {
  return no_overlap_with_old_;
}
inline bool PasswordViolations::no_overlap_with_old() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.no_overlap_with_old)
  return _internal_no_overlap_with_old();
}
inline void PasswordViolations::_internal_set_no_overlap_with_old(bool value) {
  
  no_overlap_with_old_ = value;
}
inline void PasswordViolations::set_no_overlap_with_old(bool value) {
  _internal_set_no_overlap_with_old(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.no_overlap_with_old)
}

// bool password_lifespan = 14;
inline void PasswordViolations::clear_password_lifespan() {
  password_lifespan_ = false;
}
inline bool PasswordViolations::_internal_password_lifespan() const {
  return password_lifespan_;
}
inline bool PasswordViolations::password_lifespan() const {
  // @@protoc_insertion_point(field_get:clarifai.api.PasswordViolations.password_lifespan)
  return _internal_password_lifespan();
}
inline void PasswordViolations::_internal_set_password_lifespan(bool value) {
  
  password_lifespan_ = value;
}
inline void PasswordViolations::set_password_lifespan(bool value) {
  _internal_set_password_lifespan(value);
  // @@protoc_insertion_point(field_set:clarifai.api.PasswordViolations.password_lifespan)
}

// -------------------------------------------------------------------

// Video

// string url = 1;
inline void Video::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Video::url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Video.url)
  return _internal_url();
}
inline void Video::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Video.url)
}
inline std::string* Video::mutable_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Video.url)
  return _internal_mutable_url();
}
inline const std::string& Video::_internal_url() const {
  return url_.GetNoArena();
}
inline void Video::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Video::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Video.url)
}
inline void Video::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Video.url)
}
inline void Video::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Video.url)
}
inline std::string* Video::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Video::release_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.Video.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Video::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Video.url)
}

// bytes base64 = 2;
inline void Video::clear_base64() {
  base64_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Video::base64() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Video.base64)
  return _internal_base64();
}
inline void Video::set_base64(const std::string& value) {
  _internal_set_base64(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Video.base64)
}
inline std::string* Video::mutable_base64() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Video.base64)
  return _internal_mutable_base64();
}
inline const std::string& Video::_internal_base64() const {
  return base64_.GetNoArena();
}
inline void Video::_internal_set_base64(const std::string& value) {
  
  base64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Video::set_base64(std::string&& value) {
  
  base64_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Video.base64)
}
inline void Video::set_base64(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Video.base64)
}
inline void Video::set_base64(const void* value, size_t size) {
  
  base64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Video.base64)
}
inline std::string* Video::_internal_mutable_base64() {
  
  return base64_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Video::release_base64() {
  // @@protoc_insertion_point(field_release:clarifai.api.Video.base64)
  
  return base64_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Video::set_allocated_base64(std::string* base64) {
  if (base64 != nullptr) {
    
  } else {
    
  }
  base64_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base64);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Video.base64)
}

// bool allow_duplicate_url = 4;
inline void Video::clear_allow_duplicate_url() {
  allow_duplicate_url_ = false;
}
inline bool Video::_internal_allow_duplicate_url() const {
  return allow_duplicate_url_;
}
inline bool Video::allow_duplicate_url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Video.allow_duplicate_url)
  return _internal_allow_duplicate_url();
}
inline void Video::_internal_set_allow_duplicate_url(bool value) {
  
  allow_duplicate_url_ = value;
}
inline void Video::set_allow_duplicate_url(bool value) {
  _internal_set_allow_duplicate_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Video.allow_duplicate_url)
}

// string thumbnail_url = 5;
inline void Video::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Video::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Video.thumbnail_url)
  return _internal_thumbnail_url();
}
inline void Video::set_thumbnail_url(const std::string& value) {
  _internal_set_thumbnail_url(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Video.thumbnail_url)
}
inline std::string* Video::mutable_thumbnail_url() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Video.thumbnail_url)
  return _internal_mutable_thumbnail_url();
}
inline const std::string& Video::_internal_thumbnail_url() const {
  return thumbnail_url_.GetNoArena();
}
inline void Video::_internal_set_thumbnail_url(const std::string& value) {
  
  thumbnail_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Video::set_thumbnail_url(std::string&& value) {
  
  thumbnail_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Video.thumbnail_url)
}
inline void Video::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thumbnail_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Video.thumbnail_url)
}
inline void Video::set_thumbnail_url(const char* value, size_t size) {
  
  thumbnail_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Video.thumbnail_url)
}
inline std::string* Video::_internal_mutable_thumbnail_url() {
  
  return thumbnail_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Video::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:clarifai.api.Video.thumbnail_url)
  
  return thumbnail_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Video::set_allocated_thumbnail_url(std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Video.thumbnail_url)
}

// .clarifai.api.HostedURL hosted = 6;
inline bool Video::_internal_has_hosted() const {
  return this != internal_default_instance() && hosted_ != nullptr;
}
inline bool Video::has_hosted() const {
  return _internal_has_hosted();
}
inline void Video::clear_hosted() {
  if (GetArenaNoVirtual() == nullptr && hosted_ != nullptr) {
    delete hosted_;
  }
  hosted_ = nullptr;
}
inline const ::clarifai::api::HostedURL& Video::_internal_hosted() const {
  const ::clarifai::api::HostedURL* p = hosted_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::HostedURL*>(
      &::clarifai::api::_HostedURL_default_instance_);
}
inline const ::clarifai::api::HostedURL& Video::hosted() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Video.hosted)
  return _internal_hosted();
}
inline ::clarifai::api::HostedURL* Video::release_hosted() {
  // @@protoc_insertion_point(field_release:clarifai.api.Video.hosted)
  
  ::clarifai::api::HostedURL* temp = hosted_;
  hosted_ = nullptr;
  return temp;
}
inline ::clarifai::api::HostedURL* Video::_internal_mutable_hosted() {
  
  if (hosted_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::HostedURL>(GetArenaNoVirtual());
    hosted_ = p;
  }
  return hosted_;
}
inline ::clarifai::api::HostedURL* Video::mutable_hosted() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Video.hosted)
  return _internal_mutable_hosted();
}
inline void Video::set_allocated_hosted(::clarifai::api::HostedURL* hosted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hosted_;
  }
  if (hosted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hosted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hosted, submessage_arena);
    }
    
  } else {
    
  }
  hosted_ = hosted;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Video.hosted)
}

// -------------------------------------------------------------------

// Workflow

// string id = 1;
inline void Workflow::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Workflow::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.id)
  return _internal_id();
}
inline void Workflow::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Workflow.id)
}
inline std::string* Workflow::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.id)
  return _internal_mutable_id();
}
inline const std::string& Workflow::_internal_id() const {
  return id_.GetNoArena();
}
inline void Workflow::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Workflow::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Workflow.id)
}
inline void Workflow::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Workflow.id)
}
inline void Workflow::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Workflow.id)
}
inline std::string* Workflow::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Workflow::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Workflow.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Workflow::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Workflow.id)
}

// string app_id = 2;
inline void Workflow::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Workflow::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.app_id)
  return _internal_app_id();
}
inline void Workflow::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Workflow.app_id)
}
inline std::string* Workflow::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& Workflow::_internal_app_id() const {
  return app_id_.GetNoArena();
}
inline void Workflow::_internal_set_app_id(const std::string& value) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Workflow::set_app_id(std::string&& value) {
  
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Workflow.app_id)
}
inline void Workflow::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Workflow.app_id)
}
inline void Workflow::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Workflow.app_id)
}
inline std::string* Workflow::_internal_mutable_app_id() {
  
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Workflow::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Workflow.app_id)
  
  return app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Workflow::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Workflow.app_id)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool Workflow::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Workflow::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Workflow::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Workflow::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Workflow::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Workflow.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Workflow::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Workflow::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.created_at)
  return _internal_mutable_created_at();
}
inline void Workflow::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Workflow.created_at)
}

// repeated .clarifai.api.WorkflowNode nodes = 4;
inline int Workflow::_internal_nodes_size() const {
  return nodes_.size();
}
inline int Workflow::nodes_size() const {
  return _internal_nodes_size();
}
inline void Workflow::clear_nodes() {
  nodes_.Clear();
}
inline ::clarifai::api::WorkflowNode* Workflow::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode >*
Workflow::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Workflow.nodes)
  return &nodes_;
}
inline const ::clarifai::api::WorkflowNode& Workflow::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::clarifai::api::WorkflowNode& Workflow::nodes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.nodes)
  return _internal_nodes(index);
}
inline ::clarifai::api::WorkflowNode* Workflow::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::clarifai::api::WorkflowNode* Workflow::add_nodes() {
  // @@protoc_insertion_point(field_add:clarifai.api.Workflow.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode >&
Workflow::nodes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Workflow.nodes)
  return nodes_;
}

// .google.protobuf.Struct metadata = 5;
inline bool Workflow::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Workflow::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Workflow::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Workflow::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.metadata)
  return _internal_metadata();
}
inline PROTOBUF_NAMESPACE_ID::Struct* Workflow::release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.Workflow.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Workflow::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Workflow::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.metadata)
  return _internal_mutable_metadata();
}
inline void Workflow::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Workflow.metadata)
}

// .clarifai.api.Visibility visibility = 6;
inline bool Workflow::_internal_has_visibility() const {
  return this != internal_default_instance() && visibility_ != nullptr;
}
inline bool Workflow::has_visibility() const {
  return _internal_has_visibility();
}
inline void Workflow::clear_visibility() {
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
}
inline const ::clarifai::api::Visibility& Workflow::_internal_visibility() const {
  const ::clarifai::api::Visibility* p = visibility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Visibility*>(
      &::clarifai::api::_Visibility_default_instance_);
}
inline const ::clarifai::api::Visibility& Workflow::visibility() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.visibility)
  return _internal_visibility();
}
inline ::clarifai::api::Visibility* Workflow::release_visibility() {
  // @@protoc_insertion_point(field_release:clarifai.api.Workflow.visibility)
  
  ::clarifai::api::Visibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::clarifai::api::Visibility* Workflow::_internal_mutable_visibility() {
  
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Visibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  return visibility_;
}
inline ::clarifai::api::Visibility* Workflow::mutable_visibility() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.visibility)
  return _internal_mutable_visibility();
}
inline void Workflow::set_allocated_visibility(::clarifai::api::Visibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    
  } else {
    
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Workflow.visibility)
}

// string user_id = 7;
inline void Workflow::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Workflow::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.user_id)
  return _internal_user_id();
}
inline void Workflow::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Workflow.user_id)
}
inline std::string* Workflow::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Workflow::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void Workflow::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Workflow::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Workflow.user_id)
}
inline void Workflow::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Workflow.user_id)
}
inline void Workflow::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Workflow.user_id)
}
inline std::string* Workflow::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Workflow::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Workflow.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Workflow::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Workflow.user_id)
}

// .google.protobuf.Timestamp modified_at = 8;
inline bool Workflow::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool Workflow::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Workflow::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Workflow::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.modified_at)
  return _internal_modified_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Workflow::release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Workflow.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Workflow::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Workflow::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.modified_at)
  return _internal_mutable_modified_at();
}
inline void Workflow::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Workflow.modified_at)
}

// .clarifai.api.WorkflowVersion version = 9;
inline bool Workflow::_internal_has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline bool Workflow::has_version() const {
  return _internal_has_version();
}
inline void Workflow::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
inline const ::clarifai::api::WorkflowVersion& Workflow::_internal_version() const {
  const ::clarifai::api::WorkflowVersion* p = version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::WorkflowVersion*>(
      &::clarifai::api::_WorkflowVersion_default_instance_);
}
inline const ::clarifai::api::WorkflowVersion& Workflow::version() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Workflow.version)
  return _internal_version();
}
inline ::clarifai::api::WorkflowVersion* Workflow::release_version() {
  // @@protoc_insertion_point(field_release:clarifai.api.Workflow.version)
  
  ::clarifai::api::WorkflowVersion* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::clarifai::api::WorkflowVersion* Workflow::_internal_mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::WorkflowVersion>(GetArenaNoVirtual());
    version_ = p;
  }
  return version_;
}
inline ::clarifai::api::WorkflowVersion* Workflow::mutable_version() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Workflow.version)
  return _internal_mutable_version();
}
inline void Workflow::set_allocated_version(::clarifai::api::WorkflowVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Workflow.version)
}

// -------------------------------------------------------------------

// WorkflowVersion

// string id = 1;
inline void WorkflowVersion::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowVersion::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowVersion.id)
  return _internal_id();
}
inline void WorkflowVersion::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowVersion.id)
}
inline std::string* WorkflowVersion::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowVersion.id)
  return _internal_mutable_id();
}
inline const std::string& WorkflowVersion::_internal_id() const {
  return id_.GetNoArena();
}
inline void WorkflowVersion::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkflowVersion::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.WorkflowVersion.id)
}
inline void WorkflowVersion::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.WorkflowVersion.id)
}
inline void WorkflowVersion::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.WorkflowVersion.id)
}
inline std::string* WorkflowVersion::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowVersion::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowVersion.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowVersion::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowVersion.id)
}

// string workflow_id = 2;
inline void WorkflowVersion::clear_workflow_id() {
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowVersion::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowVersion.workflow_id)
  return _internal_workflow_id();
}
inline void WorkflowVersion::set_workflow_id(const std::string& value) {
  _internal_set_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowVersion.workflow_id)
}
inline std::string* WorkflowVersion::mutable_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowVersion.workflow_id)
  return _internal_mutable_workflow_id();
}
inline const std::string& WorkflowVersion::_internal_workflow_id() const {
  return workflow_id_.GetNoArena();
}
inline void WorkflowVersion::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkflowVersion::set_workflow_id(std::string&& value) {
  
  workflow_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.WorkflowVersion.workflow_id)
}
inline void WorkflowVersion::set_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.WorkflowVersion.workflow_id)
}
inline void WorkflowVersion::set_workflow_id(const char* value, size_t size) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.WorkflowVersion.workflow_id)
}
inline std::string* WorkflowVersion::_internal_mutable_workflow_id() {
  
  return workflow_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowVersion::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowVersion.workflow_id)
  
  return workflow_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowVersion::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowVersion.workflow_id)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool WorkflowVersion::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool WorkflowVersion::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WorkflowVersion::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WorkflowVersion::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowVersion.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowVersion::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowVersion.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowVersion::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowVersion::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowVersion.created_at)
  return _internal_mutable_created_at();
}
inline void WorkflowVersion::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowVersion.created_at)
}

// .google.protobuf.Timestamp modified_at = 4;
inline bool WorkflowVersion::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool WorkflowVersion::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WorkflowVersion::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WorkflowVersion::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowVersion.modified_at)
  return _internal_modified_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowVersion::release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowVersion.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowVersion::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowVersion::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowVersion.modified_at)
  return _internal_mutable_modified_at();
}
inline void WorkflowVersion::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowVersion.modified_at)
}

// .clarifai.api.Visibility visibility = 5;
inline bool WorkflowVersion::_internal_has_visibility() const {
  return this != internal_default_instance() && visibility_ != nullptr;
}
inline bool WorkflowVersion::has_visibility() const {
  return _internal_has_visibility();
}
inline void WorkflowVersion::clear_visibility() {
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
}
inline const ::clarifai::api::Visibility& WorkflowVersion::_internal_visibility() const {
  const ::clarifai::api::Visibility* p = visibility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Visibility*>(
      &::clarifai::api::_Visibility_default_instance_);
}
inline const ::clarifai::api::Visibility& WorkflowVersion::visibility() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowVersion.visibility)
  return _internal_visibility();
}
inline ::clarifai::api::Visibility* WorkflowVersion::release_visibility() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowVersion.visibility)
  
  ::clarifai::api::Visibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::clarifai::api::Visibility* WorkflowVersion::_internal_mutable_visibility() {
  
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Visibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  return visibility_;
}
inline ::clarifai::api::Visibility* WorkflowVersion::mutable_visibility() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowVersion.visibility)
  return _internal_mutable_visibility();
}
inline void WorkflowVersion::set_allocated_visibility(::clarifai::api::Visibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    
  } else {
    
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowVersion.visibility)
}

// repeated .clarifai.api.WorkflowNode nodes = 6;
inline int WorkflowVersion::_internal_nodes_size() const {
  return nodes_.size();
}
inline int WorkflowVersion::nodes_size() const {
  return _internal_nodes_size();
}
inline void WorkflowVersion::clear_nodes() {
  nodes_.Clear();
}
inline ::clarifai::api::WorkflowNode* WorkflowVersion::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowVersion.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode >*
WorkflowVersion::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.WorkflowVersion.nodes)
  return &nodes_;
}
inline const ::clarifai::api::WorkflowNode& WorkflowVersion::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::clarifai::api::WorkflowNode& WorkflowVersion::nodes(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowVersion.nodes)
  return _internal_nodes(index);
}
inline ::clarifai::api::WorkflowNode* WorkflowVersion::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::clarifai::api::WorkflowNode* WorkflowVersion::add_nodes() {
  // @@protoc_insertion_point(field_add:clarifai.api.WorkflowVersion.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::WorkflowNode >&
WorkflowVersion::nodes() const {
  // @@protoc_insertion_point(field_list:clarifai.api.WorkflowVersion.nodes)
  return nodes_;
}

// .google.protobuf.Struct metadata = 7;
inline bool WorkflowVersion::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool WorkflowVersion::has_metadata() const {
  return _internal_has_metadata();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& WorkflowVersion::_internal_metadata() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& WorkflowVersion::metadata() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowVersion.metadata)
  return _internal_metadata();
}
inline PROTOBUF_NAMESPACE_ID::Struct* WorkflowVersion::release_metadata() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowVersion.metadata)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* WorkflowVersion::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* WorkflowVersion::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowVersion.metadata)
  return _internal_mutable_metadata();
}
inline void WorkflowVersion::set_allocated_metadata(PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowVersion.metadata)
}

// string app_id = 8;
inline void WorkflowVersion::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowVersion::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowVersion.app_id)
  return _internal_app_id();
}
inline void WorkflowVersion::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowVersion.app_id)
}
inline std::string* WorkflowVersion::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowVersion.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& WorkflowVersion::_internal_app_id() const {
  return app_id_.GetNoArena();
}
inline void WorkflowVersion::_internal_set_app_id(const std::string& value) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkflowVersion::set_app_id(std::string&& value) {
  
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.WorkflowVersion.app_id)
}
inline void WorkflowVersion::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.WorkflowVersion.app_id)
}
inline void WorkflowVersion::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.WorkflowVersion.app_id)
}
inline std::string* WorkflowVersion::_internal_mutable_app_id() {
  
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowVersion::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowVersion.app_id)
  
  return app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowVersion::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowVersion.app_id)
}

// string user_id = 9;
inline void WorkflowVersion::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowVersion::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowVersion.user_id)
  return _internal_user_id();
}
inline void WorkflowVersion::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowVersion.user_id)
}
inline std::string* WorkflowVersion::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowVersion.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& WorkflowVersion::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void WorkflowVersion::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkflowVersion::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.WorkflowVersion.user_id)
}
inline void WorkflowVersion::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.WorkflowVersion.user_id)
}
inline void WorkflowVersion::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.WorkflowVersion.user_id)
}
inline std::string* WorkflowVersion::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowVersion::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowVersion.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowVersion::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowVersion.user_id)
}

// -------------------------------------------------------------------

// WorkflowNode

// string id = 1;
inline void WorkflowNode::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowNode::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowNode.id)
  return _internal_id();
}
inline void WorkflowNode::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowNode.id)
}
inline std::string* WorkflowNode::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowNode.id)
  return _internal_mutable_id();
}
inline const std::string& WorkflowNode::_internal_id() const {
  return id_.GetNoArena();
}
inline void WorkflowNode::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkflowNode::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.WorkflowNode.id)
}
inline void WorkflowNode::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.WorkflowNode.id)
}
inline void WorkflowNode::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.WorkflowNode.id)
}
inline std::string* WorkflowNode::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowNode::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowNode.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowNode::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowNode.id)
}

// .clarifai.api.Model model = 2;
inline bool WorkflowNode::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool WorkflowNode::has_model() const {
  return _internal_has_model();
}
inline void WorkflowNode::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::api::Model& WorkflowNode::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Model*>(
      &::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& WorkflowNode::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowNode.model)
  return _internal_model();
}
inline ::clarifai::api::Model* WorkflowNode::release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowNode.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* WorkflowNode::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArenaNoVirtual());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* WorkflowNode::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowNode.model)
  return _internal_mutable_model();
}
inline void WorkflowNode::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowNode.model)
}

// repeated .clarifai.api.NodeInput node_inputs = 3;
inline int WorkflowNode::_internal_node_inputs_size() const {
  return node_inputs_.size();
}
inline int WorkflowNode::node_inputs_size() const {
  return _internal_node_inputs_size();
}
inline void WorkflowNode::clear_node_inputs() {
  node_inputs_.Clear();
}
inline ::clarifai::api::NodeInput* WorkflowNode::mutable_node_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowNode.node_inputs)
  return node_inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::NodeInput >*
WorkflowNode::mutable_node_inputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.WorkflowNode.node_inputs)
  return &node_inputs_;
}
inline const ::clarifai::api::NodeInput& WorkflowNode::_internal_node_inputs(int index) const {
  return node_inputs_.Get(index);
}
inline const ::clarifai::api::NodeInput& WorkflowNode::node_inputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowNode.node_inputs)
  return _internal_node_inputs(index);
}
inline ::clarifai::api::NodeInput* WorkflowNode::_internal_add_node_inputs() {
  return node_inputs_.Add();
}
inline ::clarifai::api::NodeInput* WorkflowNode::add_node_inputs() {
  // @@protoc_insertion_point(field_add:clarifai.api.WorkflowNode.node_inputs)
  return _internal_add_node_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::NodeInput >&
WorkflowNode::node_inputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.WorkflowNode.node_inputs)
  return node_inputs_;
}

// bool suppress_output = 4;
inline void WorkflowNode::clear_suppress_output() {
  suppress_output_ = false;
}
inline bool WorkflowNode::_internal_suppress_output() const {
  return suppress_output_;
}
inline bool WorkflowNode::suppress_output() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowNode.suppress_output)
  return _internal_suppress_output();
}
inline void WorkflowNode::_internal_set_suppress_output(bool value) {
  
  suppress_output_ = value;
}
inline void WorkflowNode::set_suppress_output(bool value) {
  _internal_set_suppress_output(value);
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowNode.suppress_output)
}

// -------------------------------------------------------------------

// NodeInput

// string node_id = 1;
inline void NodeInput::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInput::node_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.NodeInput.node_id)
  return _internal_node_id();
}
inline void NodeInput::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.NodeInput.node_id)
}
inline std::string* NodeInput::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.NodeInput.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& NodeInput::_internal_node_id() const {
  return node_id_.GetNoArena();
}
inline void NodeInput::_internal_set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeInput::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.NodeInput.node_id)
}
inline void NodeInput::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.NodeInput.node_id)
}
inline void NodeInput::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.NodeInput.node_id)
}
inline std::string* NodeInput::_internal_mutable_node_id() {
  
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInput::release_node_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.NodeInput.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInput::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.NodeInput.node_id)
}

// -------------------------------------------------------------------

// WorkflowResult

// string id = 1;
inline void WorkflowResult::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowResult::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.id)
  return _internal_id();
}
inline void WorkflowResult::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowResult.id)
}
inline std::string* WorkflowResult::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResult.id)
  return _internal_mutable_id();
}
inline const std::string& WorkflowResult::_internal_id() const {
  return id_.GetNoArena();
}
inline void WorkflowResult::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkflowResult::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.WorkflowResult.id)
}
inline void WorkflowResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.WorkflowResult.id)
}
inline void WorkflowResult::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.WorkflowResult.id)
}
inline std::string* WorkflowResult::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowResult::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowResult.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowResult::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowResult.id)
}

// .clarifai.api.status.Status status = 2;
inline bool WorkflowResult::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool WorkflowResult::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& WorkflowResult::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& WorkflowResult::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* WorkflowResult::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowResult.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* WorkflowResult::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* WorkflowResult::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResult.status)
  return _internal_mutable_status();
}
inline void WorkflowResult::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowResult.status)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool WorkflowResult::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool WorkflowResult::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WorkflowResult::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WorkflowResult::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowResult::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowResult.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowResult::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowResult::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResult.created_at)
  return _internal_mutable_created_at();
}
inline void WorkflowResult::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowResult.created_at)
}

// .clarifai.api.Model model = 4;
inline bool WorkflowResult::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool WorkflowResult::has_model() const {
  return _internal_has_model();
}
inline void WorkflowResult::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::clarifai::api::Model& WorkflowResult::_internal_model() const {
  const ::clarifai::api::Model* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Model*>(
      &::clarifai::api::_Model_default_instance_);
}
inline const ::clarifai::api::Model& WorkflowResult::model() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.model)
  return _internal_model();
}
inline ::clarifai::api::Model* WorkflowResult::release_model() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowResult.model)
  
  ::clarifai::api::Model* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::clarifai::api::Model* WorkflowResult::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Model>(GetArenaNoVirtual());
    model_ = p;
  }
  return model_;
}
inline ::clarifai::api::Model* WorkflowResult::mutable_model() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResult.model)
  return _internal_mutable_model();
}
inline void WorkflowResult::set_allocated_model(::clarifai::api::Model* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowResult.model)
}

// .clarifai.api.Input input = 5;
inline bool WorkflowResult::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool WorkflowResult::has_input() const {
  return _internal_has_input();
}
inline void WorkflowResult::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::clarifai::api::Input& WorkflowResult::_internal_input() const {
  const ::clarifai::api::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Input*>(
      &::clarifai::api::_Input_default_instance_);
}
inline const ::clarifai::api::Input& WorkflowResult::input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.input)
  return _internal_input();
}
inline ::clarifai::api::Input* WorkflowResult::release_input() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowResult.input)
  
  ::clarifai::api::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::clarifai::api::Input* WorkflowResult::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Input>(GetArenaNoVirtual());
    input_ = p;
  }
  return input_;
}
inline ::clarifai::api::Input* WorkflowResult::mutable_input() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResult.input)
  return _internal_mutable_input();
}
inline void WorkflowResult::set_allocated_input(::clarifai::api::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowResult.input)
}

// repeated .clarifai.api.Output outputs = 6;
inline int WorkflowResult::_internal_outputs_size() const {
  return outputs_.size();
}
inline int WorkflowResult::outputs_size() const {
  return _internal_outputs_size();
}
inline void WorkflowResult::clear_outputs() {
  outputs_.Clear();
}
inline ::clarifai::api::Output* WorkflowResult::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowResult.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >*
WorkflowResult::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.WorkflowResult.outputs)
  return &outputs_;
}
inline const ::clarifai::api::Output& WorkflowResult::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::clarifai::api::Output& WorkflowResult::outputs(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.outputs)
  return _internal_outputs(index);
}
inline ::clarifai::api::Output* WorkflowResult::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::clarifai::api::Output* WorkflowResult::add_outputs() {
  // @@protoc_insertion_point(field_add:clarifai.api.WorkflowResult.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::Output >&
WorkflowResult::outputs() const {
  // @@protoc_insertion_point(field_list:clarifai.api.WorkflowResult.outputs)
  return outputs_;
}

// bool suppress_output = 7;
inline void WorkflowResult::clear_suppress_output() {
  suppress_output_ = false;
}
inline bool WorkflowResult::_internal_suppress_output() const {
  return suppress_output_;
}
inline bool WorkflowResult::suppress_output() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowResult.suppress_output)
  return _internal_suppress_output();
}
inline void WorkflowResult::_internal_set_suppress_output(bool value) {
  
  suppress_output_ = value;
}
inline void WorkflowResult::set_suppress_output(bool value) {
  _internal_set_suppress_output(value);
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowResult.suppress_output)
}

// -------------------------------------------------------------------

// WorkflowState

// string id = 1;
inline void WorkflowState::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkflowState::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.WorkflowState.id)
  return _internal_id();
}
inline void WorkflowState::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.WorkflowState.id)
}
inline std::string* WorkflowState::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.WorkflowState.id)
  return _internal_mutable_id();
}
inline const std::string& WorkflowState::_internal_id() const {
  return id_.GetNoArena();
}
inline void WorkflowState::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkflowState::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.WorkflowState.id)
}
inline void WorkflowState::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.WorkflowState.id)
}
inline void WorkflowState::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.WorkflowState.id)
}
inline std::string* WorkflowState::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkflowState::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.WorkflowState.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowState::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.WorkflowState.id)
}

// -------------------------------------------------------------------

// AppDuplication

// string id = 1;
inline void AppDuplication::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AppDuplication::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.id)
  return _internal_id();
}
inline void AppDuplication::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AppDuplication.id)
}
inline std::string* AppDuplication::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.id)
  return _internal_mutable_id();
}
inline const std::string& AppDuplication::_internal_id() const {
  return id_.GetNoArena();
}
inline void AppDuplication::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AppDuplication::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.AppDuplication.id)
}
inline void AppDuplication::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.AppDuplication.id)
}
inline void AppDuplication::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.AppDuplication.id)
}
inline std::string* AppDuplication::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppDuplication::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppDuplication::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.id)
}

// string new_app_id = 2;
inline void AppDuplication::clear_new_app_id() {
  new_app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AppDuplication::new_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.new_app_id)
  return _internal_new_app_id();
}
inline void AppDuplication::set_new_app_id(const std::string& value) {
  _internal_set_new_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AppDuplication.new_app_id)
}
inline std::string* AppDuplication::mutable_new_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.new_app_id)
  return _internal_mutable_new_app_id();
}
inline const std::string& AppDuplication::_internal_new_app_id() const {
  return new_app_id_.GetNoArena();
}
inline void AppDuplication::_internal_set_new_app_id(const std::string& value) {
  
  new_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AppDuplication::set_new_app_id(std::string&& value) {
  
  new_app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.AppDuplication.new_app_id)
}
inline void AppDuplication::set_new_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.AppDuplication.new_app_id)
}
inline void AppDuplication::set_new_app_id(const char* value, size_t size) {
  
  new_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.AppDuplication.new_app_id)
}
inline std::string* AppDuplication::_internal_mutable_new_app_id() {
  
  return new_app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppDuplication::release_new_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.new_app_id)
  
  return new_app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppDuplication::set_allocated_new_app_id(std::string* new_app_id) {
  if (new_app_id != nullptr) {
    
  } else {
    
  }
  new_app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_app_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.new_app_id)
}

// string new_app_name = 3;
inline void AppDuplication::clear_new_app_name() {
  new_app_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AppDuplication::new_app_name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.new_app_name)
  return _internal_new_app_name();
}
inline void AppDuplication::set_new_app_name(const std::string& value) {
  _internal_set_new_app_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AppDuplication.new_app_name)
}
inline std::string* AppDuplication::mutable_new_app_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.new_app_name)
  return _internal_mutable_new_app_name();
}
inline const std::string& AppDuplication::_internal_new_app_name() const {
  return new_app_name_.GetNoArena();
}
inline void AppDuplication::_internal_set_new_app_name(const std::string& value) {
  
  new_app_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AppDuplication::set_new_app_name(std::string&& value) {
  
  new_app_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.AppDuplication.new_app_name)
}
inline void AppDuplication::set_new_app_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_app_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.AppDuplication.new_app_name)
}
inline void AppDuplication::set_new_app_name(const char* value, size_t size) {
  
  new_app_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.AppDuplication.new_app_name)
}
inline std::string* AppDuplication::_internal_mutable_new_app_name() {
  
  return new_app_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppDuplication::release_new_app_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.new_app_name)
  
  return new_app_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppDuplication::set_allocated_new_app_name(std::string* new_app_name) {
  if (new_app_name != nullptr) {
    
  } else {
    
  }
  new_app_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_app_name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.new_app_name)
}

// .clarifai.api.status.Status status = 4;
inline bool AppDuplication::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AppDuplication::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& AppDuplication::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& AppDuplication::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* AppDuplication::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* AppDuplication::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* AppDuplication::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.status)
  return _internal_mutable_status();
}
inline void AppDuplication::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.status)
}

// .google.protobuf.Timestamp created_at = 5;
inline bool AppDuplication::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool AppDuplication::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AppDuplication::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AppDuplication::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.created_at)
  return _internal_mutable_created_at();
}
inline void AppDuplication::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.created_at)
}

// .google.protobuf.Timestamp last_modified_at = 6;
inline bool AppDuplication::_internal_has_last_modified_at() const {
  return this != internal_default_instance() && last_modified_at_ != nullptr;
}
inline bool AppDuplication::has_last_modified_at() const {
  return _internal_has_last_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AppDuplication::_internal_last_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AppDuplication::last_modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.last_modified_at)
  return _internal_last_modified_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::release_last_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.last_modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_modified_at_;
  last_modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::_internal_mutable_last_modified_at() {
  
  if (last_modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    last_modified_at_ = p;
  }
  return last_modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AppDuplication::mutable_last_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.last_modified_at)
  return _internal_mutable_last_modified_at();
}
inline void AppDuplication::set_allocated_last_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* last_modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_modified_at_);
  }
  if (last_modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      last_modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_modified_at, submessage_arena);
    }
    
  } else {
    
  }
  last_modified_at_ = last_modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.last_modified_at)
}

// .clarifai.api.AppDuplicationFilters filter = 7;
inline bool AppDuplication::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool AppDuplication::has_filter() const {
  return _internal_has_filter();
}
inline void AppDuplication::clear_filter() {
  if (GetArenaNoVirtual() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::clarifai::api::AppDuplicationFilters& AppDuplication::_internal_filter() const {
  const ::clarifai::api::AppDuplicationFilters* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::AppDuplicationFilters*>(
      &::clarifai::api::_AppDuplicationFilters_default_instance_);
}
inline const ::clarifai::api::AppDuplicationFilters& AppDuplication::filter() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplication.filter)
  return _internal_filter();
}
inline ::clarifai::api::AppDuplicationFilters* AppDuplication::release_filter() {
  // @@protoc_insertion_point(field_release:clarifai.api.AppDuplication.filter)
  
  ::clarifai::api::AppDuplicationFilters* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::clarifai::api::AppDuplicationFilters* AppDuplication::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::AppDuplicationFilters>(GetArenaNoVirtual());
    filter_ = p;
  }
  return filter_;
}
inline ::clarifai::api::AppDuplicationFilters* AppDuplication::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AppDuplication.filter)
  return _internal_mutable_filter();
}
inline void AppDuplication::set_allocated_filter(::clarifai::api::AppDuplicationFilters* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.AppDuplication.filter)
}

// -------------------------------------------------------------------

// AppDuplicationFilters

// bool copy_inputs = 1;
inline void AppDuplicationFilters::clear_copy_inputs() {
  copy_inputs_ = false;
}
inline bool AppDuplicationFilters::_internal_copy_inputs() const {
  return copy_inputs_;
}
inline bool AppDuplicationFilters::copy_inputs() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplicationFilters.copy_inputs)
  return _internal_copy_inputs();
}
inline void AppDuplicationFilters::_internal_set_copy_inputs(bool value) {
  
  copy_inputs_ = value;
}
inline void AppDuplicationFilters::set_copy_inputs(bool value) {
  _internal_set_copy_inputs(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AppDuplicationFilters.copy_inputs)
}

// bool copy_concepts = 2;
inline void AppDuplicationFilters::clear_copy_concepts() {
  copy_concepts_ = false;
}
inline bool AppDuplicationFilters::_internal_copy_concepts() const {
  return copy_concepts_;
}
inline bool AppDuplicationFilters::copy_concepts() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplicationFilters.copy_concepts)
  return _internal_copy_concepts();
}
inline void AppDuplicationFilters::_internal_set_copy_concepts(bool value) {
  
  copy_concepts_ = value;
}
inline void AppDuplicationFilters::set_copy_concepts(bool value) {
  _internal_set_copy_concepts(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AppDuplicationFilters.copy_concepts)
}

// bool copy_annotations = 3;
inline void AppDuplicationFilters::clear_copy_annotations() {
  copy_annotations_ = false;
}
inline bool AppDuplicationFilters::_internal_copy_annotations() const {
  return copy_annotations_;
}
inline bool AppDuplicationFilters::copy_annotations() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplicationFilters.copy_annotations)
  return _internal_copy_annotations();
}
inline void AppDuplicationFilters::_internal_set_copy_annotations(bool value) {
  
  copy_annotations_ = value;
}
inline void AppDuplicationFilters::set_copy_annotations(bool value) {
  _internal_set_copy_annotations(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AppDuplicationFilters.copy_annotations)
}

// bool copy_models = 4;
inline void AppDuplicationFilters::clear_copy_models() {
  copy_models_ = false;
}
inline bool AppDuplicationFilters::_internal_copy_models() const {
  return copy_models_;
}
inline bool AppDuplicationFilters::copy_models() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplicationFilters.copy_models)
  return _internal_copy_models();
}
inline void AppDuplicationFilters::_internal_set_copy_models(bool value) {
  
  copy_models_ = value;
}
inline void AppDuplicationFilters::set_copy_models(bool value) {
  _internal_set_copy_models(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AppDuplicationFilters.copy_models)
}

// bool copy_workflows = 5;
inline void AppDuplicationFilters::clear_copy_workflows() {
  copy_workflows_ = false;
}
inline bool AppDuplicationFilters::_internal_copy_workflows() const {
  return copy_workflows_;
}
inline bool AppDuplicationFilters::copy_workflows() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AppDuplicationFilters.copy_workflows)
  return _internal_copy_workflows();
}
inline void AppDuplicationFilters::_internal_set_copy_workflows(bool value) {
  
  copy_workflows_ = value;
}
inline void AppDuplicationFilters::set_copy_workflows(bool value) {
  _internal_set_copy_workflows(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AppDuplicationFilters.copy_workflows)
}

// -------------------------------------------------------------------

// Task

// string id = 1;
inline void Task::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.id)
  return _internal_id();
}
inline void Task::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Task.id)
}
inline std::string* Task::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.id)
  return _internal_mutable_id();
}
inline const std::string& Task::_internal_id() const {
  return id_.GetNoArena();
}
inline void Task::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Task.id)
}
inline void Task::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Task.id)
}
inline void Task::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Task.id)
}
inline std::string* Task::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.id)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool Task::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Task::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Task::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Task::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Task::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Task::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Task::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.created_at)
  return _internal_mutable_created_at();
}
inline void Task::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.created_at)
}

// .google.protobuf.Timestamp modified_at = 3;
inline bool Task::_internal_has_modified_at() const {
  return this != internal_default_instance() && modified_at_ != nullptr;
}
inline bool Task::has_modified_at() const {
  return _internal_has_modified_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Task::_internal_modified_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Task::modified_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.modified_at)
  return _internal_modified_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Task::release_modified_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.modified_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_at_;
  modified_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Task::_internal_mutable_modified_at() {
  
  if (modified_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    modified_at_ = p;
  }
  return modified_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Task::mutable_modified_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.modified_at)
  return _internal_mutable_modified_at();
}
inline void Task::set_allocated_modified_at(PROTOBUF_NAMESPACE_ID::Timestamp* modified_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at_);
  }
  if (modified_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_at)->GetArena();
    if (message_arena != submessage_arena) {
      modified_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_at, submessage_arena);
    }
    
  } else {
    
  }
  modified_at_ = modified_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.modified_at)
}

// .clarifai.api.Task.TaskType type = 4;
inline void Task::clear_type() {
  type_ = 0;
}
inline ::clarifai::api::Task_TaskType Task::_internal_type() const {
  return static_cast< ::clarifai::api::Task_TaskType >(type_);
}
inline ::clarifai::api::Task_TaskType Task::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.type)
  return _internal_type();
}
inline void Task::_internal_set_type(::clarifai::api::Task_TaskType value) {
  
  type_ = value;
}
inline void Task::set_type(::clarifai::api::Task_TaskType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Task.type)
}

// string description = 5;
inline void Task::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.description)
  return _internal_description();
}
inline void Task::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Task.description)
}
inline std::string* Task::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.description)
  return _internal_mutable_description();
}
inline const std::string& Task::_internal_description() const {
  return description_.GetNoArena();
}
inline void Task::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Task.description)
}
inline void Task::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Task.description)
}
inline void Task::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Task.description)
}
inline std::string* Task::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.description)
}

// .clarifai.api.TaskWorker worker = 6;
inline bool Task::_internal_has_worker() const {
  return this != internal_default_instance() && worker_ != nullptr;
}
inline bool Task::has_worker() const {
  return _internal_has_worker();
}
inline void Task::clear_worker() {
  if (GetArenaNoVirtual() == nullptr && worker_ != nullptr) {
    delete worker_;
  }
  worker_ = nullptr;
}
inline const ::clarifai::api::TaskWorker& Task::_internal_worker() const {
  const ::clarifai::api::TaskWorker* p = worker_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::TaskWorker*>(
      &::clarifai::api::_TaskWorker_default_instance_);
}
inline const ::clarifai::api::TaskWorker& Task::worker() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.worker)
  return _internal_worker();
}
inline ::clarifai::api::TaskWorker* Task::release_worker() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.worker)
  
  ::clarifai::api::TaskWorker* temp = worker_;
  worker_ = nullptr;
  return temp;
}
inline ::clarifai::api::TaskWorker* Task::_internal_mutable_worker() {
  
  if (worker_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::TaskWorker>(GetArenaNoVirtual());
    worker_ = p;
  }
  return worker_;
}
inline ::clarifai::api::TaskWorker* Task::mutable_worker() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.worker)
  return _internal_mutable_worker();
}
inline void Task::set_allocated_worker(::clarifai::api::TaskWorker* worker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete worker_;
  }
  if (worker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      worker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worker, submessage_arena);
    }
    
  } else {
    
  }
  worker_ = worker;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.worker)
}

// repeated string concept_ids = 7;
inline int Task::_internal_concept_ids_size() const {
  return concept_ids_.size();
}
inline int Task::concept_ids_size() const {
  return _internal_concept_ids_size();
}
inline void Task::clear_concept_ids() {
  concept_ids_.Clear();
}
inline std::string* Task::add_concept_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.Task.concept_ids)
  return _internal_add_concept_ids();
}
inline const std::string& Task::_internal_concept_ids(int index) const {
  return concept_ids_.Get(index);
}
inline const std::string& Task::concept_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.concept_ids)
  return _internal_concept_ids(index);
}
inline std::string* Task::mutable_concept_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.concept_ids)
  return concept_ids_.Mutable(index);
}
inline void Task::set_concept_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Task.concept_ids)
  concept_ids_.Mutable(index)->assign(value);
}
inline void Task::set_concept_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.Task.concept_ids)
  concept_ids_.Mutable(index)->assign(std::move(value));
}
inline void Task::set_concept_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.Task.concept_ids)
}
inline void Task::set_concept_ids(int index, const char* value, size_t size) {
  concept_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Task.concept_ids)
}
inline std::string* Task::_internal_add_concept_ids() {
  return concept_ids_.Add();
}
inline void Task::add_concept_ids(const std::string& value) {
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.Task.concept_ids)
}
inline void Task::add_concept_ids(std::string&& value) {
  concept_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.Task.concept_ids)
}
inline void Task::add_concept_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.Task.concept_ids)
}
inline void Task::add_concept_ids(const char* value, size_t size) {
  concept_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.Task.concept_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Task::concept_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.Task.concept_ids)
  return concept_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Task::mutable_concept_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.Task.concept_ids)
  return &concept_ids_;
}

// .clarifai.api.TaskInputSource input_source = 8;
inline bool Task::_internal_has_input_source() const {
  return this != internal_default_instance() && input_source_ != nullptr;
}
inline bool Task::has_input_source() const {
  return _internal_has_input_source();
}
inline void Task::clear_input_source() {
  if (GetArenaNoVirtual() == nullptr && input_source_ != nullptr) {
    delete input_source_;
  }
  input_source_ = nullptr;
}
inline const ::clarifai::api::TaskInputSource& Task::_internal_input_source() const {
  const ::clarifai::api::TaskInputSource* p = input_source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::TaskInputSource*>(
      &::clarifai::api::_TaskInputSource_default_instance_);
}
inline const ::clarifai::api::TaskInputSource& Task::input_source() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.input_source)
  return _internal_input_source();
}
inline ::clarifai::api::TaskInputSource* Task::release_input_source() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.input_source)
  
  ::clarifai::api::TaskInputSource* temp = input_source_;
  input_source_ = nullptr;
  return temp;
}
inline ::clarifai::api::TaskInputSource* Task::_internal_mutable_input_source() {
  
  if (input_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::TaskInputSource>(GetArenaNoVirtual());
    input_source_ = p;
  }
  return input_source_;
}
inline ::clarifai::api::TaskInputSource* Task::mutable_input_source() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.input_source)
  return _internal_mutable_input_source();
}
inline void Task::set_allocated_input_source(::clarifai::api::TaskInputSource* input_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_source_;
  }
  if (input_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_source, submessage_arena);
    }
    
  } else {
    
  }
  input_source_ = input_source;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.input_source)
}

// uint32 sample_ms = 9;
inline void Task::clear_sample_ms() {
  sample_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::_internal_sample_ms() const {
  return sample_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Task::sample_ms() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.sample_ms)
  return _internal_sample_ms();
}
inline void Task::_internal_set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sample_ms_ = value;
}
inline void Task::set_sample_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_ms(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Task.sample_ms)
}

// .clarifai.api.TaskAIAssistant ai_assistant = 10;
inline bool Task::_internal_has_ai_assistant() const {
  return this != internal_default_instance() && ai_assistant_ != nullptr;
}
inline bool Task::has_ai_assistant() const {
  return _internal_has_ai_assistant();
}
inline void Task::clear_ai_assistant() {
  if (GetArenaNoVirtual() == nullptr && ai_assistant_ != nullptr) {
    delete ai_assistant_;
  }
  ai_assistant_ = nullptr;
}
inline const ::clarifai::api::TaskAIAssistant& Task::_internal_ai_assistant() const {
  const ::clarifai::api::TaskAIAssistant* p = ai_assistant_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::TaskAIAssistant*>(
      &::clarifai::api::_TaskAIAssistant_default_instance_);
}
inline const ::clarifai::api::TaskAIAssistant& Task::ai_assistant() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.ai_assistant)
  return _internal_ai_assistant();
}
inline ::clarifai::api::TaskAIAssistant* Task::release_ai_assistant() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.ai_assistant)
  
  ::clarifai::api::TaskAIAssistant* temp = ai_assistant_;
  ai_assistant_ = nullptr;
  return temp;
}
inline ::clarifai::api::TaskAIAssistant* Task::_internal_mutable_ai_assistant() {
  
  if (ai_assistant_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::TaskAIAssistant>(GetArenaNoVirtual());
    ai_assistant_ = p;
  }
  return ai_assistant_;
}
inline ::clarifai::api::TaskAIAssistant* Task::mutable_ai_assistant() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.ai_assistant)
  return _internal_mutable_ai_assistant();
}
inline void Task::set_allocated_ai_assistant(::clarifai::api::TaskAIAssistant* ai_assistant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ai_assistant_;
  }
  if (ai_assistant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ai_assistant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ai_assistant, submessage_arena);
    }
    
  } else {
    
  }
  ai_assistant_ = ai_assistant;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.ai_assistant)
}

// .clarifai.api.TaskReview review = 11;
inline bool Task::_internal_has_review() const {
  return this != internal_default_instance() && review_ != nullptr;
}
inline bool Task::has_review() const {
  return _internal_has_review();
}
inline void Task::clear_review() {
  if (GetArenaNoVirtual() == nullptr && review_ != nullptr) {
    delete review_;
  }
  review_ = nullptr;
}
inline const ::clarifai::api::TaskReview& Task::_internal_review() const {
  const ::clarifai::api::TaskReview* p = review_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::TaskReview*>(
      &::clarifai::api::_TaskReview_default_instance_);
}
inline const ::clarifai::api::TaskReview& Task::review() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.review)
  return _internal_review();
}
inline ::clarifai::api::TaskReview* Task::release_review() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.review)
  
  ::clarifai::api::TaskReview* temp = review_;
  review_ = nullptr;
  return temp;
}
inline ::clarifai::api::TaskReview* Task::_internal_mutable_review() {
  
  if (review_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::TaskReview>(GetArenaNoVirtual());
    review_ = p;
  }
  return review_;
}
inline ::clarifai::api::TaskReview* Task::mutable_review() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.review)
  return _internal_mutable_review();
}
inline void Task::set_allocated_review(::clarifai::api::TaskReview* review) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete review_;
  }
  if (review) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      review = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, review, submessage_arena);
    }
    
  } else {
    
  }
  review_ = review;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.review)
}

// .clarifai.api.status.Status status = 12;
inline bool Task::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Task::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& Task::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& Task::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* Task::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* Task::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* Task::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.status)
  return _internal_mutable_status();
}
inline void Task::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.status)
}

// string name = 13;
inline void Task::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::name() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.name)
  return _internal_name();
}
inline void Task::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Task.name)
}
inline std::string* Task::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.name)
  return _internal_mutable_name();
}
inline const std::string& Task::_internal_name() const {
  return name_.GetNoArena();
}
inline void Task::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Task.name)
}
inline void Task::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Task.name)
}
inline void Task::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Task.name)
}
inline std::string* Task::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_name() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.name)
}

// .clarifai.api.AiAssistParameters ai_assist_params = 14;
inline bool Task::_internal_has_ai_assist_params() const {
  return this != internal_default_instance() && ai_assist_params_ != nullptr;
}
inline bool Task::has_ai_assist_params() const {
  return _internal_has_ai_assist_params();
}
inline void Task::clear_ai_assist_params() {
  if (GetArenaNoVirtual() == nullptr && ai_assist_params_ != nullptr) {
    delete ai_assist_params_;
  }
  ai_assist_params_ = nullptr;
}
inline const ::clarifai::api::AiAssistParameters& Task::_internal_ai_assist_params() const {
  const ::clarifai::api::AiAssistParameters* p = ai_assist_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::AiAssistParameters*>(
      &::clarifai::api::_AiAssistParameters_default_instance_);
}
inline const ::clarifai::api::AiAssistParameters& Task::ai_assist_params() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.ai_assist_params)
  return _internal_ai_assist_params();
}
inline ::clarifai::api::AiAssistParameters* Task::release_ai_assist_params() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.ai_assist_params)
  
  ::clarifai::api::AiAssistParameters* temp = ai_assist_params_;
  ai_assist_params_ = nullptr;
  return temp;
}
inline ::clarifai::api::AiAssistParameters* Task::_internal_mutable_ai_assist_params() {
  
  if (ai_assist_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::AiAssistParameters>(GetArenaNoVirtual());
    ai_assist_params_ = p;
  }
  return ai_assist_params_;
}
inline ::clarifai::api::AiAssistParameters* Task::mutable_ai_assist_params() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.ai_assist_params)
  return _internal_mutable_ai_assist_params();
}
inline void Task::set_allocated_ai_assist_params(::clarifai::api::AiAssistParameters* ai_assist_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ai_assist_params_;
  }
  if (ai_assist_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ai_assist_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ai_assist_params, submessage_arena);
    }
    
  } else {
    
  }
  ai_assist_params_ = ai_assist_params;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.ai_assist_params)
}

// .clarifai.api.Visibility visibility = 15;
inline bool Task::_internal_has_visibility() const {
  return this != internal_default_instance() && visibility_ != nullptr;
}
inline bool Task::has_visibility() const {
  return _internal_has_visibility();
}
inline void Task::clear_visibility() {
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
}
inline const ::clarifai::api::Visibility& Task::_internal_visibility() const {
  const ::clarifai::api::Visibility* p = visibility_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::Visibility*>(
      &::clarifai::api::_Visibility_default_instance_);
}
inline const ::clarifai::api::Visibility& Task::visibility() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.visibility)
  return _internal_visibility();
}
inline ::clarifai::api::Visibility* Task::release_visibility() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.visibility)
  
  ::clarifai::api::Visibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::clarifai::api::Visibility* Task::_internal_mutable_visibility() {
  
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::Visibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  return visibility_;
}
inline ::clarifai::api::Visibility* Task::mutable_visibility() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.visibility)
  return _internal_mutable_visibility();
}
inline void Task::set_allocated_visibility(::clarifai::api::Visibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    
  } else {
    
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.visibility)
}

// string app_id = 16;
inline void Task::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.app_id)
  return _internal_app_id();
}
inline void Task::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Task.app_id)
}
inline std::string* Task::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& Task::_internal_app_id() const {
  return app_id_.GetNoArena();
}
inline void Task::_internal_set_app_id(const std::string& value) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_app_id(std::string&& value) {
  
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Task.app_id)
}
inline void Task::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Task.app_id)
}
inline void Task::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Task.app_id)
}
inline std::string* Task::_internal_mutable_app_id() {
  
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.app_id)
  
  return app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.app_id)
}

// string user_id = 17;
inline void Task::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Task.user_id)
  return _internal_user_id();
}
inline void Task::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Task.user_id)
}
inline std::string* Task::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Task.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Task::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void Task::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Task.user_id)
}
inline void Task::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Task.user_id)
}
inline void Task::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Task.user_id)
}
inline std::string* Task::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Task.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Task.user_id)
}

// -------------------------------------------------------------------

// AiAssistParameters

// float min_threshold = 1;
inline void AiAssistParameters::clear_min_threshold() {
  min_threshold_ = 0;
}
inline float AiAssistParameters::_internal_min_threshold() const {
  return min_threshold_;
}
inline float AiAssistParameters::min_threshold() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AiAssistParameters.min_threshold)
  return _internal_min_threshold();
}
inline void AiAssistParameters::_internal_set_min_threshold(float value) {
  
  min_threshold_ = value;
}
inline void AiAssistParameters::set_min_threshold(float value) {
  _internal_set_min_threshold(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AiAssistParameters.min_threshold)
}

// float max_threshold = 2;
inline void AiAssistParameters::clear_max_threshold() {
  max_threshold_ = 0;
}
inline float AiAssistParameters::_internal_max_threshold() const {
  return max_threshold_;
}
inline float AiAssistParameters::max_threshold() const {
  // @@protoc_insertion_point(field_get:clarifai.api.AiAssistParameters.max_threshold)
  return _internal_max_threshold();
}
inline void AiAssistParameters::_internal_set_max_threshold(float value) {
  
  max_threshold_ = value;
}
inline void AiAssistParameters::set_max_threshold(float value) {
  _internal_set_max_threshold(value);
  // @@protoc_insertion_point(field_set:clarifai.api.AiAssistParameters.max_threshold)
}

// repeated string concept_relation_ids = 3;
inline int AiAssistParameters::_internal_concept_relation_ids_size() const {
  return concept_relation_ids_.size();
}
inline int AiAssistParameters::concept_relation_ids_size() const {
  return _internal_concept_relation_ids_size();
}
inline void AiAssistParameters::clear_concept_relation_ids() {
  concept_relation_ids_.Clear();
}
inline std::string* AiAssistParameters::add_concept_relation_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.AiAssistParameters.concept_relation_ids)
  return _internal_add_concept_relation_ids();
}
inline const std::string& AiAssistParameters::_internal_concept_relation_ids(int index) const {
  return concept_relation_ids_.Get(index);
}
inline const std::string& AiAssistParameters::concept_relation_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.AiAssistParameters.concept_relation_ids)
  return _internal_concept_relation_ids(index);
}
inline std::string* AiAssistParameters::mutable_concept_relation_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.AiAssistParameters.concept_relation_ids)
  return concept_relation_ids_.Mutable(index);
}
inline void AiAssistParameters::set_concept_relation_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.AiAssistParameters.concept_relation_ids)
  concept_relation_ids_.Mutable(index)->assign(value);
}
inline void AiAssistParameters::set_concept_relation_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.AiAssistParameters.concept_relation_ids)
  concept_relation_ids_.Mutable(index)->assign(std::move(value));
}
inline void AiAssistParameters::set_concept_relation_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_relation_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.AiAssistParameters.concept_relation_ids)
}
inline void AiAssistParameters::set_concept_relation_ids(int index, const char* value, size_t size) {
  concept_relation_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.AiAssistParameters.concept_relation_ids)
}
inline std::string* AiAssistParameters::_internal_add_concept_relation_ids() {
  return concept_relation_ids_.Add();
}
inline void AiAssistParameters::add_concept_relation_ids(const std::string& value) {
  concept_relation_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.AiAssistParameters.concept_relation_ids)
}
inline void AiAssistParameters::add_concept_relation_ids(std::string&& value) {
  concept_relation_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.AiAssistParameters.concept_relation_ids)
}
inline void AiAssistParameters::add_concept_relation_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  concept_relation_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.AiAssistParameters.concept_relation_ids)
}
inline void AiAssistParameters::add_concept_relation_ids(const char* value, size_t size) {
  concept_relation_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.AiAssistParameters.concept_relation_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AiAssistParameters::concept_relation_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.AiAssistParameters.concept_relation_ids)
  return concept_relation_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AiAssistParameters::mutable_concept_relation_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.AiAssistParameters.concept_relation_ids)
  return &concept_relation_ids_;
}

// -------------------------------------------------------------------

// TaskWorker

// .clarifai.api.TaskWorker.TaskWorkerStrategy strategy = 1;
inline void TaskWorker::clear_strategy() {
  strategy_ = 0;
}
inline ::clarifai::api::TaskWorker_TaskWorkerStrategy TaskWorker::_internal_strategy() const {
  return static_cast< ::clarifai::api::TaskWorker_TaskWorkerStrategy >(strategy_);
}
inline ::clarifai::api::TaskWorker_TaskWorkerStrategy TaskWorker::strategy() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskWorker.strategy)
  return _internal_strategy();
}
inline void TaskWorker::_internal_set_strategy(::clarifai::api::TaskWorker_TaskWorkerStrategy value) {
  
  strategy_ = value;
}
inline void TaskWorker::set_strategy(::clarifai::api::TaskWorker_TaskWorkerStrategy value) {
  _internal_set_strategy(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskWorker.strategy)
}

// repeated string user_ids = 2;
inline int TaskWorker::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int TaskWorker::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void TaskWorker::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* TaskWorker::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.TaskWorker.user_ids)
  return _internal_add_user_ids();
}
inline const std::string& TaskWorker::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& TaskWorker::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskWorker.user_ids)
  return _internal_user_ids(index);
}
inline std::string* TaskWorker::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TaskWorker.user_ids)
  return user_ids_.Mutable(index);
}
inline void TaskWorker::set_user_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.TaskWorker.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void TaskWorker::set_user_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.TaskWorker.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
inline void TaskWorker::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.TaskWorker.user_ids)
}
inline void TaskWorker::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.TaskWorker.user_ids)
}
inline std::string* TaskWorker::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void TaskWorker::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.TaskWorker.user_ids)
}
inline void TaskWorker::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.TaskWorker.user_ids)
}
inline void TaskWorker::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.TaskWorker.user_ids)
}
inline void TaskWorker::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.TaskWorker.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TaskWorker::user_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.TaskWorker.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TaskWorker::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.TaskWorker.user_ids)
  return &user_ids_;
}

// .clarifai.api.TaskWorkerPartitionedStrategyInfo partitioned_strategy_info = 3;
inline bool TaskWorker::_internal_has_partitioned_strategy_info() const {
  return strategy_info_case() == kPartitionedStrategyInfo;
}
inline bool TaskWorker::has_partitioned_strategy_info() const {
  return _internal_has_partitioned_strategy_info();
}
inline void TaskWorker::set_has_partitioned_strategy_info() {
  _oneof_case_[0] = kPartitionedStrategyInfo;
}
inline void TaskWorker::clear_partitioned_strategy_info() {
  if (_internal_has_partitioned_strategy_info()) {
    delete strategy_info_.partitioned_strategy_info_;
    clear_has_strategy_info();
  }
}
inline ::clarifai::api::TaskWorkerPartitionedStrategyInfo* TaskWorker::release_partitioned_strategy_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.TaskWorker.partitioned_strategy_info)
  if (_internal_has_partitioned_strategy_info()) {
    clear_has_strategy_info();
      ::clarifai::api::TaskWorkerPartitionedStrategyInfo* temp = strategy_info_.partitioned_strategy_info_;
    strategy_info_.partitioned_strategy_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::api::TaskWorkerPartitionedStrategyInfo& TaskWorker::_internal_partitioned_strategy_info() const {
  return _internal_has_partitioned_strategy_info()
      ? *strategy_info_.partitioned_strategy_info_
      : *reinterpret_cast< ::clarifai::api::TaskWorkerPartitionedStrategyInfo*>(&::clarifai::api::_TaskWorkerPartitionedStrategyInfo_default_instance_);
}
inline const ::clarifai::api::TaskWorkerPartitionedStrategyInfo& TaskWorker::partitioned_strategy_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskWorker.partitioned_strategy_info)
  return _internal_partitioned_strategy_info();
}
inline ::clarifai::api::TaskWorkerPartitionedStrategyInfo* TaskWorker::_internal_mutable_partitioned_strategy_info() {
  if (!_internal_has_partitioned_strategy_info()) {
    clear_strategy_info();
    set_has_partitioned_strategy_info();
    strategy_info_.partitioned_strategy_info_ = CreateMaybeMessage< ::clarifai::api::TaskWorkerPartitionedStrategyInfo >(
        GetArenaNoVirtual());
  }
  return strategy_info_.partitioned_strategy_info_;
}
inline ::clarifai::api::TaskWorkerPartitionedStrategyInfo* TaskWorker::mutable_partitioned_strategy_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TaskWorker.partitioned_strategy_info)
  return _internal_mutable_partitioned_strategy_info();
}

inline bool TaskWorker::has_strategy_info() const {
  return strategy_info_case() != STRATEGY_INFO_NOT_SET;
}
inline void TaskWorker::clear_has_strategy_info() {
  _oneof_case_[0] = STRATEGY_INFO_NOT_SET;
}
inline TaskWorker::StrategyInfoCase TaskWorker::strategy_info_case() const {
  return TaskWorker::StrategyInfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TaskWorkerPartitionedStrategyInfo

// .clarifai.api.TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy type = 1;
inline void TaskWorkerPartitionedStrategyInfo::clear_type() {
  type_ = 0;
}
inline ::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::_internal_type() const {
  return static_cast< ::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy >(type_);
}
inline ::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy TaskWorkerPartitionedStrategyInfo::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskWorkerPartitionedStrategyInfo.type)
  return _internal_type();
}
inline void TaskWorkerPartitionedStrategyInfo::_internal_set_type(::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy value) {
  
  type_ = value;
}
inline void TaskWorkerPartitionedStrategyInfo::set_type(::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskWorkerPartitionedStrategyInfo.type)
}

// int32 workers_per_input = 2;
inline void TaskWorkerPartitionedStrategyInfo::clear_workers_per_input() {
  workers_per_input_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskWorkerPartitionedStrategyInfo::_internal_workers_per_input() const {
  return workers_per_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskWorkerPartitionedStrategyInfo::workers_per_input() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskWorkerPartitionedStrategyInfo.workers_per_input)
  return _internal_workers_per_input();
}
inline void TaskWorkerPartitionedStrategyInfo::_internal_set_workers_per_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  workers_per_input_ = value;
}
inline void TaskWorkerPartitionedStrategyInfo::set_workers_per_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_workers_per_input(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskWorkerPartitionedStrategyInfo.workers_per_input)
}

// .google.protobuf.Struct weights = 3;
inline bool TaskWorkerPartitionedStrategyInfo::_internal_has_weights() const {
  return this != internal_default_instance() && weights_ != nullptr;
}
inline bool TaskWorkerPartitionedStrategyInfo::has_weights() const {
  return _internal_has_weights();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& TaskWorkerPartitionedStrategyInfo::_internal_weights() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = weights_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& TaskWorkerPartitionedStrategyInfo::weights() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskWorkerPartitionedStrategyInfo.weights)
  return _internal_weights();
}
inline PROTOBUF_NAMESPACE_ID::Struct* TaskWorkerPartitionedStrategyInfo::release_weights() {
  // @@protoc_insertion_point(field_release:clarifai.api.TaskWorkerPartitionedStrategyInfo.weights)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = weights_;
  weights_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* TaskWorkerPartitionedStrategyInfo::_internal_mutable_weights() {
  
  if (weights_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    weights_ = p;
  }
  return weights_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* TaskWorkerPartitionedStrategyInfo::mutable_weights() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TaskWorkerPartitionedStrategyInfo.weights)
  return _internal_mutable_weights();
}
inline void TaskWorkerPartitionedStrategyInfo::set_allocated_weights(PROTOBUF_NAMESPACE_ID::Struct* weights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(weights_);
  }
  if (weights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weights)->GetArena();
    if (message_arena != submessage_arena) {
      weights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weights, submessage_arena);
    }
    
  } else {
    
  }
  weights_ = weights;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskWorkerPartitionedStrategyInfo.weights)
}

// -------------------------------------------------------------------

// TaskInputSource

// .clarifai.api.TaskInputSource.TaskInputSourceType type = 1;
inline void TaskInputSource::clear_type() {
  type_ = 0;
}
inline ::clarifai::api::TaskInputSource_TaskInputSourceType TaskInputSource::_internal_type() const {
  return static_cast< ::clarifai::api::TaskInputSource_TaskInputSourceType >(type_);
}
inline ::clarifai::api::TaskInputSource_TaskInputSourceType TaskInputSource::type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskInputSource.type)
  return _internal_type();
}
inline void TaskInputSource::_internal_set_type(::clarifai::api::TaskInputSource_TaskInputSourceType value) {
  
  type_ = value;
}
inline void TaskInputSource::set_type(::clarifai::api::TaskInputSource_TaskInputSourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskInputSource.type)
}

// string id = 2;
inline void TaskInputSource::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskInputSource::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskInputSource.id)
  return _internal_id();
}
inline void TaskInputSource::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskInputSource.id)
}
inline std::string* TaskInputSource::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TaskInputSource.id)
  return _internal_mutable_id();
}
inline const std::string& TaskInputSource::_internal_id() const {
  return id_.GetNoArena();
}
inline void TaskInputSource::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskInputSource::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.TaskInputSource.id)
}
inline void TaskInputSource::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.TaskInputSource.id)
}
inline void TaskInputSource::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.TaskInputSource.id)
}
inline std::string* TaskInputSource::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskInputSource::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.TaskInputSource.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInputSource::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskInputSource.id)
}

// -------------------------------------------------------------------

// TaskReview

// .clarifai.api.TaskReview.TaskReviewStrategy strategy = 1;
inline void TaskReview::clear_strategy() {
  strategy_ = 0;
}
inline ::clarifai::api::TaskReview_TaskReviewStrategy TaskReview::_internal_strategy() const {
  return static_cast< ::clarifai::api::TaskReview_TaskReviewStrategy >(strategy_);
}
inline ::clarifai::api::TaskReview_TaskReviewStrategy TaskReview::strategy() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskReview.strategy)
  return _internal_strategy();
}
inline void TaskReview::_internal_set_strategy(::clarifai::api::TaskReview_TaskReviewStrategy value) {
  
  strategy_ = value;
}
inline void TaskReview::set_strategy(::clarifai::api::TaskReview_TaskReviewStrategy value) {
  _internal_set_strategy(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskReview.strategy)
}

// repeated string user_ids = 2;
inline int TaskReview::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int TaskReview::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void TaskReview::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* TaskReview::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.TaskReview.user_ids)
  return _internal_add_user_ids();
}
inline const std::string& TaskReview::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& TaskReview::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskReview.user_ids)
  return _internal_user_ids(index);
}
inline std::string* TaskReview::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TaskReview.user_ids)
  return user_ids_.Mutable(index);
}
inline void TaskReview::set_user_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.TaskReview.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void TaskReview::set_user_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.TaskReview.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
inline void TaskReview::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.TaskReview.user_ids)
}
inline void TaskReview::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.TaskReview.user_ids)
}
inline std::string* TaskReview::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void TaskReview::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.TaskReview.user_ids)
}
inline void TaskReview::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.TaskReview.user_ids)
}
inline void TaskReview::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.TaskReview.user_ids)
}
inline void TaskReview::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.TaskReview.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TaskReview::user_ids() const {
  // @@protoc_insertion_point(field_list:clarifai.api.TaskReview.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TaskReview::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.TaskReview.user_ids)
  return &user_ids_;
}

// .clarifai.api.TaskReviewManualStrategyInfo manual_strategy_info = 3;
inline bool TaskReview::_internal_has_manual_strategy_info() const {
  return strategy_info_case() == kManualStrategyInfo;
}
inline bool TaskReview::has_manual_strategy_info() const {
  return _internal_has_manual_strategy_info();
}
inline void TaskReview::set_has_manual_strategy_info() {
  _oneof_case_[0] = kManualStrategyInfo;
}
inline void TaskReview::clear_manual_strategy_info() {
  if (_internal_has_manual_strategy_info()) {
    delete strategy_info_.manual_strategy_info_;
    clear_has_strategy_info();
  }
}
inline ::clarifai::api::TaskReviewManualStrategyInfo* TaskReview::release_manual_strategy_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.TaskReview.manual_strategy_info)
  if (_internal_has_manual_strategy_info()) {
    clear_has_strategy_info();
      ::clarifai::api::TaskReviewManualStrategyInfo* temp = strategy_info_.manual_strategy_info_;
    strategy_info_.manual_strategy_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::api::TaskReviewManualStrategyInfo& TaskReview::_internal_manual_strategy_info() const {
  return _internal_has_manual_strategy_info()
      ? *strategy_info_.manual_strategy_info_
      : *reinterpret_cast< ::clarifai::api::TaskReviewManualStrategyInfo*>(&::clarifai::api::_TaskReviewManualStrategyInfo_default_instance_);
}
inline const ::clarifai::api::TaskReviewManualStrategyInfo& TaskReview::manual_strategy_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskReview.manual_strategy_info)
  return _internal_manual_strategy_info();
}
inline ::clarifai::api::TaskReviewManualStrategyInfo* TaskReview::_internal_mutable_manual_strategy_info() {
  if (!_internal_has_manual_strategy_info()) {
    clear_strategy_info();
    set_has_manual_strategy_info();
    strategy_info_.manual_strategy_info_ = CreateMaybeMessage< ::clarifai::api::TaskReviewManualStrategyInfo >(
        GetArenaNoVirtual());
  }
  return strategy_info_.manual_strategy_info_;
}
inline ::clarifai::api::TaskReviewManualStrategyInfo* TaskReview::mutable_manual_strategy_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TaskReview.manual_strategy_info)
  return _internal_mutable_manual_strategy_info();
}

// .clarifai.api.TaskReviewConsensusStrategyInfo consensus_strategy_info = 4;
inline bool TaskReview::_internal_has_consensus_strategy_info() const {
  return strategy_info_case() == kConsensusStrategyInfo;
}
inline bool TaskReview::has_consensus_strategy_info() const {
  return _internal_has_consensus_strategy_info();
}
inline void TaskReview::set_has_consensus_strategy_info() {
  _oneof_case_[0] = kConsensusStrategyInfo;
}
inline void TaskReview::clear_consensus_strategy_info() {
  if (_internal_has_consensus_strategy_info()) {
    delete strategy_info_.consensus_strategy_info_;
    clear_has_strategy_info();
  }
}
inline ::clarifai::api::TaskReviewConsensusStrategyInfo* TaskReview::release_consensus_strategy_info() {
  // @@protoc_insertion_point(field_release:clarifai.api.TaskReview.consensus_strategy_info)
  if (_internal_has_consensus_strategy_info()) {
    clear_has_strategy_info();
      ::clarifai::api::TaskReviewConsensusStrategyInfo* temp = strategy_info_.consensus_strategy_info_;
    strategy_info_.consensus_strategy_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clarifai::api::TaskReviewConsensusStrategyInfo& TaskReview::_internal_consensus_strategy_info() const {
  return _internal_has_consensus_strategy_info()
      ? *strategy_info_.consensus_strategy_info_
      : *reinterpret_cast< ::clarifai::api::TaskReviewConsensusStrategyInfo*>(&::clarifai::api::_TaskReviewConsensusStrategyInfo_default_instance_);
}
inline const ::clarifai::api::TaskReviewConsensusStrategyInfo& TaskReview::consensus_strategy_info() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskReview.consensus_strategy_info)
  return _internal_consensus_strategy_info();
}
inline ::clarifai::api::TaskReviewConsensusStrategyInfo* TaskReview::_internal_mutable_consensus_strategy_info() {
  if (!_internal_has_consensus_strategy_info()) {
    clear_strategy_info();
    set_has_consensus_strategy_info();
    strategy_info_.consensus_strategy_info_ = CreateMaybeMessage< ::clarifai::api::TaskReviewConsensusStrategyInfo >(
        GetArenaNoVirtual());
  }
  return strategy_info_.consensus_strategy_info_;
}
inline ::clarifai::api::TaskReviewConsensusStrategyInfo* TaskReview::mutable_consensus_strategy_info() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TaskReview.consensus_strategy_info)
  return _internal_mutable_consensus_strategy_info();
}

inline bool TaskReview::has_strategy_info() const {
  return strategy_info_case() != STRATEGY_INFO_NOT_SET;
}
inline void TaskReview::clear_has_strategy_info() {
  _oneof_case_[0] = STRATEGY_INFO_NOT_SET;
}
inline TaskReview::StrategyInfoCase TaskReview::strategy_info_case() const {
  return TaskReview::StrategyInfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TaskReviewManualStrategyInfo

// float sample_percentage = 1;
inline void TaskReviewManualStrategyInfo::clear_sample_percentage() {
  sample_percentage_ = 0;
}
inline float TaskReviewManualStrategyInfo::_internal_sample_percentage() const {
  return sample_percentage_;
}
inline float TaskReviewManualStrategyInfo::sample_percentage() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskReviewManualStrategyInfo.sample_percentage)
  return _internal_sample_percentage();
}
inline void TaskReviewManualStrategyInfo::_internal_set_sample_percentage(float value) {
  
  sample_percentage_ = value;
}
inline void TaskReviewManualStrategyInfo::set_sample_percentage(float value) {
  _internal_set_sample_percentage(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskReviewManualStrategyInfo.sample_percentage)
}

// -------------------------------------------------------------------

// TaskReviewConsensusStrategyInfo

// uint32 approval_threshold = 2;
inline void TaskReviewConsensusStrategyInfo::clear_approval_threshold() {
  approval_threshold_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskReviewConsensusStrategyInfo::_internal_approval_threshold() const {
  return approval_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskReviewConsensusStrategyInfo::approval_threshold() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskReviewConsensusStrategyInfo.approval_threshold)
  return _internal_approval_threshold();
}
inline void TaskReviewConsensusStrategyInfo::_internal_set_approval_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  approval_threshold_ = value;
}
inline void TaskReviewConsensusStrategyInfo::set_approval_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_approval_threshold(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskReviewConsensusStrategyInfo.approval_threshold)
}

// -------------------------------------------------------------------

// TaskAIAssistant

// string workflow_id = 1;
inline void TaskAIAssistant::clear_workflow_id() {
  workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskAIAssistant::workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskAIAssistant.workflow_id)
  return _internal_workflow_id();
}
inline void TaskAIAssistant::set_workflow_id(const std::string& value) {
  _internal_set_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskAIAssistant.workflow_id)
}
inline std::string* TaskAIAssistant::mutable_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TaskAIAssistant.workflow_id)
  return _internal_mutable_workflow_id();
}
inline const std::string& TaskAIAssistant::_internal_workflow_id() const {
  return workflow_id_.GetNoArena();
}
inline void TaskAIAssistant::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskAIAssistant::set_workflow_id(std::string&& value) {
  
  workflow_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.TaskAIAssistant.workflow_id)
}
inline void TaskAIAssistant::set_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.TaskAIAssistant.workflow_id)
}
inline void TaskAIAssistant::set_workflow_id(const char* value, size_t size) {
  
  workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.TaskAIAssistant.workflow_id)
}
inline std::string* TaskAIAssistant::_internal_mutable_workflow_id() {
  
  return workflow_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskAIAssistant::release_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.TaskAIAssistant.workflow_id)
  
  return workflow_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskAIAssistant::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskAIAssistant.workflow_id)
}

// -------------------------------------------------------------------

// TaskStatusCountPerUser

// string user_id = 1;
inline void TaskStatusCountPerUser::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskStatusCountPerUser::user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskStatusCountPerUser.user_id)
  return _internal_user_id();
}
inline void TaskStatusCountPerUser::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskStatusCountPerUser.user_id)
}
inline std::string* TaskStatusCountPerUser::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.TaskStatusCountPerUser.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TaskStatusCountPerUser::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void TaskStatusCountPerUser::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskStatusCountPerUser::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.TaskStatusCountPerUser.user_id)
}
inline void TaskStatusCountPerUser::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.TaskStatusCountPerUser.user_id)
}
inline void TaskStatusCountPerUser::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.TaskStatusCountPerUser.user_id)
}
inline std::string* TaskStatusCountPerUser::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskStatusCountPerUser::release_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.TaskStatusCountPerUser.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskStatusCountPerUser::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.TaskStatusCountPerUser.user_id)
}

// uint32 pending = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void TaskStatusCountPerUser::clear_pending() {
  pending_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStatusCountPerUser::_internal_pending() const {
  return pending_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStatusCountPerUser::pending() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskStatusCountPerUser.pending)
  return _internal_pending();
}
inline void TaskStatusCountPerUser::_internal_set_pending(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pending_ = value;
}
inline void TaskStatusCountPerUser::set_pending(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pending(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskStatusCountPerUser.pending)
}

// uint32 awaiting_review = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void TaskStatusCountPerUser::clear_awaiting_review() {
  awaiting_review_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStatusCountPerUser::_internal_awaiting_review() const {
  return awaiting_review_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStatusCountPerUser::awaiting_review() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskStatusCountPerUser.awaiting_review)
  return _internal_awaiting_review();
}
inline void TaskStatusCountPerUser::_internal_set_awaiting_review(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  awaiting_review_ = value;
}
inline void TaskStatusCountPerUser::set_awaiting_review(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_awaiting_review(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskStatusCountPerUser.awaiting_review)
}

// uint32 success = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void TaskStatusCountPerUser::clear_success() {
  success_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStatusCountPerUser::_internal_success() const {
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStatusCountPerUser::success() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskStatusCountPerUser.success)
  return _internal_success();
}
inline void TaskStatusCountPerUser::_internal_set_success(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  success_ = value;
}
inline void TaskStatusCountPerUser::set_success(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskStatusCountPerUser.success)
}

// uint32 review_denied = 5 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void TaskStatusCountPerUser::clear_review_denied() {
  review_denied_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStatusCountPerUser::_internal_review_denied() const {
  return review_denied_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStatusCountPerUser::review_denied() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskStatusCountPerUser.review_denied)
  return _internal_review_denied();
}
inline void TaskStatusCountPerUser::_internal_set_review_denied(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  review_denied_ = value;
}
inline void TaskStatusCountPerUser::set_review_denied(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_review_denied(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskStatusCountPerUser.review_denied)
}

// uint32 awaiting_consensus_review = 6 [(.clarifai.api.utils.cl_show_if_empty) = true];
inline void TaskStatusCountPerUser::clear_awaiting_consensus_review() {
  awaiting_consensus_review_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStatusCountPerUser::_internal_awaiting_consensus_review() const {
  return awaiting_consensus_review_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TaskStatusCountPerUser::awaiting_consensus_review() const {
  // @@protoc_insertion_point(field_get:clarifai.api.TaskStatusCountPerUser.awaiting_consensus_review)
  return _internal_awaiting_consensus_review();
}
inline void TaskStatusCountPerUser::_internal_set_awaiting_consensus_review(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  awaiting_consensus_review_ = value;
}
inline void TaskStatusCountPerUser::set_awaiting_consensus_review(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_awaiting_consensus_review(value);
  // @@protoc_insertion_point(field_set:clarifai.api.TaskStatusCountPerUser.awaiting_consensus_review)
}

// -------------------------------------------------------------------

// Collector

// string id = 1;
inline void Collector::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Collector::id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.id)
  return _internal_id();
}
inline void Collector::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Collector.id)
}
inline std::string* Collector::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.id)
  return _internal_mutable_id();
}
inline const std::string& Collector::_internal_id() const {
  return id_.GetNoArena();
}
inline void Collector::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Collector::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Collector.id)
}
inline void Collector::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collector.id)
}
inline void Collector::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collector.id)
}
inline std::string* Collector::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Collector::release_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Collector::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.id)
}

// string description = 2;
inline void Collector::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Collector::description() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.description)
  return _internal_description();
}
inline void Collector::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Collector.description)
}
inline std::string* Collector::mutable_description() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.description)
  return _internal_mutable_description();
}
inline const std::string& Collector::_internal_description() const {
  return description_.GetNoArena();
}
inline void Collector::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Collector::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Collector.description)
}
inline void Collector::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collector.description)
}
inline void Collector::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collector.description)
}
inline std::string* Collector::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Collector::release_description() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Collector::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.description)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool Collector::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Collector::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collector::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collector::created_at() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.created_at)
  return _internal_created_at();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collector::release_created_at() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collector::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collector::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.created_at)
  return _internal_mutable_created_at();
}
inline void Collector::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.created_at)
}

// string pre_queue_workflow_id = 4;
inline void Collector::clear_pre_queue_workflow_id() {
  pre_queue_workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Collector::pre_queue_workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.pre_queue_workflow_id)
  return _internal_pre_queue_workflow_id();
}
inline void Collector::set_pre_queue_workflow_id(const std::string& value) {
  _internal_set_pre_queue_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Collector.pre_queue_workflow_id)
}
inline std::string* Collector::mutable_pre_queue_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.pre_queue_workflow_id)
  return _internal_mutable_pre_queue_workflow_id();
}
inline const std::string& Collector::_internal_pre_queue_workflow_id() const {
  return pre_queue_workflow_id_.GetNoArena();
}
inline void Collector::_internal_set_pre_queue_workflow_id(const std::string& value) {
  
  pre_queue_workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Collector::set_pre_queue_workflow_id(std::string&& value) {
  
  pre_queue_workflow_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Collector.pre_queue_workflow_id)
}
inline void Collector::set_pre_queue_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pre_queue_workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collector.pre_queue_workflow_id)
}
inline void Collector::set_pre_queue_workflow_id(const char* value, size_t size) {
  
  pre_queue_workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collector.pre_queue_workflow_id)
}
inline std::string* Collector::_internal_mutable_pre_queue_workflow_id() {
  
  return pre_queue_workflow_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Collector::release_pre_queue_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.pre_queue_workflow_id)
  
  return pre_queue_workflow_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Collector::set_allocated_pre_queue_workflow_id(std::string* pre_queue_workflow_id) {
  if (pre_queue_workflow_id != nullptr) {
    
  } else {
    
  }
  pre_queue_workflow_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre_queue_workflow_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.pre_queue_workflow_id)
}

// string post_queue_workflow_id = 5;
inline void Collector::clear_post_queue_workflow_id() {
  post_queue_workflow_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Collector::post_queue_workflow_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.post_queue_workflow_id)
  return _internal_post_queue_workflow_id();
}
inline void Collector::set_post_queue_workflow_id(const std::string& value) {
  _internal_set_post_queue_workflow_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Collector.post_queue_workflow_id)
}
inline std::string* Collector::mutable_post_queue_workflow_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.post_queue_workflow_id)
  return _internal_mutable_post_queue_workflow_id();
}
inline const std::string& Collector::_internal_post_queue_workflow_id() const {
  return post_queue_workflow_id_.GetNoArena();
}
inline void Collector::_internal_set_post_queue_workflow_id(const std::string& value) {
  
  post_queue_workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Collector::set_post_queue_workflow_id(std::string&& value) {
  
  post_queue_workflow_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.Collector.post_queue_workflow_id)
}
inline void Collector::set_post_queue_workflow_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_queue_workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.Collector.post_queue_workflow_id)
}
inline void Collector::set_post_queue_workflow_id(const char* value, size_t size) {
  
  post_queue_workflow_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.Collector.post_queue_workflow_id)
}
inline std::string* Collector::_internal_mutable_post_queue_workflow_id() {
  
  return post_queue_workflow_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Collector::release_post_queue_workflow_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.post_queue_workflow_id)
  
  return post_queue_workflow_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Collector::set_allocated_post_queue_workflow_id(std::string* post_queue_workflow_id) {
  if (post_queue_workflow_id != nullptr) {
    
  } else {
    
  }
  post_queue_workflow_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_queue_workflow_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.post_queue_workflow_id)
}

// .clarifai.api.CollectorSource collector_source = 6;
inline bool Collector::_internal_has_collector_source() const {
  return this != internal_default_instance() && collector_source_ != nullptr;
}
inline bool Collector::has_collector_source() const {
  return _internal_has_collector_source();
}
inline void Collector::clear_collector_source() {
  if (GetArenaNoVirtual() == nullptr && collector_source_ != nullptr) {
    delete collector_source_;
  }
  collector_source_ = nullptr;
}
inline const ::clarifai::api::CollectorSource& Collector::_internal_collector_source() const {
  const ::clarifai::api::CollectorSource* p = collector_source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::CollectorSource*>(
      &::clarifai::api::_CollectorSource_default_instance_);
}
inline const ::clarifai::api::CollectorSource& Collector::collector_source() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.collector_source)
  return _internal_collector_source();
}
inline ::clarifai::api::CollectorSource* Collector::release_collector_source() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.collector_source)
  
  ::clarifai::api::CollectorSource* temp = collector_source_;
  collector_source_ = nullptr;
  return temp;
}
inline ::clarifai::api::CollectorSource* Collector::_internal_mutable_collector_source() {
  
  if (collector_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::CollectorSource>(GetArenaNoVirtual());
    collector_source_ = p;
  }
  return collector_source_;
}
inline ::clarifai::api::CollectorSource* Collector::mutable_collector_source() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.collector_source)
  return _internal_mutable_collector_source();
}
inline void Collector::set_allocated_collector_source(::clarifai::api::CollectorSource* collector_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete collector_source_;
  }
  if (collector_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collector_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collector_source, submessage_arena);
    }
    
  } else {
    
  }
  collector_source_ = collector_source;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.collector_source)
}

// .clarifai.api.status.Status status = 7;
inline bool Collector::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Collector::has_status() const {
  return _internal_has_status();
}
inline const ::clarifai::api::status::Status& Collector::_internal_status() const {
  const ::clarifai::api::status::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::status::Status*>(
      &::clarifai::api::status::_Status_default_instance_);
}
inline const ::clarifai::api::status::Status& Collector::status() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Collector.status)
  return _internal_status();
}
inline ::clarifai::api::status::Status* Collector::release_status() {
  // @@protoc_insertion_point(field_release:clarifai.api.Collector.status)
  
  ::clarifai::api::status::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::clarifai::api::status::Status* Collector::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::status::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::clarifai::api::status::Status* Collector::mutable_status() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.Collector.status)
  return _internal_mutable_status();
}
inline void Collector::set_allocated_status(::clarifai::api::status::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.Collector.status)
}

// -------------------------------------------------------------------

// CollectorSource

// .clarifai.api.APIPostModelOutputsCollectorSource api_post_model_outputs_collector_source = 2;
inline bool CollectorSource::_internal_has_api_post_model_outputs_collector_source() const {
  return this != internal_default_instance() && api_post_model_outputs_collector_source_ != nullptr;
}
inline bool CollectorSource::has_api_post_model_outputs_collector_source() const {
  return _internal_has_api_post_model_outputs_collector_source();
}
inline void CollectorSource::clear_api_post_model_outputs_collector_source() {
  if (GetArenaNoVirtual() == nullptr && api_post_model_outputs_collector_source_ != nullptr) {
    delete api_post_model_outputs_collector_source_;
  }
  api_post_model_outputs_collector_source_ = nullptr;
}
inline const ::clarifai::api::APIPostModelOutputsCollectorSource& CollectorSource::_internal_api_post_model_outputs_collector_source() const {
  const ::clarifai::api::APIPostModelOutputsCollectorSource* p = api_post_model_outputs_collector_source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::APIPostModelOutputsCollectorSource*>(
      &::clarifai::api::_APIPostModelOutputsCollectorSource_default_instance_);
}
inline const ::clarifai::api::APIPostModelOutputsCollectorSource& CollectorSource::api_post_model_outputs_collector_source() const {
  // @@protoc_insertion_point(field_get:clarifai.api.CollectorSource.api_post_model_outputs_collector_source)
  return _internal_api_post_model_outputs_collector_source();
}
inline ::clarifai::api::APIPostModelOutputsCollectorSource* CollectorSource::release_api_post_model_outputs_collector_source() {
  // @@protoc_insertion_point(field_release:clarifai.api.CollectorSource.api_post_model_outputs_collector_source)
  
  ::clarifai::api::APIPostModelOutputsCollectorSource* temp = api_post_model_outputs_collector_source_;
  api_post_model_outputs_collector_source_ = nullptr;
  return temp;
}
inline ::clarifai::api::APIPostModelOutputsCollectorSource* CollectorSource::_internal_mutable_api_post_model_outputs_collector_source() {
  
  if (api_post_model_outputs_collector_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::APIPostModelOutputsCollectorSource>(GetArenaNoVirtual());
    api_post_model_outputs_collector_source_ = p;
  }
  return api_post_model_outputs_collector_source_;
}
inline ::clarifai::api::APIPostModelOutputsCollectorSource* CollectorSource::mutable_api_post_model_outputs_collector_source() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.CollectorSource.api_post_model_outputs_collector_source)
  return _internal_mutable_api_post_model_outputs_collector_source();
}
inline void CollectorSource::set_allocated_api_post_model_outputs_collector_source(::clarifai::api::APIPostModelOutputsCollectorSource* api_post_model_outputs_collector_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete api_post_model_outputs_collector_source_;
  }
  if (api_post_model_outputs_collector_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      api_post_model_outputs_collector_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, api_post_model_outputs_collector_source, submessage_arena);
    }
    
  } else {
    
  }
  api_post_model_outputs_collector_source_ = api_post_model_outputs_collector_source;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.CollectorSource.api_post_model_outputs_collector_source)
}

// -------------------------------------------------------------------

// APIPostModelOutputsCollectorSource

// string model_user_id = 1;
inline void APIPostModelOutputsCollectorSource::clear_model_user_id() {
  model_user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APIPostModelOutputsCollectorSource::model_user_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
  return _internal_model_user_id();
}
inline void APIPostModelOutputsCollectorSource::set_model_user_id(const std::string& value) {
  _internal_set_model_user_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
}
inline std::string* APIPostModelOutputsCollectorSource::mutable_model_user_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
  return _internal_mutable_model_user_id();
}
inline const std::string& APIPostModelOutputsCollectorSource::_internal_model_user_id() const {
  return model_user_id_.GetNoArena();
}
inline void APIPostModelOutputsCollectorSource::_internal_set_model_user_id(const std::string& value) {
  
  model_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void APIPostModelOutputsCollectorSource::set_model_user_id(std::string&& value) {
  
  model_user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_user_id(const char* value, size_t size) {
  
  model_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
}
inline std::string* APIPostModelOutputsCollectorSource::_internal_mutable_model_user_id() {
  
  return model_user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APIPostModelOutputsCollectorSource::release_model_user_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
  
  return model_user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APIPostModelOutputsCollectorSource::set_allocated_model_user_id(std::string* model_user_id) {
  if (model_user_id != nullptr) {
    
  } else {
    
  }
  model_user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_user_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.APIPostModelOutputsCollectorSource.model_user_id)
}

// string model_app_id = 2;
inline void APIPostModelOutputsCollectorSource::clear_model_app_id() {
  model_app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APIPostModelOutputsCollectorSource::model_app_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
  return _internal_model_app_id();
}
inline void APIPostModelOutputsCollectorSource::set_model_app_id(const std::string& value) {
  _internal_set_model_app_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
}
inline std::string* APIPostModelOutputsCollectorSource::mutable_model_app_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
  return _internal_mutable_model_app_id();
}
inline const std::string& APIPostModelOutputsCollectorSource::_internal_model_app_id() const {
  return model_app_id_.GetNoArena();
}
inline void APIPostModelOutputsCollectorSource::_internal_set_model_app_id(const std::string& value) {
  
  model_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void APIPostModelOutputsCollectorSource::set_model_app_id(std::string&& value) {
  
  model_app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_app_id(const char* value, size_t size) {
  
  model_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
}
inline std::string* APIPostModelOutputsCollectorSource::_internal_mutable_model_app_id() {
  
  return model_app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APIPostModelOutputsCollectorSource::release_model_app_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
  
  return model_app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APIPostModelOutputsCollectorSource::set_allocated_model_app_id(std::string* model_app_id) {
  if (model_app_id != nullptr) {
    
  } else {
    
  }
  model_app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_app_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.APIPostModelOutputsCollectorSource.model_app_id)
}

// string model_id = 3;
inline void APIPostModelOutputsCollectorSource::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APIPostModelOutputsCollectorSource::model_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
  return _internal_model_id();
}
inline void APIPostModelOutputsCollectorSource::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
}
inline std::string* APIPostModelOutputsCollectorSource::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& APIPostModelOutputsCollectorSource::_internal_model_id() const {
  return model_id_.GetNoArena();
}
inline void APIPostModelOutputsCollectorSource::_internal_set_model_id(const std::string& value) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void APIPostModelOutputsCollectorSource::set_model_id(std::string&& value) {
  
  model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
}
inline std::string* APIPostModelOutputsCollectorSource::_internal_mutable_model_id() {
  
  return model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APIPostModelOutputsCollectorSource::release_model_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
  
  return model_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APIPostModelOutputsCollectorSource::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.APIPostModelOutputsCollectorSource.model_id)
}

// string model_version_id = 4;
inline void APIPostModelOutputsCollectorSource::clear_model_version_id() {
  model_version_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APIPostModelOutputsCollectorSource::model_version_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
  return _internal_model_version_id();
}
inline void APIPostModelOutputsCollectorSource::set_model_version_id(const std::string& value) {
  _internal_set_model_version_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
}
inline std::string* APIPostModelOutputsCollectorSource::mutable_model_version_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
  return _internal_mutable_model_version_id();
}
inline const std::string& APIPostModelOutputsCollectorSource::_internal_model_version_id() const {
  return model_version_id_.GetNoArena();
}
inline void APIPostModelOutputsCollectorSource::_internal_set_model_version_id(const std::string& value) {
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void APIPostModelOutputsCollectorSource::set_model_version_id(std::string&& value) {
  
  model_version_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
}
inline void APIPostModelOutputsCollectorSource::set_model_version_id(const char* value, size_t size) {
  
  model_version_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
}
inline std::string* APIPostModelOutputsCollectorSource::_internal_mutable_model_version_id() {
  
  return model_version_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APIPostModelOutputsCollectorSource::release_model_version_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
  
  return model_version_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APIPostModelOutputsCollectorSource::set_allocated_model_version_id(std::string* model_version_id) {
  if (model_version_id != nullptr) {
    
  } else {
    
  }
  model_version_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.APIPostModelOutputsCollectorSource.model_version_id)
}

// string post_inputs_key_id = 5;
inline void APIPostModelOutputsCollectorSource::clear_post_inputs_key_id() {
  post_inputs_key_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APIPostModelOutputsCollectorSource::post_inputs_key_id() const {
  // @@protoc_insertion_point(field_get:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
  return _internal_post_inputs_key_id();
}
inline void APIPostModelOutputsCollectorSource::set_post_inputs_key_id(const std::string& value) {
  _internal_set_post_inputs_key_id(value);
  // @@protoc_insertion_point(field_set:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
}
inline std::string* APIPostModelOutputsCollectorSource::mutable_post_inputs_key_id() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
  return _internal_mutable_post_inputs_key_id();
}
inline const std::string& APIPostModelOutputsCollectorSource::_internal_post_inputs_key_id() const {
  return post_inputs_key_id_.GetNoArena();
}
inline void APIPostModelOutputsCollectorSource::_internal_set_post_inputs_key_id(const std::string& value) {
  
  post_inputs_key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void APIPostModelOutputsCollectorSource::set_post_inputs_key_id(std::string&& value) {
  
  post_inputs_key_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
}
inline void APIPostModelOutputsCollectorSource::set_post_inputs_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  post_inputs_key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
}
inline void APIPostModelOutputsCollectorSource::set_post_inputs_key_id(const char* value, size_t size) {
  
  post_inputs_key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
}
inline std::string* APIPostModelOutputsCollectorSource::_internal_mutable_post_inputs_key_id() {
  
  return post_inputs_key_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APIPostModelOutputsCollectorSource::release_post_inputs_key_id() {
  // @@protoc_insertion_point(field_release:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
  
  return post_inputs_key_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APIPostModelOutputsCollectorSource::set_allocated_post_inputs_key_id(std::string* post_inputs_key_id) {
  if (post_inputs_key_id != nullptr) {
    
  } else {
    
  }
  post_inputs_key_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post_inputs_key_id);
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.APIPostModelOutputsCollectorSource.post_inputs_key_id)
}

// -------------------------------------------------------------------

// StatValue

// .google.protobuf.Timestamp time = 1;
inline bool StatValue::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool StatValue::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StatValue::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StatValue::time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValue.time)
  return _internal_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StatValue::release_time() {
  // @@protoc_insertion_point(field_release:clarifai.api.StatValue.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StatValue::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StatValue::mutable_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.StatValue.time)
  return _internal_mutable_time();
}
inline void StatValue::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.StatValue.time)
}

// float value = 2;
inline void StatValue::clear_value() {
  value_ = 0;
}
inline float StatValue::_internal_value() const {
  return value_;
}
inline float StatValue::value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValue.value)
  return _internal_value();
}
inline void StatValue::_internal_set_value(float value) {
  
  value_ = value;
}
inline void StatValue::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.StatValue.value)
}

// repeated string tags = 3;
inline int StatValue::_internal_tags_size() const {
  return tags_.size();
}
inline int StatValue::tags_size() const {
  return _internal_tags_size();
}
inline void StatValue::clear_tags() {
  tags_.Clear();
}
inline std::string* StatValue::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.StatValue.tags)
  return _internal_add_tags();
}
inline const std::string& StatValue::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& StatValue::tags(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValue.tags)
  return _internal_tags(index);
}
inline std::string* StatValue::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.StatValue.tags)
  return tags_.Mutable(index);
}
inline void StatValue::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.StatValue.tags)
  tags_.Mutable(index)->assign(value);
}
inline void StatValue::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.StatValue.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void StatValue::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.StatValue.tags)
}
inline void StatValue::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.StatValue.tags)
}
inline std::string* StatValue::_internal_add_tags() {
  return tags_.Add();
}
inline void StatValue::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.StatValue.tags)
}
inline void StatValue::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.StatValue.tags)
}
inline void StatValue::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.StatValue.tags)
}
inline void StatValue::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.StatValue.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatValue::tags() const {
  // @@protoc_insertion_point(field_list:clarifai.api.StatValue.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatValue::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.StatValue.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// StatValueAggregateResult

// repeated .clarifai.api.StatValueAggregate stat_value_aggregates = 1;
inline int StatValueAggregateResult::_internal_stat_value_aggregates_size() const {
  return stat_value_aggregates_.size();
}
inline int StatValueAggregateResult::stat_value_aggregates_size() const {
  return _internal_stat_value_aggregates_size();
}
inline void StatValueAggregateResult::clear_stat_value_aggregates() {
  stat_value_aggregates_.Clear();
}
inline ::clarifai::api::StatValueAggregate* StatValueAggregateResult::mutable_stat_value_aggregates(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.StatValueAggregateResult.stat_value_aggregates)
  return stat_value_aggregates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregate >*
StatValueAggregateResult::mutable_stat_value_aggregates() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.StatValueAggregateResult.stat_value_aggregates)
  return &stat_value_aggregates_;
}
inline const ::clarifai::api::StatValueAggregate& StatValueAggregateResult::_internal_stat_value_aggregates(int index) const {
  return stat_value_aggregates_.Get(index);
}
inline const ::clarifai::api::StatValueAggregate& StatValueAggregateResult::stat_value_aggregates(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValueAggregateResult.stat_value_aggregates)
  return _internal_stat_value_aggregates(index);
}
inline ::clarifai::api::StatValueAggregate* StatValueAggregateResult::_internal_add_stat_value_aggregates() {
  return stat_value_aggregates_.Add();
}
inline ::clarifai::api::StatValueAggregate* StatValueAggregateResult::add_stat_value_aggregates() {
  // @@protoc_insertion_point(field_add:clarifai.api.StatValueAggregateResult.stat_value_aggregates)
  return _internal_add_stat_value_aggregates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clarifai::api::StatValueAggregate >&
StatValueAggregateResult::stat_value_aggregates() const {
  // @@protoc_insertion_point(field_list:clarifai.api.StatValueAggregateResult.stat_value_aggregates)
  return stat_value_aggregates_;
}

// .clarifai.api.StatValueAggregateQuery stat_value_aggregate_query = 2;
inline bool StatValueAggregateResult::_internal_has_stat_value_aggregate_query() const {
  return this != internal_default_instance() && stat_value_aggregate_query_ != nullptr;
}
inline bool StatValueAggregateResult::has_stat_value_aggregate_query() const {
  return _internal_has_stat_value_aggregate_query();
}
inline void StatValueAggregateResult::clear_stat_value_aggregate_query() {
  if (GetArenaNoVirtual() == nullptr && stat_value_aggregate_query_ != nullptr) {
    delete stat_value_aggregate_query_;
  }
  stat_value_aggregate_query_ = nullptr;
}
inline const ::clarifai::api::StatValueAggregateQuery& StatValueAggregateResult::_internal_stat_value_aggregate_query() const {
  const ::clarifai::api::StatValueAggregateQuery* p = stat_value_aggregate_query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clarifai::api::StatValueAggregateQuery*>(
      &::clarifai::api::_StatValueAggregateQuery_default_instance_);
}
inline const ::clarifai::api::StatValueAggregateQuery& StatValueAggregateResult::stat_value_aggregate_query() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValueAggregateResult.stat_value_aggregate_query)
  return _internal_stat_value_aggregate_query();
}
inline ::clarifai::api::StatValueAggregateQuery* StatValueAggregateResult::release_stat_value_aggregate_query() {
  // @@protoc_insertion_point(field_release:clarifai.api.StatValueAggregateResult.stat_value_aggregate_query)
  
  ::clarifai::api::StatValueAggregateQuery* temp = stat_value_aggregate_query_;
  stat_value_aggregate_query_ = nullptr;
  return temp;
}
inline ::clarifai::api::StatValueAggregateQuery* StatValueAggregateResult::_internal_mutable_stat_value_aggregate_query() {
  
  if (stat_value_aggregate_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::clarifai::api::StatValueAggregateQuery>(GetArenaNoVirtual());
    stat_value_aggregate_query_ = p;
  }
  return stat_value_aggregate_query_;
}
inline ::clarifai::api::StatValueAggregateQuery* StatValueAggregateResult::mutable_stat_value_aggregate_query() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.StatValueAggregateResult.stat_value_aggregate_query)
  return _internal_mutable_stat_value_aggregate_query();
}
inline void StatValueAggregateResult::set_allocated_stat_value_aggregate_query(::clarifai::api::StatValueAggregateQuery* stat_value_aggregate_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stat_value_aggregate_query_;
  }
  if (stat_value_aggregate_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stat_value_aggregate_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat_value_aggregate_query, submessage_arena);
    }
    
  } else {
    
  }
  stat_value_aggregate_query_ = stat_value_aggregate_query;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.StatValueAggregateResult.stat_value_aggregate_query)
}

// -------------------------------------------------------------------

// StatValueAggregate

// .google.protobuf.Timestamp time = 1;
inline bool StatValueAggregate::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool StatValueAggregate::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StatValueAggregate::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StatValueAggregate::time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValueAggregate.time)
  return _internal_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StatValueAggregate::release_time() {
  // @@protoc_insertion_point(field_release:clarifai.api.StatValueAggregate.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StatValueAggregate::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StatValueAggregate::mutable_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.StatValueAggregate.time)
  return _internal_mutable_time();
}
inline void StatValueAggregate::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.StatValueAggregate.time)
}

// float aggregate_value = 2;
inline void StatValueAggregate::clear_aggregate_value() {
  aggregate_value_ = 0;
}
inline float StatValueAggregate::_internal_aggregate_value() const {
  return aggregate_value_;
}
inline float StatValueAggregate::aggregate_value() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValueAggregate.aggregate_value)
  return _internal_aggregate_value();
}
inline void StatValueAggregate::_internal_set_aggregate_value(float value) {
  
  aggregate_value_ = value;
}
inline void StatValueAggregate::set_aggregate_value(float value) {
  _internal_set_aggregate_value(value);
  // @@protoc_insertion_point(field_set:clarifai.api.StatValueAggregate.aggregate_value)
}

// uint64 count = 3;
inline void StatValueAggregate::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatValueAggregate::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatValueAggregate::count() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValueAggregate.count)
  return _internal_count();
}
inline void StatValueAggregate::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void StatValueAggregate::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:clarifai.api.StatValueAggregate.count)
}

// repeated string tags = 4;
inline int StatValueAggregate::_internal_tags_size() const {
  return tags_.size();
}
inline int StatValueAggregate::tags_size() const {
  return _internal_tags_size();
}
inline void StatValueAggregate::clear_tags() {
  tags_.Clear();
}
inline std::string* StatValueAggregate::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.StatValueAggregate.tags)
  return _internal_add_tags();
}
inline const std::string& StatValueAggregate::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& StatValueAggregate::tags(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValueAggregate.tags)
  return _internal_tags(index);
}
inline std::string* StatValueAggregate::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.StatValueAggregate.tags)
  return tags_.Mutable(index);
}
inline void StatValueAggregate::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.StatValueAggregate.tags)
  tags_.Mutable(index)->assign(value);
}
inline void StatValueAggregate::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.StatValueAggregate.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void StatValueAggregate::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.StatValueAggregate.tags)
}
inline void StatValueAggregate::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.StatValueAggregate.tags)
}
inline std::string* StatValueAggregate::_internal_add_tags() {
  return tags_.Add();
}
inline void StatValueAggregate::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.StatValueAggregate.tags)
}
inline void StatValueAggregate::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.StatValueAggregate.tags)
}
inline void StatValueAggregate::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.StatValueAggregate.tags)
}
inline void StatValueAggregate::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.StatValueAggregate.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatValueAggregate::tags() const {
  // @@protoc_insertion_point(field_list:clarifai.api.StatValueAggregate.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatValueAggregate::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.StatValueAggregate.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// StatValueAggregateQuery

// repeated string tags = 1;
inline int StatValueAggregateQuery::_internal_tags_size() const {
  return tags_.size();
}
inline int StatValueAggregateQuery::tags_size() const {
  return _internal_tags_size();
}
inline void StatValueAggregateQuery::clear_tags() {
  tags_.Clear();
}
inline std::string* StatValueAggregateQuery::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.StatValueAggregateQuery.tags)
  return _internal_add_tags();
}
inline const std::string& StatValueAggregateQuery::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& StatValueAggregateQuery::tags(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValueAggregateQuery.tags)
  return _internal_tags(index);
}
inline std::string* StatValueAggregateQuery::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.StatValueAggregateQuery.tags)
  return tags_.Mutable(index);
}
inline void StatValueAggregateQuery::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.StatValueAggregateQuery.tags)
  tags_.Mutable(index)->assign(value);
}
inline void StatValueAggregateQuery::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.StatValueAggregateQuery.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void StatValueAggregateQuery::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.StatValueAggregateQuery.tags)
}
inline void StatValueAggregateQuery::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.StatValueAggregateQuery.tags)
}
inline std::string* StatValueAggregateQuery::_internal_add_tags() {
  return tags_.Add();
}
inline void StatValueAggregateQuery::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.StatValueAggregateQuery.tags)
}
inline void StatValueAggregateQuery::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.StatValueAggregateQuery.tags)
}
inline void StatValueAggregateQuery::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.StatValueAggregateQuery.tags)
}
inline void StatValueAggregateQuery::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.StatValueAggregateQuery.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatValueAggregateQuery::tags() const {
  // @@protoc_insertion_point(field_list:clarifai.api.StatValueAggregateQuery.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatValueAggregateQuery::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.StatValueAggregateQuery.tags)
  return &tags_;
}

// repeated string tag_groups = 2;
inline int StatValueAggregateQuery::_internal_tag_groups_size() const {
  return tag_groups_.size();
}
inline int StatValueAggregateQuery::tag_groups_size() const {
  return _internal_tag_groups_size();
}
inline void StatValueAggregateQuery::clear_tag_groups() {
  tag_groups_.Clear();
}
inline std::string* StatValueAggregateQuery::add_tag_groups() {
  // @@protoc_insertion_point(field_add_mutable:clarifai.api.StatValueAggregateQuery.tag_groups)
  return _internal_add_tag_groups();
}
inline const std::string& StatValueAggregateQuery::_internal_tag_groups(int index) const {
  return tag_groups_.Get(index);
}
inline const std::string& StatValueAggregateQuery::tag_groups(int index) const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValueAggregateQuery.tag_groups)
  return _internal_tag_groups(index);
}
inline std::string* StatValueAggregateQuery::mutable_tag_groups(int index) {
  // @@protoc_insertion_point(field_mutable:clarifai.api.StatValueAggregateQuery.tag_groups)
  return tag_groups_.Mutable(index);
}
inline void StatValueAggregateQuery::set_tag_groups(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.StatValueAggregateQuery.tag_groups)
  tag_groups_.Mutable(index)->assign(value);
}
inline void StatValueAggregateQuery::set_tag_groups(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clarifai.api.StatValueAggregateQuery.tag_groups)
  tag_groups_.Mutable(index)->assign(std::move(value));
}
inline void StatValueAggregateQuery::set_tag_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tag_groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clarifai.api.StatValueAggregateQuery.tag_groups)
}
inline void StatValueAggregateQuery::set_tag_groups(int index, const char* value, size_t size) {
  tag_groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clarifai.api.StatValueAggregateQuery.tag_groups)
}
inline std::string* StatValueAggregateQuery::_internal_add_tag_groups() {
  return tag_groups_.Add();
}
inline void StatValueAggregateQuery::add_tag_groups(const std::string& value) {
  tag_groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clarifai.api.StatValueAggregateQuery.tag_groups)
}
inline void StatValueAggregateQuery::add_tag_groups(std::string&& value) {
  tag_groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clarifai.api.StatValueAggregateQuery.tag_groups)
}
inline void StatValueAggregateQuery::add_tag_groups(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tag_groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clarifai.api.StatValueAggregateQuery.tag_groups)
}
inline void StatValueAggregateQuery::add_tag_groups(const char* value, size_t size) {
  tag_groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clarifai.api.StatValueAggregateQuery.tag_groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatValueAggregateQuery::tag_groups() const {
  // @@protoc_insertion_point(field_list:clarifai.api.StatValueAggregateQuery.tag_groups)
  return tag_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatValueAggregateQuery::mutable_tag_groups() {
  // @@protoc_insertion_point(field_mutable_list:clarifai.api.StatValueAggregateQuery.tag_groups)
  return &tag_groups_;
}

// .clarifai.api.StatValueAggType stat_value_agg_type = 3;
inline void StatValueAggregateQuery::clear_stat_value_agg_type() {
  stat_value_agg_type_ = 0;
}
inline ::clarifai::api::StatValueAggType StatValueAggregateQuery::_internal_stat_value_agg_type() const {
  return static_cast< ::clarifai::api::StatValueAggType >(stat_value_agg_type_);
}
inline ::clarifai::api::StatValueAggType StatValueAggregateQuery::stat_value_agg_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValueAggregateQuery.stat_value_agg_type)
  return _internal_stat_value_agg_type();
}
inline void StatValueAggregateQuery::_internal_set_stat_value_agg_type(::clarifai::api::StatValueAggType value) {
  
  stat_value_agg_type_ = value;
}
inline void StatValueAggregateQuery::set_stat_value_agg_type(::clarifai::api::StatValueAggType value) {
  _internal_set_stat_value_agg_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.StatValueAggregateQuery.stat_value_agg_type)
}

// .clarifai.api.StatTimeAggType stat_time_agg_type = 4;
inline void StatValueAggregateQuery::clear_stat_time_agg_type() {
  stat_time_agg_type_ = 0;
}
inline ::clarifai::api::StatTimeAggType StatValueAggregateQuery::_internal_stat_time_agg_type() const {
  return static_cast< ::clarifai::api::StatTimeAggType >(stat_time_agg_type_);
}
inline ::clarifai::api::StatTimeAggType StatValueAggregateQuery::stat_time_agg_type() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValueAggregateQuery.stat_time_agg_type)
  return _internal_stat_time_agg_type();
}
inline void StatValueAggregateQuery::_internal_set_stat_time_agg_type(::clarifai::api::StatTimeAggType value) {
  
  stat_time_agg_type_ = value;
}
inline void StatValueAggregateQuery::set_stat_time_agg_type(::clarifai::api::StatTimeAggType value) {
  _internal_set_stat_time_agg_type(value);
  // @@protoc_insertion_point(field_set:clarifai.api.StatValueAggregateQuery.stat_time_agg_type)
}

// .google.protobuf.Timestamp start_time = 5;
inline bool StatValueAggregateQuery::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool StatValueAggregateQuery::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StatValueAggregateQuery::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StatValueAggregateQuery::start_time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValueAggregateQuery.start_time)
  return _internal_start_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StatValueAggregateQuery::release_start_time() {
  // @@protoc_insertion_point(field_release:clarifai.api.StatValueAggregateQuery.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StatValueAggregateQuery::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StatValueAggregateQuery::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.StatValueAggregateQuery.start_time)
  return _internal_mutable_start_time();
}
inline void StatValueAggregateQuery::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.StatValueAggregateQuery.start_time)
}

// .google.protobuf.Timestamp end_time = 6;
inline bool StatValueAggregateQuery::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool StatValueAggregateQuery::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StatValueAggregateQuery::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StatValueAggregateQuery::end_time() const {
  // @@protoc_insertion_point(field_get:clarifai.api.StatValueAggregateQuery.end_time)
  return _internal_end_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StatValueAggregateQuery::release_end_time() {
  // @@protoc_insertion_point(field_release:clarifai.api.StatValueAggregateQuery.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StatValueAggregateQuery::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StatValueAggregateQuery::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:clarifai.api.StatValueAggregateQuery.end_time)
  return _internal_mutable_end_time();
}
inline void StatValueAggregateQuery::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:clarifai.api.StatValueAggregateQuery.end_time)
}

// -------------------------------------------------------------------

// Visibility

// .clarifai.api.Visibility.Gettable gettable = 1;
inline void Visibility::clear_gettable() {
  gettable_ = 0;
}
inline ::clarifai::api::Visibility_Gettable Visibility::_internal_gettable() const {
  return static_cast< ::clarifai::api::Visibility_Gettable >(gettable_);
}
inline ::clarifai::api::Visibility_Gettable Visibility::gettable() const {
  // @@protoc_insertion_point(field_get:clarifai.api.Visibility.gettable)
  return _internal_gettable();
}
inline void Visibility::_internal_set_gettable(::clarifai::api::Visibility_Gettable value) {
  
  gettable_ = value;
}
inline void Visibility::set_gettable(::clarifai::api::Visibility_Gettable value) {
  _internal_set_gettable(value);
  // @@protoc_insertion_point(field_set:clarifai.api.Visibility.gettable)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace clarifai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::clarifai::api::ModelTypeField_ModelTypeFieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::ModelTypeField_ModelTypeFieldType>() {
  return ::clarifai::api::ModelTypeField_ModelTypeFieldType_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::Task_TaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::Task_TaskType>() {
  return ::clarifai::api::Task_TaskType_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::TaskWorker_TaskWorkerStrategy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::TaskWorker_TaskWorkerStrategy>() {
  return ::clarifai::api::TaskWorker_TaskWorkerStrategy_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy>() {
  return ::clarifai::api::TaskWorkerPartitionedStrategyInfo_TaskWorkerPartitionedStrategy_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::TaskInputSource_TaskInputSourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::TaskInputSource_TaskInputSourceType>() {
  return ::clarifai::api::TaskInputSource_TaskInputSourceType_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::TaskReview_TaskReviewStrategy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::TaskReview_TaskReviewStrategy>() {
  return ::clarifai::api::TaskReview_TaskReviewStrategy_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::Visibility_Gettable> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::Visibility_Gettable>() {
  return ::clarifai::api::Visibility_Gettable_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::ExpirationAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::ExpirationAction>() {
  return ::clarifai::api::ExpirationAction_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::LicenseScope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::LicenseScope>() {
  return ::clarifai::api::LicenseScope_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::ValueComparator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::ValueComparator>() {
  return ::clarifai::api::ValueComparator_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::EvaluationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::EvaluationType>() {
  return ::clarifai::api::EvaluationType_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::APIEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::APIEventType>() {
  return ::clarifai::api::APIEventType_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::UsageIntervalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::UsageIntervalType>() {
  return ::clarifai::api::UsageIntervalType_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::RoleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::RoleType>() {
  return ::clarifai::api::RoleType_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::StatValueAggType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::StatValueAggType>() {
  return ::clarifai::api::StatValueAggType_descriptor();
}
template <> struct is_proto_enum< ::clarifai::api::StatTimeAggType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clarifai::api::StatTimeAggType>() {
  return ::clarifai::api::StatTimeAggType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fclarifai_2fapi_2fresources_2eproto
