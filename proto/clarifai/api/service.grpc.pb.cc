// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/clarifai/api/service.proto

#include "proto/clarifai/api/service.pb.h"
#include "proto/clarifai/api/service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace clarifai {
namespace api {

static const char* V2_method_names[] = {
  "/clarifai.api.V2/ListConceptRelations",
  "/clarifai.api.V2/PostConceptRelations",
  "/clarifai.api.V2/DeleteConceptRelations",
  "/clarifai.api.V2/GetConceptCounts",
  "/clarifai.api.V2/GetConcept",
  "/clarifai.api.V2/ListConcepts",
  "/clarifai.api.V2/PostConceptsSearches",
  "/clarifai.api.V2/PostConcepts",
  "/clarifai.api.V2/PatchConcepts",
  "/clarifai.api.V2/GetConceptLanguage",
  "/clarifai.api.V2/ListConceptLanguages",
  "/clarifai.api.V2/PostConceptLanguages",
  "/clarifai.api.V2/PatchConceptLanguages",
  "/clarifai.api.V2/ListKnowledgeGraphs",
  "/clarifai.api.V2/PostKnowledgeGraphs",
  "/clarifai.api.V2/PostConceptMappingJobs",
  "/clarifai.api.V2/GetAnnotation",
  "/clarifai.api.V2/ListAnnotations",
  "/clarifai.api.V2/PostAnnotations",
  "/clarifai.api.V2/PatchAnnotations",
  "/clarifai.api.V2/PatchAnnotationsStatus",
  "/clarifai.api.V2/DeleteAnnotation",
  "/clarifai.api.V2/DeleteAnnotations",
  "/clarifai.api.V2/PostAnnotationsSearches",
  "/clarifai.api.V2/GetInputCount",
  "/clarifai.api.V2/StreamInputs",
  "/clarifai.api.V2/GetInputSamples",
  "/clarifai.api.V2/GetInput",
  "/clarifai.api.V2/ListInputs",
  "/clarifai.api.V2/PostInputs",
  "/clarifai.api.V2/PatchInputs",
  "/clarifai.api.V2/DeleteInput",
  "/clarifai.api.V2/DeleteInputs",
  "/clarifai.api.V2/PostInputsSearches",
  "/clarifai.api.V2/PostModelOutputs",
  "/clarifai.api.V2/GetModelType",
  "/clarifai.api.V2/ListOpenSourceLicenses",
  "/clarifai.api.V2/ListModelTypes",
  "/clarifai.api.V2/GetModel",
  "/clarifai.api.V2/GetModelOutputInfo",
  "/clarifai.api.V2/ListModels",
  "/clarifai.api.V2/PostModelsSearches",
  "/clarifai.api.V2/PostModels",
  "/clarifai.api.V2/PatchModels",
  "/clarifai.api.V2/DeleteModel",
  "/clarifai.api.V2/DeleteModels",
  "/clarifai.api.V2/ListModelInputs",
  "/clarifai.api.V2/GetModelVersion",
  "/clarifai.api.V2/ListModelVersions",
  "/clarifai.api.V2/PostModelVersions",
  "/clarifai.api.V2/PatchModelVersions",
  "/clarifai.api.V2/DeleteModelVersion",
  "/clarifai.api.V2/GetModelVersionMetrics",
  "/clarifai.api.V2/PostModelVersionMetrics",
  "/clarifai.api.V2/ListModelReferences",
  "/clarifai.api.V2/GetModelVersionInputExample",
  "/clarifai.api.V2/ListModelVersionInputExamples",
  "/clarifai.api.V2/GetWorkflow",
  "/clarifai.api.V2/ListWorkflows",
  "/clarifai.api.V2/PostWorkflows",
  "/clarifai.api.V2/PatchWorkflows",
  "/clarifai.api.V2/DeleteWorkflow",
  "/clarifai.api.V2/DeleteWorkflows",
  "/clarifai.api.V2/PostWorkflowResults",
  "/clarifai.api.V2/PostWorkflowResultsSimilarity",
  "/clarifai.api.V2/ListWorkflowVersions",
  "/clarifai.api.V2/GetWorkflowVersion",
  "/clarifai.api.V2/DeleteWorkflowVersions",
  "/clarifai.api.V2/PatchWorkflowVersions",
  "/clarifai.api.V2/GetKey",
  "/clarifai.api.V2/ListKeys",
  "/clarifai.api.V2/ListAppKeys",
  "/clarifai.api.V2/DeleteKey",
  "/clarifai.api.V2/PostKeys",
  "/clarifai.api.V2/PatchKeys",
  "/clarifai.api.V2/MyScopes",
  "/clarifai.api.V2/ListScopes",
  "/clarifai.api.V2/GetApp",
  "/clarifai.api.V2/ListApps",
  "/clarifai.api.V2/DeleteApp",
  "/clarifai.api.V2/PostApps",
  "/clarifai.api.V2/PatchApps",
  "/clarifai.api.V2/PostAppsSearches",
  "/clarifai.api.V2/PostValidatePassword",
  "/clarifai.api.V2/GetSearch",
  "/clarifai.api.V2/ListSearches",
  "/clarifai.api.V2/PostSearches",
  "/clarifai.api.V2/PostSearchesByID",
  "/clarifai.api.V2/PostAnnotationSearchMetrics",
  "/clarifai.api.V2/GetAnnotationSearchMetrics",
  "/clarifai.api.V2/ListAnnotationSearchMetrics",
  "/clarifai.api.V2/DeleteAnnotationSearchMetrics",
  "/clarifai.api.V2/DeleteSearch",
  "/clarifai.api.V2/ListStatusCodes",
  "/clarifai.api.V2/GetStatusCode",
  "/clarifai.api.V2/ListCollaborators",
  "/clarifai.api.V2/PostCollaborators",
  "/clarifai.api.V2/PatchCollaborators",
  "/clarifai.api.V2/DeleteCollaborators",
  "/clarifai.api.V2/ListCollaborations",
  "/clarifai.api.V2/PostAppDuplications",
  "/clarifai.api.V2/ListAppDuplications",
  "/clarifai.api.V2/GetAppDuplication",
  "/clarifai.api.V2/PostTasks",
  "/clarifai.api.V2/GetTaskAnnotationCount",
  "/clarifai.api.V2/GetTaskInputCount",
  "/clarifai.api.V2/GetTask",
  "/clarifai.api.V2/ListTasks",
  "/clarifai.api.V2/PatchTasks",
  "/clarifai.api.V2/DeleteTasks",
  "/clarifai.api.V2/PostCollectors",
  "/clarifai.api.V2/GetCollector",
  "/clarifai.api.V2/ListCollectors",
  "/clarifai.api.V2/PatchCollectors",
  "/clarifai.api.V2/DeleteCollectors",
  "/clarifai.api.V2/PostStatValues",
  "/clarifai.api.V2/PostStatValuesAggregate",
  "/clarifai.api.V2/PostTrendingMetricsView",
  "/clarifai.api.V2/ListTrendingMetricsViews",
};

std::unique_ptr< V2::Stub> V2::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< V2::Stub> stub(new V2::Stub(channel));
  return stub;
}

V2::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListConceptRelations_(V2_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostConceptRelations_(V2_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteConceptRelations_(V2_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConceptCounts_(V2_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConcept_(V2_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListConcepts_(V2_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostConceptsSearches_(V2_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostConcepts_(V2_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchConcepts_(V2_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConceptLanguage_(V2_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListConceptLanguages_(V2_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostConceptLanguages_(V2_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchConceptLanguages_(V2_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListKnowledgeGraphs_(V2_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostKnowledgeGraphs_(V2_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostConceptMappingJobs_(V2_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAnnotation_(V2_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAnnotations_(V2_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostAnnotations_(V2_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchAnnotations_(V2_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchAnnotationsStatus_(V2_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAnnotation_(V2_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAnnotations_(V2_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostAnnotationsSearches_(V2_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInputCount_(V2_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamInputs_(V2_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInputSamples_(V2_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInput_(V2_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListInputs_(V2_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostInputs_(V2_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchInputs_(V2_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteInput_(V2_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteInputs_(V2_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostInputsSearches_(V2_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostModelOutputs_(V2_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelType_(V2_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOpenSourceLicenses_(V2_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListModelTypes_(V2_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModel_(V2_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelOutputInfo_(V2_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListModels_(V2_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostModelsSearches_(V2_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostModels_(V2_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchModels_(V2_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteModel_(V2_method_names[44], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteModels_(V2_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListModelInputs_(V2_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelVersion_(V2_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListModelVersions_(V2_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostModelVersions_(V2_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchModelVersions_(V2_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteModelVersion_(V2_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelVersionMetrics_(V2_method_names[52], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostModelVersionMetrics_(V2_method_names[53], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListModelReferences_(V2_method_names[54], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelVersionInputExample_(V2_method_names[55], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListModelVersionInputExamples_(V2_method_names[56], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWorkflow_(V2_method_names[57], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListWorkflows_(V2_method_names[58], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostWorkflows_(V2_method_names[59], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchWorkflows_(V2_method_names[60], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteWorkflow_(V2_method_names[61], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteWorkflows_(V2_method_names[62], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostWorkflowResults_(V2_method_names[63], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostWorkflowResultsSimilarity_(V2_method_names[64], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListWorkflowVersions_(V2_method_names[65], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWorkflowVersion_(V2_method_names[66], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteWorkflowVersions_(V2_method_names[67], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchWorkflowVersions_(V2_method_names[68], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKey_(V2_method_names[69], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListKeys_(V2_method_names[70], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAppKeys_(V2_method_names[71], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteKey_(V2_method_names[72], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostKeys_(V2_method_names[73], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchKeys_(V2_method_names[74], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MyScopes_(V2_method_names[75], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListScopes_(V2_method_names[76], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetApp_(V2_method_names[77], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListApps_(V2_method_names[78], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteApp_(V2_method_names[79], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostApps_(V2_method_names[80], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchApps_(V2_method_names[81], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostAppsSearches_(V2_method_names[82], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostValidatePassword_(V2_method_names[83], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSearch_(V2_method_names[84], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSearches_(V2_method_names[85], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostSearches_(V2_method_names[86], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostSearchesByID_(V2_method_names[87], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostAnnotationSearchMetrics_(V2_method_names[88], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAnnotationSearchMetrics_(V2_method_names[89], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAnnotationSearchMetrics_(V2_method_names[90], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAnnotationSearchMetrics_(V2_method_names[91], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSearch_(V2_method_names[92], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListStatusCodes_(V2_method_names[93], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStatusCode_(V2_method_names[94], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCollaborators_(V2_method_names[95], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostCollaborators_(V2_method_names[96], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchCollaborators_(V2_method_names[97], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCollaborators_(V2_method_names[98], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCollaborations_(V2_method_names[99], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostAppDuplications_(V2_method_names[100], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAppDuplications_(V2_method_names[101], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAppDuplication_(V2_method_names[102], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostTasks_(V2_method_names[103], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTaskAnnotationCount_(V2_method_names[104], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTaskInputCount_(V2_method_names[105], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTask_(V2_method_names[106], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTasks_(V2_method_names[107], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchTasks_(V2_method_names[108], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTasks_(V2_method_names[109], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostCollectors_(V2_method_names[110], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollector_(V2_method_names[111], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCollectors_(V2_method_names[112], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchCollectors_(V2_method_names[113], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCollectors_(V2_method_names[114], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostStatValues_(V2_method_names[115], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostStatValuesAggregate_(V2_method_names[116], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostTrendingMetricsView_(V2_method_names[117], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTrendingMetricsViews_(V2_method_names[118], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status V2::Stub::ListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::clarifai::api::MultiConceptRelationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListConceptRelations_, context, request, response);
}

void V2::Stub::experimental_async::ListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListConceptRelations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListConceptRelations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptRelationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListConceptRelations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListConceptRelations_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListConceptRelations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptRelationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListConceptRelations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>* V2::Stub::AsyncListConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptRelationResponse>::Create(channel_.get(), cq, rpcmethod_ListConceptRelations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>* V2::Stub::PrepareAsyncListConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptRelationResponse>::Create(channel_.get(), cq, rpcmethod_ListConceptRelations_, context, request, false);
}

::grpc::Status V2::Stub::PostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::clarifai::api::MultiConceptRelationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostConceptRelations_, context, request, response);
}

void V2::Stub::experimental_async::PostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostConceptRelations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostConceptRelations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptRelationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostConceptRelations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostConceptRelations_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostConceptRelations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptRelationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostConceptRelations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>* V2::Stub::AsyncPostConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptRelationResponse>::Create(channel_.get(), cq, rpcmethod_PostConceptRelations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptRelationResponse>* V2::Stub::PrepareAsyncPostConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptRelationResponse>::Create(channel_.get(), cq, rpcmethod_PostConceptRelations_, context, request, false);
}

::grpc::Status V2::Stub::DeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteConceptRelations_, context, request, response);
}

void V2::Stub::experimental_async::DeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteConceptRelations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteConceptRelations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteConceptRelations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteConceptRelations(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteConceptRelations_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteConceptRelations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteConceptRelations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteConceptRelations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteConceptRelationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteConceptRelationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteConceptRelations_, context, request, false);
}

::grpc::Status V2::Stub::GetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::clarifai::api::MultiConceptCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetConceptCounts_, context, request, response);
}

void V2::Stub::experimental_async::GetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest* request, ::clarifai::api::MultiConceptCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConceptCounts_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetConceptCounts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConceptCounts_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetConceptCounts(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest* request, ::clarifai::api::MultiConceptCountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConceptCounts_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetConceptCounts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptCountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConceptCounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptCountResponse>* V2::Stub::AsyncGetConceptCountsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptCountResponse>::Create(channel_.get(), cq, rpcmethod_GetConceptCounts_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptCountResponse>* V2::Stub::PrepareAsyncGetConceptCountsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptCountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptCountResponse>::Create(channel_.get(), cq, rpcmethod_GetConceptCounts_, context, request, false);
}

::grpc::Status V2::Stub::GetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::clarifai::api::SingleConceptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetConcept_, context, request, response);
}

void V2::Stub::experimental_async::GetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest* request, ::clarifai::api::SingleConceptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConcept_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetConcept(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleConceptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConcept_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetConcept(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest* request, ::clarifai::api::SingleConceptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConcept_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetConcept(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleConceptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConcept_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptResponse>* V2::Stub::AsyncGetConceptRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleConceptResponse>::Create(channel_.get(), cq, rpcmethod_GetConcept_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptResponse>* V2::Stub::PrepareAsyncGetConceptRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleConceptResponse>::Create(channel_.get(), cq, rpcmethod_GetConcept_, context, request, false);
}

::grpc::Status V2::Stub::ListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::clarifai::api::MultiConceptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListConcepts_, context, request, response);
}

void V2::Stub::experimental_async::ListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListConcepts_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListConcepts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListConcepts_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListConcepts(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListConcepts_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListConcepts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListConcepts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* V2::Stub::AsyncListConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptResponse>::Create(channel_.get(), cq, rpcmethod_ListConcepts_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* V2::Stub::PrepareAsyncListConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptResponse>::Create(channel_.get(), cq, rpcmethod_ListConcepts_, context, request, false);
}

::grpc::Status V2::Stub::PostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::clarifai::api::MultiConceptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostConceptsSearches_, context, request, response);
}

void V2::Stub::experimental_async::PostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostConceptsSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostConceptsSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostConceptsSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostConceptsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostConceptsSearches_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostConceptsSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostConceptsSearches_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* V2::Stub::AsyncPostConceptsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptResponse>::Create(channel_.get(), cq, rpcmethod_PostConceptsSearches_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* V2::Stub::PrepareAsyncPostConceptsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptResponse>::Create(channel_.get(), cq, rpcmethod_PostConceptsSearches_, context, request, false);
}

::grpc::Status V2::Stub::PostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::clarifai::api::MultiConceptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostConcepts_, context, request, response);
}

void V2::Stub::experimental_async::PostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostConcepts_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostConcepts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostConcepts_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostConcepts(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostConcepts_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostConcepts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostConcepts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* V2::Stub::AsyncPostConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptResponse>::Create(channel_.get(), cq, rpcmethod_PostConcepts_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* V2::Stub::PrepareAsyncPostConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptResponse>::Create(channel_.get(), cq, rpcmethod_PostConcepts_, context, request, false);
}

::grpc::Status V2::Stub::PatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::clarifai::api::MultiConceptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchConcepts_, context, request, response);
}

void V2::Stub::experimental_async::PatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchConcepts_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchConcepts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchConcepts_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchConcepts(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchConcepts_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchConcepts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchConcepts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* V2::Stub::AsyncPatchConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptResponse>::Create(channel_.get(), cq, rpcmethod_PatchConcepts_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptResponse>* V2::Stub::PrepareAsyncPatchConceptsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptResponse>::Create(channel_.get(), cq, rpcmethod_PatchConcepts_, context, request, false);
}

::grpc::Status V2::Stub::GetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::clarifai::api::SingleConceptLanguageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetConceptLanguage_, context, request, response);
}

void V2::Stub::experimental_async::GetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest* request, ::clarifai::api::SingleConceptLanguageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConceptLanguage_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetConceptLanguage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleConceptLanguageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConceptLanguage_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetConceptLanguage(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest* request, ::clarifai::api::SingleConceptLanguageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConceptLanguage_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetConceptLanguage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleConceptLanguageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConceptLanguage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptLanguageResponse>* V2::Stub::AsyncGetConceptLanguageRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleConceptLanguageResponse>::Create(channel_.get(), cq, rpcmethod_GetConceptLanguage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleConceptLanguageResponse>* V2::Stub::PrepareAsyncGetConceptLanguageRaw(::grpc::ClientContext* context, const ::clarifai::api::GetConceptLanguageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleConceptLanguageResponse>::Create(channel_.get(), cq, rpcmethod_GetConceptLanguage_, context, request, false);
}

::grpc::Status V2::Stub::ListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::clarifai::api::MultiConceptLanguageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListConceptLanguages_, context, request, response);
}

void V2::Stub::experimental_async::ListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListConceptLanguages_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListConceptLanguages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptLanguageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListConceptLanguages_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListConceptLanguages_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListConceptLanguages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptLanguageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListConceptLanguages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>* V2::Stub::AsyncListConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptLanguageResponse>::Create(channel_.get(), cq, rpcmethod_ListConceptLanguages_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>* V2::Stub::PrepareAsyncListConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptLanguageResponse>::Create(channel_.get(), cq, rpcmethod_ListConceptLanguages_, context, request, false);
}

::grpc::Status V2::Stub::PostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::clarifai::api::MultiConceptLanguageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostConceptLanguages_, context, request, response);
}

void V2::Stub::experimental_async::PostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostConceptLanguages_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostConceptLanguages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptLanguageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostConceptLanguages_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostConceptLanguages_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostConceptLanguages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptLanguageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostConceptLanguages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>* V2::Stub::AsyncPostConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptLanguageResponse>::Create(channel_.get(), cq, rpcmethod_PostConceptLanguages_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>* V2::Stub::PrepareAsyncPostConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptLanguageResponse>::Create(channel_.get(), cq, rpcmethod_PostConceptLanguages_, context, request, false);
}

::grpc::Status V2::Stub::PatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::clarifai::api::MultiConceptLanguageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchConceptLanguages_, context, request, response);
}

void V2::Stub::experimental_async::PatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchConceptLanguages_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchConceptLanguages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptLanguageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchConceptLanguages_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchConceptLanguages(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchConceptLanguages_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchConceptLanguages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptLanguageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchConceptLanguages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>* V2::Stub::AsyncPatchConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptLanguageResponse>::Create(channel_.get(), cq, rpcmethod_PatchConceptLanguages_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptLanguageResponse>* V2::Stub::PrepareAsyncPatchConceptLanguagesRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchConceptLanguagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptLanguageResponse>::Create(channel_.get(), cq, rpcmethod_PatchConceptLanguages_, context, request, false);
}

::grpc::Status V2::Stub::ListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::clarifai::api::MultiKnowledgeGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListKnowledgeGraphs_, context, request, response);
}

void V2::Stub::experimental_async::ListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListKnowledgeGraphs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListKnowledgeGraphs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListKnowledgeGraphs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListKnowledgeGraphs_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListKnowledgeGraphs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListKnowledgeGraphs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>* V2::Stub::AsyncListKnowledgeGraphsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiKnowledgeGraphResponse>::Create(channel_.get(), cq, rpcmethod_ListKnowledgeGraphs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>* V2::Stub::PrepareAsyncListKnowledgeGraphsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiKnowledgeGraphResponse>::Create(channel_.get(), cq, rpcmethod_ListKnowledgeGraphs_, context, request, false);
}

::grpc::Status V2::Stub::PostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::clarifai::api::MultiKnowledgeGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostKnowledgeGraphs_, context, request, response);
}

void V2::Stub::experimental_async::PostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostKnowledgeGraphs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostKnowledgeGraphs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostKnowledgeGraphs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostKnowledgeGraphs(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostKnowledgeGraphs_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostKnowledgeGraphs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiKnowledgeGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostKnowledgeGraphs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>* V2::Stub::AsyncPostKnowledgeGraphsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiKnowledgeGraphResponse>::Create(channel_.get(), cq, rpcmethod_PostKnowledgeGraphs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKnowledgeGraphResponse>* V2::Stub::PrepareAsyncPostKnowledgeGraphsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiKnowledgeGraphResponse>::Create(channel_.get(), cq, rpcmethod_PostKnowledgeGraphs_, context, request, false);
}

::grpc::Status V2::Stub::PostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::clarifai::api::MultiConceptMappingJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostConceptMappingJobs_, context, request, response);
}

void V2::Stub::experimental_async::PostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest* request, ::clarifai::api::MultiConceptMappingJobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostConceptMappingJobs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostConceptMappingJobs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptMappingJobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostConceptMappingJobs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostConceptMappingJobs(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest* request, ::clarifai::api::MultiConceptMappingJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostConceptMappingJobs_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostConceptMappingJobs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiConceptMappingJobResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostConceptMappingJobs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptMappingJobResponse>* V2::Stub::AsyncPostConceptMappingJobsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptMappingJobResponse>::Create(channel_.get(), cq, rpcmethod_PostConceptMappingJobs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiConceptMappingJobResponse>* V2::Stub::PrepareAsyncPostConceptMappingJobsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostConceptMappingJobsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiConceptMappingJobResponse>::Create(channel_.get(), cq, rpcmethod_PostConceptMappingJobs_, context, request, false);
}

::grpc::Status V2::Stub::GetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::clarifai::api::SingleAnnotationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAnnotation_, context, request, response);
}

void V2::Stub::experimental_async::GetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest* request, ::clarifai::api::SingleAnnotationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAnnotation_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetAnnotation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleAnnotationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAnnotation_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetAnnotation(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest* request, ::clarifai::api::SingleAnnotationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAnnotation_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetAnnotation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleAnnotationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAnnotation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationResponse>* V2::Stub::AsyncGetAnnotationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleAnnotationResponse>::Create(channel_.get(), cq, rpcmethod_GetAnnotation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAnnotationResponse>* V2::Stub::PrepareAsyncGetAnnotationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleAnnotationResponse>::Create(channel_.get(), cq, rpcmethod_GetAnnotation_, context, request, false);
}

::grpc::Status V2::Stub::ListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::clarifai::api::MultiAnnotationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListAnnotations_, context, request, response);
}

void V2::Stub::experimental_async::ListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAnnotations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListAnnotations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAnnotationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAnnotations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListAnnotations(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAnnotations_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListAnnotations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAnnotationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAnnotations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>* V2::Stub::AsyncListAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAnnotationResponse>::Create(channel_.get(), cq, rpcmethod_ListAnnotations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>* V2::Stub::PrepareAsyncListAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAnnotationResponse>::Create(channel_.get(), cq, rpcmethod_ListAnnotations_, context, request, false);
}

::grpc::Status V2::Stub::PostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::clarifai::api::MultiAnnotationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostAnnotations_, context, request, response);
}

void V2::Stub::experimental_async::PostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAnnotations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostAnnotations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAnnotationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAnnotations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostAnnotations_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostAnnotations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAnnotationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostAnnotations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>* V2::Stub::AsyncPostAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAnnotationResponse>::Create(channel_.get(), cq, rpcmethod_PostAnnotations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>* V2::Stub::PrepareAsyncPostAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAnnotationResponse>::Create(channel_.get(), cq, rpcmethod_PostAnnotations_, context, request, false);
}

::grpc::Status V2::Stub::PatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::clarifai::api::MultiAnnotationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchAnnotations_, context, request, response);
}

void V2::Stub::experimental_async::PatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchAnnotations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchAnnotations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAnnotationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchAnnotations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchAnnotations(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchAnnotations_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchAnnotations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAnnotationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchAnnotations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>* V2::Stub::AsyncPatchAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAnnotationResponse>::Create(channel_.get(), cq, rpcmethod_PatchAnnotations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationResponse>* V2::Stub::PrepareAsyncPatchAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAnnotationResponse>::Create(channel_.get(), cq, rpcmethod_PatchAnnotations_, context, request, false);
}

::grpc::Status V2::Stub::PatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::clarifai::api::PatchAnnotationsStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchAnnotationsStatus_, context, request, response);
}

void V2::Stub::experimental_async::PatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest* request, ::clarifai::api::PatchAnnotationsStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchAnnotationsStatus_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchAnnotationsStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::PatchAnnotationsStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchAnnotationsStatus_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchAnnotationsStatus(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest* request, ::clarifai::api::PatchAnnotationsStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchAnnotationsStatus_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchAnnotationsStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::PatchAnnotationsStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchAnnotationsStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::PatchAnnotationsStatusResponse>* V2::Stub::AsyncPatchAnnotationsStatusRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::PatchAnnotationsStatusResponse>::Create(channel_.get(), cq, rpcmethod_PatchAnnotationsStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::PatchAnnotationsStatusResponse>* V2::Stub::PrepareAsyncPatchAnnotationsStatusRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::PatchAnnotationsStatusResponse>::Create(channel_.get(), cq, rpcmethod_PatchAnnotationsStatus_, context, request, false);
}

::grpc::Status V2::Stub::DeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteAnnotation_, context, request, response);
}

void V2::Stub::experimental_async::DeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAnnotation_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteAnnotation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAnnotation_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteAnnotation(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAnnotation_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteAnnotation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAnnotation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteAnnotationRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteAnnotation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteAnnotationRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteAnnotation_, context, request, false);
}

::grpc::Status V2::Stub::DeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteAnnotations_, context, request, response);
}

void V2::Stub::experimental_async::DeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAnnotations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteAnnotations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAnnotations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteAnnotations(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAnnotations_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteAnnotations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAnnotations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteAnnotations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteAnnotationsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteAnnotations_, context, request, false);
}

::grpc::Status V2::Stub::PostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostAnnotationsSearches_, context, request, response);
}

void V2::Stub::experimental_async::PostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAnnotationsSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostAnnotationsSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAnnotationsSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostAnnotationsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostAnnotationsSearches_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostAnnotationsSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostAnnotationsSearches_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* V2::Stub::AsyncPostAnnotationsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiSearchResponse>::Create(channel_.get(), cq, rpcmethod_PostAnnotationsSearches_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* V2::Stub::PrepareAsyncPostAnnotationsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiSearchResponse>::Create(channel_.get(), cq, rpcmethod_PostAnnotationsSearches_, context, request, false);
}

::grpc::Status V2::Stub::GetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::clarifai::api::SingleInputCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInputCount_, context, request, response);
}

void V2::Stub::experimental_async::GetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest* request, ::clarifai::api::SingleInputCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInputCount_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetInputCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleInputCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInputCount_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest* request, ::clarifai::api::SingleInputCountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInputCount_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetInputCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleInputCountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInputCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputCountResponse>* V2::Stub::AsyncGetInputCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleInputCountResponse>::Create(channel_.get(), cq, rpcmethod_GetInputCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputCountResponse>* V2::Stub::PrepareAsyncGetInputCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleInputCountResponse>::Create(channel_.get(), cq, rpcmethod_GetInputCount_, context, request, false);
}

::grpc::Status V2::Stub::StreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::clarifai::api::MultiInputResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StreamInputs_, context, request, response);
}

void V2::Stub::experimental_async::StreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StreamInputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::StreamInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StreamInputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::StreamInputs(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StreamInputs_, context, request, response, reactor);
}

void V2::Stub::experimental_async::StreamInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiInputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StreamInputs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* V2::Stub::AsyncStreamInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiInputResponse>::Create(channel_.get(), cq, rpcmethod_StreamInputs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* V2::Stub::PrepareAsyncStreamInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::StreamInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiInputResponse>::Create(channel_.get(), cq, rpcmethod_StreamInputs_, context, request, false);
}

::grpc::Status V2::Stub::GetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::clarifai::api::MultiInputAnnotationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInputSamples_, context, request, response);
}

void V2::Stub::experimental_async::GetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest* request, ::clarifai::api::MultiInputAnnotationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInputSamples_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetInputSamples(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiInputAnnotationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInputSamples_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetInputSamples(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest* request, ::clarifai::api::MultiInputAnnotationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInputSamples_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetInputSamples(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiInputAnnotationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInputSamples_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputAnnotationResponse>* V2::Stub::AsyncGetInputSamplesRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiInputAnnotationResponse>::Create(channel_.get(), cq, rpcmethod_GetInputSamples_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputAnnotationResponse>* V2::Stub::PrepareAsyncGetInputSamplesRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputSamplesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiInputAnnotationResponse>::Create(channel_.get(), cq, rpcmethod_GetInputSamples_, context, request, false);
}

::grpc::Status V2::Stub::GetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::clarifai::api::SingleInputResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInput_, context, request, response);
}

void V2::Stub::experimental_async::GetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest* request, ::clarifai::api::SingleInputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInput_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleInputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInput_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetInput(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest* request, ::clarifai::api::SingleInputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInput_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleInputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputResponse>* V2::Stub::AsyncGetInputRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleInputResponse>::Create(channel_.get(), cq, rpcmethod_GetInput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleInputResponse>* V2::Stub::PrepareAsyncGetInputRaw(::grpc::ClientContext* context, const ::clarifai::api::GetInputRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleInputResponse>::Create(channel_.get(), cq, rpcmethod_GetInput_, context, request, false);
}

::grpc::Status V2::Stub::ListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::clarifai::api::MultiInputResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListInputs_, context, request, response);
}

void V2::Stub::experimental_async::ListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListInputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListInputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListInputs(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListInputs_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiInputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListInputs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* V2::Stub::AsyncListInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiInputResponse>::Create(channel_.get(), cq, rpcmethod_ListInputs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* V2::Stub::PrepareAsyncListInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiInputResponse>::Create(channel_.get(), cq, rpcmethod_ListInputs_, context, request, false);
}

::grpc::Status V2::Stub::PostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::clarifai::api::MultiInputResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostInputs_, context, request, response);
}

void V2::Stub::experimental_async::PostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostInputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostInputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostInputs(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostInputs_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiInputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostInputs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* V2::Stub::AsyncPostInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiInputResponse>::Create(channel_.get(), cq, rpcmethod_PostInputs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* V2::Stub::PrepareAsyncPostInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiInputResponse>::Create(channel_.get(), cq, rpcmethod_PostInputs_, context, request, false);
}

::grpc::Status V2::Stub::PatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::clarifai::api::MultiInputResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchInputs_, context, request, response);
}

void V2::Stub::experimental_async::PatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchInputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchInputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchInputs(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchInputs_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiInputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchInputs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* V2::Stub::AsyncPatchInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiInputResponse>::Create(channel_.get(), cq, rpcmethod_PatchInputs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* V2::Stub::PrepareAsyncPatchInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiInputResponse>::Create(channel_.get(), cq, rpcmethod_PatchInputs_, context, request, false);
}

::grpc::Status V2::Stub::DeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteInput_, context, request, response);
}

void V2::Stub::experimental_async::DeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteInput_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteInput_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteInput(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteInput_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteInputRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteInput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteInputRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteInput_, context, request, false);
}

::grpc::Status V2::Stub::DeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteInputs_, context, request, response);
}

void V2::Stub::experimental_async::DeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteInputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteInputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteInputs(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteInputs_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteInputs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteInputs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteInputs_, context, request, false);
}

::grpc::Status V2::Stub::PostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostInputsSearches_, context, request, response);
}

void V2::Stub::experimental_async::PostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostInputsSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostInputsSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostInputsSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostInputsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostInputsSearches_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostInputsSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostInputsSearches_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* V2::Stub::AsyncPostInputsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiSearchResponse>::Create(channel_.get(), cq, rpcmethod_PostInputsSearches_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* V2::Stub::PrepareAsyncPostInputsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostInputsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiSearchResponse>::Create(channel_.get(), cq, rpcmethod_PostInputsSearches_, context, request, false);
}

::grpc::Status V2::Stub::PostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::clarifai::api::MultiOutputResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostModelOutputs_, context, request, response);
}

void V2::Stub::experimental_async::PostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest* request, ::clarifai::api::MultiOutputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostModelOutputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostModelOutputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiOutputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostModelOutputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostModelOutputs(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest* request, ::clarifai::api::MultiOutputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostModelOutputs_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostModelOutputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiOutputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostModelOutputs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiOutputResponse>* V2::Stub::AsyncPostModelOutputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiOutputResponse>::Create(channel_.get(), cq, rpcmethod_PostModelOutputs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiOutputResponse>* V2::Stub::PrepareAsyncPostModelOutputsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelOutputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiOutputResponse>::Create(channel_.get(), cq, rpcmethod_PostModelOutputs_, context, request, false);
}

::grpc::Status V2::Stub::GetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::clarifai::api::SingleModelTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetModelType_, context, request, response);
}

void V2::Stub::experimental_async::GetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest* request, ::clarifai::api::SingleModelTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModelType_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetModelType(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModelType_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetModelType(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest* request, ::clarifai::api::SingleModelTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModelType_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetModelType(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModelType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelTypeResponse>* V2::Stub::AsyncGetModelTypeRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelTypeResponse>::Create(channel_.get(), cq, rpcmethod_GetModelType_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelTypeResponse>* V2::Stub::PrepareAsyncGetModelTypeRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelTypeResponse>::Create(channel_.get(), cq, rpcmethod_GetModelType_, context, request, false);
}

::grpc::Status V2::Stub::ListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::clarifai::api::ListOpenSourceLicensesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListOpenSourceLicenses_, context, request, response);
}

void V2::Stub::experimental_async::ListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest* request, ::clarifai::api::ListOpenSourceLicensesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOpenSourceLicenses_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListOpenSourceLicenses(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::ListOpenSourceLicensesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOpenSourceLicenses_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListOpenSourceLicenses(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest* request, ::clarifai::api::ListOpenSourceLicensesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListOpenSourceLicenses_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListOpenSourceLicenses(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::ListOpenSourceLicensesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListOpenSourceLicenses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::ListOpenSourceLicensesResponse>* V2::Stub::AsyncListOpenSourceLicensesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::ListOpenSourceLicensesResponse>::Create(channel_.get(), cq, rpcmethod_ListOpenSourceLicenses_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::ListOpenSourceLicensesResponse>* V2::Stub::PrepareAsyncListOpenSourceLicensesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::ListOpenSourceLicensesResponse>::Create(channel_.get(), cq, rpcmethod_ListOpenSourceLicenses_, context, request, false);
}

::grpc::Status V2::Stub::ListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::clarifai::api::MultiModelTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListModelTypes_, context, request, response);
}

void V2::Stub::experimental_async::ListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest* request, ::clarifai::api::MultiModelTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListModelTypes_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListModelTypes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListModelTypes_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListModelTypes(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest* request, ::clarifai::api::MultiModelTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListModelTypes_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListModelTypes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListModelTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelTypeResponse>* V2::Stub::AsyncListModelTypesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelTypeResponse>::Create(channel_.get(), cq, rpcmethod_ListModelTypes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelTypeResponse>* V2::Stub::PrepareAsyncListModelTypesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelTypeResponse>::Create(channel_.get(), cq, rpcmethod_ListModelTypes_, context, request, false);
}

::grpc::Status V2::Stub::GetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::clarifai::api::SingleModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetModel_, context, request, response);
}

void V2::Stub::experimental_async::GetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModel_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModel_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetModel(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModel_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* V2::Stub::AsyncGetModelRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelResponse>::Create(channel_.get(), cq, rpcmethod_GetModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* V2::Stub::PrepareAsyncGetModelRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelResponse>::Create(channel_.get(), cq, rpcmethod_GetModel_, context, request, false);
}

::grpc::Status V2::Stub::GetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::clarifai::api::SingleModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetModelOutputInfo_, context, request, response);
}

void V2::Stub::experimental_async::GetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModelOutputInfo_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetModelOutputInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModelOutputInfo_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetModelOutputInfo(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModelOutputInfo_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetModelOutputInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModelOutputInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* V2::Stub::AsyncGetModelOutputInfoRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelResponse>::Create(channel_.get(), cq, rpcmethod_GetModelOutputInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* V2::Stub::PrepareAsyncGetModelOutputInfoRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelResponse>::Create(channel_.get(), cq, rpcmethod_GetModelOutputInfo_, context, request, false);
}

::grpc::Status V2::Stub::ListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::clarifai::api::MultiModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListModels_, context, request, response);
}

void V2::Stub::experimental_async::ListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListModels_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListModels_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListModels(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest* request, ::clarifai::api::MultiModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListModels_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* V2::Stub::AsyncListModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelResponse>::Create(channel_.get(), cq, rpcmethod_ListModels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* V2::Stub::PrepareAsyncListModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelResponse>::Create(channel_.get(), cq, rpcmethod_ListModels_, context, request, false);
}

::grpc::Status V2::Stub::PostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::clarifai::api::MultiModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostModelsSearches_, context, request, response);
}

void V2::Stub::experimental_async::PostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostModelsSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostModelsSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostModelsSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostModelsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest* request, ::clarifai::api::MultiModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostModelsSearches_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostModelsSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostModelsSearches_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* V2::Stub::AsyncPostModelsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelResponse>::Create(channel_.get(), cq, rpcmethod_PostModelsSearches_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* V2::Stub::PrepareAsyncPostModelsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelResponse>::Create(channel_.get(), cq, rpcmethod_PostModelsSearches_, context, request, false);
}

::grpc::Status V2::Stub::PostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::clarifai::api::SingleModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostModels_, context, request, response);
}

void V2::Stub::experimental_async::PostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostModels_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostModels_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostModels(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest* request, ::clarifai::api::SingleModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostModels_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* V2::Stub::AsyncPostModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelResponse>::Create(channel_.get(), cq, rpcmethod_PostModels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* V2::Stub::PrepareAsyncPostModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelResponse>::Create(channel_.get(), cq, rpcmethod_PostModels_, context, request, false);
}

::grpc::Status V2::Stub::PatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::clarifai::api::MultiModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchModels_, context, request, response);
}

void V2::Stub::experimental_async::PatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchModels_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchModels_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchModels(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest* request, ::clarifai::api::MultiModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchModels_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* V2::Stub::AsyncPatchModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelResponse>::Create(channel_.get(), cq, rpcmethod_PatchModels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelResponse>* V2::Stub::PrepareAsyncPatchModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelResponse>::Create(channel_.get(), cq, rpcmethod_PatchModels_, context, request, false);
}

::grpc::Status V2::Stub::DeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteModel_, context, request, response);
}

void V2::Stub::experimental_async::DeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteModel_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteModel_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteModel(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteModel_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteModelRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteModelRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteModel_, context, request, false);
}

::grpc::Status V2::Stub::DeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteModels_, context, request, response);
}

void V2::Stub::experimental_async::DeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteModels_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteModels_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteModels(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteModels_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteModels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteModels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteModelsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteModels_, context, request, false);
}

::grpc::Status V2::Stub::ListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::clarifai::api::MultiInputResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListModelInputs_, context, request, response);
}

void V2::Stub::experimental_async::ListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListModelInputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListModelInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiInputResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListModelInputs_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListModelInputs(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest* request, ::clarifai::api::MultiInputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListModelInputs_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListModelInputs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiInputResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListModelInputs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* V2::Stub::AsyncListModelInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiInputResponse>::Create(channel_.get(), cq, rpcmethod_ListModelInputs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiInputResponse>* V2::Stub::PrepareAsyncListModelInputsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiInputResponse>::Create(channel_.get(), cq, rpcmethod_ListModelInputs_, context, request, false);
}

::grpc::Status V2::Stub::GetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::clarifai::api::SingleModelVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetModelVersion_, context, request, response);
}

void V2::Stub::experimental_async::GetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest* request, ::clarifai::api::SingleModelVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModelVersion_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetModelVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModelVersion_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetModelVersion(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest* request, ::clarifai::api::SingleModelVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModelVersion_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetModelVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModelVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>* V2::Stub::AsyncGetModelVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetModelVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>* V2::Stub::PrepareAsyncGetModelVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetModelVersion_, context, request, false);
}

::grpc::Status V2::Stub::ListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::clarifai::api::MultiModelVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListModelVersions_, context, request, response);
}

void V2::Stub::experimental_async::ListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListModelVersions_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListModelVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListModelVersions_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListModelVersions(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListModelVersions_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListModelVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListModelVersions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>* V2::Stub::AsyncListModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelVersionResponse>::Create(channel_.get(), cq, rpcmethod_ListModelVersions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>* V2::Stub::PrepareAsyncListModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelVersionResponse>::Create(channel_.get(), cq, rpcmethod_ListModelVersions_, context, request, false);
}

::grpc::Status V2::Stub::PostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::clarifai::api::SingleModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostModelVersions_, context, request, response);
}

void V2::Stub::experimental_async::PostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostModelVersions_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostModelVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostModelVersions_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest* request, ::clarifai::api::SingleModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostModelVersions_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostModelVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostModelVersions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* V2::Stub::AsyncPostModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelResponse>::Create(channel_.get(), cq, rpcmethod_PostModelVersions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelResponse>* V2::Stub::PrepareAsyncPostModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelResponse>::Create(channel_.get(), cq, rpcmethod_PostModelVersions_, context, request, false);
}

::grpc::Status V2::Stub::PatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::clarifai::api::MultiModelVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchModelVersions_, context, request, response);
}

void V2::Stub::experimental_async::PatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchModelVersions_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchModelVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchModelVersions_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchModelVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchModelVersions_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchModelVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchModelVersions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>* V2::Stub::AsyncPatchModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelVersionResponse>::Create(channel_.get(), cq, rpcmethod_PatchModelVersions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionResponse>* V2::Stub::PrepareAsyncPatchModelVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchModelVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelVersionResponse>::Create(channel_.get(), cq, rpcmethod_PatchModelVersions_, context, request, false);
}

::grpc::Status V2::Stub::DeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteModelVersion_, context, request, response);
}

void V2::Stub::experimental_async::DeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteModelVersion_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteModelVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteModelVersion_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteModelVersion(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteModelVersion_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteModelVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteModelVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteModelVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteModelVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteModelVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteModelVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteModelVersion_, context, request, false);
}

::grpc::Status V2::Stub::GetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::clarifai::api::SingleModelVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetModelVersionMetrics_, context, request, response);
}

void V2::Stub::experimental_async::GetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModelVersionMetrics_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetModelVersionMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModelVersionMetrics_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModelVersionMetrics_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetModelVersionMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModelVersionMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>* V2::Stub::AsyncGetModelVersionMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetModelVersionMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>* V2::Stub::PrepareAsyncGetModelVersionMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetModelVersionMetrics_, context, request, false);
}

::grpc::Status V2::Stub::PostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::clarifai::api::SingleModelVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostModelVersionMetrics_, context, request, response);
}

void V2::Stub::experimental_async::PostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostModelVersionMetrics_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostModelVersionMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostModelVersionMetrics_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostModelVersionMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostModelVersionMetrics_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostModelVersionMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostModelVersionMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>* V2::Stub::AsyncPostModelVersionMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelVersionResponse>::Create(channel_.get(), cq, rpcmethod_PostModelVersionMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionResponse>* V2::Stub::PrepareAsyncPostModelVersionMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostModelVersionMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelVersionResponse>::Create(channel_.get(), cq, rpcmethod_PostModelVersionMetrics_, context, request, false);
}

::grpc::Status V2::Stub::ListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::clarifai::api::MultiModelReferenceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListModelReferences_, context, request, response);
}

void V2::Stub::experimental_async::ListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest* request, ::clarifai::api::MultiModelReferenceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListModelReferences_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListModelReferences(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelReferenceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListModelReferences_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListModelReferences(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest* request, ::clarifai::api::MultiModelReferenceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListModelReferences_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListModelReferences(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelReferenceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListModelReferences_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelReferenceResponse>* V2::Stub::AsyncListModelReferencesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelReferenceResponse>::Create(channel_.get(), cq, rpcmethod_ListModelReferences_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelReferenceResponse>* V2::Stub::PrepareAsyncListModelReferencesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelReferencesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelReferenceResponse>::Create(channel_.get(), cq, rpcmethod_ListModelReferences_, context, request, false);
}

::grpc::Status V2::Stub::GetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::clarifai::api::SingleModelVersionInputExampleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetModelVersionInputExample_, context, request, response);
}

void V2::Stub::experimental_async::GetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest* request, ::clarifai::api::SingleModelVersionInputExampleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModelVersionInputExample_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetModelVersionInputExample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelVersionInputExampleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModelVersionInputExample_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetModelVersionInputExample(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest* request, ::clarifai::api::SingleModelVersionInputExampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModelVersionInputExample_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetModelVersionInputExample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleModelVersionInputExampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModelVersionInputExample_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionInputExampleResponse>* V2::Stub::AsyncGetModelVersionInputExampleRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelVersionInputExampleResponse>::Create(channel_.get(), cq, rpcmethod_GetModelVersionInputExample_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleModelVersionInputExampleResponse>* V2::Stub::PrepareAsyncGetModelVersionInputExampleRaw(::grpc::ClientContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleModelVersionInputExampleResponse>::Create(channel_.get(), cq, rpcmethod_GetModelVersionInputExample_, context, request, false);
}

::grpc::Status V2::Stub::ListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::clarifai::api::MultiModelVersionInputExampleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListModelVersionInputExamples_, context, request, response);
}

void V2::Stub::experimental_async::ListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest* request, ::clarifai::api::MultiModelVersionInputExampleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListModelVersionInputExamples_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListModelVersionInputExamples(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelVersionInputExampleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListModelVersionInputExamples_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListModelVersionInputExamples(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest* request, ::clarifai::api::MultiModelVersionInputExampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListModelVersionInputExamples_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListModelVersionInputExamples(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiModelVersionInputExampleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListModelVersionInputExamples_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionInputExampleResponse>* V2::Stub::AsyncListModelVersionInputExamplesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelVersionInputExampleResponse>::Create(channel_.get(), cq, rpcmethod_ListModelVersionInputExamples_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiModelVersionInputExampleResponse>* V2::Stub::PrepareAsyncListModelVersionInputExamplesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiModelVersionInputExampleResponse>::Create(channel_.get(), cq, rpcmethod_ListModelVersionInputExamples_, context, request, false);
}

::grpc::Status V2::Stub::GetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::clarifai::api::SingleWorkflowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWorkflow_, context, request, response);
}

void V2::Stub::experimental_async::GetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest* request, ::clarifai::api::SingleWorkflowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkflow_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetWorkflow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleWorkflowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkflow_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetWorkflow(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest* request, ::clarifai::api::SingleWorkflowResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWorkflow_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetWorkflow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleWorkflowResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWorkflow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowResponse>* V2::Stub::AsyncGetWorkflowRaw(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleWorkflowResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkflow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowResponse>* V2::Stub::PrepareAsyncGetWorkflowRaw(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleWorkflowResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkflow_, context, request, false);
}

::grpc::Status V2::Stub::ListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::clarifai::api::MultiWorkflowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListWorkflows_, context, request, response);
}

void V2::Stub::experimental_async::ListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListWorkflows_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListWorkflows(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiWorkflowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListWorkflows_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListWorkflows(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListWorkflows_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListWorkflows(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiWorkflowResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListWorkflows_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>* V2::Stub::AsyncListWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiWorkflowResponse>::Create(channel_.get(), cq, rpcmethod_ListWorkflows_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>* V2::Stub::PrepareAsyncListWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiWorkflowResponse>::Create(channel_.get(), cq, rpcmethod_ListWorkflows_, context, request, false);
}

::grpc::Status V2::Stub::PostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::clarifai::api::MultiWorkflowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostWorkflows_, context, request, response);
}

void V2::Stub::experimental_async::PostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostWorkflows_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostWorkflows(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiWorkflowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostWorkflows_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostWorkflows_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostWorkflows(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiWorkflowResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostWorkflows_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>* V2::Stub::AsyncPostWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiWorkflowResponse>::Create(channel_.get(), cq, rpcmethod_PostWorkflows_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>* V2::Stub::PrepareAsyncPostWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiWorkflowResponse>::Create(channel_.get(), cq, rpcmethod_PostWorkflows_, context, request, false);
}

::grpc::Status V2::Stub::PatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::clarifai::api::MultiWorkflowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchWorkflows_, context, request, response);
}

void V2::Stub::experimental_async::PatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchWorkflows_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchWorkflows(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiWorkflowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchWorkflows_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchWorkflows(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchWorkflows_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchWorkflows(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiWorkflowResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchWorkflows_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>* V2::Stub::AsyncPatchWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiWorkflowResponse>::Create(channel_.get(), cq, rpcmethod_PatchWorkflows_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowResponse>* V2::Stub::PrepareAsyncPatchWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiWorkflowResponse>::Create(channel_.get(), cq, rpcmethod_PatchWorkflows_, context, request, false);
}

::grpc::Status V2::Stub::DeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteWorkflow_, context, request, response);
}

void V2::Stub::experimental_async::DeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflow_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteWorkflow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflow_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteWorkflow(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflow_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteWorkflow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteWorkflowRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteWorkflow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteWorkflowRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteWorkflow_, context, request, false);
}

::grpc::Status V2::Stub::DeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteWorkflows_, context, request, response);
}

void V2::Stub::experimental_async::DeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflows_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteWorkflows(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflows_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteWorkflows(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflows_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteWorkflows(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflows_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteWorkflows_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteWorkflowsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteWorkflows_, context, request, false);
}

::grpc::Status V2::Stub::PostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::clarifai::api::PostWorkflowResultsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostWorkflowResults_, context, request, response);
}

void V2::Stub::experimental_async::PostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest* request, ::clarifai::api::PostWorkflowResultsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostWorkflowResults_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostWorkflowResults(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::PostWorkflowResultsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostWorkflowResults_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostWorkflowResults(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest* request, ::clarifai::api::PostWorkflowResultsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostWorkflowResults_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostWorkflowResults(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::PostWorkflowResultsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostWorkflowResults_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsResponse>* V2::Stub::AsyncPostWorkflowResultsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::PostWorkflowResultsResponse>::Create(channel_.get(), cq, rpcmethod_PostWorkflowResults_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsResponse>* V2::Stub::PrepareAsyncPostWorkflowResultsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::PostWorkflowResultsResponse>::Create(channel_.get(), cq, rpcmethod_PostWorkflowResults_, context, request, false);
}

::grpc::Status V2::Stub::PostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostWorkflowResultsSimilarity_, context, request, response);
}

void V2::Stub::experimental_async::PostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostWorkflowResultsSimilarity_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostWorkflowResultsSimilarity_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostWorkflowResultsSimilarity_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostWorkflowResultsSimilarity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostWorkflowResultsSimilarity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsSimilarityResponse>* V2::Stub::AsyncPostWorkflowResultsSimilarityRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::PostWorkflowResultsSimilarityResponse>::Create(channel_.get(), cq, rpcmethod_PostWorkflowResultsSimilarity_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::PostWorkflowResultsSimilarityResponse>* V2::Stub::PrepareAsyncPostWorkflowResultsSimilarityRaw(::grpc::ClientContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::PostWorkflowResultsSimilarityResponse>::Create(channel_.get(), cq, rpcmethod_PostWorkflowResultsSimilarity_, context, request, false);
}

::grpc::Status V2::Stub::ListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::clarifai::api::MultiWorkflowVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListWorkflowVersions_, context, request, response);
}

void V2::Stub::experimental_async::ListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListWorkflowVersions_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListWorkflowVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiWorkflowVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListWorkflowVersions_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListWorkflowVersions_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListWorkflowVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiWorkflowVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListWorkflowVersions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>* V2::Stub::AsyncListWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiWorkflowVersionResponse>::Create(channel_.get(), cq, rpcmethod_ListWorkflowVersions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>* V2::Stub::PrepareAsyncListWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiWorkflowVersionResponse>::Create(channel_.get(), cq, rpcmethod_ListWorkflowVersions_, context, request, false);
}

::grpc::Status V2::Stub::GetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::clarifai::api::SingleWorkflowVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWorkflowVersion_, context, request, response);
}

void V2::Stub::experimental_async::GetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest* request, ::clarifai::api::SingleWorkflowVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkflowVersion_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetWorkflowVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleWorkflowVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkflowVersion_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetWorkflowVersion(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest* request, ::clarifai::api::SingleWorkflowVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWorkflowVersion_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetWorkflowVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleWorkflowVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWorkflowVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowVersionResponse>* V2::Stub::AsyncGetWorkflowVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleWorkflowVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkflowVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleWorkflowVersionResponse>* V2::Stub::PrepareAsyncGetWorkflowVersionRaw(::grpc::ClientContext* context, const ::clarifai::api::GetWorkflowVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleWorkflowVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkflowVersion_, context, request, false);
}

::grpc::Status V2::Stub::DeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteWorkflowVersions_, context, request, response);
}

void V2::Stub::experimental_async::DeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflowVersions_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteWorkflowVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflowVersions_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflowVersions_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteWorkflowVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflowVersions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteWorkflowVersions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteWorkflowVersions_, context, request, false);
}

::grpc::Status V2::Stub::PatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::clarifai::api::MultiWorkflowVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchWorkflowVersions_, context, request, response);
}

void V2::Stub::experimental_async::PatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchWorkflowVersions_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchWorkflowVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiWorkflowVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchWorkflowVersions_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchWorkflowVersions(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchWorkflowVersions_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchWorkflowVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiWorkflowVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchWorkflowVersions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>* V2::Stub::AsyncPatchWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiWorkflowVersionResponse>::Create(channel_.get(), cq, rpcmethod_PatchWorkflowVersions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiWorkflowVersionResponse>* V2::Stub::PrepareAsyncPatchWorkflowVersionsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiWorkflowVersionResponse>::Create(channel_.get(), cq, rpcmethod_PatchWorkflowVersions_, context, request, false);
}

::grpc::Status V2::Stub::GetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::clarifai::api::SingleKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetKey_, context, request, response);
}

void V2::Stub::experimental_async::GetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest* request, ::clarifai::api::SingleKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetKey_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetKey_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetKey(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest* request, ::clarifai::api::SingleKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetKey_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleKeyResponse>* V2::Stub::AsyncGetKeyRaw(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleKeyResponse>::Create(channel_.get(), cq, rpcmethod_GetKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleKeyResponse>* V2::Stub::PrepareAsyncGetKeyRaw(::grpc::ClientContext* context, const ::clarifai::api::GetKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleKeyResponse>::Create(channel_.get(), cq, rpcmethod_GetKey_, context, request, false);
}

::grpc::Status V2::Stub::ListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::clarifai::api::MultiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListKeys_, context, request, response);
}

void V2::Stub::experimental_async::ListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListKeys_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListKeys_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListKeys(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListKeys_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListKeys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* V2::Stub::AsyncListKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiKeyResponse>::Create(channel_.get(), cq, rpcmethod_ListKeys_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* V2::Stub::PrepareAsyncListKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::ListKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiKeyResponse>::Create(channel_.get(), cq, rpcmethod_ListKeys_, context, request, false);
}

::grpc::Status V2::Stub::ListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::clarifai::api::MultiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListAppKeys_, context, request, response);
}

void V2::Stub::experimental_async::ListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAppKeys_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListAppKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAppKeys_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListAppKeys(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAppKeys_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListAppKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAppKeys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* V2::Stub::AsyncListAppKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiKeyResponse>::Create(channel_.get(), cq, rpcmethod_ListAppKeys_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* V2::Stub::PrepareAsyncListAppKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiKeyResponse>::Create(channel_.get(), cq, rpcmethod_ListAppKeys_, context, request, false);
}

::grpc::Status V2::Stub::DeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteKey_, context, request, response);
}

void V2::Stub::experimental_async::DeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteKey_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteKey_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteKey(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteKey_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteKeyRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteKeyRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteKey_, context, request, false);
}

::grpc::Status V2::Stub::PostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::clarifai::api::MultiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostKeys_, context, request, response);
}

void V2::Stub::experimental_async::PostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostKeys_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostKeys_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostKeys(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostKeys_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostKeys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* V2::Stub::AsyncPostKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiKeyResponse>::Create(channel_.get(), cq, rpcmethod_PostKeys_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* V2::Stub::PrepareAsyncPostKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::PostKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiKeyResponse>::Create(channel_.get(), cq, rpcmethod_PostKeys_, context, request, false);
}

::grpc::Status V2::Stub::PatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::clarifai::api::MultiKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchKeys_, context, request, response);
}

void V2::Stub::experimental_async::PatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchKeys_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchKeys_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchKeys(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchKeys_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchKeys(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchKeys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* V2::Stub::AsyncPatchKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiKeyResponse>::Create(channel_.get(), cq, rpcmethod_PatchKeys_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiKeyResponse>* V2::Stub::PrepareAsyncPatchKeysRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiKeyResponse>::Create(channel_.get(), cq, rpcmethod_PatchKeys_, context, request, false);
}

::grpc::Status V2::Stub::MyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::clarifai::api::MultiScopeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MyScopes_, context, request, response);
}

void V2::Stub::experimental_async::MyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest* request, ::clarifai::api::MultiScopeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MyScopes_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::MyScopes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiScopeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MyScopes_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::MyScopes(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest* request, ::clarifai::api::MultiScopeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MyScopes_, context, request, response, reactor);
}

void V2::Stub::experimental_async::MyScopes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiScopeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MyScopes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeResponse>* V2::Stub::AsyncMyScopesRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiScopeResponse>::Create(channel_.get(), cq, rpcmethod_MyScopes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeResponse>* V2::Stub::PrepareAsyncMyScopesRaw(::grpc::ClientContext* context, const ::clarifai::api::MyScopesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiScopeResponse>::Create(channel_.get(), cq, rpcmethod_MyScopes_, context, request, false);
}

::grpc::Status V2::Stub::ListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::clarifai::api::MultiScopeDepsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListScopes_, context, request, response);
}

void V2::Stub::experimental_async::ListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest* request, ::clarifai::api::MultiScopeDepsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListScopes_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListScopes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiScopeDepsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListScopes_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListScopes(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest* request, ::clarifai::api::MultiScopeDepsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListScopes_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListScopes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiScopeDepsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListScopes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeDepsResponse>* V2::Stub::AsyncListScopesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiScopeDepsResponse>::Create(channel_.get(), cq, rpcmethod_ListScopes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiScopeDepsResponse>* V2::Stub::PrepareAsyncListScopesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListScopesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiScopeDepsResponse>::Create(channel_.get(), cq, rpcmethod_ListScopes_, context, request, false);
}

::grpc::Status V2::Stub::GetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::clarifai::api::SingleAppResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetApp_, context, request, response);
}

void V2::Stub::experimental_async::GetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest* request, ::clarifai::api::SingleAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetApp_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetApp_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetApp(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest* request, ::clarifai::api::SingleAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetApp_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetApp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>* V2::Stub::AsyncGetAppRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleAppResponse>::Create(channel_.get(), cq, rpcmethod_GetApp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppResponse>* V2::Stub::PrepareAsyncGetAppRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAppRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleAppResponse>::Create(channel_.get(), cq, rpcmethod_GetApp_, context, request, false);
}

::grpc::Status V2::Stub::ListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::clarifai::api::MultiAppResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListApps_, context, request, response);
}

void V2::Stub::experimental_async::ListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListApps_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListApps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListApps_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListApps(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListApps_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListApps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListApps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* V2::Stub::AsyncListAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAppResponse>::Create(channel_.get(), cq, rpcmethod_ListApps_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* V2::Stub::PrepareAsyncListAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAppResponse>::Create(channel_.get(), cq, rpcmethod_ListApps_, context, request, false);
}

::grpc::Status V2::Stub::DeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteApp_, context, request, response);
}

void V2::Stub::experimental_async::DeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteApp_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteApp_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteApp(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteApp_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteApp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteApp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteAppRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteApp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteAppRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAppRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteApp_, context, request, false);
}

::grpc::Status V2::Stub::PostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::clarifai::api::MultiAppResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostApps_, context, request, response);
}

void V2::Stub::experimental_async::PostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostApps_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostApps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostApps_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostApps(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostApps_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostApps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostApps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* V2::Stub::AsyncPostAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAppResponse>::Create(channel_.get(), cq, rpcmethod_PostApps_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* V2::Stub::PrepareAsyncPostAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAppResponse>::Create(channel_.get(), cq, rpcmethod_PostApps_, context, request, false);
}

::grpc::Status V2::Stub::PatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::clarifai::api::MultiAppResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchApps_, context, request, response);
}

void V2::Stub::experimental_async::PatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchApps_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchApps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchApps_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchApps(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchApps_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchApps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchApps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* V2::Stub::AsyncPatchAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAppResponse>::Create(channel_.get(), cq, rpcmethod_PatchApps_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* V2::Stub::PrepareAsyncPatchAppsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchAppsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAppResponse>::Create(channel_.get(), cq, rpcmethod_PatchApps_, context, request, false);
}

::grpc::Status V2::Stub::PostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::clarifai::api::MultiAppResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostAppsSearches_, context, request, response);
}

void V2::Stub::experimental_async::PostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAppsSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostAppsSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAppResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAppsSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostAppsSearches(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest* request, ::clarifai::api::MultiAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostAppsSearches_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostAppsSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAppResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostAppsSearches_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* V2::Stub::AsyncPostAppsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAppResponse>::Create(channel_.get(), cq, rpcmethod_PostAppsSearches_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppResponse>* V2::Stub::PrepareAsyncPostAppsSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppsSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAppResponse>::Create(channel_.get(), cq, rpcmethod_PostAppsSearches_, context, request, false);
}

::grpc::Status V2::Stub::PostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::clarifai::api::SinglePasswordValidationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostValidatePassword_, context, request, response);
}

void V2::Stub::experimental_async::PostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest* request, ::clarifai::api::SinglePasswordValidationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostValidatePassword_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostValidatePassword(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SinglePasswordValidationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostValidatePassword_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostValidatePassword(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest* request, ::clarifai::api::SinglePasswordValidationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostValidatePassword_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostValidatePassword(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SinglePasswordValidationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostValidatePassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SinglePasswordValidationResponse>* V2::Stub::AsyncPostValidatePasswordRaw(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SinglePasswordValidationResponse>::Create(channel_.get(), cq, rpcmethod_PostValidatePassword_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SinglePasswordValidationResponse>* V2::Stub::PrepareAsyncPostValidatePasswordRaw(::grpc::ClientContext* context, const ::clarifai::api::PostValidatePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SinglePasswordValidationResponse>::Create(channel_.get(), cq, rpcmethod_PostValidatePassword_, context, request, false);
}

::grpc::Status V2::Stub::GetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::clarifai::api::SingleSearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSearch_, context, request, response);
}

void V2::Stub::experimental_async::GetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest* request, ::clarifai::api::SingleSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSearch_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSearch_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetSearch(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest* request, ::clarifai::api::SingleSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSearch_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSearch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleSearchResponse>* V2::Stub::AsyncGetSearchRaw(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleSearchResponse>::Create(channel_.get(), cq, rpcmethod_GetSearch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleSearchResponse>* V2::Stub::PrepareAsyncGetSearchRaw(::grpc::ClientContext* context, const ::clarifai::api::GetSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleSearchResponse>::Create(channel_.get(), cq, rpcmethod_GetSearch_, context, request, false);
}

::grpc::Status V2::Stub::ListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListSearches_, context, request, response);
}

void V2::Stub::experimental_async::ListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListSearches(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListSearches_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListSearches_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* V2::Stub::AsyncListSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiSearchResponse>::Create(channel_.get(), cq, rpcmethod_ListSearches_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* V2::Stub::PrepareAsyncListSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiSearchResponse>::Create(channel_.get(), cq, rpcmethod_ListSearches_, context, request, false);
}

::grpc::Status V2::Stub::PostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::clarifai::api::MultiSearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostSearches_, context, request, response);
}

void V2::Stub::experimental_async::PostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostSearches_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostSearches(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostSearches_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostSearches(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostSearches_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* V2::Stub::AsyncPostSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiSearchResponse>::Create(channel_.get(), cq, rpcmethod_PostSearches_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* V2::Stub::PrepareAsyncPostSearchesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiSearchResponse>::Create(channel_.get(), cq, rpcmethod_PostSearches_, context, request, false);
}

::grpc::Status V2::Stub::PostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::clarifai::api::MultiSearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostSearchesByID_, context, request, response);
}

void V2::Stub::experimental_async::PostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostSearchesByID_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostSearchesByID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiSearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostSearchesByID_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostSearchesByID(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostSearchesByID_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostSearchesByID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiSearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostSearchesByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* V2::Stub::AsyncPostSearchesByIDRaw(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiSearchResponse>::Create(channel_.get(), cq, rpcmethod_PostSearchesByID_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiSearchResponse>* V2::Stub::PrepareAsyncPostSearchesByIDRaw(::grpc::ClientContext* context, const ::clarifai::api::PostSearchesByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiSearchResponse>::Create(channel_.get(), cq, rpcmethod_PostSearchesByID_, context, request, false);
}

::grpc::Status V2::Stub::PostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostAnnotationSearchMetrics_, context, request, response);
}

void V2::Stub::experimental_async::PostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAnnotationSearchMetrics_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAnnotationSearchMetrics_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostAnnotationSearchMetrics_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostAnnotationSearchMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostAnnotationSearchMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* V2::Stub::AsyncPostAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAnnotationSearchMetricsResponse>::Create(channel_.get(), cq, rpcmethod_PostAnnotationSearchMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* V2::Stub::PrepareAsyncPostAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAnnotationSearchMetricsResponse>::Create(channel_.get(), cq, rpcmethod_PostAnnotationSearchMetrics_, context, request, false);
}

::grpc::Status V2::Stub::GetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAnnotationSearchMetrics_, context, request, response);
}

void V2::Stub::experimental_async::GetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAnnotationSearchMetrics_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAnnotationSearchMetrics_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAnnotationSearchMetrics_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetAnnotationSearchMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAnnotationSearchMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* V2::Stub::AsyncGetAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAnnotationSearchMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetAnnotationSearchMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* V2::Stub::PrepareAsyncGetAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAnnotationSearchMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetAnnotationSearchMetrics_, context, request, false);
}

::grpc::Status V2::Stub::ListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListAnnotationSearchMetrics_, context, request, response);
}

void V2::Stub::experimental_async::ListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAnnotationSearchMetrics_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAnnotationSearchMetrics_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAnnotationSearchMetrics_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListAnnotationSearchMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAnnotationSearchMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* V2::Stub::AsyncListAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAnnotationSearchMetricsResponse>::Create(channel_.get(), cq, rpcmethod_ListAnnotationSearchMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAnnotationSearchMetricsResponse>* V2::Stub::PrepareAsyncListAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAnnotationSearchMetricsResponse>::Create(channel_.get(), cq, rpcmethod_ListAnnotationSearchMetrics_, context, request, false);
}

::grpc::Status V2::Stub::DeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteAnnotationSearchMetrics_, context, request, response);
}

void V2::Stub::experimental_async::DeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAnnotationSearchMetrics_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAnnotationSearchMetrics_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAnnotationSearchMetrics_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteAnnotationSearchMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAnnotationSearchMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteAnnotationSearchMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteAnnotationSearchMetricsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteAnnotationSearchMetrics_, context, request, false);
}

::grpc::Status V2::Stub::DeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteSearch_, context, request, response);
}

void V2::Stub::experimental_async::DeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteSearch_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteSearch_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteSearch(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteSearch_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteSearch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteSearch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteSearchRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSearch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteSearchRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSearch_, context, request, false);
}

::grpc::Status V2::Stub::ListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::clarifai::api::MultiStatusCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListStatusCodes_, context, request, response);
}

void V2::Stub::experimental_async::ListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest* request, ::clarifai::api::MultiStatusCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListStatusCodes_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListStatusCodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiStatusCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListStatusCodes_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListStatusCodes(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest* request, ::clarifai::api::MultiStatusCodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListStatusCodes_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListStatusCodes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiStatusCodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListStatusCodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatusCodeResponse>* V2::Stub::AsyncListStatusCodesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiStatusCodeResponse>::Create(channel_.get(), cq, rpcmethod_ListStatusCodes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatusCodeResponse>* V2::Stub::PrepareAsyncListStatusCodesRaw(::grpc::ClientContext* context, const ::clarifai::api::ListStatusCodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiStatusCodeResponse>::Create(channel_.get(), cq, rpcmethod_ListStatusCodes_, context, request, false);
}

::grpc::Status V2::Stub::GetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::clarifai::api::SingleStatusCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetStatusCode_, context, request, response);
}

void V2::Stub::experimental_async::GetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest* request, ::clarifai::api::SingleStatusCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStatusCode_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetStatusCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleStatusCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStatusCode_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetStatusCode(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest* request, ::clarifai::api::SingleStatusCodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStatusCode_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetStatusCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleStatusCodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStatusCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleStatusCodeResponse>* V2::Stub::AsyncGetStatusCodeRaw(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleStatusCodeResponse>::Create(channel_.get(), cq, rpcmethod_GetStatusCode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleStatusCodeResponse>* V2::Stub::PrepareAsyncGetStatusCodeRaw(::grpc::ClientContext* context, const ::clarifai::api::GetStatusCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleStatusCodeResponse>::Create(channel_.get(), cq, rpcmethod_GetStatusCode_, context, request, false);
}

::grpc::Status V2::Stub::ListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::clarifai::api::MultiCollaboratorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListCollaborators_, context, request, response);
}

void V2::Stub::experimental_async::ListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCollaborators_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListCollaborators(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollaboratorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCollaborators_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListCollaborators(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListCollaborators_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListCollaborators(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollaboratorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListCollaborators_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>* V2::Stub::AsyncListCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollaboratorsResponse>::Create(channel_.get(), cq, rpcmethod_ListCollaborators_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>* V2::Stub::PrepareAsyncListCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollaboratorsResponse>::Create(channel_.get(), cq, rpcmethod_ListCollaborators_, context, request, false);
}

::grpc::Status V2::Stub::PostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::clarifai::api::MultiCollaboratorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostCollaborators_, context, request, response);
}

void V2::Stub::experimental_async::PostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostCollaborators_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostCollaborators(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollaboratorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostCollaborators_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostCollaborators_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostCollaborators(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollaboratorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostCollaborators_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>* V2::Stub::AsyncPostCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollaboratorsResponse>::Create(channel_.get(), cq, rpcmethod_PostCollaborators_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>* V2::Stub::PrepareAsyncPostCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollaboratorsResponse>::Create(channel_.get(), cq, rpcmethod_PostCollaborators_, context, request, false);
}

::grpc::Status V2::Stub::PatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::clarifai::api::MultiCollaboratorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchCollaborators_, context, request, response);
}

void V2::Stub::experimental_async::PatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchCollaborators_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchCollaborators(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollaboratorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchCollaborators_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchCollaborators(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchCollaborators_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchCollaborators(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollaboratorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchCollaborators_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>* V2::Stub::AsyncPatchCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollaboratorsResponse>::Create(channel_.get(), cq, rpcmethod_PatchCollaborators_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaboratorsResponse>* V2::Stub::PrepareAsyncPatchCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollaboratorsResponse>::Create(channel_.get(), cq, rpcmethod_PatchCollaborators_, context, request, false);
}

::grpc::Status V2::Stub::DeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteCollaborators_, context, request, response);
}

void V2::Stub::experimental_async::DeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteCollaborators_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteCollaborators(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteCollaborators_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteCollaborators(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteCollaborators_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteCollaborators(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteCollaborators_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteCollaborators_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteCollaboratorsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollaboratorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteCollaborators_, context, request, false);
}

::grpc::Status V2::Stub::ListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::clarifai::api::MultiCollaborationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListCollaborations_, context, request, response);
}

void V2::Stub::experimental_async::ListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest* request, ::clarifai::api::MultiCollaborationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCollaborations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListCollaborations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollaborationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCollaborations_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListCollaborations(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest* request, ::clarifai::api::MultiCollaborationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListCollaborations_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListCollaborations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollaborationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListCollaborations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaborationsResponse>* V2::Stub::AsyncListCollaborationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollaborationsResponse>::Create(channel_.get(), cq, rpcmethod_ListCollaborations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollaborationsResponse>* V2::Stub::PrepareAsyncListCollaborationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollaborationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollaborationsResponse>::Create(channel_.get(), cq, rpcmethod_ListCollaborations_, context, request, false);
}

::grpc::Status V2::Stub::PostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::clarifai::api::MultiAppDuplicationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostAppDuplications_, context, request, response);
}

void V2::Stub::experimental_async::PostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAppDuplications_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostAppDuplications(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAppDuplicationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostAppDuplications_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostAppDuplications_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostAppDuplications(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAppDuplicationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostAppDuplications_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>* V2::Stub::AsyncPostAppDuplicationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAppDuplicationsResponse>::Create(channel_.get(), cq, rpcmethod_PostAppDuplications_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>* V2::Stub::PrepareAsyncPostAppDuplicationsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAppDuplicationsResponse>::Create(channel_.get(), cq, rpcmethod_PostAppDuplications_, context, request, false);
}

::grpc::Status V2::Stub::ListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::clarifai::api::MultiAppDuplicationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListAppDuplications_, context, request, response);
}

void V2::Stub::experimental_async::ListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAppDuplications_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListAppDuplications(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAppDuplicationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAppDuplications_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListAppDuplications(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAppDuplications_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListAppDuplications(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiAppDuplicationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAppDuplications_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>* V2::Stub::AsyncListAppDuplicationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAppDuplicationsResponse>::Create(channel_.get(), cq, rpcmethod_ListAppDuplications_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiAppDuplicationsResponse>* V2::Stub::PrepareAsyncListAppDuplicationsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListAppDuplicationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiAppDuplicationsResponse>::Create(channel_.get(), cq, rpcmethod_ListAppDuplications_, context, request, false);
}

::grpc::Status V2::Stub::GetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::clarifai::api::SingleAppDuplicationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAppDuplication_, context, request, response);
}

void V2::Stub::experimental_async::GetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest* request, ::clarifai::api::SingleAppDuplicationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAppDuplication_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetAppDuplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleAppDuplicationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAppDuplication_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetAppDuplication(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest* request, ::clarifai::api::SingleAppDuplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAppDuplication_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetAppDuplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleAppDuplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAppDuplication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppDuplicationResponse>* V2::Stub::AsyncGetAppDuplicationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleAppDuplicationResponse>::Create(channel_.get(), cq, rpcmethod_GetAppDuplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleAppDuplicationResponse>* V2::Stub::PrepareAsyncGetAppDuplicationRaw(::grpc::ClientContext* context, const ::clarifai::api::GetAppDuplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleAppDuplicationResponse>::Create(channel_.get(), cq, rpcmethod_GetAppDuplication_, context, request, false);
}

::grpc::Status V2::Stub::PostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::clarifai::api::MultiTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostTasks_, context, request, response);
}

void V2::Stub::experimental_async::PostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostTasks_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostTasks_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostTasks(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostTasks_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostTasks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>* V2::Stub::AsyncPostTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiTaskResponse>::Create(channel_.get(), cq, rpcmethod_PostTasks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>* V2::Stub::PrepareAsyncPostTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::PostTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiTaskResponse>::Create(channel_.get(), cq, rpcmethod_PostTasks_, context, request, false);
}

::grpc::Status V2::Stub::GetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::clarifai::api::SingleTaskCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTaskAnnotationCount_, context, request, response);
}

void V2::Stub::experimental_async::GetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTaskAnnotationCount_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetTaskAnnotationCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleTaskCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTaskAnnotationCount_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetTaskAnnotationCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskAnnotationCount_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetTaskAnnotationCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleTaskCountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskAnnotationCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>* V2::Stub::AsyncGetTaskAnnotationCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleTaskCountResponse>::Create(channel_.get(), cq, rpcmethod_GetTaskAnnotationCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>* V2::Stub::PrepareAsyncGetTaskAnnotationCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleTaskCountResponse>::Create(channel_.get(), cq, rpcmethod_GetTaskAnnotationCount_, context, request, false);
}

::grpc::Status V2::Stub::GetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::clarifai::api::SingleTaskCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTaskInputCount_, context, request, response);
}

void V2::Stub::experimental_async::GetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTaskInputCount_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetTaskInputCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleTaskCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTaskInputCount_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetTaskInputCount(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskInputCount_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetTaskInputCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleTaskCountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskInputCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>* V2::Stub::AsyncGetTaskInputCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleTaskCountResponse>::Create(channel_.get(), cq, rpcmethod_GetTaskInputCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskCountResponse>* V2::Stub::PrepareAsyncGetTaskInputCountRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleTaskCountResponse>::Create(channel_.get(), cq, rpcmethod_GetTaskInputCount_, context, request, false);
}

::grpc::Status V2::Stub::GetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::clarifai::api::SingleTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTask_, context, request, response);
}

void V2::Stub::experimental_async::GetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest* request, ::clarifai::api::SingleTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetTask(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest* request, ::clarifai::api::SingleTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskResponse>* V2::Stub::AsyncGetTaskRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleTaskResponse>::Create(channel_.get(), cq, rpcmethod_GetTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleTaskResponse>* V2::Stub::PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::clarifai::api::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleTaskResponse>::Create(channel_.get(), cq, rpcmethod_GetTask_, context, request, false);
}

::grpc::Status V2::Stub::ListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::clarifai::api::MultiTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTasks_, context, request, response);
}

void V2::Stub::experimental_async::ListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTasks_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTasks_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListTasks(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTasks_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTasks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>* V2::Stub::AsyncListTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiTaskResponse>::Create(channel_.get(), cq, rpcmethod_ListTasks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>* V2::Stub::PrepareAsyncListTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiTaskResponse>::Create(channel_.get(), cq, rpcmethod_ListTasks_, context, request, false);
}

::grpc::Status V2::Stub::PatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::clarifai::api::MultiTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchTasks_, context, request, response);
}

void V2::Stub::experimental_async::PatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchTasks_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchTasks_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchTasks(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest* request, ::clarifai::api::MultiTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchTasks_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchTasks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>* V2::Stub::AsyncPatchTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiTaskResponse>::Create(channel_.get(), cq, rpcmethod_PatchTasks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTaskResponse>* V2::Stub::PrepareAsyncPatchTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiTaskResponse>::Create(channel_.get(), cq, rpcmethod_PatchTasks_, context, request, false);
}

::grpc::Status V2::Stub::DeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteTasks_, context, request, response);
}

void V2::Stub::experimental_async::DeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteTasks_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteTasks_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteTasks(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteTasks_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteTasks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteTasks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteTasksRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteTasks_, context, request, false);
}

::grpc::Status V2::Stub::PostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::clarifai::api::MultiCollectorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostCollectors_, context, request, response);
}

void V2::Stub::experimental_async::PostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostCollectors_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostCollectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollectorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostCollectors_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostCollectors(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostCollectors_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostCollectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollectorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostCollectors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>* V2::Stub::AsyncPostCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollectorResponse>::Create(channel_.get(), cq, rpcmethod_PostCollectors_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>* V2::Stub::PrepareAsyncPostCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PostCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollectorResponse>::Create(channel_.get(), cq, rpcmethod_PostCollectors_, context, request, false);
}

::grpc::Status V2::Stub::GetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::clarifai::api::SingleCollectorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCollector_, context, request, response);
}

void V2::Stub::experimental_async::GetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest* request, ::clarifai::api::SingleCollectorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollector_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetCollector(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleCollectorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollector_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::GetCollector(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest* request, ::clarifai::api::SingleCollectorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollector_, context, request, response, reactor);
}

void V2::Stub::experimental_async::GetCollector(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::SingleCollectorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollector_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleCollectorResponse>* V2::Stub::AsyncGetCollectorRaw(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleCollectorResponse>::Create(channel_.get(), cq, rpcmethod_GetCollector_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::SingleCollectorResponse>* V2::Stub::PrepareAsyncGetCollectorRaw(::grpc::ClientContext* context, const ::clarifai::api::GetCollectorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::SingleCollectorResponse>::Create(channel_.get(), cq, rpcmethod_GetCollector_, context, request, false);
}

::grpc::Status V2::Stub::ListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::clarifai::api::MultiCollectorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListCollectors_, context, request, response);
}

void V2::Stub::experimental_async::ListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCollectors_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListCollectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollectorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCollectors_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListCollectors(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListCollectors_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListCollectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollectorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListCollectors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>* V2::Stub::AsyncListCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollectorResponse>::Create(channel_.get(), cq, rpcmethod_ListCollectors_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>* V2::Stub::PrepareAsyncListCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollectorResponse>::Create(channel_.get(), cq, rpcmethod_ListCollectors_, context, request, false);
}

::grpc::Status V2::Stub::PatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::clarifai::api::MultiCollectorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PatchCollectors_, context, request, response);
}

void V2::Stub::experimental_async::PatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchCollectors_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchCollectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollectorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PatchCollectors_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PatchCollectors(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchCollectors_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PatchCollectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiCollectorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PatchCollectors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>* V2::Stub::AsyncPatchCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollectorResponse>::Create(channel_.get(), cq, rpcmethod_PatchCollectors_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiCollectorResponse>* V2::Stub::PrepareAsyncPatchCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::PatchCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiCollectorResponse>::Create(channel_.get(), cq, rpcmethod_PatchCollectors_, context, request, false);
}

::grpc::Status V2::Stub::DeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteCollectors_, context, request, response);
}

void V2::Stub::experimental_async::DeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteCollectors_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteCollectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteCollectors_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::DeleteCollectors(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteCollectors_, context, request, response, reactor);
}

void V2::Stub::experimental_async::DeleteCollectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteCollectors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncDeleteCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteCollectors_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncDeleteCollectorsRaw(::grpc::ClientContext* context, const ::clarifai::api::DeleteCollectorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_DeleteCollectors_, context, request, false);
}

::grpc::Status V2::Stub::PostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::clarifai::api::MultiStatValueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostStatValues_, context, request, response);
}

void V2::Stub::experimental_async::PostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest* request, ::clarifai::api::MultiStatValueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostStatValues_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostStatValues(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiStatValueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostStatValues_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostStatValues(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest* request, ::clarifai::api::MultiStatValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostStatValues_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostStatValues(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiStatValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostStatValues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueResponse>* V2::Stub::AsyncPostStatValuesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiStatValueResponse>::Create(channel_.get(), cq, rpcmethod_PostStatValues_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueResponse>* V2::Stub::PrepareAsyncPostStatValuesRaw(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiStatValueResponse>::Create(channel_.get(), cq, rpcmethod_PostStatValues_, context, request, false);
}

::grpc::Status V2::Stub::PostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::clarifai::api::MultiStatValueAggregateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostStatValuesAggregate_, context, request, response);
}

void V2::Stub::experimental_async::PostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest* request, ::clarifai::api::MultiStatValueAggregateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostStatValuesAggregate_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostStatValuesAggregate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiStatValueAggregateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostStatValuesAggregate_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostStatValuesAggregate(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest* request, ::clarifai::api::MultiStatValueAggregateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostStatValuesAggregate_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostStatValuesAggregate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiStatValueAggregateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostStatValuesAggregate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueAggregateResponse>* V2::Stub::AsyncPostStatValuesAggregateRaw(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiStatValueAggregateResponse>::Create(channel_.get(), cq, rpcmethod_PostStatValuesAggregate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiStatValueAggregateResponse>* V2::Stub::PrepareAsyncPostStatValuesAggregateRaw(::grpc::ClientContext* context, const ::clarifai::api::PostStatValuesAggregateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiStatValueAggregateResponse>::Create(channel_.get(), cq, rpcmethod_PostStatValuesAggregate_, context, request, false);
}

::grpc::Status V2::Stub::PostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::clarifai::api::status::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostTrendingMetricsView_, context, request, response);
}

void V2::Stub::experimental_async::PostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostTrendingMetricsView_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostTrendingMetricsView(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostTrendingMetricsView_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::PostTrendingMetricsView(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostTrendingMetricsView_, context, request, response, reactor);
}

void V2::Stub::experimental_async::PostTrendingMetricsView(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::status::BaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostTrendingMetricsView_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::AsyncPostTrendingMetricsViewRaw(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_PostTrendingMetricsView_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::status::BaseResponse>* V2::Stub::PrepareAsyncPostTrendingMetricsViewRaw(::grpc::ClientContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::status::BaseResponse>::Create(channel_.get(), cq, rpcmethod_PostTrendingMetricsView_, context, request, false);
}

::grpc::Status V2::Stub::ListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::clarifai::api::MultiTrendingMetricsViewResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTrendingMetricsViews_, context, request, response);
}

void V2::Stub::experimental_async::ListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest* request, ::clarifai::api::MultiTrendingMetricsViewResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTrendingMetricsViews_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListTrendingMetricsViews(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiTrendingMetricsViewResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTrendingMetricsViews_, context, request, response, std::move(f));
}

void V2::Stub::experimental_async::ListTrendingMetricsViews(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest* request, ::clarifai::api::MultiTrendingMetricsViewResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTrendingMetricsViews_, context, request, response, reactor);
}

void V2::Stub::experimental_async::ListTrendingMetricsViews(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::clarifai::api::MultiTrendingMetricsViewResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTrendingMetricsViews_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTrendingMetricsViewResponse>* V2::Stub::AsyncListTrendingMetricsViewsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiTrendingMetricsViewResponse>::Create(channel_.get(), cq, rpcmethod_ListTrendingMetricsViews_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::clarifai::api::MultiTrendingMetricsViewResponse>* V2::Stub::PrepareAsyncListTrendingMetricsViewsRaw(::grpc::ClientContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::clarifai::api::MultiTrendingMetricsViewResponse>::Create(channel_.get(), cq, rpcmethod_ListTrendingMetricsViews_, context, request, false);
}

V2::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListConceptRelationsRequest, ::clarifai::api::MultiConceptRelationResponse>(
          std::mem_fn(&V2::Service::ListConceptRelations), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostConceptRelationsRequest, ::clarifai::api::MultiConceptRelationResponse>(
          std::mem_fn(&V2::Service::PostConceptRelations), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteConceptRelationsRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteConceptRelations), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetConceptCountsRequest, ::clarifai::api::MultiConceptCountResponse>(
          std::mem_fn(&V2::Service::GetConceptCounts), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetConceptRequest, ::clarifai::api::SingleConceptResponse>(
          std::mem_fn(&V2::Service::GetConcept), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListConceptsRequest, ::clarifai::api::MultiConceptResponse>(
          std::mem_fn(&V2::Service::ListConcepts), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostConceptsSearchesRequest, ::clarifai::api::MultiConceptResponse>(
          std::mem_fn(&V2::Service::PostConceptsSearches), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostConceptsRequest, ::clarifai::api::MultiConceptResponse>(
          std::mem_fn(&V2::Service::PostConcepts), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchConceptsRequest, ::clarifai::api::MultiConceptResponse>(
          std::mem_fn(&V2::Service::PatchConcepts), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetConceptLanguageRequest, ::clarifai::api::SingleConceptLanguageResponse>(
          std::mem_fn(&V2::Service::GetConceptLanguage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>(
          std::mem_fn(&V2::Service::ListConceptLanguages), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>(
          std::mem_fn(&V2::Service::PostConceptLanguages), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchConceptLanguagesRequest, ::clarifai::api::MultiConceptLanguageResponse>(
          std::mem_fn(&V2::Service::PatchConceptLanguages), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListKnowledgeGraphsRequest, ::clarifai::api::MultiKnowledgeGraphResponse>(
          std::mem_fn(&V2::Service::ListKnowledgeGraphs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostKnowledgeGraphsRequest, ::clarifai::api::MultiKnowledgeGraphResponse>(
          std::mem_fn(&V2::Service::PostKnowledgeGraphs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostConceptMappingJobsRequest, ::clarifai::api::MultiConceptMappingJobResponse>(
          std::mem_fn(&V2::Service::PostConceptMappingJobs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetAnnotationRequest, ::clarifai::api::SingleAnnotationResponse>(
          std::mem_fn(&V2::Service::GetAnnotation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>(
          std::mem_fn(&V2::Service::ListAnnotations), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>(
          std::mem_fn(&V2::Service::PostAnnotations), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchAnnotationsRequest, ::clarifai::api::MultiAnnotationResponse>(
          std::mem_fn(&V2::Service::PatchAnnotations), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchAnnotationsStatusRequest, ::clarifai::api::PatchAnnotationsStatusResponse>(
          std::mem_fn(&V2::Service::PatchAnnotationsStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteAnnotationRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteAnnotation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteAnnotationsRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteAnnotations), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostAnnotationsSearchesRequest, ::clarifai::api::MultiSearchResponse>(
          std::mem_fn(&V2::Service::PostAnnotationsSearches), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetInputCountRequest, ::clarifai::api::SingleInputCountResponse>(
          std::mem_fn(&V2::Service::GetInputCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::StreamInputsRequest, ::clarifai::api::MultiInputResponse>(
          std::mem_fn(&V2::Service::StreamInputs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetInputSamplesRequest, ::clarifai::api::MultiInputAnnotationResponse>(
          std::mem_fn(&V2::Service::GetInputSamples), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetInputRequest, ::clarifai::api::SingleInputResponse>(
          std::mem_fn(&V2::Service::GetInput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListInputsRequest, ::clarifai::api::MultiInputResponse>(
          std::mem_fn(&V2::Service::ListInputs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostInputsRequest, ::clarifai::api::MultiInputResponse>(
          std::mem_fn(&V2::Service::PostInputs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchInputsRequest, ::clarifai::api::MultiInputResponse>(
          std::mem_fn(&V2::Service::PatchInputs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteInputRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteInput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteInputsRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteInputs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostInputsSearchesRequest, ::clarifai::api::MultiSearchResponse>(
          std::mem_fn(&V2::Service::PostInputsSearches), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostModelOutputsRequest, ::clarifai::api::MultiOutputResponse>(
          std::mem_fn(&V2::Service::PostModelOutputs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetModelTypeRequest, ::clarifai::api::SingleModelTypeResponse>(
          std::mem_fn(&V2::Service::GetModelType), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListOpenSourceLicensesRequest, ::clarifai::api::ListOpenSourceLicensesResponse>(
          std::mem_fn(&V2::Service::ListOpenSourceLicenses), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListModelTypesRequest, ::clarifai::api::MultiModelTypeResponse>(
          std::mem_fn(&V2::Service::ListModelTypes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetModelRequest, ::clarifai::api::SingleModelResponse>(
          std::mem_fn(&V2::Service::GetModel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetModelRequest, ::clarifai::api::SingleModelResponse>(
          std::mem_fn(&V2::Service::GetModelOutputInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListModelsRequest, ::clarifai::api::MultiModelResponse>(
          std::mem_fn(&V2::Service::ListModels), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostModelsSearchesRequest, ::clarifai::api::MultiModelResponse>(
          std::mem_fn(&V2::Service::PostModelsSearches), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostModelsRequest, ::clarifai::api::SingleModelResponse>(
          std::mem_fn(&V2::Service::PostModels), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchModelsRequest, ::clarifai::api::MultiModelResponse>(
          std::mem_fn(&V2::Service::PatchModels), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteModelRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteModel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteModelsRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteModels), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListModelInputsRequest, ::clarifai::api::MultiInputResponse>(
          std::mem_fn(&V2::Service::ListModelInputs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetModelVersionRequest, ::clarifai::api::SingleModelVersionResponse>(
          std::mem_fn(&V2::Service::GetModelVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListModelVersionsRequest, ::clarifai::api::MultiModelVersionResponse>(
          std::mem_fn(&V2::Service::ListModelVersions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostModelVersionsRequest, ::clarifai::api::SingleModelResponse>(
          std::mem_fn(&V2::Service::PostModelVersions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchModelVersionsRequest, ::clarifai::api::MultiModelVersionResponse>(
          std::mem_fn(&V2::Service::PatchModelVersions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteModelVersionRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteModelVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetModelVersionMetricsRequest, ::clarifai::api::SingleModelVersionResponse>(
          std::mem_fn(&V2::Service::GetModelVersionMetrics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostModelVersionMetricsRequest, ::clarifai::api::SingleModelVersionResponse>(
          std::mem_fn(&V2::Service::PostModelVersionMetrics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListModelReferencesRequest, ::clarifai::api::MultiModelReferenceResponse>(
          std::mem_fn(&V2::Service::ListModelReferences), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetModelVersionInputExampleRequest, ::clarifai::api::SingleModelVersionInputExampleResponse>(
          std::mem_fn(&V2::Service::GetModelVersionInputExample), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListModelVersionInputExamplesRequest, ::clarifai::api::MultiModelVersionInputExampleResponse>(
          std::mem_fn(&V2::Service::ListModelVersionInputExamples), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetWorkflowRequest, ::clarifai::api::SingleWorkflowResponse>(
          std::mem_fn(&V2::Service::GetWorkflow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>(
          std::mem_fn(&V2::Service::ListWorkflows), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>(
          std::mem_fn(&V2::Service::PostWorkflows), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchWorkflowsRequest, ::clarifai::api::MultiWorkflowResponse>(
          std::mem_fn(&V2::Service::PatchWorkflows), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[61],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteWorkflowRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteWorkflow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[62],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteWorkflowsRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteWorkflows), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[63],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostWorkflowResultsRequest, ::clarifai::api::PostWorkflowResultsResponse>(
          std::mem_fn(&V2::Service::PostWorkflowResults), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[64],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostWorkflowResultsSimilarityRequest, ::clarifai::api::PostWorkflowResultsSimilarityResponse>(
          std::mem_fn(&V2::Service::PostWorkflowResultsSimilarity), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[65],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListWorkflowVersionsRequest, ::clarifai::api::MultiWorkflowVersionResponse>(
          std::mem_fn(&V2::Service::ListWorkflowVersions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[66],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetWorkflowVersionRequest, ::clarifai::api::SingleWorkflowVersionResponse>(
          std::mem_fn(&V2::Service::GetWorkflowVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[67],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteWorkflowVersionsRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteWorkflowVersions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[68],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchWorkflowVersionsRequest, ::clarifai::api::MultiWorkflowVersionResponse>(
          std::mem_fn(&V2::Service::PatchWorkflowVersions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[69],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetKeyRequest, ::clarifai::api::SingleKeyResponse>(
          std::mem_fn(&V2::Service::GetKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[70],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListKeysRequest, ::clarifai::api::MultiKeyResponse>(
          std::mem_fn(&V2::Service::ListKeys), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[71],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListAppKeysRequest, ::clarifai::api::MultiKeyResponse>(
          std::mem_fn(&V2::Service::ListAppKeys), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[72],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteKeyRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[73],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostKeysRequest, ::clarifai::api::MultiKeyResponse>(
          std::mem_fn(&V2::Service::PostKeys), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[74],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchKeysRequest, ::clarifai::api::MultiKeyResponse>(
          std::mem_fn(&V2::Service::PatchKeys), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[75],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::MyScopesRequest, ::clarifai::api::MultiScopeResponse>(
          std::mem_fn(&V2::Service::MyScopes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[76],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListScopesRequest, ::clarifai::api::MultiScopeDepsResponse>(
          std::mem_fn(&V2::Service::ListScopes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[77],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetAppRequest, ::clarifai::api::SingleAppResponse>(
          std::mem_fn(&V2::Service::GetApp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[78],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListAppsRequest, ::clarifai::api::MultiAppResponse>(
          std::mem_fn(&V2::Service::ListApps), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[79],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteAppRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteApp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[80],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostAppsRequest, ::clarifai::api::MultiAppResponse>(
          std::mem_fn(&V2::Service::PostApps), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[81],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchAppsRequest, ::clarifai::api::MultiAppResponse>(
          std::mem_fn(&V2::Service::PatchApps), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[82],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostAppsSearchesRequest, ::clarifai::api::MultiAppResponse>(
          std::mem_fn(&V2::Service::PostAppsSearches), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[83],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostValidatePasswordRequest, ::clarifai::api::SinglePasswordValidationResponse>(
          std::mem_fn(&V2::Service::PostValidatePassword), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[84],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetSearchRequest, ::clarifai::api::SingleSearchResponse>(
          std::mem_fn(&V2::Service::GetSearch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[85],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListSearchesRequest, ::clarifai::api::MultiSearchResponse>(
          std::mem_fn(&V2::Service::ListSearches), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[86],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostSearchesRequest, ::clarifai::api::MultiSearchResponse>(
          std::mem_fn(&V2::Service::PostSearches), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[87],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostSearchesByIDRequest, ::clarifai::api::MultiSearchResponse>(
          std::mem_fn(&V2::Service::PostSearchesByID), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[88],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>(
          std::mem_fn(&V2::Service::PostAnnotationSearchMetrics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[89],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>(
          std::mem_fn(&V2::Service::GetAnnotationSearchMetrics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[90],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListAnnotationSearchMetricsRequest, ::clarifai::api::MultiAnnotationSearchMetricsResponse>(
          std::mem_fn(&V2::Service::ListAnnotationSearchMetrics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[91],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteAnnotationSearchMetricsRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteAnnotationSearchMetrics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[92],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteSearchRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteSearch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[93],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListStatusCodesRequest, ::clarifai::api::MultiStatusCodeResponse>(
          std::mem_fn(&V2::Service::ListStatusCodes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[94],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetStatusCodeRequest, ::clarifai::api::SingleStatusCodeResponse>(
          std::mem_fn(&V2::Service::GetStatusCode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[95],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>(
          std::mem_fn(&V2::Service::ListCollaborators), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[96],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>(
          std::mem_fn(&V2::Service::PostCollaborators), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[97],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchCollaboratorsRequest, ::clarifai::api::MultiCollaboratorsResponse>(
          std::mem_fn(&V2::Service::PatchCollaborators), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[98],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteCollaboratorsRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteCollaborators), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[99],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListCollaborationsRequest, ::clarifai::api::MultiCollaborationsResponse>(
          std::mem_fn(&V2::Service::ListCollaborations), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[100],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostAppDuplicationsRequest, ::clarifai::api::MultiAppDuplicationsResponse>(
          std::mem_fn(&V2::Service::PostAppDuplications), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[101],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListAppDuplicationsRequest, ::clarifai::api::MultiAppDuplicationsResponse>(
          std::mem_fn(&V2::Service::ListAppDuplications), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[102],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetAppDuplicationRequest, ::clarifai::api::SingleAppDuplicationResponse>(
          std::mem_fn(&V2::Service::GetAppDuplication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[103],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostTasksRequest, ::clarifai::api::MultiTaskResponse>(
          std::mem_fn(&V2::Service::PostTasks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[104],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetTaskCountRequest, ::clarifai::api::SingleTaskCountResponse>(
          std::mem_fn(&V2::Service::GetTaskAnnotationCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[105],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetTaskCountRequest, ::clarifai::api::SingleTaskCountResponse>(
          std::mem_fn(&V2::Service::GetTaskInputCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[106],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetTaskRequest, ::clarifai::api::SingleTaskResponse>(
          std::mem_fn(&V2::Service::GetTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[107],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListTasksRequest, ::clarifai::api::MultiTaskResponse>(
          std::mem_fn(&V2::Service::ListTasks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[108],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchTasksRequest, ::clarifai::api::MultiTaskResponse>(
          std::mem_fn(&V2::Service::PatchTasks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[109],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteTasksRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteTasks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[110],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostCollectorsRequest, ::clarifai::api::MultiCollectorResponse>(
          std::mem_fn(&V2::Service::PostCollectors), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[111],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::GetCollectorRequest, ::clarifai::api::SingleCollectorResponse>(
          std::mem_fn(&V2::Service::GetCollector), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[112],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListCollectorsRequest, ::clarifai::api::MultiCollectorResponse>(
          std::mem_fn(&V2::Service::ListCollectors), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[113],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PatchCollectorsRequest, ::clarifai::api::MultiCollectorResponse>(
          std::mem_fn(&V2::Service::PatchCollectors), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[114],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::DeleteCollectorsRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::DeleteCollectors), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[115],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostStatValuesRequest, ::clarifai::api::MultiStatValueResponse>(
          std::mem_fn(&V2::Service::PostStatValues), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[116],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostStatValuesAggregateRequest, ::clarifai::api::MultiStatValueAggregateResponse>(
          std::mem_fn(&V2::Service::PostStatValuesAggregate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[117],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::PostTrendingMetricsViewRequest, ::clarifai::api::status::BaseResponse>(
          std::mem_fn(&V2::Service::PostTrendingMetricsView), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V2_method_names[118],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V2::Service, ::clarifai::api::ListTrendingMetricsViewsRequest, ::clarifai::api::MultiTrendingMetricsViewResponse>(
          std::mem_fn(&V2::Service::ListTrendingMetricsViews), this)));
}

V2::Service::~Service() {
}

::grpc::Status V2::Service::ListConceptRelations(::grpc::ServerContext* context, const ::clarifai::api::ListConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostConceptRelations(::grpc::ServerContext* context, const ::clarifai::api::PostConceptRelationsRequest* request, ::clarifai::api::MultiConceptRelationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteConceptRelations(::grpc::ServerContext* context, const ::clarifai::api::DeleteConceptRelationsRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetConceptCounts(::grpc::ServerContext* context, const ::clarifai::api::GetConceptCountsRequest* request, ::clarifai::api::MultiConceptCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetConcept(::grpc::ServerContext* context, const ::clarifai::api::GetConceptRequest* request, ::clarifai::api::SingleConceptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListConcepts(::grpc::ServerContext* context, const ::clarifai::api::ListConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostConceptsSearches(::grpc::ServerContext* context, const ::clarifai::api::PostConceptsSearchesRequest* request, ::clarifai::api::MultiConceptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostConcepts(::grpc::ServerContext* context, const ::clarifai::api::PostConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchConcepts(::grpc::ServerContext* context, const ::clarifai::api::PatchConceptsRequest* request, ::clarifai::api::MultiConceptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetConceptLanguage(::grpc::ServerContext* context, const ::clarifai::api::GetConceptLanguageRequest* request, ::clarifai::api::SingleConceptLanguageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListConceptLanguages(::grpc::ServerContext* context, const ::clarifai::api::ListConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostConceptLanguages(::grpc::ServerContext* context, const ::clarifai::api::PostConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchConceptLanguages(::grpc::ServerContext* context, const ::clarifai::api::PatchConceptLanguagesRequest* request, ::clarifai::api::MultiConceptLanguageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListKnowledgeGraphs(::grpc::ServerContext* context, const ::clarifai::api::ListKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostKnowledgeGraphs(::grpc::ServerContext* context, const ::clarifai::api::PostKnowledgeGraphsRequest* request, ::clarifai::api::MultiKnowledgeGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostConceptMappingJobs(::grpc::ServerContext* context, const ::clarifai::api::PostConceptMappingJobsRequest* request, ::clarifai::api::MultiConceptMappingJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetAnnotation(::grpc::ServerContext* context, const ::clarifai::api::GetAnnotationRequest* request, ::clarifai::api::SingleAnnotationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListAnnotations(::grpc::ServerContext* context, const ::clarifai::api::ListAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostAnnotations(::grpc::ServerContext* context, const ::clarifai::api::PostAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchAnnotations(::grpc::ServerContext* context, const ::clarifai::api::PatchAnnotationsRequest* request, ::clarifai::api::MultiAnnotationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchAnnotationsStatus(::grpc::ServerContext* context, const ::clarifai::api::PatchAnnotationsStatusRequest* request, ::clarifai::api::PatchAnnotationsStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteAnnotation(::grpc::ServerContext* context, const ::clarifai::api::DeleteAnnotationRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteAnnotations(::grpc::ServerContext* context, const ::clarifai::api::DeleteAnnotationsRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostAnnotationsSearches(::grpc::ServerContext* context, const ::clarifai::api::PostAnnotationsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetInputCount(::grpc::ServerContext* context, const ::clarifai::api::GetInputCountRequest* request, ::clarifai::api::SingleInputCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::StreamInputs(::grpc::ServerContext* context, const ::clarifai::api::StreamInputsRequest* request, ::clarifai::api::MultiInputResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetInputSamples(::grpc::ServerContext* context, const ::clarifai::api::GetInputSamplesRequest* request, ::clarifai::api::MultiInputAnnotationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetInput(::grpc::ServerContext* context, const ::clarifai::api::GetInputRequest* request, ::clarifai::api::SingleInputResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListInputs(::grpc::ServerContext* context, const ::clarifai::api::ListInputsRequest* request, ::clarifai::api::MultiInputResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostInputs(::grpc::ServerContext* context, const ::clarifai::api::PostInputsRequest* request, ::clarifai::api::MultiInputResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchInputs(::grpc::ServerContext* context, const ::clarifai::api::PatchInputsRequest* request, ::clarifai::api::MultiInputResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteInput(::grpc::ServerContext* context, const ::clarifai::api::DeleteInputRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteInputs(::grpc::ServerContext* context, const ::clarifai::api::DeleteInputsRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostInputsSearches(::grpc::ServerContext* context, const ::clarifai::api::PostInputsSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostModelOutputs(::grpc::ServerContext* context, const ::clarifai::api::PostModelOutputsRequest* request, ::clarifai::api::MultiOutputResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetModelType(::grpc::ServerContext* context, const ::clarifai::api::GetModelTypeRequest* request, ::clarifai::api::SingleModelTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListOpenSourceLicenses(::grpc::ServerContext* context, const ::clarifai::api::ListOpenSourceLicensesRequest* request, ::clarifai::api::ListOpenSourceLicensesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListModelTypes(::grpc::ServerContext* context, const ::clarifai::api::ListModelTypesRequest* request, ::clarifai::api::MultiModelTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetModel(::grpc::ServerContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetModelOutputInfo(::grpc::ServerContext* context, const ::clarifai::api::GetModelRequest* request, ::clarifai::api::SingleModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListModels(::grpc::ServerContext* context, const ::clarifai::api::ListModelsRequest* request, ::clarifai::api::MultiModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostModelsSearches(::grpc::ServerContext* context, const ::clarifai::api::PostModelsSearchesRequest* request, ::clarifai::api::MultiModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostModels(::grpc::ServerContext* context, const ::clarifai::api::PostModelsRequest* request, ::clarifai::api::SingleModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchModels(::grpc::ServerContext* context, const ::clarifai::api::PatchModelsRequest* request, ::clarifai::api::MultiModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteModel(::grpc::ServerContext* context, const ::clarifai::api::DeleteModelRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteModels(::grpc::ServerContext* context, const ::clarifai::api::DeleteModelsRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListModelInputs(::grpc::ServerContext* context, const ::clarifai::api::ListModelInputsRequest* request, ::clarifai::api::MultiInputResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetModelVersion(::grpc::ServerContext* context, const ::clarifai::api::GetModelVersionRequest* request, ::clarifai::api::SingleModelVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListModelVersions(::grpc::ServerContext* context, const ::clarifai::api::ListModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostModelVersions(::grpc::ServerContext* context, const ::clarifai::api::PostModelVersionsRequest* request, ::clarifai::api::SingleModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchModelVersions(::grpc::ServerContext* context, const ::clarifai::api::PatchModelVersionsRequest* request, ::clarifai::api::MultiModelVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteModelVersion(::grpc::ServerContext* context, const ::clarifai::api::DeleteModelVersionRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetModelVersionMetrics(::grpc::ServerContext* context, const ::clarifai::api::GetModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostModelVersionMetrics(::grpc::ServerContext* context, const ::clarifai::api::PostModelVersionMetricsRequest* request, ::clarifai::api::SingleModelVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListModelReferences(::grpc::ServerContext* context, const ::clarifai::api::ListModelReferencesRequest* request, ::clarifai::api::MultiModelReferenceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetModelVersionInputExample(::grpc::ServerContext* context, const ::clarifai::api::GetModelVersionInputExampleRequest* request, ::clarifai::api::SingleModelVersionInputExampleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListModelVersionInputExamples(::grpc::ServerContext* context, const ::clarifai::api::ListModelVersionInputExamplesRequest* request, ::clarifai::api::MultiModelVersionInputExampleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetWorkflow(::grpc::ServerContext* context, const ::clarifai::api::GetWorkflowRequest* request, ::clarifai::api::SingleWorkflowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListWorkflows(::grpc::ServerContext* context, const ::clarifai::api::ListWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostWorkflows(::grpc::ServerContext* context, const ::clarifai::api::PostWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchWorkflows(::grpc::ServerContext* context, const ::clarifai::api::PatchWorkflowsRequest* request, ::clarifai::api::MultiWorkflowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteWorkflow(::grpc::ServerContext* context, const ::clarifai::api::DeleteWorkflowRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteWorkflows(::grpc::ServerContext* context, const ::clarifai::api::DeleteWorkflowsRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostWorkflowResults(::grpc::ServerContext* context, const ::clarifai::api::PostWorkflowResultsRequest* request, ::clarifai::api::PostWorkflowResultsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostWorkflowResultsSimilarity(::grpc::ServerContext* context, const ::clarifai::api::PostWorkflowResultsSimilarityRequest* request, ::clarifai::api::PostWorkflowResultsSimilarityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListWorkflowVersions(::grpc::ServerContext* context, const ::clarifai::api::ListWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetWorkflowVersion(::grpc::ServerContext* context, const ::clarifai::api::GetWorkflowVersionRequest* request, ::clarifai::api::SingleWorkflowVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteWorkflowVersions(::grpc::ServerContext* context, const ::clarifai::api::DeleteWorkflowVersionsRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchWorkflowVersions(::grpc::ServerContext* context, const ::clarifai::api::PatchWorkflowVersionsRequest* request, ::clarifai::api::MultiWorkflowVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetKey(::grpc::ServerContext* context, const ::clarifai::api::GetKeyRequest* request, ::clarifai::api::SingleKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListKeys(::grpc::ServerContext* context, const ::clarifai::api::ListKeysRequest* request, ::clarifai::api::MultiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListAppKeys(::grpc::ServerContext* context, const ::clarifai::api::ListAppKeysRequest* request, ::clarifai::api::MultiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteKey(::grpc::ServerContext* context, const ::clarifai::api::DeleteKeyRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostKeys(::grpc::ServerContext* context, const ::clarifai::api::PostKeysRequest* request, ::clarifai::api::MultiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchKeys(::grpc::ServerContext* context, const ::clarifai::api::PatchKeysRequest* request, ::clarifai::api::MultiKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::MyScopes(::grpc::ServerContext* context, const ::clarifai::api::MyScopesRequest* request, ::clarifai::api::MultiScopeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListScopes(::grpc::ServerContext* context, const ::clarifai::api::ListScopesRequest* request, ::clarifai::api::MultiScopeDepsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetApp(::grpc::ServerContext* context, const ::clarifai::api::GetAppRequest* request, ::clarifai::api::SingleAppResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListApps(::grpc::ServerContext* context, const ::clarifai::api::ListAppsRequest* request, ::clarifai::api::MultiAppResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteApp(::grpc::ServerContext* context, const ::clarifai::api::DeleteAppRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostApps(::grpc::ServerContext* context, const ::clarifai::api::PostAppsRequest* request, ::clarifai::api::MultiAppResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchApps(::grpc::ServerContext* context, const ::clarifai::api::PatchAppsRequest* request, ::clarifai::api::MultiAppResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostAppsSearches(::grpc::ServerContext* context, const ::clarifai::api::PostAppsSearchesRequest* request, ::clarifai::api::MultiAppResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostValidatePassword(::grpc::ServerContext* context, const ::clarifai::api::PostValidatePasswordRequest* request, ::clarifai::api::SinglePasswordValidationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetSearch(::grpc::ServerContext* context, const ::clarifai::api::GetSearchRequest* request, ::clarifai::api::SingleSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListSearches(::grpc::ServerContext* context, const ::clarifai::api::ListSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostSearches(::grpc::ServerContext* context, const ::clarifai::api::PostSearchesRequest* request, ::clarifai::api::MultiSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostSearchesByID(::grpc::ServerContext* context, const ::clarifai::api::PostSearchesByIDRequest* request, ::clarifai::api::MultiSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostAnnotationSearchMetrics(::grpc::ServerContext* context, const ::clarifai::api::PostAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetAnnotationSearchMetrics(::grpc::ServerContext* context, const ::clarifai::api::GetAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListAnnotationSearchMetrics(::grpc::ServerContext* context, const ::clarifai::api::ListAnnotationSearchMetricsRequest* request, ::clarifai::api::MultiAnnotationSearchMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteAnnotationSearchMetrics(::grpc::ServerContext* context, const ::clarifai::api::DeleteAnnotationSearchMetricsRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteSearch(::grpc::ServerContext* context, const ::clarifai::api::DeleteSearchRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListStatusCodes(::grpc::ServerContext* context, const ::clarifai::api::ListStatusCodesRequest* request, ::clarifai::api::MultiStatusCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetStatusCode(::grpc::ServerContext* context, const ::clarifai::api::GetStatusCodeRequest* request, ::clarifai::api::SingleStatusCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListCollaborators(::grpc::ServerContext* context, const ::clarifai::api::ListCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostCollaborators(::grpc::ServerContext* context, const ::clarifai::api::PostCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchCollaborators(::grpc::ServerContext* context, const ::clarifai::api::PatchCollaboratorsRequest* request, ::clarifai::api::MultiCollaboratorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteCollaborators(::grpc::ServerContext* context, const ::clarifai::api::DeleteCollaboratorsRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListCollaborations(::grpc::ServerContext* context, const ::clarifai::api::ListCollaborationsRequest* request, ::clarifai::api::MultiCollaborationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostAppDuplications(::grpc::ServerContext* context, const ::clarifai::api::PostAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListAppDuplications(::grpc::ServerContext* context, const ::clarifai::api::ListAppDuplicationsRequest* request, ::clarifai::api::MultiAppDuplicationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetAppDuplication(::grpc::ServerContext* context, const ::clarifai::api::GetAppDuplicationRequest* request, ::clarifai::api::SingleAppDuplicationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostTasks(::grpc::ServerContext* context, const ::clarifai::api::PostTasksRequest* request, ::clarifai::api::MultiTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetTaskAnnotationCount(::grpc::ServerContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetTaskInputCount(::grpc::ServerContext* context, const ::clarifai::api::GetTaskCountRequest* request, ::clarifai::api::SingleTaskCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetTask(::grpc::ServerContext* context, const ::clarifai::api::GetTaskRequest* request, ::clarifai::api::SingleTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListTasks(::grpc::ServerContext* context, const ::clarifai::api::ListTasksRequest* request, ::clarifai::api::MultiTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchTasks(::grpc::ServerContext* context, const ::clarifai::api::PatchTasksRequest* request, ::clarifai::api::MultiTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteTasks(::grpc::ServerContext* context, const ::clarifai::api::DeleteTasksRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostCollectors(::grpc::ServerContext* context, const ::clarifai::api::PostCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::GetCollector(::grpc::ServerContext* context, const ::clarifai::api::GetCollectorRequest* request, ::clarifai::api::SingleCollectorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListCollectors(::grpc::ServerContext* context, const ::clarifai::api::ListCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PatchCollectors(::grpc::ServerContext* context, const ::clarifai::api::PatchCollectorsRequest* request, ::clarifai::api::MultiCollectorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::DeleteCollectors(::grpc::ServerContext* context, const ::clarifai::api::DeleteCollectorsRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostStatValues(::grpc::ServerContext* context, const ::clarifai::api::PostStatValuesRequest* request, ::clarifai::api::MultiStatValueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostStatValuesAggregate(::grpc::ServerContext* context, const ::clarifai::api::PostStatValuesAggregateRequest* request, ::clarifai::api::MultiStatValueAggregateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::PostTrendingMetricsView(::grpc::ServerContext* context, const ::clarifai::api::PostTrendingMetricsViewRequest* request, ::clarifai::api::status::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V2::Service::ListTrendingMetricsViews(::grpc::ServerContext* context, const ::clarifai::api::ListTrendingMetricsViewsRequest* request, ::clarifai::api::MultiTrendingMetricsViewResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace clarifai
}  // namespace api

